<?php

/*
 * Generated from MySqlParser.g4 by ANTLR 4.9.2
 */

namespace {
	use Antlr\Antlr4\Runtime\Atn\ATN;
	use Antlr\Antlr4\Runtime\Atn\ATNDeserializer;
	use Antlr\Antlr4\Runtime\Atn\ParserATNSimulator;
	use Antlr\Antlr4\Runtime\Dfa\DFA;
	use Antlr\Antlr4\Runtime\Error\Exceptions\FailedPredicateException;
	use Antlr\Antlr4\Runtime\Error\Exceptions\NoViableAltException;
	use Antlr\Antlr4\Runtime\PredictionContexts\PredictionContextCache;
	use Antlr\Antlr4\Runtime\Error\Exceptions\RecognitionException;
	use Antlr\Antlr4\Runtime\RuleContext;
	use Antlr\Antlr4\Runtime\Token;
	use Antlr\Antlr4\Runtime\TokenStream;
	use Antlr\Antlr4\Runtime\Vocabulary;
	use Antlr\Antlr4\Runtime\VocabularyImpl;
	use Antlr\Antlr4\Runtime\RuntimeMetaData;
	use Antlr\Antlr4\Runtime\Parser;

	final class MySqlParser extends Parser
	{
		public const SPACE = 1, SPEC_MYSQL_COMMENT = 2, COMMENT_INPUT = 3, LINE_COMMENT = 4, 
               ADD = 5, ALL = 6, ALTER = 7, ALWAYS = 8, ANALYZE = 9, AND = 10, 
               AS = 11, ASC = 12, BEFORE = 13, BETWEEN = 14, BOTH = 15, 
               BY = 16, CALL = 17, CASCADE = 18, CASE = 19, CAST = 20, CHANGE = 21, 
               CHARACTER = 22, CHECK = 23, COLLATE = 24, COLUMN = 25, CONDITION = 26, 
               CONSTRAINT = 27, CONTINUE = 28, CONVERT = 29, CREATE = 30, 
               CROSS = 31, CURRENT = 32, CURRENT_USER = 33, CURSOR = 34, 
               DATABASE = 35, DATABASES = 36, DECLARE = 37, DEFAULT = 38, 
               DELAYED = 39, DELETE = 40, DESC = 41, DESCRIBE = 42, DETERMINISTIC = 43, 
               DIAGNOSTICS = 44, DISTINCT = 45, DISTINCTROW = 46, DROP = 47, 
               EACH = 48, ELSE = 49, ELSEIF = 50, ENCLOSED = 51, ESCAPED = 52, 
               EXISTS = 53, EXIT = 54, EXPLAIN = 55, FALSE = 56, FETCH = 57, 
               FOR = 58, FORCE = 59, FOREIGN = 60, FROM = 61, FULLTEXT = 62, 
               GENERATED = 63, GET = 64, GRANT = 65, GROUP = 66, HAVING = 67, 
               HIGH_PRIORITY = 68, IF = 69, IGNORE = 70, IN = 71, INDEX = 72, 
               INFILE = 73, INNER = 74, INOUT = 75, INSERT = 76, INTERVAL = 77, 
               INTO = 78, IS = 79, ITERATE = 80, JOIN = 81, KEY = 82, KEYS = 83, 
               KILL = 84, LEADING = 85, LEAVE = 86, LEFT = 87, LIKE = 88, 
               LIMIT = 89, LINEAR = 90, LINES = 91, LOAD = 92, LOCK = 93, 
               LOOP = 94, LOW_PRIORITY = 95, MASTER_BIND = 96, MASTER_SSL_VERIFY_SERVER_CERT = 97, 
               MATCH = 98, MAXVALUE = 99, MODIFIES = 100, NATURAL = 101, 
               NOT = 102, NO_WRITE_TO_BINLOG = 103, NULL_LITERAL = 104, 
               NUMBER = 105, ON = 106, OPTIMIZE = 107, OPTION = 108, OPTIONALLY = 109, 
               OR = 110, ORDER = 111, OUT = 112, OUTER = 113, OUTFILE = 114, 
               PARTITION = 115, PRIMARY = 116, PROCEDURE = 117, PURGE = 118, 
               RANGE = 119, READ = 120, READS = 121, REFERENCES = 122, REGEXP = 123, 
               RELEASE = 124, RENAME = 125, REPEAT = 126, REPLACE = 127, 
               REQUIRE = 128, RESIGNAL = 129, RESTRICT = 130, RETURN = 131, 
               REVOKE = 132, RIGHT = 133, RLIKE = 134, SCHEMA = 135, SCHEMAS = 136, 
               SELECT = 137, SET = 138, SEPARATOR = 139, SHOW = 140, SIGNAL = 141, 
               SPATIAL = 142, SQL = 143, SQLEXCEPTION = 144, SQLSTATE = 145, 
               SQLWARNING = 146, SQL_BIG_RESULT = 147, SQL_CALC_FOUND_ROWS = 148, 
               SQL_SMALL_RESULT = 149, SSL = 150, STACKED = 151, STARTING = 152, 
               STRAIGHT_JOIN = 153, TABLE = 154, TERMINATED = 155, THEN = 156, 
               TO = 157, TRAILING = 158, TRIGGER = 159, TRUE = 160, UNDO = 161, 
               UNION = 162, UNIQUE = 163, UNLOCK = 164, UNSIGNED = 165, 
               UPDATE = 166, USAGE = 167, USE = 168, USING = 169, VALUES = 170, 
               WHEN = 171, WHERE = 172, WHILE = 173, WITH = 174, WRITE = 175, 
               XOR = 176, ZEROFILL = 177, TINYINT = 178, SMALLINT = 179, 
               MEDIUMINT = 180, MIDDLEINT = 181, INT = 182, INT1 = 183, 
               INT2 = 184, INT3 = 185, INT4 = 186, INT8 = 187, INTEGER = 188, 
               BIGINT = 189, REAL = 190, DOUBLE = 191, PRECISION = 192, 
               FLOAT = 193, FLOAT4 = 194, FLOAT8 = 195, DECIMAL = 196, DEC = 197, 
               NUMERIC = 198, DATE = 199, TIME = 200, TIMESTAMP = 201, DATETIME = 202, 
               YEAR = 203, CHAR = 204, VARCHAR = 205, NVARCHAR = 206, NATIONAL = 207, 
               BINARY = 208, VARBINARY = 209, TINYBLOB = 210, BLOB = 211, 
               MEDIUMBLOB = 212, LONG = 213, LONGBLOB = 214, TINYTEXT = 215, 
               TEXT = 216, MEDIUMTEXT = 217, LONGTEXT = 218, ENUM = 219, 
               VARYING = 220, SERIAL = 221, YEAR_MONTH = 222, DAY_HOUR = 223, 
               DAY_MINUTE = 224, DAY_SECOND = 225, HOUR_MINUTE = 226, HOUR_SECOND = 227, 
               MINUTE_SECOND = 228, SECOND_MICROSECOND = 229, MINUTE_MICROSECOND = 230, 
               HOUR_MICROSECOND = 231, DAY_MICROSECOND = 232, JSON_VALID = 233, 
               JSON_SCHEMA_VALID = 234, AVG = 235, BIT_AND = 236, BIT_OR = 237, 
               BIT_XOR = 238, COUNT = 239, GROUP_CONCAT = 240, MAX = 241, 
               MIN = 242, STD = 243, STDDEV = 244, STDDEV_POP = 245, STDDEV_SAMP = 246, 
               SUM = 247, VAR_POP = 248, VAR_SAMP = 249, VARIANCE = 250, 
               CURRENT_DATE = 251, CURRENT_TIME = 252, CURRENT_TIMESTAMP = 253, 
               LOCALTIME = 254, CURDATE = 255, CURTIME = 256, DATE_ADD = 257, 
               DATE_SUB = 258, EXTRACT = 259, LOCALTIMESTAMP = 260, NOW = 261, 
               POSITION = 262, SUBSTR = 263, SUBSTRING = 264, SYSDATE = 265, 
               TRIM = 266, UTC_DATE = 267, UTC_TIME = 268, UTC_TIMESTAMP = 269, 
               ACCOUNT = 270, ACTION = 271, AFTER = 272, AGGREGATE = 273, 
               ALGORITHM = 274, ANY = 275, AT = 276, AUTHORS = 277, AUTOCOMMIT = 278, 
               AUTOEXTEND_SIZE = 279, AUTO_INCREMENT = 280, AVG_ROW_LENGTH = 281, 
               BEGIN = 282, BINLOG = 283, BIT = 284, BLOCK = 285, BOOL = 286, 
               BOOLEAN = 287, BTREE = 288, CACHE = 289, CASCADED = 290, 
               CHAIN = 291, CHANGED = 292, CHANNEL = 293, CHECKSUM = 294, 
               PAGE_CHECKSUM = 295, CIPHER = 296, CLASS_ORIGIN = 297, CLIENT = 298, 
               CLOSE = 299, COALESCE = 300, CODE = 301, COLUMNS = 302, COLUMN_FORMAT = 303, 
               COLUMN_NAME = 304, COMMENT = 305, COMMIT = 306, COMPACT = 307, 
               COMPLETION = 308, COMPRESSED = 309, COMPRESSION = 310, CONCURRENT = 311, 
               CONNECTION = 312, CONSISTENT = 313, CONSTRAINT_CATALOG = 314, 
               CONSTRAINT_SCHEMA = 315, CONSTRAINT_NAME = 316, CONTAINS = 317, 
               CONTEXT = 318, CONTRIBUTORS = 319, COPY = 320, CPU = 321, 
               CURSOR_NAME = 322, DATA = 323, DATAFILE = 324, DEALLOCATE = 325, 
               DEFAULT_AUTH = 326, DEFINER = 327, DELAY_KEY_WRITE = 328, 
               DES_KEY_FILE = 329, DIRECTORY = 330, DISABLE = 331, DISCARD = 332, 
               DISK = 333, DO = 334, DUMPFILE = 335, DUPLICATE = 336, DYNAMIC = 337, 
               ENABLE = 338, ENCRYPTION = 339, END = 340, ENDS = 341, ENGINE = 342, 
               ENGINES = 343, ERROR = 344, ERRORS = 345, ESCAPE = 346, EVEN = 347, 
               EVENT = 348, EVENTS = 349, EVERY = 350, EXCHANGE = 351, EXCLUSIVE = 352, 
               EXPIRE = 353, EXPORT = 354, EXTENDED = 355, EXTENT_SIZE = 356, 
               FAST = 357, FAULTS = 358, FIELDS = 359, FILE_BLOCK_SIZE = 360, 
               FILTER = 361, FIRST = 362, FIXED = 363, FLUSH = 364, FOLLOWS = 365, 
               FOUND = 366, FULL = 367, FUNCTION = 368, GENERAL = 369, GLOBAL = 370, 
               GRANTS = 371, GROUP_REPLICATION = 372, HANDLER = 373, HASH = 374, 
               HELP = 375, HOST = 376, HOSTS = 377, IDENTIFIED = 378, IGNORE_SERVER_IDS = 379, 
               IMPORT = 380, INDEXES = 381, INITIAL_SIZE = 382, INPLACE = 383, 
               INSERT_METHOD = 384, INSTALL = 385, INSTANCE = 386, INVISIBLE = 387, 
               INVOKER = 388, IO = 389, IO_THREAD = 390, IPC = 391, ISOLATION = 392, 
               ISSUER = 393, JSON = 394, KEY_BLOCK_SIZE = 395, LANGUAGE = 396, 
               LAST = 397, LEAVES = 398, LESS = 399, LEVEL = 400, LIST = 401, 
               LOCAL = 402, LOGFILE = 403, LOGS = 404, MASTER = 405, MASTER_AUTO_POSITION = 406, 
               MASTER_CONNECT_RETRY = 407, MASTER_DELAY = 408, MASTER_HEARTBEAT_PERIOD = 409, 
               MASTER_HOST = 410, MASTER_LOG_FILE = 411, MASTER_LOG_POS = 412, 
               MASTER_PASSWORD = 413, MASTER_PORT = 414, MASTER_RETRY_COUNT = 415, 
               MASTER_SSL = 416, MASTER_SSL_CA = 417, MASTER_SSL_CAPATH = 418, 
               MASTER_SSL_CERT = 419, MASTER_SSL_CIPHER = 420, MASTER_SSL_CRL = 421, 
               MASTER_SSL_CRLPATH = 422, MASTER_SSL_KEY = 423, MASTER_TLS_VERSION = 424, 
               MASTER_USER = 425, MAX_CONNECTIONS_PER_HOUR = 426, MAX_QUERIES_PER_HOUR = 427, 
               MAX_ROWS = 428, MAX_SIZE = 429, MAX_UPDATES_PER_HOUR = 430, 
               MAX_USER_CONNECTIONS = 431, MEDIUM = 432, MEMBER = 433, MERGE = 434, 
               MESSAGE_TEXT = 435, MID = 436, MIGRATE = 437, MIN_ROWS = 438, 
               MODE = 439, MODIFY = 440, MUTEX = 441, MYSQL = 442, MYSQL_ERRNO = 443, 
               NAME = 444, NAMES = 445, NCHAR = 446, NEVER = 447, NEXT = 448, 
               NO = 449, NODEGROUP = 450, NONE = 451, OFFLINE = 452, OFFSET = 453, 
               OF = 454, OJ = 455, OLD_PASSWORD = 456, ONE = 457, ONLINE = 458, 
               ONLY = 459, OPEN = 460, OPTIMIZER_COSTS = 461, OPTIONS = 462, 
               OWNER = 463, PACK_KEYS = 464, PAGE = 465, PARSER = 466, PARTIAL = 467, 
               PARTITIONING = 468, PARTITIONS = 469, PASSWORD = 470, PHASE = 471, 
               PLUGIN = 472, PLUGIN_DIR = 473, PLUGINS = 474, PORT = 475, 
               PRECEDES = 476, PREPARE = 477, PRESERVE = 478, PREV = 479, 
               PROCESSLIST = 480, PROFILE = 481, PROFILES = 482, PROXY = 483, 
               QUERY = 484, QUICK = 485, REBUILD = 486, RECOVER = 487, REDO_BUFFER_SIZE = 488, 
               REDUNDANT = 489, RELAY = 490, RELAY_LOG_FILE = 491, RELAY_LOG_POS = 492, 
               RELAYLOG = 493, REMOVE = 494, REORGANIZE = 495, REPAIR = 496, 
               REPLICATE_DO_DB = 497, REPLICATE_DO_TABLE = 498, REPLICATE_IGNORE_DB = 499, 
               REPLICATE_IGNORE_TABLE = 500, REPLICATE_REWRITE_DB = 501, 
               REPLICATE_WILD_DO_TABLE = 502, REPLICATE_WILD_IGNORE_TABLE = 503, 
               REPLICATION = 504, RESET = 505, RESUME = 506, RETURNED_SQLSTATE = 507, 
               RETURNS = 508, ROLE = 509, ROLLBACK = 510, ROLLUP = 511, 
               ROTATE = 512, ROW = 513, ROWS = 514, ROW_FORMAT = 515, SAVEPOINT = 516, 
               SCHEDULE = 517, SECURITY = 518, SERVER = 519, SESSION = 520, 
               SHARE = 521, SHARED = 522, SIGNED = 523, SIMPLE = 524, SLAVE = 525, 
               SLOW = 526, SNAPSHOT = 527, SOCKET = 528, SOME = 529, SONAME = 530, 
               SOUNDS = 531, SOURCE = 532, SQL_AFTER_GTIDS = 533, SQL_AFTER_MTS_GAPS = 534, 
               SQL_BEFORE_GTIDS = 535, SQL_BUFFER_RESULT = 536, SQL_CACHE = 537, 
               SQL_NO_CACHE = 538, SQL_THREAD = 539, START = 540, STARTS = 541, 
               STATS_AUTO_RECALC = 542, STATS_PERSISTENT = 543, STATS_SAMPLE_PAGES = 544, 
               STATUS = 545, STOP = 546, STORAGE = 547, STORED = 548, STRING = 549, 
               SUBCLASS_ORIGIN = 550, SUBJECT = 551, SUBPARTITION = 552, 
               SUBPARTITIONS = 553, SUSPEND = 554, SWAPS = 555, SWITCHES = 556, 
               TABLE_NAME = 557, TABLESPACE = 558, TEMPORARY = 559, TEMPTABLE = 560, 
               THAN = 561, TRADITIONAL = 562, TRANSACTION = 563, TRANSACTIONAL = 564, 
               TRIGGERS = 565, TRUNCATE = 566, UNDEFINED = 567, UNDOFILE = 568, 
               UNDO_BUFFER_SIZE = 569, UNINSTALL = 570, UNKNOWN = 571, UNTIL = 572, 
               UPGRADE = 573, USER = 574, USE_FRM = 575, USER_RESOURCES = 576, 
               VALIDATION = 577, VALUE = 578, VARIABLES = 579, VIEW = 580, 
               VIRTUAL = 581, VISIBLE = 582, WAIT = 583, WARNINGS = 584, 
               WITHOUT = 585, WORK = 586, WRAPPER = 587, X509 = 588, XA = 589, 
               XML = 590, EUR = 591, USA = 592, JIS = 593, ISO = 594, INTERNAL = 595, 
               QUARTER = 596, MONTH = 597, DAY = 598, HOUR = 599, MINUTE = 600, 
               WEEK = 601, SECOND = 602, MICROSECOND = 603, TABLES = 604, 
               ROUTINE = 605, EXECUTE = 606, FILE = 607, PROCESS = 608, 
               RELOAD = 609, SHUTDOWN = 610, SUPER = 611, PRIVILEGES = 612, 
               APPLICATION_PASSWORD_ADMIN = 613, AUDIT_ADMIN = 614, BACKUP_ADMIN = 615, 
               BINLOG_ADMIN = 616, BINLOG_ENCRYPTION_ADMIN = 617, CLONE_ADMIN = 618, 
               CONNECTION_ADMIN = 619, ENCRYPTION_KEY_ADMIN = 620, FIREWALL_ADMIN = 621, 
               FIREWALL_USER = 622, GROUP_REPLICATION_ADMIN = 623, INNODB_REDO_LOG_ARCHIVE = 624, 
               NDB_STORED_USER = 625, PERSIST_RO_VARIABLES_ADMIN = 626, 
               REPLICATION_APPLIER = 627, REPLICATION_SLAVE_ADMIN = 628, 
               RESOURCE_GROUP_ADMIN = 629, RESOURCE_GROUP_USER = 630, ROLE_ADMIN = 631, 
               SESSION_VARIABLES_ADMIN = 632, SET_USER_ID = 633, SHOW_ROUTINE = 634, 
               SYSTEM_VARIABLES_ADMIN = 635, TABLE_ENCRYPTION_ADMIN = 636, 
               VERSION_TOKEN_ADMIN = 637, XA_RECOVER_ADMIN = 638, ARMSCII8 = 639, 
               ASCII = 640, BIG5 = 641, CP1250 = 642, CP1251 = 643, CP1256 = 644, 
               CP1257 = 645, CP850 = 646, CP852 = 647, CP866 = 648, CP932 = 649, 
               DEC8 = 650, EUCJPMS = 651, EUCKR = 652, GB2312 = 653, GBK = 654, 
               GEOSTD8 = 655, GREEK = 656, HEBREW = 657, HP8 = 658, KEYBCS2 = 659, 
               KOI8R = 660, KOI8U = 661, LATIN1 = 662, LATIN2 = 663, LATIN5 = 664, 
               LATIN7 = 665, MACCE = 666, MACROMAN = 667, SJIS = 668, SWE7 = 669, 
               TIS620 = 670, UCS2 = 671, UJIS = 672, UTF16 = 673, UTF16LE = 674, 
               UTF32 = 675, UTF8 = 676, UTF8MB3 = 677, UTF8MB4 = 678, ARCHIVE = 679, 
               BLACKHOLE = 680, CSV = 681, FEDERATED = 682, INNODB = 683, 
               MEMORY = 684, MRG_MYISAM = 685, MYISAM = 686, NDB = 687, 
               NDBCLUSTER = 688, PERFORMANCE_SCHEMA = 689, TOKUDB = 690, 
               REPEATABLE = 691, COMMITTED = 692, UNCOMMITTED = 693, SERIALIZABLE = 694, 
               GEOMETRYCOLLECTION = 695, GEOMCOLLECTION = 696, GEOMETRY = 697, 
               LINESTRING = 698, MULTILINESTRING = 699, MULTIPOINT = 700, 
               MULTIPOLYGON = 701, POINT = 702, POLYGON = 703, ABS = 704, 
               ACOS = 705, ADDDATE = 706, ADDTIME = 707, AES_DECRYPT = 708, 
               AES_ENCRYPT = 709, AREA = 710, ASBINARY = 711, ASIN = 712, 
               ASTEXT = 713, ASWKB = 714, ASWKT = 715, ASYMMETRIC_DECRYPT = 716, 
               ASYMMETRIC_DERIVE = 717, ASYMMETRIC_ENCRYPT = 718, ASYMMETRIC_SIGN = 719, 
               ASYMMETRIC_VERIFY = 720, ATAN = 721, ATAN2 = 722, BENCHMARK = 723, 
               BIN = 724, BIT_COUNT = 725, BIT_LENGTH = 726, BUFFER = 727, 
               CATALOG_NAME = 728, CEIL = 729, CEILING = 730, CENTROID = 731, 
               CHARACTER_LENGTH = 732, CHARSET = 733, CHAR_LENGTH = 734, 
               COERCIBILITY = 735, COLLATION = 736, COMPRESS = 737, CONCAT = 738, 
               CONCAT_WS = 739, CONNECTION_ID = 740, CONV = 741, CONVERT_TZ = 742, 
               COS = 743, COT = 744, CRC32 = 745, CREATE_ASYMMETRIC_PRIV_KEY = 746, 
               CREATE_ASYMMETRIC_PUB_KEY = 747, CREATE_DH_PARAMETERS = 748, 
               CREATE_DIGEST = 749, CROSSES = 750, DATEDIFF = 751, DATE_FORMAT = 752, 
               DAYNAME = 753, DAYOFMONTH = 754, DAYOFWEEK = 755, DAYOFYEAR = 756, 
               DECODE = 757, DEGREES = 758, DES_DECRYPT = 759, DES_ENCRYPT = 760, 
               DIMENSION = 761, DISJOINT = 762, ELT = 763, ENCODE = 764, 
               ENCRYPT = 765, ENDPOINT = 766, ENVELOPE = 767, EQUALS = 768, 
               EXP = 769, EXPORT_SET = 770, EXTERIORRING = 771, EXTRACTVALUE = 772, 
               FIELD = 773, FIND_IN_SET = 774, FLOOR = 775, FORMAT = 776, 
               FOUND_ROWS = 777, FROM_BASE64 = 778, FROM_DAYS = 779, FROM_UNIXTIME = 780, 
               GEOMCOLLFROMTEXT = 781, GEOMCOLLFROMWKB = 782, GEOMETRYCOLLECTIONFROMTEXT = 783, 
               GEOMETRYCOLLECTIONFROMWKB = 784, GEOMETRYFROMTEXT = 785, 
               GEOMETRYFROMWKB = 786, GEOMETRYN = 787, GEOMETRYTYPE = 788, 
               GEOMFROMTEXT = 789, GEOMFROMWKB = 790, GET_FORMAT = 791, 
               GET_LOCK = 792, GLENGTH = 793, GREATEST = 794, GTID_SUBSET = 795, 
               GTID_SUBTRACT = 796, HEX = 797, IFNULL = 798, INET6_ATON = 799, 
               INET6_NTOA = 800, INET_ATON = 801, INET_NTOA = 802, INSTR = 803, 
               INTERIORRINGN = 804, INTERSECTS = 805, ISCLOSED = 806, ISEMPTY = 807, 
               ISNULL = 808, ISSIMPLE = 809, IS_FREE_LOCK = 810, IS_IPV4 = 811, 
               IS_IPV4_COMPAT = 812, IS_IPV4_MAPPED = 813, IS_IPV6 = 814, 
               IS_USED_LOCK = 815, LAST_INSERT_ID = 816, LCASE = 817, LEAST = 818, 
               LENGTH = 819, LINEFROMTEXT = 820, LINEFROMWKB = 821, LINESTRINGFROMTEXT = 822, 
               LINESTRINGFROMWKB = 823, LN = 824, LOAD_FILE = 825, LOCATE = 826, 
               LOG = 827, LOG10 = 828, LOG2 = 829, LOWER = 830, LPAD = 831, 
               LTRIM = 832, MAKEDATE = 833, MAKETIME = 834, MAKE_SET = 835, 
               MASTER_POS_WAIT = 836, MBRCONTAINS = 837, MBRDISJOINT = 838, 
               MBREQUAL = 839, MBRINTERSECTS = 840, MBROVERLAPS = 841, MBRTOUCHES = 842, 
               MBRWITHIN = 843, MD5 = 844, MLINEFROMTEXT = 845, MLINEFROMWKB = 846, 
               MONTHNAME = 847, MPOINTFROMTEXT = 848, MPOINTFROMWKB = 849, 
               MPOLYFROMTEXT = 850, MPOLYFROMWKB = 851, MULTILINESTRINGFROMTEXT = 852, 
               MULTILINESTRINGFROMWKB = 853, MULTIPOINTFROMTEXT = 854, MULTIPOINTFROMWKB = 855, 
               MULTIPOLYGONFROMTEXT = 856, MULTIPOLYGONFROMWKB = 857, NAME_CONST = 858, 
               NULLIF = 859, NUMGEOMETRIES = 860, NUMINTERIORRINGS = 861, 
               NUMPOINTS = 862, OCT = 863, OCTET_LENGTH = 864, ORD = 865, 
               OVERLAPS = 866, PERIOD_ADD = 867, PERIOD_DIFF = 868, PI = 869, 
               POINTFROMTEXT = 870, POINTFROMWKB = 871, POINTN = 872, POLYFROMTEXT = 873, 
               POLYFROMWKB = 874, POLYGONFROMTEXT = 875, POLYGONFROMWKB = 876, 
               POW = 877, POWER = 878, QUOTE = 879, RADIANS = 880, RAND = 881, 
               RANDOM_BYTES = 882, RELEASE_LOCK = 883, REVERSE = 884, ROUND = 885, 
               ROW_COUNT = 886, RPAD = 887, RTRIM = 888, SEC_TO_TIME = 889, 
               SESSION_USER = 890, SHA = 891, SHA1 = 892, SHA2 = 893, SCHEMA_NAME = 894, 
               SIGN = 895, SIN = 896, SLEEP = 897, SOUNDEX = 898, SQL_THREAD_WAIT_AFTER_GTIDS = 899, 
               SQRT = 900, SRID = 901, STARTPOINT = 902, STRCMP = 903, STR_TO_DATE = 904, 
               ST_AREA = 905, ST_ASBINARY = 906, ST_ASTEXT = 907, ST_ASWKB = 908, 
               ST_ASWKT = 909, ST_BUFFER = 910, ST_CENTROID = 911, ST_CONTAINS = 912, 
               ST_CROSSES = 913, ST_DIFFERENCE = 914, ST_DIMENSION = 915, 
               ST_DISJOINT = 916, ST_DISTANCE = 917, ST_ENDPOINT = 918, 
               ST_ENVELOPE = 919, ST_EQUALS = 920, ST_EXTERIORRING = 921, 
               ST_GEOMCOLLFROMTEXT = 922, ST_GEOMCOLLFROMTXT = 923, ST_GEOMCOLLFROMWKB = 924, 
               ST_GEOMETRYCOLLECTIONFROMTEXT = 925, ST_GEOMETRYCOLLECTIONFROMWKB = 926, 
               ST_GEOMETRYFROMTEXT = 927, ST_GEOMETRYFROMWKB = 928, ST_GEOMETRYN = 929, 
               ST_GEOMETRYTYPE = 930, ST_GEOMFROMTEXT = 931, ST_GEOMFROMWKB = 932, 
               ST_INTERIORRINGN = 933, ST_INTERSECTION = 934, ST_INTERSECTS = 935, 
               ST_ISCLOSED = 936, ST_ISEMPTY = 937, ST_ISSIMPLE = 938, ST_LINEFROMTEXT = 939, 
               ST_LINEFROMWKB = 940, ST_LINESTRINGFROMTEXT = 941, ST_LINESTRINGFROMWKB = 942, 
               ST_NUMGEOMETRIES = 943, ST_NUMINTERIORRING = 944, ST_NUMINTERIORRINGS = 945, 
               ST_NUMPOINTS = 946, ST_OVERLAPS = 947, ST_POINTFROMTEXT = 948, 
               ST_POINTFROMWKB = 949, ST_POINTN = 950, ST_POLYFROMTEXT = 951, 
               ST_POLYFROMWKB = 952, ST_POLYGONFROMTEXT = 953, ST_POLYGONFROMWKB = 954, 
               ST_SRID = 955, ST_STARTPOINT = 956, ST_SYMDIFFERENCE = 957, 
               ST_TOUCHES = 958, ST_UNION = 959, ST_WITHIN = 960, ST_X = 961, 
               ST_Y = 962, SUBDATE = 963, SUBSTRING_INDEX = 964, SUBTIME = 965, 
               SYSTEM_USER = 966, TAN = 967, TIMEDIFF = 968, TIMESTAMPADD = 969, 
               TIMESTAMPDIFF = 970, TIME_FORMAT = 971, TIME_TO_SEC = 972, 
               TOUCHES = 973, TO_BASE64 = 974, TO_DAYS = 975, TO_SECONDS = 976, 
               UCASE = 977, UNCOMPRESS = 978, UNCOMPRESSED_LENGTH = 979, 
               UNHEX = 980, UNIX_TIMESTAMP = 981, UPDATEXML = 982, UPPER = 983, 
               UUID = 984, UUID_SHORT = 985, VALIDATE_PASSWORD_STRENGTH = 986, 
               VERSION = 987, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 988, WEEKDAY = 989, 
               WEEKOFYEAR = 990, WEIGHT_STRING = 991, WITHIN = 992, YEARWEEK = 993, 
               Y_FUNCTION = 994, X_FUNCTION = 995, VAR_ASSIGN = 996, PLUS_ASSIGN = 997, 
               MINUS_ASSIGN = 998, MULT_ASSIGN = 999, DIV_ASSIGN = 1000, 
               MOD_ASSIGN = 1001, AND_ASSIGN = 1002, XOR_ASSIGN = 1003, 
               OR_ASSIGN = 1004, STAR = 1005, DIVIDE = 1006, MODULE = 1007, 
               PLUS = 1008, MINUSMINUS = 1009, MINUS = 1010, DIV = 1011, 
               MOD = 1012, EQUAL_SYMBOL = 1013, GREATER_SYMBOL = 1014, LESS_SYMBOL = 1015, 
               EXCLAMATION_SYMBOL = 1016, BIT_NOT_OP = 1017, BIT_OR_OP = 1018, 
               BIT_AND_OP = 1019, BIT_XOR_OP = 1020, DOT = 1021, LR_BRACKET = 1022, 
               RR_BRACKET = 1023, COMMA = 1024, SEMI = 1025, AT_SIGN = 1026, 
               ZERO_DECIMAL = 1027, ONE_DECIMAL = 1028, TWO_DECIMAL = 1029, 
               SINGLE_QUOTE_SYMB = 1030, DOUBLE_QUOTE_SYMB = 1031, REVERSE_QUOTE_SYMB = 1032, 
               COLON_SYMB = 1033, CHARSET_REVERSE_QOUTE_STRING = 1034, FILESIZE_LITERAL = 1035, 
               START_NATIONAL_STRING_LITERAL = 1036, STRING_LITERAL = 1037, 
               DECIMAL_LITERAL = 1038, HEXADECIMAL_LITERAL = 1039, REAL_LITERAL = 1040, 
               NULL_SPEC_LITERAL = 1041, BIT_STRING = 1042, STRING_CHARSET_NAME = 1043, 
               DOT_ID = 1044, ID = 1045, REVERSE_QUOTE_ID = 1046, STRING_USER_NAME = 1047, 
               LOCAL_ID = 1048, GLOBAL_ID = 1049, ERROR_RECONGNIGION = 1050;

		public const RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, 
               RULE_emptyStatement = 3, RULE_ddlStatement = 4, RULE_dmlStatement = 5, 
               RULE_transactionStatement = 6, RULE_replicationStatement = 7, 
               RULE_preparedStatement = 8, RULE_compoundStatement = 9, RULE_administrationStatement = 10, 
               RULE_utilityStatement = 11, RULE_createDatabase = 12, RULE_createEvent = 13, 
               RULE_createIndex = 14, RULE_createLogfileGroup = 15, RULE_createProcedure = 16, 
               RULE_createFunction = 17, RULE_createServer = 18, RULE_createTable = 19, 
               RULE_createTablespaceInnodb = 20, RULE_createTablespaceNdb = 21, 
               RULE_createTrigger = 22, RULE_createView = 23, RULE_createDatabaseOption = 24, 
               RULE_ownerStatement = 25, RULE_scheduleExpression = 26, RULE_timestampValue = 27, 
               RULE_intervalExpr = 28, RULE_intervalType = 29, RULE_enableType = 30, 
               RULE_indexType = 31, RULE_indexOption = 32, RULE_procedureParameter = 33, 
               RULE_functionParameter = 34, RULE_routineOption = 35, RULE_serverOption = 36, 
               RULE_createDefinitions = 37, RULE_createDefinition = 38, 
               RULE_columnDefinition = 39, RULE_columnConstraint = 40, RULE_tableConstraint = 41, 
               RULE_referenceDefinition = 42, RULE_referenceAction = 43, 
               RULE_referenceControlType = 44, RULE_indexColumnDefinition = 45, 
               RULE_tableOption = 46, RULE_tablespaceStorage = 47, RULE_partitionDefinitions = 48, 
               RULE_partitionFunctionDefinition = 49, RULE_subpartitionFunctionDefinition = 50, 
               RULE_partitionDefinition = 51, RULE_partitionDefinerAtom = 52, 
               RULE_partitionDefinerVector = 53, RULE_subpartitionDefinition = 54, 
               RULE_partitionOption = 55, RULE_alterDatabase = 56, RULE_alterEvent = 57, 
               RULE_alterFunction = 58, RULE_alterInstance = 59, RULE_alterLogfileGroup = 60, 
               RULE_alterProcedure = 61, RULE_alterServer = 62, RULE_alterTable = 63, 
               RULE_alterTablespace = 64, RULE_alterView = 65, RULE_alterSpecification = 66, 
               RULE_dropDatabase = 67, RULE_dropEvent = 68, RULE_dropIndex = 69, 
               RULE_dropLogfileGroup = 70, RULE_dropProcedure = 71, RULE_dropFunction = 72, 
               RULE_dropServer = 73, RULE_dropTable = 74, RULE_dropTablespace = 75, 
               RULE_dropTrigger = 76, RULE_dropView = 77, RULE_renameTable = 78, 
               RULE_renameTableClause = 79, RULE_truncateTable = 80, RULE_callStatement = 81, 
               RULE_deleteStatement = 82, RULE_doStatement = 83, RULE_handlerStatement = 84, 
               RULE_insertStatement = 85, RULE_loadDataStatement = 86, RULE_loadXmlStatement = 87, 
               RULE_replaceStatement = 88, RULE_selectStatement = 89, RULE_updateStatement = 90, 
               RULE_insertStatementValue = 91, RULE_updatedElement = 92, 
               RULE_assignmentField = 93, RULE_lockClause = 94, RULE_singleDeleteStatement = 95, 
               RULE_multipleDeleteStatement = 96, RULE_handlerOpenStatement = 97, 
               RULE_handlerReadIndexStatement = 98, RULE_handlerReadStatement = 99, 
               RULE_handlerCloseStatement = 100, RULE_singleUpdateStatement = 101, 
               RULE_multipleUpdateStatement = 102, RULE_orderByClause = 103, 
               RULE_orderByExpression = 104, RULE_tableSources = 105, RULE_tableSource = 106, 
               RULE_tableSourceItem = 107, RULE_indexHint = 108, RULE_indexHintType = 109, 
               RULE_joinPart = 110, RULE_queryExpression = 111, RULE_queryExpressionNointo = 112, 
               RULE_querySpecification = 113, RULE_querySpecificationNointo = 114, 
               RULE_unionParenthesis = 115, RULE_unionStatement = 116, RULE_selectSpec = 117, 
               RULE_selectElements = 118, RULE_selectElement = 119, RULE_selectIntoExpression = 120, 
               RULE_selectFieldsInto = 121, RULE_selectLinesInto = 122, 
               RULE_fromClause = 123, RULE_groupByItem = 124, RULE_limitClause = 125, 
               RULE_limitClauseAtom = 126, RULE_startTransaction = 127, 
               RULE_beginWork = 128, RULE_commitWork = 129, RULE_rollbackWork = 130, 
               RULE_savepointStatement = 131, RULE_rollbackStatement = 132, 
               RULE_releaseStatement = 133, RULE_lockTables = 134, RULE_unlockTables = 135, 
               RULE_setAutocommitStatement = 136, RULE_setTransactionStatement = 137, 
               RULE_transactionMode = 138, RULE_lockTableElement = 139, 
               RULE_lockAction = 140, RULE_transactionOption = 141, RULE_transactionLevel = 142, 
               RULE_changeMaster = 143, RULE_changeReplicationFilter = 144, 
               RULE_purgeBinaryLogs = 145, RULE_resetMaster = 146, RULE_resetSlave = 147, 
               RULE_startSlave = 148, RULE_stopSlave = 149, RULE_startGroupReplication = 150, 
               RULE_stopGroupReplication = 151, RULE_masterOption = 152, 
               RULE_stringMasterOption = 153, RULE_decimalMasterOption = 154, 
               RULE_boolMasterOption = 155, RULE_channelOption = 156, RULE_replicationFilter = 157, 
               RULE_tablePair = 158, RULE_threadType = 159, RULE_untilOption = 160, 
               RULE_connectionOption = 161, RULE_gtuidSet = 162, RULE_xaStartTransaction = 163, 
               RULE_xaEndTransaction = 164, RULE_xaPrepareStatement = 165, 
               RULE_xaCommitWork = 166, RULE_xaRollbackWork = 167, RULE_xaRecoverWork = 168, 
               RULE_prepareStatement = 169, RULE_executeStatement = 170, 
               RULE_deallocatePrepare = 171, RULE_routineBody = 172, RULE_blockStatement = 173, 
               RULE_caseStatement = 174, RULE_ifStatement = 175, RULE_iterateStatement = 176, 
               RULE_leaveStatement = 177, RULE_loopStatement = 178, RULE_repeatStatement = 179, 
               RULE_returnStatement = 180, RULE_whileStatement = 181, RULE_cursorStatement = 182, 
               RULE_declareVariable = 183, RULE_declareCondition = 184, 
               RULE_declareCursor = 185, RULE_declareHandler = 186, RULE_handlerConditionValue = 187, 
               RULE_procedureSqlStatement = 188, RULE_caseAlternative = 189, 
               RULE_elifAlternative = 190, RULE_alterUser = 191, RULE_createUser = 192, 
               RULE_dropUser = 193, RULE_grantStatement = 194, RULE_grantProxy = 195, 
               RULE_renameUser = 196, RULE_revokeStatement = 197, RULE_revokeProxy = 198, 
               RULE_setPasswordStatement = 199, RULE_userSpecification = 200, 
               RULE_userAuthOption = 201, RULE_tlsOption = 202, RULE_userResourceOption = 203, 
               RULE_userPasswordOption = 204, RULE_userLockOption = 205, 
               RULE_privelegeClause = 206, RULE_privilege = 207, RULE_privilegeLevel = 208, 
               RULE_renameUserClause = 209, RULE_analyzeTable = 210, RULE_checkTable = 211, 
               RULE_checksumTable = 212, RULE_optimizeTable = 213, RULE_repairTable = 214, 
               RULE_checkTableOption = 215, RULE_createUdfunction = 216, 
               RULE_installPlugin = 217, RULE_uninstallPlugin = 218, RULE_setStatement = 219, 
               RULE_showStatement = 220, RULE_variableClause = 221, RULE_showCommonEntity = 222, 
               RULE_showFilter = 223, RULE_showGlobalInfoClause = 224, RULE_showSchemaEntity = 225, 
               RULE_showProfileType = 226, RULE_binlogStatement = 227, RULE_cacheIndexStatement = 228, 
               RULE_flushStatement = 229, RULE_killStatement = 230, RULE_loadIndexIntoCache = 231, 
               RULE_resetStatement = 232, RULE_shutdownStatement = 233, 
               RULE_tableIndexes = 234, RULE_flushOption = 235, RULE_flushTableOption = 236, 
               RULE_loadedTableIndexes = 237, RULE_simpleDescribeStatement = 238, 
               RULE_fullDescribeStatement = 239, RULE_helpStatement = 240, 
               RULE_useStatement = 241, RULE_signalStatement = 242, RULE_resignalStatement = 243, 
               RULE_signalConditionInformation = 244, RULE_diagnosticsStatement = 245, 
               RULE_diagnosticsConditionInformationName = 246, RULE_describeObjectClause = 247, 
               RULE_fullId = 248, RULE_tableName = 249, RULE_fullColumnName = 250, 
               RULE_indexColumnName = 251, RULE_userName = 252, RULE_mysqlVariable = 253, 
               RULE_charsetName = 254, RULE_collationName = 255, RULE_engineName = 256, 
               RULE_uuidSet = 257, RULE_xid = 258, RULE_xuidStringId = 259, 
               RULE_authPlugin = 260, RULE_uid = 261, RULE_simpleId = 262, 
               RULE_dottedId = 263, RULE_decimalLiteral = 264, RULE_fileSizeLiteral = 265, 
               RULE_stringLiteral = 266, RULE_booleanLiteral = 267, RULE_hexadecimalLiteral = 268, 
               RULE_nullNotnull = 269, RULE_constant = 270, RULE_dataType = 271, 
               RULE_collectionOptions = 272, RULE_convertedDataType = 273, 
               RULE_lengthOneDimension = 274, RULE_lengthTwoDimension = 275, 
               RULE_lengthTwoOptionalDimension = 276, RULE_uidList = 277, 
               RULE_tables = 278, RULE_indexColumnNames = 279, RULE_expressions = 280, 
               RULE_expressionsForUpdate = 281, RULE_expressionsWithDefaults = 282, 
               RULE_constants = 283, RULE_simpleStrings = 284, RULE_userVariables = 285, 
               RULE_defaultValue = 286, RULE_currentTimestamp = 287, RULE_expressionOrDefault = 288, 
               RULE_ifExists = 289, RULE_ifNotExists = 290, RULE_functionCall = 291, 
               RULE_specificFunction = 292, RULE_caseFuncAlternative = 293, 
               RULE_levelsInWeightString = 294, RULE_levelInWeightListElement = 295, 
               RULE_aggregateWindowedFunction = 296, RULE_scalarFunctionName = 297, 
               RULE_passwordFunctionClause = 298, RULE_functionArgs = 299, 
               RULE_functionArg = 300, RULE_expression = 301, RULE_predicate = 302, 
               RULE_expressionForUpdate = 303, RULE_predicateForUpdate = 304, 
               RULE_expressionAtomForUpdate = 305, RULE_expressionAtom = 306, 
               RULE_unaryOperator = 307, RULE_comparisonOperator = 308, 
               RULE_logicalOperator = 309, RULE_bitOperator = 310, RULE_mathOperator = 311, 
               RULE_charsetNameBase = 312, RULE_transactionLevelBase = 313, 
               RULE_privilegesBase = 314, RULE_intervalTypeBase = 315, RULE_dataTypeBase = 316, 
               RULE_keywordsCanBeId = 317, RULE_functionNameBase = 318;

		/**
		 * @var array<string>
		 */
		public const RULE_NAMES = [
			'root', 'sqlStatements', 'sqlStatement', 'emptyStatement', 'ddlStatement', 
			'dmlStatement', 'transactionStatement', 'replicationStatement', 'preparedStatement', 
			'compoundStatement', 'administrationStatement', 'utilityStatement', 'createDatabase', 
			'createEvent', 'createIndex', 'createLogfileGroup', 'createProcedure', 
			'createFunction', 'createServer', 'createTable', 'createTablespaceInnodb', 
			'createTablespaceNdb', 'createTrigger', 'createView', 'createDatabaseOption', 
			'ownerStatement', 'scheduleExpression', 'timestampValue', 'intervalExpr', 
			'intervalType', 'enableType', 'indexType', 'indexOption', 'procedureParameter', 
			'functionParameter', 'routineOption', 'serverOption', 'createDefinitions', 
			'createDefinition', 'columnDefinition', 'columnConstraint', 'tableConstraint', 
			'referenceDefinition', 'referenceAction', 'referenceControlType', 'indexColumnDefinition', 
			'tableOption', 'tablespaceStorage', 'partitionDefinitions', 'partitionFunctionDefinition', 
			'subpartitionFunctionDefinition', 'partitionDefinition', 'partitionDefinerAtom', 
			'partitionDefinerVector', 'subpartitionDefinition', 'partitionOption', 
			'alterDatabase', 'alterEvent', 'alterFunction', 'alterInstance', 'alterLogfileGroup', 
			'alterProcedure', 'alterServer', 'alterTable', 'alterTablespace', 'alterView', 
			'alterSpecification', 'dropDatabase', 'dropEvent', 'dropIndex', 'dropLogfileGroup', 
			'dropProcedure', 'dropFunction', 'dropServer', 'dropTable', 'dropTablespace', 
			'dropTrigger', 'dropView', 'renameTable', 'renameTableClause', 'truncateTable', 
			'callStatement', 'deleteStatement', 'doStatement', 'handlerStatement', 
			'insertStatement', 'loadDataStatement', 'loadXmlStatement', 'replaceStatement', 
			'selectStatement', 'updateStatement', 'insertStatementValue', 'updatedElement', 
			'assignmentField', 'lockClause', 'singleDeleteStatement', 'multipleDeleteStatement', 
			'handlerOpenStatement', 'handlerReadIndexStatement', 'handlerReadStatement', 
			'handlerCloseStatement', 'singleUpdateStatement', 'multipleUpdateStatement', 
			'orderByClause', 'orderByExpression', 'tableSources', 'tableSource', 
			'tableSourceItem', 'indexHint', 'indexHintType', 'joinPart', 'queryExpression', 
			'queryExpressionNointo', 'querySpecification', 'querySpecificationNointo', 
			'unionParenthesis', 'unionStatement', 'selectSpec', 'selectElements', 
			'selectElement', 'selectIntoExpression', 'selectFieldsInto', 'selectLinesInto', 
			'fromClause', 'groupByItem', 'limitClause', 'limitClauseAtom', 'startTransaction', 
			'beginWork', 'commitWork', 'rollbackWork', 'savepointStatement', 'rollbackStatement', 
			'releaseStatement', 'lockTables', 'unlockTables', 'setAutocommitStatement', 
			'setTransactionStatement', 'transactionMode', 'lockTableElement', 'lockAction', 
			'transactionOption', 'transactionLevel', 'changeMaster', 'changeReplicationFilter', 
			'purgeBinaryLogs', 'resetMaster', 'resetSlave', 'startSlave', 'stopSlave', 
			'startGroupReplication', 'stopGroupReplication', 'masterOption', 'stringMasterOption', 
			'decimalMasterOption', 'boolMasterOption', 'channelOption', 'replicationFilter', 
			'tablePair', 'threadType', 'untilOption', 'connectionOption', 'gtuidSet', 
			'xaStartTransaction', 'xaEndTransaction', 'xaPrepareStatement', 'xaCommitWork', 
			'xaRollbackWork', 'xaRecoverWork', 'prepareStatement', 'executeStatement', 
			'deallocatePrepare', 'routineBody', 'blockStatement', 'caseStatement', 
			'ifStatement', 'iterateStatement', 'leaveStatement', 'loopStatement', 
			'repeatStatement', 'returnStatement', 'whileStatement', 'cursorStatement', 
			'declareVariable', 'declareCondition', 'declareCursor', 'declareHandler', 
			'handlerConditionValue', 'procedureSqlStatement', 'caseAlternative', 
			'elifAlternative', 'alterUser', 'createUser', 'dropUser', 'grantStatement', 
			'grantProxy', 'renameUser', 'revokeStatement', 'revokeProxy', 'setPasswordStatement', 
			'userSpecification', 'userAuthOption', 'tlsOption', 'userResourceOption', 
			'userPasswordOption', 'userLockOption', 'privelegeClause', 'privilege', 
			'privilegeLevel', 'renameUserClause', 'analyzeTable', 'checkTable', 'checksumTable', 
			'optimizeTable', 'repairTable', 'checkTableOption', 'createUdfunction', 
			'installPlugin', 'uninstallPlugin', 'setStatement', 'showStatement', 
			'variableClause', 'showCommonEntity', 'showFilter', 'showGlobalInfoClause', 
			'showSchemaEntity', 'showProfileType', 'binlogStatement', 'cacheIndexStatement', 
			'flushStatement', 'killStatement', 'loadIndexIntoCache', 'resetStatement', 
			'shutdownStatement', 'tableIndexes', 'flushOption', 'flushTableOption', 
			'loadedTableIndexes', 'simpleDescribeStatement', 'fullDescribeStatement', 
			'helpStatement', 'useStatement', 'signalStatement', 'resignalStatement', 
			'signalConditionInformation', 'diagnosticsStatement', 'diagnosticsConditionInformationName', 
			'describeObjectClause', 'fullId', 'tableName', 'fullColumnName', 'indexColumnName', 
			'userName', 'mysqlVariable', 'charsetName', 'collationName', 'engineName', 
			'uuidSet', 'xid', 'xuidStringId', 'authPlugin', 'uid', 'simpleId', 'dottedId', 
			'decimalLiteral', 'fileSizeLiteral', 'stringLiteral', 'booleanLiteral', 
			'hexadecimalLiteral', 'nullNotnull', 'constant', 'dataType', 'collectionOptions', 
			'convertedDataType', 'lengthOneDimension', 'lengthTwoDimension', 'lengthTwoOptionalDimension', 
			'uidList', 'tables', 'indexColumnNames', 'expressions', 'expressionsForUpdate', 
			'expressionsWithDefaults', 'constants', 'simpleStrings', 'userVariables', 
			'defaultValue', 'currentTimestamp', 'expressionOrDefault', 'ifExists', 
			'ifNotExists', 'functionCall', 'specificFunction', 'caseFuncAlternative', 
			'levelsInWeightString', 'levelInWeightListElement', 'aggregateWindowedFunction', 
			'scalarFunctionName', 'passwordFunctionClause', 'functionArgs', 'functionArg', 
			'expression', 'predicate', 'expressionForUpdate', 'predicateForUpdate', 
			'expressionAtomForUpdate', 'expressionAtom', 'unaryOperator', 'comparisonOperator', 
			'logicalOperator', 'bitOperator', 'mathOperator', 'charsetNameBase', 
			'transactionLevelBase', 'privilegesBase', 'intervalTypeBase', 'dataTypeBase', 
			'keywordsCanBeId', 'functionNameBase'
		];

		/**
		 * @var array<string|null>
		 */
		private const LITERAL_NAMES = [
		    null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
		    "'ANALYZE'", "'AND'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", 
		    "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", 
		    "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", 
		    "'CONTINUE'", "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_USER'", 
		    "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", 
		    "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
		    "'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", 
		    "'ELSE'", "'ELSEIF'", "'ENCLOSED'", "'ESCAPED'", "'EXISTS'", "'EXIT'", 
		    "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
		    "'FROM'", "'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", 
		    "'HAVING'", "'HIGH_PRIORITY'", "'IF'", "'IGNORE'", "'IN'", "'INDEX'", 
		    "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", "'INTO'", 
		    "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", "'LEADING'", 
		    "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", 
		    "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
		    "'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", 
		    "'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", 
		    "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTFILE'", "'PARTITION'", 
		    "'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'", 
		    "'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", 
		    "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETURN'", "'REVOKE'", "'RIGHT'", 
		    "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", 
		    "'SHOW'", "'SIGNAL'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", 
		    "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", 
		    "'SSL'", "'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", 
		    "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", 
		    "'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
		    "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", 
		    "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
		    "'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", 
		    "'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", 
		    "'PRECISION'", "'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", 
		    "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", 
		    "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", 
		    "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'", 
		    "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", 
		    "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", 
		    "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", 
		    "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'JSON_VALID'", "'JSON_SCHEMA_VALID'", 
		    "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'GROUP_CONCAT'", 
		    "'MAX'", "'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", 
		    "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
		    "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", 
		    "'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", 
		    "'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", 
		    "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", 
		    "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", 
		    "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
		    "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", "'BOOLEAN'", 
		    "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", "'CHANNEL'", 
		    "'CHECKSUM'", "'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", 
		    "'CLOSE'", "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", 
		    "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'", 
		    "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", "'CONNECTION'", "'CONSISTENT'", 
		    "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", 
		    "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", 
		    "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", 
		    "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", 
		    "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", 
		    "'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", 
		    "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", 
		    "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", 
		    "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", 
		    "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWS'", "'FOUND'", 
		    "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", 
		    "'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", 
		    "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", 
		    "'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INVISIBLE'", 
		    "'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", 
		    "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", 
		    "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", 
		    "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", 
		    "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
		    "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
		    "'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
		    "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", 
		    "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
		    "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
		    "'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", 
		    "'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", 
		    "'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", 
		    "'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'", "'OFFSET'", 
		    "'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", 
		    "'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", 
		    "'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", 
		    "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
		    "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", 
		    "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", 
		    "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
		    "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'", 
		    "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
		    "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
		    "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", "'RESUME'", 
		    "'RETURNED_SQLSTATE'", "'RETURNS'", "'ROLE'", "'ROLLBACK'", "'ROLLUP'", 
		    "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", 
		    "'SECURITY'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", 
		    "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", 
		    "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", 
		    "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", 
		    "'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
		    "'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", 
		    "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", 
		    "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", 
		    "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", 
		    "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", 
		    "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", 
		    "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", 
		    "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", "'WARNINGS'", 
		    "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", "'EUR'", 
		    "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", "'MONTH'", "'DAY'", 
		    "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", "'TABLES'", 
		    "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", "'SHUTDOWN'", 
		    "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", "'AUDIT_ADMIN'", 
		    "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", "'CLONE_ADMIN'", 
		    "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
		    "'FIREWALL_USER'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
		    "'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", "'REPLICATION_APPLIER'", 
		    "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", 
		    "'ROLE_ADMIN'", null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", 
		    "'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", 
		    "'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
		    "'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", 
		    "'EUCJPMS'", "'EUCKR'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", 
		    "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", 
		    "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", 
		    "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", 
		    "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", 
		    "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", 
		    "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", 
		    "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", 
		    "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
		    "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'ABS'", 
		    "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
		    "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", 
		    "'ASYMMETRIC_DECRYPT'", "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", 
		    "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", "'ATAN'", "'ATAN2'", "'BENCHMARK'", 
		    "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", "'CATALOG_NAME'", 
		    "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", "'CHARSET'", 
		    "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", "'CONCAT'", 
		    "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", "'COS'", 
		    "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
		    "'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
		    "'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
		    "'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
		    "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
		    "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
		    "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", 
		    "'FROM_BASE64'", "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", 
		    "'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", 
		    "'GEOMETRYFROMTEXT'", "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", 
		    "'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", 
		    "'GREATEST'", "'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", 
		    "'INET6_ATON'", "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", 
		    "'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", 
		    "'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
		    "'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
		    "'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
		    "'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", 
		    "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", 
		    "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", 
		    "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
		    "'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
		    "'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", 
		    "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
		    "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
		    "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", 
		    "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
		    "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
		    "'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
		    "'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
		    "'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
		    "'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
		    "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", 
		    "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'", 
		    "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", 
		    "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", 
		    "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", 
		    "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
		    "'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
		    "'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
		    "'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", 
		    "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", 
		    "'ST_INTERSECTION'", "'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", 
		    "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", 
		    "'ST_LINESTRINGFROMWKB'", "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", 
		    "'ST_NUMINTERIORRINGS'", "'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", 
		    "'ST_POINTFROMWKB'", "'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", 
		    "'ST_POLYGONFROMTEXT'", "'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", 
		    "'ST_SYMDIFFERENCE'", "'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", 
		    "'ST_X'", "'ST_Y'", "'SUBDATE'", "'SUBSTRING_INDEX'", "'SUBTIME'", 
		    "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", 
		    "'TIME_FORMAT'", "'TIME_TO_SEC'", "'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", 
		    "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", "'UNCOMPRESSED_LENGTH'", 
		    "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", "'UPPER'", "'UUID'", 
		    "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", 
		    "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", 
		    "'Y'", "'X'", "':='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
		    "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'--'", "'-'", "'DIV'", 
		    "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", 
		    "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", 
		    "'`'", "':'"
		];

		/**
		 * @var array<string>
		 */
		private const SYMBOLIC_NAMES = [
		    null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		    "ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", "ASC", "BEFORE", 
		    "BETWEEN", "BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", 
		    "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", 
		    "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", 
		    "CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", 
		    "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", 
		    "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", "ESCAPED", 
		    "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", 
		    "FROM", "FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", 
		    "HIGH_PRIORITY", "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", 
		    "INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", 
		    "KEYS", "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", 
		    "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
		    "MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
		    "NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONALLY", 
		    "OR", "ORDER", "OUT", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", 
		    "PROCEDURE", "PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", 
		    "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", 
		    "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", 
		    "SET", "SEPARATOR", "SHOW", "SIGNAL", "SPATIAL", "SQL", "SQLEXCEPTION", 
		    "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
		    "SQL_SMALL_RESULT", "SSL", "STACKED", "STARTING", "STRAIGHT_JOIN", 
		    "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", "TRUE", 
		    "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", 
		    "USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", 
		    "XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", "MIDDLEINT", 
		    "INT", "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "BIGINT", 
		    "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", "FLOAT8", "DECIMAL", 
		    "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", 
		    "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
		    "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", 
		    "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", 
		    "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", 
		    "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
		    "DAY_MICROSECOND", "JSON_VALID", "JSON_SCHEMA_VALID", "AVG", "BIT_AND", 
		    "BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT", "MAX", "MIN", "STD", 
		    "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", 
		    "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", 
		    "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", 
		    "NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", 
		    "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
		    "ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
		    "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", 
		    "BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
		    "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", 
		    "CLIENT", "CLOSE", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", 
		    "COLUMN_NAME", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", 
		    "COMPRESSION", "CONCURRENT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", 
		    "CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
		    "COPY", "CPU", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
		    "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
		    "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
		    "ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", 
		    "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
		    "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", 
		    "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWS", 
		    "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
		    "HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
		    "IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", 
		    "INSTANCE", "INVISIBLE", "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", 
		    "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", 
		    "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", 
		    "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", 
		    "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", 
		    "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", 
		    "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", 
		    "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", 
		    "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", 
		    "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", "MEMBER", 
		    "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", "MODIFY", 
		    "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", "NEVER", 
		    "NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE", "OFFSET", "OF", "OJ", 
		    "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", 
		    "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", 
		    "PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
		    "PORT", "PRECEDES", "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", 
		    "PROFILE", "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", 
		    "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", 
		    "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", 
		    "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", 
		    "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", 
		    "RESET", "RESUME", "RETURNED_SQLSTATE", "RETURNS", "ROLE", "ROLLBACK", 
		    "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", "SCHEDULE", 
		    "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", "SIMPLE", 
		    "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
		    "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
		    "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
		    "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
		    "STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", 
		    "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", 
		    "TABLE_NAME", "TABLESPACE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", 
		    "TRANSACTION", "TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNDEFINED", 
		    "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", 
		    "USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
		    "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", "WITHOUT", "WORK", 
		    "WRAPPER", "X509", "XA", "XML", "EUR", "USA", "JIS", "ISO", "INTERNAL", 
		    "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", 
		    "TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", 
		    "SUPER", "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN", "AUDIT_ADMIN", 
		    "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN", 
		    "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "FIREWALL_ADMIN", "FIREWALL_USER", 
		    "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", "NDB_STORED_USER", 
		    "PERSIST_RO_VARIABLES_ADMIN", "REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", 
		    "RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", "ROLE_ADMIN", "SESSION_VARIABLES_ADMIN", 
		    "SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", "TABLE_ENCRYPTION_ADMIN", 
		    "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", "ARMSCII8", "ASCII", "BIG5", 
		    "CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", 
		    "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", 
		    "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", 
		    "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", 
		    "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
		    "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", 
		    "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", 
		    "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
		    "GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
		    "MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
		    "AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", 
		    "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
		    "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
		    "BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", 
		    "CEILING", "CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", 
		    "COERCIBILITY", "COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", 
		    "CONV", "CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", 
		    "CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS", "CREATE_DIGEST", 
		    "CROSSES", "DATEDIFF", "DATE_FORMAT", "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", 
		    "DAYOFYEAR", "DECODE", "DEGREES", "DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", 
		    "DISJOINT", "ELT", "ENCODE", "ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", 
		    "EXP", "EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
		    "FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
		    "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", 
		    "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", 
		    "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", 
		    "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
		    "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
		    "INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
		    "ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
		    "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
		    "LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
		    "LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
		    "LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
		    "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
		    "MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", 
		    "MPOINTFROMTEXT", "MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", 
		    "MULTILINESTRINGFROMTEXT", "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", 
		    "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", 
		    "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
		    "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
		    "PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
		    "POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
		    "RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
		    "RPAD", "RTRIM", "SEC_TO_TIME", "SESSION_USER", "SHA", "SHA1", "SHA2", 
		    "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", 
		    "SQRT", "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", 
		    "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", 
		    "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", 
		    "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", 
		    "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", 
		    "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", 
		    "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", 
		    "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", 
		    "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", 
		    "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
		    "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", 
		    "ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
		    "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
		    "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", 
		    "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", 
		    "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", 
		    "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "UCASE", 
		    "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", 
		    "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", 
		    "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", 
		    "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", 
		    "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
		    "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUSMINUS", 
		    "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", 
		    "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
		    "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
		    "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
		    "REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", 
		    "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", 
		    "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", 
		    "BIT_STRING", "STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", 
		    "STRING_USER_NAME", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
		];

		/**
		 * @var string
		 */
		private const SERIALIZED_ATN =
			"\u{3}\u{608B}\u{A72A}\u{8133}\u{B9ED}\u{417C}\u{3BE7}\u{7786}\u{5964}" .
		    "\u{3}\u{41C}\u{1951}\u{4}\u{2}\u{9}\u{2}\u{4}\u{3}\u{9}\u{3}\u{4}" .
		    "\u{4}\u{9}\u{4}\u{4}\u{5}\u{9}\u{5}\u{4}\u{6}\u{9}\u{6}\u{4}\u{7}" .
		    "\u{9}\u{7}\u{4}\u{8}\u{9}\u{8}\u{4}\u{9}\u{9}\u{9}\u{4}\u{A}\u{9}" .
		    "\u{A}\u{4}\u{B}\u{9}\u{B}\u{4}\u{C}\u{9}\u{C}\u{4}\u{D}\u{9}\u{D}" .
		    "\u{4}\u{E}\u{9}\u{E}\u{4}\u{F}\u{9}\u{F}\u{4}\u{10}\u{9}\u{10}\u{4}" .
		    "\u{11}\u{9}\u{11}\u{4}\u{12}\u{9}\u{12}\u{4}\u{13}\u{9}\u{13}\u{4}" .
		    "\u{14}\u{9}\u{14}\u{4}\u{15}\u{9}\u{15}\u{4}\u{16}\u{9}\u{16}\u{4}" .
		    "\u{17}\u{9}\u{17}\u{4}\u{18}\u{9}\u{18}\u{4}\u{19}\u{9}\u{19}\u{4}" .
		    "\u{1A}\u{9}\u{1A}\u{4}\u{1B}\u{9}\u{1B}\u{4}\u{1C}\u{9}\u{1C}\u{4}" .
		    "\u{1D}\u{9}\u{1D}\u{4}\u{1E}\u{9}\u{1E}\u{4}\u{1F}\u{9}\u{1F}\u{4}" .
		    "\u{20}\u{9}\u{20}\u{4}\u{21}\u{9}\u{21}\u{4}\u{22}\u{9}\u{22}\u{4}" .
		    "\u{23}\u{9}\u{23}\u{4}\u{24}\u{9}\u{24}\u{4}\u{25}\u{9}\u{25}\u{4}" .
		    "\u{26}\u{9}\u{26}\u{4}\u{27}\u{9}\u{27}\u{4}\u{28}\u{9}\u{28}\u{4}" .
		    "\u{29}\u{9}\u{29}\u{4}\u{2A}\u{9}\u{2A}\u{4}\u{2B}\u{9}\u{2B}\u{4}" .
		    "\u{2C}\u{9}\u{2C}\u{4}\u{2D}\u{9}\u{2D}\u{4}\u{2E}\u{9}\u{2E}\u{4}" .
		    "\u{2F}\u{9}\u{2F}\u{4}\u{30}\u{9}\u{30}\u{4}\u{31}\u{9}\u{31}\u{4}" .
		    "\u{32}\u{9}\u{32}\u{4}\u{33}\u{9}\u{33}\u{4}\u{34}\u{9}\u{34}\u{4}" .
		    "\u{35}\u{9}\u{35}\u{4}\u{36}\u{9}\u{36}\u{4}\u{37}\u{9}\u{37}\u{4}" .
		    "\u{38}\u{9}\u{38}\u{4}\u{39}\u{9}\u{39}\u{4}\u{3A}\u{9}\u{3A}\u{4}" .
		    "\u{3B}\u{9}\u{3B}\u{4}\u{3C}\u{9}\u{3C}\u{4}\u{3D}\u{9}\u{3D}\u{4}" .
		    "\u{3E}\u{9}\u{3E}\u{4}\u{3F}\u{9}\u{3F}\u{4}\u{40}\u{9}\u{40}\u{4}" .
		    "\u{41}\u{9}\u{41}\u{4}\u{42}\u{9}\u{42}\u{4}\u{43}\u{9}\u{43}\u{4}" .
		    "\u{44}\u{9}\u{44}\u{4}\u{45}\u{9}\u{45}\u{4}\u{46}\u{9}\u{46}\u{4}" .
		    "\u{47}\u{9}\u{47}\u{4}\u{48}\u{9}\u{48}\u{4}\u{49}\u{9}\u{49}\u{4}" .
		    "\u{4A}\u{9}\u{4A}\u{4}\u{4B}\u{9}\u{4B}\u{4}\u{4C}\u{9}\u{4C}\u{4}" .
		    "\u{4D}\u{9}\u{4D}\u{4}\u{4E}\u{9}\u{4E}\u{4}\u{4F}\u{9}\u{4F}\u{4}" .
		    "\u{50}\u{9}\u{50}\u{4}\u{51}\u{9}\u{51}\u{4}\u{52}\u{9}\u{52}\u{4}" .
		    "\u{53}\u{9}\u{53}\u{4}\u{54}\u{9}\u{54}\u{4}\u{55}\u{9}\u{55}\u{4}" .
		    "\u{56}\u{9}\u{56}\u{4}\u{57}\u{9}\u{57}\u{4}\u{58}\u{9}\u{58}\u{4}" .
		    "\u{59}\u{9}\u{59}\u{4}\u{5A}\u{9}\u{5A}\u{4}\u{5B}\u{9}\u{5B}\u{4}" .
		    "\u{5C}\u{9}\u{5C}\u{4}\u{5D}\u{9}\u{5D}\u{4}\u{5E}\u{9}\u{5E}\u{4}" .
		    "\u{5F}\u{9}\u{5F}\u{4}\u{60}\u{9}\u{60}\u{4}\u{61}\u{9}\u{61}\u{4}" .
		    "\u{62}\u{9}\u{62}\u{4}\u{63}\u{9}\u{63}\u{4}\u{64}\u{9}\u{64}\u{4}" .
		    "\u{65}\u{9}\u{65}\u{4}\u{66}\u{9}\u{66}\u{4}\u{67}\u{9}\u{67}\u{4}" .
		    "\u{68}\u{9}\u{68}\u{4}\u{69}\u{9}\u{69}\u{4}\u{6A}\u{9}\u{6A}\u{4}" .
		    "\u{6B}\u{9}\u{6B}\u{4}\u{6C}\u{9}\u{6C}\u{4}\u{6D}\u{9}\u{6D}\u{4}" .
		    "\u{6E}\u{9}\u{6E}\u{4}\u{6F}\u{9}\u{6F}\u{4}\u{70}\u{9}\u{70}\u{4}" .
		    "\u{71}\u{9}\u{71}\u{4}\u{72}\u{9}\u{72}\u{4}\u{73}\u{9}\u{73}\u{4}" .
		    "\u{74}\u{9}\u{74}\u{4}\u{75}\u{9}\u{75}\u{4}\u{76}\u{9}\u{76}\u{4}" .
		    "\u{77}\u{9}\u{77}\u{4}\u{78}\u{9}\u{78}\u{4}\u{79}\u{9}\u{79}\u{4}" .
		    "\u{7A}\u{9}\u{7A}\u{4}\u{7B}\u{9}\u{7B}\u{4}\u{7C}\u{9}\u{7C}\u{4}" .
		    "\u{7D}\u{9}\u{7D}\u{4}\u{7E}\u{9}\u{7E}\u{4}\u{7F}\u{9}\u{7F}\u{4}" .
		    "\u{80}\u{9}\u{80}\u{4}\u{81}\u{9}\u{81}\u{4}\u{82}\u{9}\u{82}\u{4}" .
		    "\u{83}\u{9}\u{83}\u{4}\u{84}\u{9}\u{84}\u{4}\u{85}\u{9}\u{85}\u{4}" .
		    "\u{86}\u{9}\u{86}\u{4}\u{87}\u{9}\u{87}\u{4}\u{88}\u{9}\u{88}\u{4}" .
		    "\u{89}\u{9}\u{89}\u{4}\u{8A}\u{9}\u{8A}\u{4}\u{8B}\u{9}\u{8B}\u{4}" .
		    "\u{8C}\u{9}\u{8C}\u{4}\u{8D}\u{9}\u{8D}\u{4}\u{8E}\u{9}\u{8E}\u{4}" .
		    "\u{8F}\u{9}\u{8F}\u{4}\u{90}\u{9}\u{90}\u{4}\u{91}\u{9}\u{91}\u{4}" .
		    "\u{92}\u{9}\u{92}\u{4}\u{93}\u{9}\u{93}\u{4}\u{94}\u{9}\u{94}\u{4}" .
		    "\u{95}\u{9}\u{95}\u{4}\u{96}\u{9}\u{96}\u{4}\u{97}\u{9}\u{97}\u{4}" .
		    "\u{98}\u{9}\u{98}\u{4}\u{99}\u{9}\u{99}\u{4}\u{9A}\u{9}\u{9A}\u{4}" .
		    "\u{9B}\u{9}\u{9B}\u{4}\u{9C}\u{9}\u{9C}\u{4}\u{9D}\u{9}\u{9D}\u{4}" .
		    "\u{9E}\u{9}\u{9E}\u{4}\u{9F}\u{9}\u{9F}\u{4}\u{A0}\u{9}\u{A0}\u{4}" .
		    "\u{A1}\u{9}\u{A1}\u{4}\u{A2}\u{9}\u{A2}\u{4}\u{A3}\u{9}\u{A3}\u{4}" .
		    "\u{A4}\u{9}\u{A4}\u{4}\u{A5}\u{9}\u{A5}\u{4}\u{A6}\u{9}\u{A6}\u{4}" .
		    "\u{A7}\u{9}\u{A7}\u{4}\u{A8}\u{9}\u{A8}\u{4}\u{A9}\u{9}\u{A9}\u{4}" .
		    "\u{AA}\u{9}\u{AA}\u{4}\u{AB}\u{9}\u{AB}\u{4}\u{AC}\u{9}\u{AC}\u{4}" .
		    "\u{AD}\u{9}\u{AD}\u{4}\u{AE}\u{9}\u{AE}\u{4}\u{AF}\u{9}\u{AF}\u{4}" .
		    "\u{B0}\u{9}\u{B0}\u{4}\u{B1}\u{9}\u{B1}\u{4}\u{B2}\u{9}\u{B2}\u{4}" .
		    "\u{B3}\u{9}\u{B3}\u{4}\u{B4}\u{9}\u{B4}\u{4}\u{B5}\u{9}\u{B5}\u{4}" .
		    "\u{B6}\u{9}\u{B6}\u{4}\u{B7}\u{9}\u{B7}\u{4}\u{B8}\u{9}\u{B8}\u{4}" .
		    "\u{B9}\u{9}\u{B9}\u{4}\u{BA}\u{9}\u{BA}\u{4}\u{BB}\u{9}\u{BB}\u{4}" .
		    "\u{BC}\u{9}\u{BC}\u{4}\u{BD}\u{9}\u{BD}\u{4}\u{BE}\u{9}\u{BE}\u{4}" .
		    "\u{BF}\u{9}\u{BF}\u{4}\u{C0}\u{9}\u{C0}\u{4}\u{C1}\u{9}\u{C1}\u{4}" .
		    "\u{C2}\u{9}\u{C2}\u{4}\u{C3}\u{9}\u{C3}\u{4}\u{C4}\u{9}\u{C4}\u{4}" .
		    "\u{C5}\u{9}\u{C5}\u{4}\u{C6}\u{9}\u{C6}\u{4}\u{C7}\u{9}\u{C7}\u{4}" .
		    "\u{C8}\u{9}\u{C8}\u{4}\u{C9}\u{9}\u{C9}\u{4}\u{CA}\u{9}\u{CA}\u{4}" .
		    "\u{CB}\u{9}\u{CB}\u{4}\u{CC}\u{9}\u{CC}\u{4}\u{CD}\u{9}\u{CD}\u{4}" .
		    "\u{CE}\u{9}\u{CE}\u{4}\u{CF}\u{9}\u{CF}\u{4}\u{D0}\u{9}\u{D0}\u{4}" .
		    "\u{D1}\u{9}\u{D1}\u{4}\u{D2}\u{9}\u{D2}\u{4}\u{D3}\u{9}\u{D3}\u{4}" .
		    "\u{D4}\u{9}\u{D4}\u{4}\u{D5}\u{9}\u{D5}\u{4}\u{D6}\u{9}\u{D6}\u{4}" .
		    "\u{D7}\u{9}\u{D7}\u{4}\u{D8}\u{9}\u{D8}\u{4}\u{D9}\u{9}\u{D9}\u{4}" .
		    "\u{DA}\u{9}\u{DA}\u{4}\u{DB}\u{9}\u{DB}\u{4}\u{DC}\u{9}\u{DC}\u{4}" .
		    "\u{DD}\u{9}\u{DD}\u{4}\u{DE}\u{9}\u{DE}\u{4}\u{DF}\u{9}\u{DF}\u{4}" .
		    "\u{E0}\u{9}\u{E0}\u{4}\u{E1}\u{9}\u{E1}\u{4}\u{E2}\u{9}\u{E2}\u{4}" .
		    "\u{E3}\u{9}\u{E3}\u{4}\u{E4}\u{9}\u{E4}\u{4}\u{E5}\u{9}\u{E5}\u{4}" .
		    "\u{E6}\u{9}\u{E6}\u{4}\u{E7}\u{9}\u{E7}\u{4}\u{E8}\u{9}\u{E8}\u{4}" .
		    "\u{E9}\u{9}\u{E9}\u{4}\u{EA}\u{9}\u{EA}\u{4}\u{EB}\u{9}\u{EB}\u{4}" .
		    "\u{EC}\u{9}\u{EC}\u{4}\u{ED}\u{9}\u{ED}\u{4}\u{EE}\u{9}\u{EE}\u{4}" .
		    "\u{EF}\u{9}\u{EF}\u{4}\u{F0}\u{9}\u{F0}\u{4}\u{F1}\u{9}\u{F1}\u{4}" .
		    "\u{F2}\u{9}\u{F2}\u{4}\u{F3}\u{9}\u{F3}\u{4}\u{F4}\u{9}\u{F4}\u{4}" .
		    "\u{F5}\u{9}\u{F5}\u{4}\u{F6}\u{9}\u{F6}\u{4}\u{F7}\u{9}\u{F7}\u{4}" .
		    "\u{F8}\u{9}\u{F8}\u{4}\u{F9}\u{9}\u{F9}\u{4}\u{FA}\u{9}\u{FA}\u{4}" .
		    "\u{FB}\u{9}\u{FB}\u{4}\u{FC}\u{9}\u{FC}\u{4}\u{FD}\u{9}\u{FD}\u{4}" .
		    "\u{FE}\u{9}\u{FE}\u{4}\u{FF}\u{9}\u{FF}\u{4}\u{100}\u{9}\u{100}\u{4}" .
		    "\u{101}\u{9}\u{101}\u{4}\u{102}\u{9}\u{102}\u{4}\u{103}\u{9}\u{103}" .
		    "\u{4}\u{104}\u{9}\u{104}\u{4}\u{105}\u{9}\u{105}\u{4}\u{106}\u{9}" .
		    "\u{106}\u{4}\u{107}\u{9}\u{107}\u{4}\u{108}\u{9}\u{108}\u{4}\u{109}" .
		    "\u{9}\u{109}\u{4}\u{10A}\u{9}\u{10A}\u{4}\u{10B}\u{9}\u{10B}\u{4}" .
		    "\u{10C}\u{9}\u{10C}\u{4}\u{10D}\u{9}\u{10D}\u{4}\u{10E}\u{9}\u{10E}" .
		    "\u{4}\u{10F}\u{9}\u{10F}\u{4}\u{110}\u{9}\u{110}\u{4}\u{111}\u{9}" .
		    "\u{111}\u{4}\u{112}\u{9}\u{112}\u{4}\u{113}\u{9}\u{113}\u{4}\u{114}" .
		    "\u{9}\u{114}\u{4}\u{115}\u{9}\u{115}\u{4}\u{116}\u{9}\u{116}\u{4}" .
		    "\u{117}\u{9}\u{117}\u{4}\u{118}\u{9}\u{118}\u{4}\u{119}\u{9}\u{119}" .
		    "\u{4}\u{11A}\u{9}\u{11A}\u{4}\u{11B}\u{9}\u{11B}\u{4}\u{11C}\u{9}" .
		    "\u{11C}\u{4}\u{11D}\u{9}\u{11D}\u{4}\u{11E}\u{9}\u{11E}\u{4}\u{11F}" .
		    "\u{9}\u{11F}\u{4}\u{120}\u{9}\u{120}\u{4}\u{121}\u{9}\u{121}\u{4}" .
		    "\u{122}\u{9}\u{122}\u{4}\u{123}\u{9}\u{123}\u{4}\u{124}\u{9}\u{124}" .
		    "\u{4}\u{125}\u{9}\u{125}\u{4}\u{126}\u{9}\u{126}\u{4}\u{127}\u{9}" .
		    "\u{127}\u{4}\u{128}\u{9}\u{128}\u{4}\u{129}\u{9}\u{129}\u{4}\u{12A}" .
		    "\u{9}\u{12A}\u{4}\u{12B}\u{9}\u{12B}\u{4}\u{12C}\u{9}\u{12C}\u{4}" .
		    "\u{12D}\u{9}\u{12D}\u{4}\u{12E}\u{9}\u{12E}\u{4}\u{12F}\u{9}\u{12F}" .
		    "\u{4}\u{130}\u{9}\u{130}\u{4}\u{131}\u{9}\u{131}\u{4}\u{132}\u{9}" .
		    "\u{132}\u{4}\u{133}\u{9}\u{133}\u{4}\u{134}\u{9}\u{134}\u{4}\u{135}" .
		    "\u{9}\u{135}\u{4}\u{136}\u{9}\u{136}\u{4}\u{137}\u{9}\u{137}\u{4}" .
		    "\u{138}\u{9}\u{138}\u{4}\u{139}\u{9}\u{139}\u{4}\u{13A}\u{9}\u{13A}" .
		    "\u{4}\u{13B}\u{9}\u{13B}\u{4}\u{13C}\u{9}\u{13C}\u{4}\u{13D}\u{9}" .
		    "\u{13D}\u{4}\u{13E}\u{9}\u{13E}\u{4}\u{13F}\u{9}\u{13F}\u{4}\u{140}" .
		    "\u{9}\u{140}\u{3}\u{2}\u{5}\u{2}\u{282}\u{A}\u{2}\u{3}\u{2}\u{5}\u{2}" .
		    "\u{285}\u{A}\u{2}\u{3}\u{2}\u{3}\u{2}\u{3}\u{3}\u{3}\u{3}\u{5}\u{3}" .
		    "\u{28B}\u{A}\u{3}\u{3}\u{3}\u{5}\u{3}\u{28E}\u{A}\u{3}\u{3}\u{3}\u{7}" .
		    "\u{3}\u{291}\u{A}\u{3}\u{C}\u{3}\u{E}\u{3}\u{294}\u{B}\u{3}\u{3}\u{3}" .
		    "\u{3}\u{3}\u{5}\u{3}\u{298}\u{A}\u{3}\u{3}\u{3}\u{5}\u{3}\u{29B}\u{A}" .
		    "\u{3}\u{3}\u{3}\u{5}\u{3}\u{29E}\u{A}\u{3}\u{3}\u{4}\u{3}\u{4}\u{3}" .
		    "\u{4}\u{3}\u{4}\u{3}\u{4}\u{3}\u{4}\u{3}\u{4}\u{5}\u{4}\u{2A7}\u{A}" .
		    "\u{4}\u{3}\u{5}\u{3}\u{5}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}" .
		    "\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}" .
		    "\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}" .
		    "\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}" .
		    "\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}" .
		    "\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{5}\u{6}\u{2CE}" .
		    "\u{A}\u{6}\u{3}\u{7}\u{3}\u{7}\u{3}\u{7}\u{3}\u{7}\u{3}\u{7}\u{3}" .
		    "\u{7}\u{3}\u{7}\u{3}\u{7}\u{3}\u{7}\u{3}\u{7}\u{5}\u{7}\u{2DA}\u{A}" .
		    "\u{7}\u{3}\u{8}\u{3}\u{8}\u{3}\u{8}\u{3}\u{8}\u{3}\u{8}\u{3}\u{8}" .
		    "\u{3}\u{8}\u{3}\u{8}\u{3}\u{8}\u{5}\u{8}\u{2E5}\u{A}\u{8}\u{3}\u{9}" .
		    "\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}\u{3}" .
		    "\u{9}\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}" .
		    "\u{3}\u{9}\u{5}\u{9}\u{2F6}\u{A}\u{9}\u{3}\u{A}\u{3}\u{A}\u{3}\u{A}" .
		    "\u{5}\u{A}\u{2FB}\u{A}\u{A}\u{3}\u{B}\u{3}\u{B}\u{3}\u{B}\u{3}\u{B}" .
		    "\u{3}\u{B}\u{3}\u{B}\u{3}\u{B}\u{3}\u{B}\u{3}\u{B}\u{3}\u{B}\u{5}" .
		    "\u{B}\u{307}\u{A}\u{B}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}" .
		    "\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}" .
		    "\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}" .
		    "\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}" .
		    "\u{3}\u{C}\u{5}\u{C}\u{322}\u{A}\u{C}\u{3}\u{D}\u{3}\u{D}\u{3}\u{D}" .
		    "\u{3}\u{D}\u{3}\u{D}\u{3}\u{D}\u{3}\u{D}\u{5}\u{D}\u{32B}\u{A}\u{D}" .
		    "\u{3}\u{E}\u{3}\u{E}\u{3}\u{E}\u{5}\u{E}\u{330}\u{A}\u{E}\u{3}\u{E}" .
		    "\u{3}\u{E}\u{7}\u{E}\u{334}\u{A}\u{E}\u{C}\u{E}\u{E}\u{E}\u{337}\u{B}" .
		    "\u{E}\u{3}\u{F}\u{3}\u{F}\u{5}\u{F}\u{33B}\u{A}\u{F}\u{3}\u{F}\u{3}" .
		    "\u{F}\u{5}\u{F}\u{33F}\u{A}\u{F}\u{3}\u{F}\u{3}\u{F}\u{3}\u{F}\u{3}" .
		    "\u{F}\u{3}\u{F}\u{3}\u{F}\u{3}\u{F}\u{5}\u{F}\u{348}\u{A}\u{F}\u{3}" .
		    "\u{F}\u{5}\u{F}\u{34B}\u{A}\u{F}\u{3}\u{F}\u{5}\u{F}\u{34E}\u{A}\u{F}" .
		    "\u{3}\u{F}\u{3}\u{F}\u{5}\u{F}\u{352}\u{A}\u{F}\u{3}\u{F}\u{3}\u{F}" .
		    "\u{3}\u{F}\u{3}\u{10}\u{3}\u{10}\u{5}\u{10}\u{359}\u{A}\u{10}\u{3}" .
		    "\u{10}\u{5}\u{10}\u{35C}\u{A}\u{10}\u{3}\u{10}\u{3}\u{10}\u{3}\u{10}" .
		    "\u{5}\u{10}\u{361}\u{A}\u{10}\u{3}\u{10}\u{3}\u{10}\u{3}\u{10}\u{3}" .
		    "\u{10}\u{7}\u{10}\u{367}\u{A}\u{10}\u{C}\u{10}\u{E}\u{10}\u{36A}\u{B}" .
		    "\u{10}\u{3}\u{10}\u{3}\u{10}\u{5}\u{10}\u{36E}\u{A}\u{10}\u{3}\u{10}" .
		    "\u{3}\u{10}\u{3}\u{10}\u{5}\u{10}\u{373}\u{A}\u{10}\u{3}\u{10}\u{7}" .
		    "\u{10}\u{376}\u{A}\u{10}\u{C}\u{10}\u{E}\u{10}\u{379}\u{B}\u{10}\u{3}" .
		    "\u{11}\u{3}\u{11}\u{3}\u{11}\u{3}\u{11}\u{3}\u{11}\u{3}\u{11}\u{3}" .
		    "\u{11}\u{3}\u{11}\u{3}\u{11}\u{5}\u{11}\u{384}\u{A}\u{11}\u{3}\u{11}" .
		    "\u{5}\u{11}\u{387}\u{A}\u{11}\u{3}\u{11}\u{3}\u{11}\u{5}\u{11}\u{38B}" .
		    "\u{A}\u{11}\u{3}\u{11}\u{5}\u{11}\u{38E}\u{A}\u{11}\u{3}\u{11}\u{3}" .
		    "\u{11}\u{5}\u{11}\u{392}\u{A}\u{11}\u{3}\u{11}\u{5}\u{11}\u{395}\u{A}" .
		    "\u{11}\u{3}\u{11}\u{3}\u{11}\u{5}\u{11}\u{399}\u{A}\u{11}\u{3}\u{11}" .
		    "\u{5}\u{11}\u{39C}\u{A}\u{11}\u{3}\u{11}\u{5}\u{11}\u{39F}\u{A}\u{11}" .
		    "\u{3}\u{11}\u{3}\u{11}\u{5}\u{11}\u{3A3}\u{A}\u{11}\u{3}\u{11}\u{5}" .
		    "\u{11}\u{3A6}\u{A}\u{11}\u{3}\u{11}\u{3}\u{11}\u{5}\u{11}\u{3AA}\u{A}" .
		    "\u{11}\u{3}\u{11}\u{3}\u{11}\u{3}\u{12}\u{3}\u{12}\u{5}\u{12}\u{3B0}" .
		    "\u{A}\u{12}\u{3}\u{12}\u{3}\u{12}\u{3}\u{12}\u{3}\u{12}\u{5}\u{12}" .
		    "\u{3B6}\u{A}\u{12}\u{3}\u{12}\u{3}\u{12}\u{7}\u{12}\u{3BA}\u{A}\u{12}" .
		    "\u{C}\u{12}\u{E}\u{12}\u{3BD}\u{B}\u{12}\u{3}\u{12}\u{3}\u{12}\u{7}" .
		    "\u{12}\u{3C1}\u{A}\u{12}\u{C}\u{12}\u{E}\u{12}\u{3C4}\u{B}\u{12}\u{3}" .
		    "\u{12}\u{3}\u{12}\u{3}\u{13}\u{3}\u{13}\u{5}\u{13}\u{3CA}\u{A}\u{13}" .
		    "\u{3}\u{13}\u{3}\u{13}\u{3}\u{13}\u{3}\u{13}\u{5}\u{13}\u{3D0}\u{A}" .
		    "\u{13}\u{3}\u{13}\u{3}\u{13}\u{7}\u{13}\u{3D4}\u{A}\u{13}\u{C}\u{13}" .
		    "\u{E}\u{13}\u{3D7}\u{B}\u{13}\u{3}\u{13}\u{3}\u{13}\u{3}\u{13}\u{3}" .
		    "\u{13}\u{7}\u{13}\u{3DD}\u{A}\u{13}\u{C}\u{13}\u{E}\u{13}\u{3E0}\u{B}" .
		    "\u{13}\u{3}\u{13}\u{3}\u{13}\u{5}\u{13}\u{3E4}\u{A}\u{13}\u{3}\u{14}" .
		    "\u{3}\u{14}\u{3}\u{14}\u{3}\u{14}\u{3}\u{14}\u{3}\u{14}\u{3}\u{14}" .
		    "\u{3}\u{14}\u{3}\u{14}\u{3}\u{14}\u{3}\u{14}\u{3}\u{14}\u{7}\u{14}" .
		    "\u{3F2}\u{A}\u{14}\u{C}\u{14}\u{E}\u{14}\u{3F5}\u{B}\u{14}\u{3}\u{14}" .
		    "\u{3}\u{14}\u{3}\u{15}\u{3}\u{15}\u{5}\u{15}\u{3FB}\u{A}\u{15}\u{3}" .
		    "\u{15}\u{3}\u{15}\u{5}\u{15}\u{3FF}\u{A}\u{15}\u{3}\u{15}\u{3}\u{15}" .
		    "\u{3}\u{15}\u{3}\u{15}\u{3}\u{15}\u{3}\u{15}\u{3}\u{15}\u{3}\u{15}" .
		    "\u{5}\u{15}\u{409}\u{A}\u{15}\u{3}\u{15}\u{3}\u{15}\u{5}\u{15}\u{40D}" .
		    "\u{A}\u{15}\u{3}\u{15}\u{3}\u{15}\u{5}\u{15}\u{411}\u{A}\u{15}\u{3}" .
		    "\u{15}\u{3}\u{15}\u{5}\u{15}\u{415}\u{A}\u{15}\u{3}\u{15}\u{3}\u{15}" .
		    "\u{5}\u{15}\u{419}\u{A}\u{15}\u{3}\u{15}\u{7}\u{15}\u{41C}\u{A}\u{15}" .
		    "\u{C}\u{15}\u{E}\u{15}\u{41F}\u{B}\u{15}\u{5}\u{15}\u{421}\u{A}\u{15}" .
		    "\u{3}\u{15}\u{5}\u{15}\u{424}\u{A}\u{15}\u{3}\u{15}\u{5}\u{15}\u{427}" .
		    "\u{A}\u{15}\u{3}\u{15}\u{5}\u{15}\u{42A}\u{A}\u{15}\u{3}\u{15}\u{3}" .
		    "\u{15}\u{3}\u{15}\u{3}\u{15}\u{5}\u{15}\u{430}\u{A}\u{15}\u{3}\u{15}" .
		    "\u{3}\u{15}\u{5}\u{15}\u{434}\u{A}\u{15}\u{3}\u{15}\u{3}\u{15}\u{3}" .
		    "\u{15}\u{3}\u{15}\u{5}\u{15}\u{43A}\u{A}\u{15}\u{3}\u{15}\u{7}\u{15}" .
		    "\u{43D}\u{A}\u{15}\u{C}\u{15}\u{E}\u{15}\u{440}\u{B}\u{15}\u{5}\u{15}" .
		    "\u{442}\u{A}\u{15}\u{3}\u{15}\u{5}\u{15}\u{445}\u{A}\u{15}\u{5}\u{15}" .
		    "\u{447}\u{A}\u{15}\u{3}\u{16}\u{3}\u{16}\u{3}\u{16}\u{3}\u{16}\u{3}" .
		    "\u{16}\u{3}\u{16}\u{3}\u{16}\u{3}\u{16}\u{3}\u{16}\u{5}\u{16}\u{452}" .
		    "\u{A}\u{16}\u{3}\u{16}\u{3}\u{16}\u{5}\u{16}\u{456}\u{A}\u{16}\u{3}" .
		    "\u{16}\u{5}\u{16}\u{459}\u{A}\u{16}\u{3}\u{17}\u{3}\u{17}\u{3}\u{17}" .
		    "\u{3}\u{17}\u{3}\u{17}\u{3}\u{17}\u{3}\u{17}\u{3}\u{17}\u{3}\u{17}" .
		    "\u{3}\u{17}\u{3}\u{17}\u{3}\u{17}\u{5}\u{17}\u{467}\u{A}\u{17}\u{3}" .
		    "\u{17}\u{5}\u{17}\u{46A}\u{A}\u{17}\u{3}\u{17}\u{3}\u{17}\u{5}\u{17}" .
		    "\u{46E}\u{A}\u{17}\u{3}\u{17}\u{5}\u{17}\u{471}\u{A}\u{17}\u{3}\u{17}" .
		    "\u{3}\u{17}\u{5}\u{17}\u{475}\u{A}\u{17}\u{3}\u{17}\u{5}\u{17}\u{478}" .
		    "\u{A}\u{17}\u{3}\u{17}\u{3}\u{17}\u{5}\u{17}\u{47C}\u{A}\u{17}\u{3}" .
		    "\u{17}\u{5}\u{17}\u{47F}\u{A}\u{17}\u{3}\u{17}\u{3}\u{17}\u{5}\u{17}" .
		    "\u{483}\u{A}\u{17}\u{3}\u{17}\u{5}\u{17}\u{486}\u{A}\u{17}\u{3}\u{17}" .
		    "\u{5}\u{17}\u{489}\u{A}\u{17}\u{3}\u{17}\u{3}\u{17}\u{5}\u{17}\u{48D}" .
		    "\u{A}\u{17}\u{3}\u{17}\u{5}\u{17}\u{490}\u{A}\u{17}\u{3}\u{17}\u{3}" .
		    "\u{17}\u{5}\u{17}\u{494}\u{A}\u{17}\u{3}\u{17}\u{3}\u{17}\u{3}\u{18}" .
		    "\u{3}\u{18}\u{5}\u{18}\u{49A}\u{A}\u{18}\u{3}\u{18}\u{3}\u{18}\u{3}" .
		    "\u{18}\u{3}\u{18}\u{3}\u{18}\u{3}\u{18}\u{3}\u{18}\u{3}\u{18}\u{3}" .
		    "\u{18}\u{3}\u{18}\u{3}\u{18}\u{5}\u{18}\u{4A7}\u{A}\u{18}\u{3}\u{18}" .
		    "\u{3}\u{18}\u{3}\u{19}\u{3}\u{19}\u{3}\u{19}\u{5}\u{19}\u{4AE}\u{A}" .
		    "\u{19}\u{3}\u{19}\u{3}\u{19}\u{3}\u{19}\u{5}\u{19}\u{4B3}\u{A}\u{19}" .
		    "\u{3}\u{19}\u{5}\u{19}\u{4B6}\u{A}\u{19}\u{3}\u{19}\u{3}\u{19}\u{3}" .
		    "\u{19}\u{5}\u{19}\u{4BB}\u{A}\u{19}\u{3}\u{19}\u{3}\u{19}\u{3}\u{19}" .
		    "\u{3}\u{19}\u{3}\u{19}\u{3}\u{19}\u{5}\u{19}\u{4C3}\u{A}\u{19}\u{3}" .
		    "\u{19}\u{3}\u{19}\u{3}\u{19}\u{3}\u{19}\u{5}\u{19}\u{4C9}\u{A}\u{19}" .
		    "\u{3}\u{19}\u{3}\u{19}\u{5}\u{19}\u{4CD}\u{A}\u{19}\u{3}\u{1A}\u{5}" .
		    "\u{1A}\u{4D0}\u{A}\u{1A}\u{3}\u{1A}\u{3}\u{1A}\u{3}\u{1A}\u{5}\u{1A}" .
		    "\u{4D5}\u{A}\u{1A}\u{3}\u{1A}\u{5}\u{1A}\u{4D8}\u{A}\u{1A}\u{3}\u{1A}" .
		    "\u{3}\u{1A}\u{5}\u{1A}\u{4DC}\u{A}\u{1A}\u{3}\u{1A}\u{5}\u{1A}\u{4DF}" .
		    "\u{A}\u{1A}\u{3}\u{1A}\u{3}\u{1A}\u{5}\u{1A}\u{4E3}\u{A}\u{1A}\u{3}" .
		    "\u{1A}\u{5}\u{1A}\u{4E6}\u{A}\u{1A}\u{3}\u{1B}\u{3}\u{1B}\u{3}\u{1B}" .
		    "\u{3}\u{1B}\u{3}\u{1B}\u{3}\u{1B}\u{5}\u{1B}\u{4EE}\u{A}\u{1B}\u{5}" .
		    "\u{1B}\u{4F0}\u{A}\u{1B}\u{3}\u{1C}\u{3}\u{1C}\u{3}\u{1C}\u{7}\u{1C}" .
		    "\u{4F5}\u{A}\u{1C}\u{C}\u{1C}\u{E}\u{1C}\u{4F8}\u{B}\u{1C}\u{3}\u{1C}" .
		    "\u{3}\u{1C}\u{3}\u{1C}\u{5}\u{1C}\u{4FD}\u{A}\u{1C}\u{3}\u{1C}\u{3}" .
		    "\u{1C}\u{3}\u{1C}\u{3}\u{1C}\u{7}\u{1C}\u{503}\u{A}\u{1C}\u{C}\u{1C}" .
		    "\u{E}\u{1C}\u{506}\u{B}\u{1C}\u{5}\u{1C}\u{508}\u{A}\u{1C}\u{3}\u{1C}" .
		    "\u{3}\u{1C}\u{3}\u{1C}\u{7}\u{1C}\u{50D}\u{A}\u{1C}\u{C}\u{1C}\u{E}" .
		    "\u{1C}\u{510}\u{B}\u{1C}\u{5}\u{1C}\u{512}\u{A}\u{1C}\u{5}\u{1C}\u{514}" .
		    "\u{A}\u{1C}\u{3}\u{1D}\u{3}\u{1D}\u{3}\u{1D}\u{3}\u{1D}\u{5}\u{1D}" .
		    "\u{51A}\u{A}\u{1D}\u{3}\u{1E}\u{3}\u{1E}\u{3}\u{1E}\u{3}\u{1E}\u{5}" .
		    "\u{1E}\u{520}\u{A}\u{1E}\u{3}\u{1E}\u{3}\u{1E}\u{3}\u{1F}\u{3}\u{1F}" .
		    "\u{3}\u{1F}\u{3}\u{1F}\u{3}\u{1F}\u{3}\u{1F}\u{3}\u{1F}\u{3}\u{1F}" .
		    "\u{3}\u{1F}\u{3}\u{1F}\u{3}\u{1F}\u{3}\u{1F}\u{3}\u{1F}\u{5}\u{1F}" .
		    "\u{531}\u{A}\u{1F}\u{3}\u{20}\u{3}\u{20}\u{3}\u{20}\u{3}\u{20}\u{3}" .
		    "\u{20}\u{5}\u{20}\u{538}\u{A}\u{20}\u{3}\u{21}\u{3}\u{21}\u{3}\u{21}" .
		    "\u{3}\u{22}\u{3}\u{22}\u{5}\u{22}\u{53F}\u{A}\u{22}\u{3}\u{22}\u{3}" .
		    "\u{22}\u{3}\u{22}\u{3}\u{22}\u{3}\u{22}\u{3}\u{22}\u{3}\u{22}\u{3}" .
		    "\u{22}\u{3}\u{22}\u{5}\u{22}\u{54A}\u{A}\u{22}\u{3}\u{23}\u{5}\u{23}" .
		    "\u{54D}\u{A}\u{23}\u{3}\u{23}\u{3}\u{23}\u{3}\u{23}\u{3}\u{24}\u{3}" .
		    "\u{24}\u{3}\u{24}\u{3}\u{25}\u{3}\u{25}\u{3}\u{25}\u{3}\u{25}\u{3}" .
		    "\u{25}\u{5}\u{25}\u{55A}\u{A}\u{25}\u{3}\u{25}\u{3}\u{25}\u{3}\u{25}" .
		    "\u{3}\u{25}\u{3}\u{25}\u{3}\u{25}\u{3}\u{25}\u{3}\u{25}\u{3}\u{25}" .
		    "\u{3}\u{25}\u{3}\u{25}\u{5}\u{25}\u{567}\u{A}\u{25}\u{3}\u{25}\u{3}" .
		    "\u{25}\u{3}\u{25}\u{5}\u{25}\u{56C}\u{A}\u{25}\u{3}\u{26}\u{3}\u{26}" .
		    "\u{3}\u{26}\u{3}\u{26}\u{3}\u{26}\u{3}\u{26}\u{3}\u{26}\u{3}\u{26}" .
		    "\u{3}\u{26}\u{3}\u{26}\u{3}\u{26}\u{3}\u{26}\u{3}\u{26}\u{3}\u{26}" .
		    "\u{5}\u{26}\u{57C}\u{A}\u{26}\u{3}\u{27}\u{3}\u{27}\u{3}\u{27}\u{3}" .
		    "\u{27}\u{7}\u{27}\u{582}\u{A}\u{27}\u{C}\u{27}\u{E}\u{27}\u{585}\u{B}" .
		    "\u{27}\u{3}\u{27}\u{3}\u{27}\u{3}\u{28}\u{3}\u{28}\u{3}\u{28}\u{3}" .
		    "\u{28}\u{3}\u{28}\u{5}\u{28}\u{58E}\u{A}\u{28}\u{3}\u{29}\u{3}\u{29}" .
		    "\u{7}\u{29}\u{592}\u{A}\u{29}\u{C}\u{29}\u{E}\u{29}\u{595}\u{B}\u{29}" .
		    "\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}" .
		    "\u{3}\u{2A}\u{5}\u{2A}\u{59E}\u{A}\u{2A}\u{3}\u{2A}\u{5}\u{2A}\u{5A1}" .
		    "\u{A}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{5}\u{2A}\u{5A6}\u{A}" .
		    "\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}" .
		    "\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{5}" .
		    "\u{2A}\u{5B3}\u{A}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}" .
		    "\u{3}\u{2A}\u{5}\u{2A}\u{5BA}\u{A}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}" .
		    "\u{2A}\u{5}\u{2A}\u{5BF}\u{A}\u{2A}\u{3}\u{2B}\u{3}\u{2B}\u{5}\u{2B}" .
		    "\u{5C3}\u{A}\u{2B}\u{5}\u{2B}\u{5C5}\u{A}\u{2B}\u{3}\u{2B}\u{3}\u{2B}" .
		    "\u{3}\u{2B}\u{5}\u{2B}\u{5CA}\u{A}\u{2B}\u{3}\u{2B}\u{5}\u{2B}\u{5CD}" .
		    "\u{A}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{7}\u{2B}\u{5D1}\u{A}\u{2B}\u{C}" .
		    "\u{2B}\u{E}\u{2B}\u{5D4}\u{B}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{5}\u{2B}" .
		    "\u{5D8}\u{A}\u{2B}\u{5}\u{2B}\u{5DA}\u{A}\u{2B}\u{3}\u{2B}\u{3}\u{2B}" .
		    "\u{5}\u{2B}\u{5DE}\u{A}\u{2B}\u{3}\u{2B}\u{5}\u{2B}\u{5E1}\u{A}\u{2B}" .
		    "\u{3}\u{2B}\u{5}\u{2B}\u{5E4}\u{A}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{7}" .
		    "\u{2B}\u{5E8}\u{A}\u{2B}\u{C}\u{2B}\u{E}\u{2B}\u{5EB}\u{B}\u{2B}\u{3}" .
		    "\u{2B}\u{3}\u{2B}\u{5}\u{2B}\u{5EF}\u{A}\u{2B}\u{5}\u{2B}\u{5F1}\u{A}" .
		    "\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{5}\u{2B}\u{5F6}\u{A}\u{2B}" .
		    "\u{3}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{5}\u{2B}" .
		    "\u{5FD}\u{A}\u{2B}\u{5}\u{2B}\u{5FF}\u{A}\u{2B}\u{3}\u{2B}\u{3}\u{2B}" .
		    "\u{3}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{5}\u{2B}\u{606}\u{A}\u{2B}\u{3}" .
		    "\u{2C}\u{3}\u{2C}\u{3}\u{2C}\u{5}\u{2C}\u{60B}\u{A}\u{2C}\u{3}\u{2C}" .
		    "\u{3}\u{2C}\u{5}\u{2C}\u{60F}\u{A}\u{2C}\u{3}\u{2C}\u{5}\u{2C}\u{612}" .
		    "\u{A}\u{2C}\u{3}\u{2D}\u{3}\u{2D}\u{3}\u{2D}\u{3}\u{2D}\u{3}\u{2D}" .
		    "\u{3}\u{2D}\u{5}\u{2D}\u{61A}\u{A}\u{2D}\u{3}\u{2D}\u{3}\u{2D}\u{3}" .
		    "\u{2D}\u{3}\u{2D}\u{3}\u{2D}\u{3}\u{2D}\u{5}\u{2D}\u{622}\u{A}\u{2D}" .
		    "\u{5}\u{2D}\u{624}\u{A}\u{2D}\u{3}\u{2E}\u{3}\u{2E}\u{3}\u{2E}\u{3}" .
		    "\u{2E}\u{3}\u{2E}\u{3}\u{2E}\u{5}\u{2E}\u{62C}\u{A}\u{2E}\u{3}\u{2F}" .
		    "\u{3}\u{2F}\u{5}\u{2F}\u{630}\u{A}\u{2F}\u{3}\u{2F}\u{5}\u{2F}\u{633}" .
		    "\u{A}\u{2F}\u{3}\u{2F}\u{3}\u{2F}\u{7}\u{2F}\u{637}\u{A}\u{2F}\u{C}" .
		    "\u{2F}\u{E}\u{2F}\u{63A}\u{B}\u{2F}\u{3}\u{2F}\u{3}\u{2F}\u{5}\u{2F}" .
		    "\u{63E}\u{A}\u{2F}\u{3}\u{2F}\u{5}\u{2F}\u{641}\u{A}\u{2F}\u{3}\u{2F}" .
		    "\u{3}\u{2F}\u{7}\u{2F}\u{645}\u{A}\u{2F}\u{C}\u{2F}\u{E}\u{2F}\u{648}" .
		    "\u{B}\u{2F}\u{5}\u{2F}\u{64A}\u{A}\u{2F}\u{3}\u{30}\u{3}\u{30}\u{5}" .
		    "\u{30}\u{64E}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}" .
		    "\u{653}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{658}" .
		    "\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{65C}\u{A}\u{30}\u{3}" .
		    "\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{661}\u{A}\u{30}\u{3}\u{30}" .
		    "\u{5}\u{30}\u{664}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{668}" .
		    "\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{66C}\u{A}\u{30}\u{3}" .
		    "\u{30}\u{3}\u{30}\u{5}\u{30}\u{670}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}" .
		    "\u{5}\u{30}\u{674}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}" .
		    "\u{30}\u{679}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}" .
		    "\u{67E}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{683}" .
		    "\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}" .
		    "\u{689}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{68E}" .
		    "\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{693}\u{A}" .
		    "\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{699}" .
		    "\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{69E}\u{A}" .
		    "\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{6A3}\u{A}\u{30}" .
		    "\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{6A8}\u{A}\u{30}\u{3}" .
		    "\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{6AD}\u{A}\u{30}\u{3}\u{30}" .
		    "\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{6B2}\u{A}\u{30}\u{3}\u{30}\u{3}" .
		    "\u{30}\u{3}\u{30}\u{5}\u{30}\u{6B7}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}" .
		    "\u{3}\u{30}\u{5}\u{30}\u{6BC}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}" .
		    "\u{30}\u{5}\u{30}\u{6C1}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}" .
		    "\u{5}\u{30}\u{6C6}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}" .
		    "\u{30}\u{6CB}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}" .
		    "\u{5}\u{30}\u{6D1}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}" .
		    "\u{30}\u{6D6}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}" .
		    "\u{5}\u{30}\u{6DC}\u{A}\u{30}\u{3}\u{31}\u{3}\u{31}\u{3}\u{31}\u{3}" .
		    "\u{32}\u{3}\u{32}\u{3}\u{32}\u{3}\u{32}\u{3}\u{32}\u{5}\u{32}\u{6E6}" .
		    "\u{A}\u{32}\u{3}\u{32}\u{3}\u{32}\u{3}\u{32}\u{3}\u{32}\u{3}\u{32}" .
		    "\u{5}\u{32}\u{6ED}\u{A}\u{32}\u{5}\u{32}\u{6EF}\u{A}\u{32}\u{3}\u{32}" .
		    "\u{3}\u{32}\u{3}\u{32}\u{3}\u{32}\u{7}\u{32}\u{6F5}\u{A}\u{32}\u{C}" .
		    "\u{32}\u{E}\u{32}\u{6F8}\u{B}\u{32}\u{3}\u{32}\u{3}\u{32}\u{5}\u{32}" .
		    "\u{6FC}\u{A}\u{32}\u{3}\u{33}\u{5}\u{33}\u{6FF}\u{A}\u{33}\u{3}\u{33}" .
		    "\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{5}\u{33}" .
		    "\u{707}\u{A}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{5}" .
		    "\u{33}\u{70D}\u{A}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}" .
		    "\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}" .
		    "\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{5}\u{33}\u{71D}\u{A}" .
		    "\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}" .
		    "\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{5}\u{33}\u{729}" .
		    "\u{A}\u{33}\u{5}\u{33}\u{72B}\u{A}\u{33}\u{3}\u{34}\u{5}\u{34}\u{72E}" .
		    "\u{A}\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}" .
		    "\u{3}\u{34}\u{5}\u{34}\u{736}\u{A}\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}" .
		    "\u{34}\u{3}\u{34}\u{5}\u{34}\u{73C}\u{A}\u{34}\u{3}\u{34}\u{3}\u{34}" .
		    "\u{3}\u{34}\u{3}\u{34}\u{5}\u{34}\u{742}\u{A}\u{34}\u{3}\u{35}\u{3}" .
		    "\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}" .
		    "\u{35}\u{3}\u{35}\u{7}\u{35}\u{74D}\u{A}\u{35}\u{C}\u{35}\u{E}\u{35}" .
		    "\u{750}\u{B}\u{35}\u{3}\u{35}\u{3}\u{35}\u{7}\u{35}\u{754}\u{A}\u{35}" .
		    "\u{C}\u{35}\u{E}\u{35}\u{757}\u{B}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}" .
		    "\u{35}\u{7}\u{35}\u{75C}\u{A}\u{35}\u{C}\u{35}\u{E}\u{35}\u{75F}\u{B}" .
		    "\u{35}\u{5}\u{35}\u{761}\u{A}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}" .
		    "\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{7}\u{35}\u{76A}\u{A}" .
		    "\u{35}\u{C}\u{35}\u{E}\u{35}\u{76D}\u{B}\u{35}\u{3}\u{35}\u{3}\u{35}" .
		    "\u{3}\u{35}\u{7}\u{35}\u{772}\u{A}\u{35}\u{C}\u{35}\u{E}\u{35}\u{775}" .
		    "\u{B}\u{35}\u{5}\u{35}\u{777}\u{A}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}" .
		    "\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{7}" .
		    "\u{35}\u{781}\u{A}\u{35}\u{C}\u{35}\u{E}\u{35}\u{784}\u{B}\u{35}\u{3}" .
		    "\u{35}\u{3}\u{35}\u{7}\u{35}\u{788}\u{A}\u{35}\u{C}\u{35}\u{E}\u{35}" .
		    "\u{78B}\u{B}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{7}\u{35}\u{790}" .
		    "\u{A}\u{35}\u{C}\u{35}\u{E}\u{35}\u{793}\u{B}\u{35}\u{5}\u{35}\u{795}" .
		    "\u{A}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}" .
		    "\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{7}\u{35}\u{79F}\u{A}\u{35}\u{C}" .
		    "\u{35}\u{E}\u{35}\u{7A2}\u{B}\u{35}\u{3}\u{35}\u{3}\u{35}\u{7}\u{35}" .
		    "\u{7A6}\u{A}\u{35}\u{C}\u{35}\u{E}\u{35}\u{7A9}\u{B}\u{35}\u{3}\u{35}" .
		    "\u{3}\u{35}\u{3}\u{35}\u{7}\u{35}\u{7AE}\u{A}\u{35}\u{C}\u{35}\u{E}" .
		    "\u{35}\u{7B1}\u{B}\u{35}\u{5}\u{35}\u{7B3}\u{A}\u{35}\u{3}\u{35}\u{3}" .
		    "\u{35}\u{3}\u{35}\u{7}\u{35}\u{7B8}\u{A}\u{35}\u{C}\u{35}\u{E}\u{35}" .
		    "\u{7BB}\u{B}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{7}\u{35}\u{7C0}" .
		    "\u{A}\u{35}\u{C}\u{35}\u{E}\u{35}\u{7C3}\u{B}\u{35}\u{5}\u{35}\u{7C5}" .
		    "\u{A}\u{35}\u{5}\u{35}\u{7C7}\u{A}\u{35}\u{3}\u{36}\u{3}\u{36}\u{3}" .
		    "\u{36}\u{5}\u{36}\u{7CC}\u{A}\u{36}\u{3}\u{37}\u{3}\u{37}\u{3}\u{37}" .
		    "\u{3}\u{37}\u{6}\u{37}\u{7D2}\u{A}\u{37}\u{D}\u{37}\u{E}\u{37}\u{7D3}" .
		    "\u{3}\u{37}\u{3}\u{37}\u{3}\u{38}\u{3}\u{38}\u{3}\u{38}\u{7}\u{38}" .
		    "\u{7DB}\u{A}\u{38}\u{C}\u{38}\u{E}\u{38}\u{7DE}\u{B}\u{38}\u{3}\u{39}" .
		    "\u{5}\u{39}\u{7E1}\u{A}\u{39}\u{3}\u{39}\u{3}\u{39}\u{5}\u{39}\u{7E5}" .
		    "\u{A}\u{39}\u{3}\u{39}\u{3}\u{39}\u{3}\u{39}\u{5}\u{39}\u{7EA}\u{A}" .
		    "\u{39}\u{3}\u{39}\u{3}\u{39}\u{3}\u{39}\u{3}\u{39}\u{5}\u{39}\u{7F0}" .
		    "\u{A}\u{39}\u{3}\u{39}\u{3}\u{39}\u{3}\u{39}\u{3}\u{39}\u{5}\u{39}" .
		    "\u{7F6}\u{A}\u{39}\u{3}\u{39}\u{3}\u{39}\u{3}\u{39}\u{5}\u{39}\u{7FB}" .
		    "\u{A}\u{39}\u{3}\u{39}\u{3}\u{39}\u{3}\u{39}\u{5}\u{39}\u{800}\u{A}" .
		    "\u{39}\u{3}\u{39}\u{3}\u{39}\u{3}\u{39}\u{5}\u{39}\u{805}\u{A}\u{39}" .
		    "\u{3}\u{39}\u{3}\u{39}\u{3}\u{39}\u{5}\u{39}\u{80A}\u{A}\u{39}\u{3}" .
		    "\u{39}\u{5}\u{39}\u{80D}\u{A}\u{39}\u{3}\u{3A}\u{3}\u{3A}\u{3}\u{3A}" .
		    "\u{5}\u{3A}\u{812}\u{A}\u{3A}\u{3}\u{3A}\u{6}\u{3A}\u{815}\u{A}\u{3A}" .
		    "\u{D}\u{3A}\u{E}\u{3A}\u{816}\u{3}\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{3}" .
		    "\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{5}\u{3A}\u{821}" .
		    "\u{A}\u{3A}\u{3}\u{3B}\u{3}\u{3B}\u{5}\u{3B}\u{825}\u{A}\u{3B}\u{3}" .
		    "\u{3B}\u{3}\u{3B}\u{3}\u{3B}\u{3}\u{3B}\u{3}\u{3B}\u{5}\u{3B}\u{82C}" .
		    "\u{A}\u{3B}\u{3}\u{3B}\u{3}\u{3B}\u{3}\u{3B}\u{5}\u{3B}\u{831}\u{A}" .
		    "\u{3B}\u{3}\u{3B}\u{5}\u{3B}\u{834}\u{A}\u{3B}\u{3}\u{3B}\u{3}\u{3B}" .
		    "\u{3}\u{3B}\u{5}\u{3B}\u{839}\u{A}\u{3B}\u{3}\u{3B}\u{5}\u{3B}\u{83C}" .
		    "\u{A}\u{3B}\u{3}\u{3B}\u{3}\u{3B}\u{5}\u{3B}\u{840}\u{A}\u{3B}\u{3}" .
		    "\u{3B}\u{3}\u{3B}\u{5}\u{3B}\u{844}\u{A}\u{3B}\u{3}\u{3C}\u{3}\u{3C}" .
		    "\u{3}\u{3C}\u{3}\u{3C}\u{7}\u{3C}\u{84A}\u{A}\u{3C}\u{C}\u{3C}\u{E}" .
		    "\u{3C}\u{84D}\u{B}\u{3C}\u{3}\u{3D}\u{3}\u{3D}\u{3}\u{3D}\u{3}\u{3D}" .
		    "\u{3}\u{3D}\u{3}\u{3D}\u{3}\u{3D}\u{3}\u{3E}\u{3}\u{3E}\u{3}\u{3E}" .
		    "\u{3}\u{3E}\u{3}\u{3E}\u{3}\u{3E}\u{3}\u{3E}\u{3}\u{3E}\u{3}\u{3E}" .
		    "\u{5}\u{3E}\u{85F}\u{A}\u{3E}\u{3}\u{3E}\u{5}\u{3E}\u{862}\u{A}\u{3E}" .
		    "\u{3}\u{3E}\u{5}\u{3E}\u{865}\u{A}\u{3E}\u{3}\u{3E}\u{3}\u{3E}\u{5}" .
		    "\u{3E}\u{869}\u{A}\u{3E}\u{3}\u{3E}\u{3}\u{3E}\u{3}\u{3F}\u{3}\u{3F}" .
		    "\u{3}\u{3F}\u{3}\u{3F}\u{7}\u{3F}\u{871}\u{A}\u{3F}\u{C}\u{3F}\u{E}" .
		    "\u{3F}\u{874}\u{B}\u{3F}\u{3}\u{40}\u{3}\u{40}\u{3}\u{40}\u{3}\u{40}" .
		    "\u{3}\u{40}\u{3}\u{40}\u{3}\u{40}\u{3}\u{40}\u{7}\u{40}\u{87E}\u{A}" .
		    "\u{40}\u{C}\u{40}\u{E}\u{40}\u{881}\u{B}\u{40}\u{3}\u{40}\u{3}\u{40}" .
		    "\u{3}\u{41}\u{3}\u{41}\u{5}\u{41}\u{887}\u{A}\u{41}\u{3}\u{41}\u{5}" .
		    "\u{41}\u{88A}\u{A}\u{41}\u{3}\u{41}\u{3}\u{41}\u{3}\u{41}\u{3}\u{41}" .
		    "\u{3}\u{41}\u{7}\u{41}\u{891}\u{A}\u{41}\u{C}\u{41}\u{E}\u{41}\u{894}" .
		    "\u{B}\u{41}\u{5}\u{41}\u{896}\u{A}\u{41}\u{3}\u{41}\u{5}\u{41}\u{899}" .
		    "\u{A}\u{41}\u{3}\u{42}\u{3}\u{42}\u{3}\u{42}\u{3}\u{42}\u{3}\u{42}" .
		    "\u{3}\u{42}\u{3}\u{42}\u{3}\u{42}\u{3}\u{42}\u{5}\u{42}\u{8A4}\u{A}" .
		    "\u{42}\u{3}\u{42}\u{5}\u{42}\u{8A7}\u{A}\u{42}\u{3}\u{42}\u{3}\u{42}" .
		    "\u{5}\u{42}\u{8AB}\u{A}\u{42}\u{3}\u{42}\u{3}\u{42}\u{3}\u{43}\u{3}" .
		    "\u{43}\u{3}\u{43}\u{3}\u{43}\u{5}\u{43}\u{8B3}\u{A}\u{43}\u{3}\u{43}" .
		    "\u{5}\u{43}\u{8B6}\u{A}\u{43}\u{3}\u{43}\u{3}\u{43}\u{3}\u{43}\u{5}" .
		    "\u{43}\u{8BB}\u{A}\u{43}\u{3}\u{43}\u{3}\u{43}\u{3}\u{43}\u{3}\u{43}" .
		    "\u{3}\u{43}\u{3}\u{43}\u{5}\u{43}\u{8C3}\u{A}\u{43}\u{3}\u{43}\u{3}" .
		    "\u{43}\u{3}\u{43}\u{3}\u{43}\u{5}\u{43}\u{8C9}\u{A}\u{43}\u{3}\u{43}" .
		    "\u{3}\u{43}\u{5}\u{43}\u{8CD}\u{A}\u{43}\u{3}\u{44}\u{3}\u{44}\u{5}" .
		    "\u{44}\u{8D1}\u{A}\u{44}\u{3}\u{44}\u{7}\u{44}\u{8D4}\u{A}\u{44}\u{C}" .
		    "\u{44}\u{E}\u{44}\u{8D7}\u{B}\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}" .
		    "\u{8DB}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{5}\u{44}\u{8E2}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}" .
		    "\u{8E6}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{7}\u{44}\u{8EF}\u{A}\u{44}\u{C}\u{44}" .
		    "\u{E}\u{44}\u{8F2}\u{B}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{5}\u{44}\u{8F9}\u{A}\u{44}\u{3}\u{44}\u{5}\u{44}" .
		    "\u{8FC}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{7}\u{44}\u{900}\u{A}\u{44}" .
		    "\u{C}\u{44}\u{E}\u{44}\u{903}\u{B}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{5}\u{44}\u{908}\u{A}\u{44}\u{5}\u{44}\u{90A}\u{A}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{90F}\u{A}\u{44}\u{3}\u{44}" .
		    "\u{5}\u{44}\u{912}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{7}\u{44}\u{916}" .
		    "\u{A}\u{44}\u{C}\u{44}\u{E}\u{44}\u{919}\u{B}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{5}\u{44}\u{91E}\u{A}\u{44}\u{5}\u{44}\u{920}\u{A}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{924}\u{A}\u{44}\u{3}\u{44}" .
		    "\u{5}\u{44}\u{927}\u{A}\u{44}\u{3}\u{44}\u{5}\u{44}\u{92A}\u{A}\u{44}" .
		    "\u{3}\u{44}\u{3}\u{44}\u{7}\u{44}\u{92E}\u{A}\u{44}\u{C}\u{44}\u{E}" .
		    "\u{44}\u{931}\u{B}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}" .
		    "\u{936}\u{A}\u{44}\u{3}\u{44}\u{5}\u{44}\u{939}\u{A}\u{44}\u{3}\u{44}" .
		    "\u{3}\u{44}\u{7}\u{44}\u{93D}\u{A}\u{44}\u{C}\u{44}\u{E}\u{44}\u{940}" .
		    "\u{B}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{945}\u{A}" .
		    "\u{44}\u{5}\u{44}\u{947}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}" .
		    "\u{5}\u{44}\u{94C}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{954}\u{A}\u{44}\u{5}\u{44}" .
		    "\u{956}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{95F}\u{A}\u{44}\u{3}\u{44}" .
		    "\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{964}\u{A}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{96C}" .
		    "\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{970}\u{A}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}" .
		    "\u{44}\u{978}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}" .
		    "\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{982}\u{A}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{987}\u{A}\u{44}" .
		    "\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}" .
		    "\u{98E}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{992}\u{A}\u{44}" .
		    "\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{996}\u{A}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{9AE}\u{A}\u{44}\u{3}\u{44}" .
		    "\u{3}\u{44}\u{5}\u{44}\u{9B2}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{5}\u{44}\u{9BE}\u{A}\u{44}\u{3}\u{44}\u{5}\u{44}" .
		    "\u{9C1}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{9CA}\u{A}\u{44}\u{3}\u{44}" .
		    "\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}" .
		    "\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}" .
		    "\u{7}\u{44}\u{9D9}\u{A}\u{44}\u{C}\u{44}\u{E}\u{44}\u{9DC}\u{B}\u{44}" .
		    "\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}" .
		    "\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{9E7}\u{A}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{9EE}" .
		    "\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}" .
		    "\u{5}\u{44}\u{9F5}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{7}\u{44}\u{A02}\u{A}\u{44}\u{C}\u{44}\u{E}\u{44}" .
		    "\u{A05}\u{B}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}" .
		    "\u{44}\u{A11}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}" .
		    "\u{5}\u{44}\u{A17}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{5}\u{44}\u{A1D}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}" .
		    "\u{3}\u{44}\u{5}\u{44}\u{A23}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{5}\u{44}\u{A29}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}" .
		    "\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{A2F}\u{A}\u{44}\u{3}\u{44}\u{3}" .
		    "\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{A35}\u{A}\u{44}\u{3}\u{45}" .
		    "\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{A3A}\u{A}\u{45}\u{3}\u{45}\u{3}" .
		    "\u{45}\u{3}\u{46}\u{3}\u{46}\u{3}\u{46}\u{5}\u{46}\u{A41}\u{A}\u{46}" .
		    "\u{3}\u{46}\u{3}\u{46}\u{3}\u{47}\u{3}\u{47}\u{3}\u{47}\u{5}\u{47}" .
		    "\u{A48}\u{A}\u{47}\u{3}\u{47}\u{3}\u{47}\u{3}\u{47}\u{3}\u{47}\u{3}" .
		    "\u{47}\u{5}\u{47}\u{A4F}\u{A}\u{47}\u{3}\u{47}\u{3}\u{47}\u{3}\u{47}" .
		    "\u{5}\u{47}\u{A54}\u{A}\u{47}\u{3}\u{47}\u{7}\u{47}\u{A57}\u{A}\u{47}" .
		    "\u{C}\u{47}\u{E}\u{47}\u{A5A}\u{B}\u{47}\u{3}\u{48}\u{3}\u{48}\u{3}" .
		    "\u{48}\u{3}\u{48}\u{3}\u{48}\u{3}\u{48}\u{3}\u{48}\u{3}\u{48}\u{3}" .
		    "\u{49}\u{3}\u{49}\u{3}\u{49}\u{5}\u{49}\u{A67}\u{A}\u{49}\u{3}\u{49}" .
		    "\u{3}\u{49}\u{3}\u{4A}\u{3}\u{4A}\u{3}\u{4A}\u{5}\u{4A}\u{A6E}\u{A}" .
		    "\u{4A}\u{3}\u{4A}\u{3}\u{4A}\u{3}\u{4B}\u{3}\u{4B}\u{3}\u{4B}\u{5}" .
		    "\u{4B}\u{A75}\u{A}\u{4B}\u{3}\u{4B}\u{3}\u{4B}\u{3}\u{4C}\u{3}\u{4C}" .
		    "\u{5}\u{4C}\u{A7B}\u{A}\u{4C}\u{3}\u{4C}\u{3}\u{4C}\u{5}\u{4C}\u{A7F}" .
		    "\u{A}\u{4C}\u{3}\u{4C}\u{3}\u{4C}\u{5}\u{4C}\u{A83}\u{A}\u{4C}\u{3}" .
		    "\u{4D}\u{3}\u{4D}\u{3}\u{4D}\u{3}\u{4D}\u{3}\u{4D}\u{5}\u{4D}\u{A8A}" .
		    "\u{A}\u{4D}\u{3}\u{4D}\u{5}\u{4D}\u{A8D}\u{A}\u{4D}\u{3}\u{4E}\u{3}" .
		    "\u{4E}\u{3}\u{4E}\u{5}\u{4E}\u{A92}\u{A}\u{4E}\u{3}\u{4E}\u{3}\u{4E}" .
		    "\u{3}\u{4F}\u{3}\u{4F}\u{3}\u{4F}\u{5}\u{4F}\u{A99}\u{A}\u{4F}\u{3}" .
		    "\u{4F}\u{3}\u{4F}\u{3}\u{4F}\u{7}\u{4F}\u{A9E}\u{A}\u{4F}\u{C}\u{4F}" .
		    "\u{E}\u{4F}\u{AA1}\u{B}\u{4F}\u{3}\u{4F}\u{5}\u{4F}\u{AA4}\u{A}\u{4F}" .
		    "\u{3}\u{50}\u{3}\u{50}\u{3}\u{50}\u{3}\u{50}\u{3}\u{50}\u{7}\u{50}" .
		    "\u{AAB}\u{A}\u{50}\u{C}\u{50}\u{E}\u{50}\u{AAE}\u{B}\u{50}\u{3}\u{51}" .
		    "\u{3}\u{51}\u{3}\u{51}\u{3}\u{51}\u{3}\u{52}\u{3}\u{52}\u{5}\u{52}" .
		    "\u{AB6}\u{A}\u{52}\u{3}\u{52}\u{3}\u{52}\u{3}\u{53}\u{3}\u{53}\u{3}" .
		    "\u{53}\u{3}\u{53}\u{3}\u{53}\u{5}\u{53}\u{ABF}\u{A}\u{53}\u{3}\u{53}" .
		    "\u{5}\u{53}\u{AC2}\u{A}\u{53}\u{3}\u{54}\u{3}\u{54}\u{5}\u{54}\u{AC6}" .
		    "\u{A}\u{54}\u{3}\u{55}\u{3}\u{55}\u{3}\u{55}\u{3}\u{56}\u{3}\u{56}" .
		    "\u{3}\u{56}\u{3}\u{56}\u{5}\u{56}\u{ACF}\u{A}\u{56}\u{3}\u{57}\u{3}" .
		    "\u{57}\u{5}\u{57}\u{AD3}\u{A}\u{57}\u{3}\u{57}\u{5}\u{57}\u{AD6}\u{A}" .
		    "\u{57}\u{3}\u{57}\u{5}\u{57}\u{AD9}\u{A}\u{57}\u{3}\u{57}\u{3}\u{57}" .
		    "\u{3}\u{57}\u{3}\u{57}\u{5}\u{57}\u{ADF}\u{A}\u{57}\u{3}\u{57}\u{5}" .
		    "\u{57}\u{AE2}\u{A}\u{57}\u{3}\u{57}\u{3}\u{57}\u{3}\u{57}\u{3}\u{57}" .
		    "\u{5}\u{57}\u{AE8}\u{A}\u{57}\u{3}\u{57}\u{3}\u{57}\u{3}\u{57}\u{3}" .
		    "\u{57}\u{3}\u{57}\u{7}\u{57}\u{AEF}\u{A}\u{57}\u{C}\u{57}\u{E}\u{57}" .
		    "\u{AF2}\u{B}\u{57}\u{5}\u{57}\u{AF4}\u{A}\u{57}\u{3}\u{57}\u{3}\u{57}" .
		    "\u{3}\u{57}\u{3}\u{57}\u{3}\u{57}\u{3}\u{57}\u{3}\u{57}\u{7}\u{57}" .
		    "\u{AFD}\u{A}\u{57}\u{C}\u{57}\u{E}\u{57}\u{B00}\u{B}\u{57}\u{5}\u{57}" .
		    "\u{B02}\u{A}\u{57}\u{3}\u{58}\u{3}\u{58}\u{3}\u{58}\u{5}\u{58}\u{B07}" .
		    "\u{A}\u{58}\u{3}\u{58}\u{5}\u{58}\u{B0A}\u{A}\u{58}\u{3}\u{58}\u{3}" .
		    "\u{58}\u{3}\u{58}\u{5}\u{58}\u{B0F}\u{A}\u{58}\u{3}\u{58}\u{3}\u{58}" .
		    "\u{3}\u{58}\u{3}\u{58}\u{3}\u{58}\u{3}\u{58}\u{3}\u{58}\u{3}\u{58}" .
		    "\u{5}\u{58}\u{B19}\u{A}\u{58}\u{3}\u{58}\u{3}\u{58}\u{3}\u{58}\u{5}" .
		    "\u{58}\u{B1E}\u{A}\u{58}\u{3}\u{58}\u{3}\u{58}\u{6}\u{58}\u{B22}\u{A}" .
		    "\u{58}\u{D}\u{58}\u{E}\u{58}\u{B23}\u{5}\u{58}\u{B26}\u{A}\u{58}\u{3}" .
		    "\u{58}\u{3}\u{58}\u{6}\u{58}\u{B2A}\u{A}\u{58}\u{D}\u{58}\u{E}\u{58}" .
		    "\u{B2B}\u{5}\u{58}\u{B2E}\u{A}\u{58}\u{3}\u{58}\u{3}\u{58}\u{3}\u{58}" .
		    "\u{3}\u{58}\u{5}\u{58}\u{B34}\u{A}\u{58}\u{3}\u{58}\u{3}\u{58}\u{3}" .
		    "\u{58}\u{3}\u{58}\u{7}\u{58}\u{B3A}\u{A}\u{58}\u{C}\u{58}\u{E}\u{58}" .
		    "\u{B3D}\u{B}\u{58}\u{3}\u{58}\u{3}\u{58}\u{5}\u{58}\u{B41}\u{A}\u{58}" .
		    "\u{3}\u{58}\u{3}\u{58}\u{3}\u{58}\u{3}\u{58}\u{7}\u{58}\u{B47}\u{A}" .
		    "\u{58}\u{C}\u{58}\u{E}\u{58}\u{B4A}\u{B}\u{58}\u{5}\u{58}\u{B4C}\u{A}" .
		    "\u{58}\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}\u{5}\u{59}\u{B51}\u{A}\u{59}" .
		    "\u{3}\u{59}\u{5}\u{59}\u{B54}\u{A}\u{59}\u{3}\u{59}\u{3}\u{59}\u{3}" .
		    "\u{59}\u{5}\u{59}\u{B59}\u{A}\u{59}\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}" .
		    "\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}\u{5}\u{59}\u{B61}\u{A}\u{59}\u{3}" .
		    "\u{59}\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}\u{5}" .
		    "\u{59}\u{B69}\u{A}\u{59}\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}" .
		    "\u{5}\u{59}\u{B6F}\u{A}\u{59}\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}\u{3}" .
		    "\u{59}\u{7}\u{59}\u{B75}\u{A}\u{59}\u{C}\u{59}\u{E}\u{59}\u{B78}\u{B}" .
		    "\u{59}\u{3}\u{59}\u{3}\u{59}\u{5}\u{59}\u{B7C}\u{A}\u{59}\u{3}\u{59}" .
		    "\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}\u{7}\u{59}\u{B82}\u{A}\u{59}\u{C}" .
		    "\u{59}\u{E}\u{59}\u{B85}\u{B}\u{59}\u{5}\u{59}\u{B87}\u{A}\u{59}\u{3}" .
		    "\u{5A}\u{3}\u{5A}\u{5}\u{5A}\u{B8B}\u{A}\u{5A}\u{3}\u{5A}\u{5}\u{5A}" .
		    "\u{B8E}\u{A}\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{3}" .
		    "\u{5A}\u{3}\u{5A}\u{5}\u{5A}\u{B96}\u{A}\u{5A}\u{3}\u{5A}\u{3}\u{5A}" .
		    "\u{3}\u{5A}\u{3}\u{5A}\u{5}\u{5A}\u{B9C}\u{A}\u{5A}\u{3}\u{5A}\u{3}" .
		    "\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{7}\u{5A}\u{BA3}\u{A}\u{5A}" .
		    "\u{C}\u{5A}\u{E}\u{5A}\u{BA6}\u{B}\u{5A}\u{5}\u{5A}\u{BA8}\u{A}\u{5A}" .
		    "\u{3}\u{5B}\u{3}\u{5B}\u{5}\u{5B}\u{BAC}\u{A}\u{5B}\u{3}\u{5B}\u{3}" .
		    "\u{5B}\u{5}\u{5B}\u{BB0}\u{A}\u{5B}\u{3}\u{5B}\u{3}\u{5B}\u{6}\u{5B}" .
		    "\u{BB4}\u{A}\u{5B}\u{D}\u{5B}\u{E}\u{5B}\u{BB5}\u{3}\u{5B}\u{3}\u{5B}" .
		    "\u{5}\u{5B}\u{BBA}\u{A}\u{5B}\u{3}\u{5B}\u{3}\u{5B}\u{5}\u{5B}\u{BBE}" .
		    "\u{A}\u{5B}\u{5}\u{5B}\u{BC0}\u{A}\u{5B}\u{3}\u{5B}\u{5}\u{5B}\u{BC3}" .
		    "\u{A}\u{5B}\u{3}\u{5B}\u{5}\u{5B}\u{BC6}\u{A}\u{5B}\u{3}\u{5B}\u{5}" .
		    "\u{5B}\u{BC9}\u{A}\u{5B}\u{3}\u{5B}\u{3}\u{5B}\u{6}\u{5B}\u{BCD}\u{A}" .
		    "\u{5B}\u{D}\u{5B}\u{E}\u{5B}\u{BCE}\u{3}\u{5B}\u{3}\u{5B}\u{5}\u{5B}" .
		    "\u{BD3}\u{A}\u{5B}\u{3}\u{5B}\u{5}\u{5B}\u{BD6}\u{A}\u{5B}\u{3}\u{5B}" .
		    "\u{5}\u{5B}\u{BD9}\u{A}\u{5B}\u{3}\u{5B}\u{5}\u{5B}\u{BDC}\u{A}\u{5B}" .
		    "\u{3}\u{5B}\u{5}\u{5B}\u{BDF}\u{A}\u{5B}\u{5}\u{5B}\u{BE1}\u{A}\u{5B}" .
		    "\u{3}\u{5C}\u{3}\u{5C}\u{5}\u{5C}\u{BE5}\u{A}\u{5C}\u{3}\u{5D}\u{3}" .
		    "\u{5D}\u{3}\u{5D}\u{3}\u{5D}\u{5}\u{5D}\u{BEB}\u{A}\u{5D}\u{3}\u{5D}" .
		    "\u{3}\u{5D}\u{3}\u{5D}\u{3}\u{5D}\u{5}\u{5D}\u{BF1}\u{A}\u{5D}\u{3}" .
		    "\u{5D}\u{7}\u{5D}\u{BF4}\u{A}\u{5D}\u{C}\u{5D}\u{E}\u{5D}\u{BF7}\u{B}" .
		    "\u{5D}\u{5}\u{5D}\u{BF9}\u{A}\u{5D}\u{3}\u{5E}\u{3}\u{5E}\u{3}\u{5E}" .
		    "\u{3}\u{5E}\u{5}\u{5E}\u{BFF}\u{A}\u{5E}\u{3}\u{5F}\u{3}\u{5F}\u{5}" .
		    "\u{5F}\u{C03}\u{A}\u{5F}\u{3}\u{60}\u{3}\u{60}\u{3}\u{60}\u{3}\u{60}" .
		    "\u{3}\u{60}\u{3}\u{60}\u{5}\u{60}\u{C0B}\u{A}\u{60}\u{3}\u{61}\u{3}" .
		    "\u{61}\u{5}\u{61}\u{C0F}\u{A}\u{61}\u{3}\u{61}\u{5}\u{61}\u{C12}\u{A}" .
		    "\u{61}\u{3}\u{61}\u{5}\u{61}\u{C15}\u{A}\u{61}\u{3}\u{61}\u{3}\u{61}" .
		    "\u{3}\u{61}\u{3}\u{61}\u{3}\u{61}\u{3}\u{61}\u{3}\u{61}\u{5}\u{61}" .
		    "\u{C1E}\u{A}\u{61}\u{3}\u{61}\u{3}\u{61}\u{5}\u{61}\u{C22}\u{A}\u{61}" .
		    "\u{3}\u{61}\u{5}\u{61}\u{C25}\u{A}\u{61}\u{3}\u{61}\u{3}\u{61}\u{5}" .
		    "\u{61}\u{C29}\u{A}\u{61}\u{3}\u{62}\u{3}\u{62}\u{5}\u{62}\u{C2D}\u{A}" .
		    "\u{62}\u{3}\u{62}\u{5}\u{62}\u{C30}\u{A}\u{62}\u{3}\u{62}\u{5}\u{62}" .
		    "\u{C33}\u{A}\u{62}\u{3}\u{62}\u{3}\u{62}\u{3}\u{62}\u{5}\u{62}\u{C38}" .
		    "\u{A}\u{62}\u{3}\u{62}\u{3}\u{62}\u{3}\u{62}\u{3}\u{62}\u{5}\u{62}" .
		    "\u{C3E}\u{A}\u{62}\u{7}\u{62}\u{C40}\u{A}\u{62}\u{C}\u{62}\u{E}\u{62}" .
		    "\u{C43}\u{B}\u{62}\u{3}\u{62}\u{3}\u{62}\u{3}\u{62}\u{3}\u{62}\u{3}" .
		    "\u{62}\u{3}\u{62}\u{3}\u{62}\u{5}\u{62}\u{C4C}\u{A}\u{62}\u{3}\u{62}" .
		    "\u{3}\u{62}\u{3}\u{62}\u{3}\u{62}\u{5}\u{62}\u{C52}\u{A}\u{62}\u{7}" .
		    "\u{62}\u{C54}\u{A}\u{62}\u{C}\u{62}\u{E}\u{62}\u{C57}\u{B}\u{62}\u{3}" .
		    "\u{62}\u{3}\u{62}\u{3}\u{62}\u{5}\u{62}\u{C5C}\u{A}\u{62}\u{3}\u{62}" .
		    "\u{3}\u{62}\u{5}\u{62}\u{C60}\u{A}\u{62}\u{3}\u{63}\u{3}\u{63}\u{3}" .
		    "\u{63}\u{3}\u{63}\u{5}\u{63}\u{C66}\u{A}\u{63}\u{3}\u{63}\u{5}\u{63}" .
		    "\u{C69}\u{A}\u{63}\u{3}\u{64}\u{3}\u{64}\u{3}\u{64}\u{3}\u{64}\u{3}" .
		    "\u{64}\u{3}\u{64}\u{3}\u{64}\u{3}\u{64}\u{3}\u{64}\u{3}\u{64}\u{5}" .
		    "\u{64}\u{C75}\u{A}\u{64}\u{3}\u{64}\u{3}\u{64}\u{5}\u{64}\u{C79}\u{A}" .
		    "\u{64}\u{3}\u{64}\u{3}\u{64}\u{5}\u{64}\u{C7D}\u{A}\u{64}\u{3}\u{65}" .
		    "\u{3}\u{65}\u{3}\u{65}\u{3}\u{65}\u{3}\u{65}\u{3}\u{65}\u{5}\u{65}" .
		    "\u{C85}\u{A}\u{65}\u{3}\u{65}\u{3}\u{65}\u{5}\u{65}\u{C89}\u{A}\u{65}" .
		    "\u{3}\u{66}\u{3}\u{66}\u{3}\u{66}\u{3}\u{66}\u{3}\u{67}\u{3}\u{67}" .
		    "\u{5}\u{67}\u{C91}\u{A}\u{67}\u{3}\u{67}\u{5}\u{67}\u{C94}\u{A}\u{67}" .
		    "\u{3}\u{67}\u{3}\u{67}\u{5}\u{67}\u{C98}\u{A}\u{67}\u{3}\u{67}\u{5}" .
		    "\u{67}\u{C9B}\u{A}\u{67}\u{3}\u{67}\u{3}\u{67}\u{3}\u{67}\u{3}\u{67}" .
		    "\u{7}\u{67}\u{CA1}\u{A}\u{67}\u{C}\u{67}\u{E}\u{67}\u{CA4}\u{B}\u{67}" .
		    "\u{3}\u{67}\u{3}\u{67}\u{5}\u{67}\u{CA8}\u{A}\u{67}\u{3}\u{67}\u{5}" .
		    "\u{67}\u{CAB}\u{A}\u{67}\u{3}\u{67}\u{5}\u{67}\u{CAE}\u{A}\u{67}\u{3}" .
		    "\u{68}\u{3}\u{68}\u{5}\u{68}\u{CB2}\u{A}\u{68}\u{3}\u{68}\u{5}\u{68}" .
		    "\u{CB5}\u{A}\u{68}\u{3}\u{68}\u{3}\u{68}\u{3}\u{68}\u{3}\u{68}\u{3}" .
		    "\u{68}\u{7}\u{68}\u{CBC}\u{A}\u{68}\u{C}\u{68}\u{E}\u{68}\u{CBF}\u{B}" .
		    "\u{68}\u{3}\u{68}\u{3}\u{68}\u{5}\u{68}\u{CC3}\u{A}\u{68}\u{3}\u{69}" .
		    "\u{3}\u{69}\u{3}\u{69}\u{3}\u{69}\u{3}\u{69}\u{7}\u{69}\u{CCA}\u{A}" .
		    "\u{69}\u{C}\u{69}\u{E}\u{69}\u{CCD}\u{B}\u{69}\u{3}\u{6A}\u{3}\u{6A}" .
		    "\u{5}\u{6A}\u{CD1}\u{A}\u{6A}\u{3}\u{6B}\u{3}\u{6B}\u{3}\u{6B}\u{7}" .
		    "\u{6B}\u{CD6}\u{A}\u{6B}\u{C}\u{6B}\u{E}\u{6B}\u{CD9}\u{B}\u{6B}\u{3}" .
		    "\u{6C}\u{3}\u{6C}\u{7}\u{6C}\u{CDD}\u{A}\u{6C}\u{C}\u{6C}\u{E}\u{6C}" .
		    "\u{CE0}\u{B}\u{6C}\u{3}\u{6C}\u{3}\u{6C}\u{3}\u{6C}\u{7}\u{6C}\u{CE5}" .
		    "\u{A}\u{6C}\u{C}\u{6C}\u{E}\u{6C}\u{CE8}\u{B}\u{6C}\u{3}\u{6C}\u{3}" .
		    "\u{6C}\u{5}\u{6C}\u{CEC}\u{A}\u{6C}\u{3}\u{6D}\u{3}\u{6D}\u{3}\u{6D}" .
		    "\u{3}\u{6D}\u{3}\u{6D}\u{3}\u{6D}\u{5}\u{6D}\u{CF4}\u{A}\u{6D}\u{3}" .
		    "\u{6D}\u{5}\u{6D}\u{CF7}\u{A}\u{6D}\u{3}\u{6D}\u{5}\u{6D}\u{CFA}\u{A}" .
		    "\u{6D}\u{3}\u{6D}\u{3}\u{6D}\u{3}\u{6D}\u{7}\u{6D}\u{CFF}\u{A}\u{6D}" .
		    "\u{C}\u{6D}\u{E}\u{6D}\u{D02}\u{B}\u{6D}\u{5}\u{6D}\u{D04}\u{A}\u{6D}" .
		    "\u{3}\u{6D}\u{3}\u{6D}\u{3}\u{6D}\u{3}\u{6D}\u{3}\u{6D}\u{5}\u{6D}" .
		    "\u{D0B}\u{A}\u{6D}\u{3}\u{6D}\u{5}\u{6D}\u{D0E}\u{A}\u{6D}\u{3}\u{6D}" .
		    "\u{3}\u{6D}\u{3}\u{6D}\u{3}\u{6D}\u{3}\u{6D}\u{3}\u{6D}\u{5}\u{6D}" .
		    "\u{D16}\u{A}\u{6D}\u{3}\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{5}" .
		    "\u{6E}\u{D1C}\u{A}\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{3}\u{6E}" .
		    "\u{3}\u{6F}\u{3}\u{6F}\u{3}\u{6F}\u{3}\u{6F}\u{3}\u{6F}\u{5}\u{6F}" .
		    "\u{D27}\u{A}\u{6F}\u{3}\u{70}\u{5}\u{70}\u{D2A}\u{A}\u{70}\u{3}\u{70}" .
		    "\u{3}\u{70}\u{3}\u{70}\u{3}\u{70}\u{3}\u{70}\u{3}\u{70}\u{3}\u{70}" .
		    "\u{3}\u{70}\u{3}\u{70}\u{5}\u{70}\u{D35}\u{A}\u{70}\u{3}\u{70}\u{3}" .
		    "\u{70}\u{3}\u{70}\u{3}\u{70}\u{5}\u{70}\u{D3B}\u{A}\u{70}\u{3}\u{70}" .
		    "\u{3}\u{70}\u{5}\u{70}\u{D3F}\u{A}\u{70}\u{3}\u{70}\u{3}\u{70}\u{3}" .
		    "\u{70}\u{3}\u{70}\u{3}\u{70}\u{3}\u{70}\u{3}\u{70}\u{3}\u{70}\u{3}" .
		    "\u{70}\u{5}\u{70}\u{D4A}\u{A}\u{70}\u{3}\u{70}\u{3}\u{70}\u{3}\u{70}" .
		    "\u{5}\u{70}\u{D4F}\u{A}\u{70}\u{5}\u{70}\u{D51}\u{A}\u{70}\u{3}\u{70}" .
		    "\u{3}\u{70}\u{5}\u{70}\u{D55}\u{A}\u{70}\u{3}\u{71}\u{3}\u{71}\u{3}" .
		    "\u{71}\u{3}\u{71}\u{3}\u{71}\u{3}\u{71}\u{3}\u{71}\u{3}\u{71}\u{5}" .
		    "\u{71}\u{D5F}\u{A}\u{71}\u{3}\u{72}\u{3}\u{72}\u{3}\u{72}\u{3}\u{72}" .
		    "\u{3}\u{72}\u{3}\u{72}\u{3}\u{72}\u{3}\u{72}\u{5}\u{72}\u{D69}\u{A}" .
		    "\u{72}\u{3}\u{73}\u{3}\u{73}\u{7}\u{73}\u{D6D}\u{A}\u{73}\u{C}\u{73}" .
		    "\u{E}\u{73}\u{D70}\u{B}\u{73}\u{3}\u{73}\u{3}\u{73}\u{5}\u{73}\u{D74}" .
		    "\u{A}\u{73}\u{3}\u{73}\u{5}\u{73}\u{D77}\u{A}\u{73}\u{3}\u{73}\u{5}" .
		    "\u{73}\u{D7A}\u{A}\u{73}\u{3}\u{73}\u{5}\u{73}\u{D7D}\u{A}\u{73}\u{3}" .
		    "\u{73}\u{3}\u{73}\u{7}\u{73}\u{D81}\u{A}\u{73}\u{C}\u{73}\u{E}\u{73}" .
		    "\u{D84}\u{B}\u{73}\u{3}\u{73}\u{3}\u{73}\u{5}\u{73}\u{D88}\u{A}\u{73}" .
		    "\u{3}\u{73}\u{5}\u{73}\u{D8B}\u{A}\u{73}\u{3}\u{73}\u{5}\u{73}\u{D8E}" .
		    "\u{A}\u{73}\u{3}\u{73}\u{5}\u{73}\u{D91}\u{A}\u{73}\u{5}\u{73}\u{D93}" .
		    "\u{A}\u{73}\u{3}\u{74}\u{3}\u{74}\u{7}\u{74}\u{D97}\u{A}\u{74}\u{C}" .
		    "\u{74}\u{E}\u{74}\u{D9A}\u{B}\u{74}\u{3}\u{74}\u{3}\u{74}\u{5}\u{74}" .
		    "\u{D9E}\u{A}\u{74}\u{3}\u{74}\u{5}\u{74}\u{DA1}\u{A}\u{74}\u{3}\u{74}" .
		    "\u{5}\u{74}\u{DA4}\u{A}\u{74}\u{3}\u{75}\u{3}\u{75}\u{5}\u{75}\u{DA8}" .
		    "\u{A}\u{75}\u{3}\u{75}\u{3}\u{75}\u{3}\u{76}\u{3}\u{76}\u{5}\u{76}" .
		    "\u{DAE}\u{A}\u{76}\u{3}\u{76}\u{3}\u{76}\u{5}\u{76}\u{DB2}\u{A}\u{76}" .
		    "\u{3}\u{77}\u{3}\u{77}\u{3}\u{77}\u{3}\u{77}\u{3}\u{77}\u{3}\u{77}" .
		    "\u{3}\u{77}\u{3}\u{77}\u{5}\u{77}\u{DBC}\u{A}\u{77}\u{3}\u{78}\u{3}" .
		    "\u{78}\u{5}\u{78}\u{DC0}\u{A}\u{78}\u{3}\u{78}\u{3}\u{78}\u{7}\u{78}" .
		    "\u{DC4}\u{A}\u{78}\u{C}\u{78}\u{E}\u{78}\u{DC7}\u{B}\u{78}\u{3}\u{79}" .
		    "\u{3}\u{79}\u{3}\u{79}\u{3}\u{79}\u{3}\u{79}\u{3}\u{79}\u{5}\u{79}" .
		    "\u{DCF}\u{A}\u{79}\u{3}\u{79}\u{5}\u{79}\u{DD2}\u{A}\u{79}\u{3}\u{79}" .
		    "\u{3}\u{79}\u{5}\u{79}\u{DD6}\u{A}\u{79}\u{3}\u{79}\u{5}\u{79}\u{DD9}" .
		    "\u{A}\u{79}\u{3}\u{79}\u{3}\u{79}\u{5}\u{79}\u{DDD}\u{A}\u{79}\u{3}" .
		    "\u{79}\u{3}\u{79}\u{5}\u{79}\u{DE1}\u{A}\u{79}\u{3}\u{79}\u{5}\u{79}" .
		    "\u{DE4}\u{A}\u{79}\u{5}\u{79}\u{DE6}\u{A}\u{79}\u{3}\u{7A}\u{3}\u{7A}" .
		    "\u{3}\u{7A}\u{3}\u{7A}\u{7}\u{7A}\u{DEC}\u{A}\u{7A}\u{C}\u{7A}\u{E}" .
		    "\u{7A}\u{DEF}\u{B}\u{7A}\u{3}\u{7A}\u{3}\u{7A}\u{3}\u{7A}\u{3}\u{7A}" .
		    "\u{3}\u{7A}\u{3}\u{7A}\u{3}\u{7A}\u{3}\u{7A}\u{3}\u{7A}\u{5}\u{7A}" .
		    "\u{DFA}\u{A}\u{7A}\u{3}\u{7A}\u{3}\u{7A}\u{6}\u{7A}\u{DFE}\u{A}\u{7A}" .
		    "\u{D}\u{7A}\u{E}\u{7A}\u{DFF}\u{5}\u{7A}\u{E02}\u{A}\u{7A}\u{3}\u{7A}" .
		    "\u{3}\u{7A}\u{6}\u{7A}\u{E06}\u{A}\u{7A}\u{D}\u{7A}\u{E}\u{7A}\u{E07}" .
		    "\u{5}\u{7A}\u{E0A}\u{A}\u{7A}\u{5}\u{7A}\u{E0C}\u{A}\u{7A}\u{3}\u{7B}" .
		    "\u{3}\u{7B}\u{3}\u{7B}\u{3}\u{7B}\u{5}\u{7B}\u{E12}\u{A}\u{7B}\u{3}" .
		    "\u{7B}\u{3}\u{7B}\u{3}\u{7B}\u{3}\u{7B}\u{3}\u{7B}\u{3}\u{7B}\u{5}" .
		    "\u{7B}\u{E1A}\u{A}\u{7B}\u{3}\u{7C}\u{3}\u{7C}\u{3}\u{7C}\u{3}\u{7C}" .
		    "\u{3}\u{7C}\u{3}\u{7C}\u{5}\u{7C}\u{E22}\u{A}\u{7C}\u{3}\u{7D}\u{3}" .
		    "\u{7D}\u{3}\u{7D}\u{3}\u{7D}\u{5}\u{7D}\u{E28}\u{A}\u{7D}\u{3}\u{7D}" .
		    "\u{3}\u{7D}\u{3}\u{7D}\u{3}\u{7D}\u{3}\u{7D}\u{7}\u{7D}\u{E2F}\u{A}" .
		    "\u{7D}\u{C}\u{7D}\u{E}\u{7D}\u{E32}\u{B}\u{7D}\u{3}\u{7D}\u{3}\u{7D}" .
		    "\u{5}\u{7D}\u{E36}\u{A}\u{7D}\u{5}\u{7D}\u{E38}\u{A}\u{7D}\u{3}\u{7D}" .
		    "\u{3}\u{7D}\u{5}\u{7D}\u{E3C}\u{A}\u{7D}\u{3}\u{7E}\u{3}\u{7E}\u{5}" .
		    "\u{7E}\u{E40}\u{A}\u{7E}\u{3}\u{7F}\u{3}\u{7F}\u{3}\u{7F}\u{3}\u{7F}" .
		    "\u{5}\u{7F}\u{E46}\u{A}\u{7F}\u{3}\u{7F}\u{3}\u{7F}\u{3}\u{7F}\u{3}" .
		    "\u{7F}\u{3}\u{7F}\u{5}\u{7F}\u{E4D}\u{A}\u{7F}\u{3}\u{80}\u{3}\u{80}" .
		    "\u{5}\u{80}\u{E51}\u{A}\u{80}\u{3}\u{81}\u{3}\u{81}\u{3}\u{81}\u{3}" .
		    "\u{81}\u{3}\u{81}\u{7}\u{81}\u{E58}\u{A}\u{81}\u{C}\u{81}\u{E}\u{81}" .
		    "\u{E5B}\u{B}\u{81}\u{5}\u{81}\u{E5D}\u{A}\u{81}\u{3}\u{82}\u{3}\u{82}" .
		    "\u{5}\u{82}\u{E61}\u{A}\u{82}\u{3}\u{83}\u{3}\u{83}\u{5}\u{83}\u{E65}" .
		    "\u{A}\u{83}\u{3}\u{83}\u{3}\u{83}\u{5}\u{83}\u{E69}\u{A}\u{83}\u{3}" .
		    "\u{83}\u{5}\u{83}\u{E6C}\u{A}\u{83}\u{3}\u{83}\u{5}\u{83}\u{E6F}\u{A}" .
		    "\u{83}\u{3}\u{83}\u{5}\u{83}\u{E72}\u{A}\u{83}\u{3}\u{84}\u{3}\u{84}" .
		    "\u{5}\u{84}\u{E76}\u{A}\u{84}\u{3}\u{84}\u{3}\u{84}\u{5}\u{84}\u{E7A}" .
		    "\u{A}\u{84}\u{3}\u{84}\u{5}\u{84}\u{E7D}\u{A}\u{84}\u{3}\u{84}\u{5}" .
		    "\u{84}\u{E80}\u{A}\u{84}\u{3}\u{84}\u{5}\u{84}\u{E83}\u{A}\u{84}\u{3}" .
		    "\u{85}\u{3}\u{85}\u{3}\u{85}\u{3}\u{86}\u{3}\u{86}\u{5}\u{86}\u{E8A}" .
		    "\u{A}\u{86}\u{3}\u{86}\u{3}\u{86}\u{5}\u{86}\u{E8E}\u{A}\u{86}\u{3}" .
		    "\u{86}\u{3}\u{86}\u{3}\u{87}\u{3}\u{87}\u{3}\u{87}\u{3}\u{87}\u{3}" .
		    "\u{88}\u{3}\u{88}\u{3}\u{88}\u{3}\u{88}\u{3}\u{88}\u{7}\u{88}\u{E9B}" .
		    "\u{A}\u{88}\u{C}\u{88}\u{E}\u{88}\u{E9E}\u{B}\u{88}\u{3}\u{89}\u{3}" .
		    "\u{89}\u{3}\u{89}\u{3}\u{8A}\u{3}\u{8A}\u{3}\u{8A}\u{3}\u{8A}\u{3}" .
		    "\u{8A}\u{3}\u{8B}\u{3}\u{8B}\u{5}\u{8B}\u{EAA}\u{A}\u{8B}\u{3}\u{8B}" .
		    "\u{3}\u{8B}\u{3}\u{8B}\u{3}\u{8B}\u{7}\u{8B}\u{EB0}\u{A}\u{8B}\u{C}" .
		    "\u{8B}\u{E}\u{8B}\u{EB3}\u{B}\u{8B}\u{3}\u{8C}\u{3}\u{8C}\u{3}\u{8C}" .
		    "\u{3}\u{8C}\u{3}\u{8C}\u{3}\u{8C}\u{3}\u{8C}\u{5}\u{8C}\u{EBC}\u{A}" .
		    "\u{8C}\u{3}\u{8D}\u{3}\u{8D}\u{5}\u{8D}\u{EC0}\u{A}\u{8D}\u{3}\u{8D}" .
		    "\u{5}\u{8D}\u{EC3}\u{A}\u{8D}\u{3}\u{8D}\u{3}\u{8D}\u{3}\u{8E}\u{3}" .
		    "\u{8E}\u{5}\u{8E}\u{EC9}\u{A}\u{8E}\u{3}\u{8E}\u{5}\u{8E}\u{ECC}\u{A}" .
		    "\u{8E}\u{3}\u{8E}\u{5}\u{8E}\u{ECF}\u{A}\u{8E}\u{3}\u{8F}\u{3}\u{8F}" .
		    "\u{3}\u{8F}\u{3}\u{8F}\u{3}\u{8F}\u{3}\u{8F}\u{3}\u{8F}\u{5}\u{8F}" .
		    "\u{ED8}\u{A}\u{8F}\u{3}\u{90}\u{3}\u{90}\u{3}\u{90}\u{3}\u{90}\u{3}" .
		    "\u{90}\u{3}\u{90}\u{3}\u{90}\u{5}\u{90}\u{EE1}\u{A}\u{90}\u{3}\u{91}" .
		    "\u{3}\u{91}\u{3}\u{91}\u{3}\u{91}\u{3}\u{91}\u{3}\u{91}\u{7}\u{91}" .
		    "\u{EE9}\u{A}\u{91}\u{C}\u{91}\u{E}\u{91}\u{EEC}\u{B}\u{91}\u{3}\u{91}" .
		    "\u{5}\u{91}\u{EEF}\u{A}\u{91}\u{3}\u{92}\u{3}\u{92}\u{3}\u{92}\u{3}" .
		    "\u{92}\u{3}\u{92}\u{3}\u{92}\u{7}\u{92}\u{EF7}\u{A}\u{92}\u{C}\u{92}" .
		    "\u{E}\u{92}\u{EFA}\u{B}\u{92}\u{3}\u{93}\u{3}\u{93}\u{3}\u{93}\u{3}" .
		    "\u{93}\u{3}\u{93}\u{3}\u{93}\u{3}\u{93}\u{5}\u{93}\u{F03}\u{A}\u{93}" .
		    "\u{3}\u{94}\u{3}\u{94}\u{3}\u{94}\u{3}\u{95}\u{3}\u{95}\u{3}\u{95}" .
		    "\u{5}\u{95}\u{F0B}\u{A}\u{95}\u{3}\u{95}\u{5}\u{95}\u{F0E}\u{A}\u{95}" .
		    "\u{3}\u{96}\u{3}\u{96}\u{3}\u{96}\u{3}\u{96}\u{3}\u{96}\u{7}\u{96}" .
		    "\u{F15}\u{A}\u{96}\u{C}\u{96}\u{E}\u{96}\u{F18}\u{B}\u{96}\u{5}\u{96}" .
		    "\u{F1A}\u{A}\u{96}\u{3}\u{96}\u{3}\u{96}\u{5}\u{96}\u{F1E}\u{A}\u{96}" .
		    "\u{3}\u{96}\u{7}\u{96}\u{F21}\u{A}\u{96}\u{C}\u{96}\u{E}\u{96}\u{F24}" .
		    "\u{B}\u{96}\u{3}\u{96}\u{5}\u{96}\u{F27}\u{A}\u{96}\u{3}\u{97}\u{3}" .
		    "\u{97}\u{3}\u{97}\u{3}\u{97}\u{3}\u{97}\u{7}\u{97}\u{F2E}\u{A}\u{97}" .
		    "\u{C}\u{97}\u{E}\u{97}\u{F31}\u{B}\u{97}\u{5}\u{97}\u{F33}\u{A}\u{97}" .
		    "\u{3}\u{98}\u{3}\u{98}\u{3}\u{98}\u{3}\u{99}\u{3}\u{99}\u{3}\u{99}" .
		    "\u{3}\u{9A}\u{3}\u{9A}\u{3}\u{9A}\u{3}\u{9A}\u{3}\u{9A}\u{3}\u{9A}" .
		    "\u{3}\u{9A}\u{3}\u{9A}\u{3}\u{9A}\u{3}\u{9A}\u{3}\u{9A}\u{3}\u{9A}" .
		    "\u{3}\u{9A}\u{3}\u{9A}\u{3}\u{9A}\u{3}\u{9A}\u{3}\u{9A}\u{3}\u{9A}" .
		    "\u{3}\u{9A}\u{3}\u{9A}\u{3}\u{9A}\u{7}\u{9A}\u{F50}\u{A}\u{9A}\u{C}" .
		    "\u{9A}\u{E}\u{9A}\u{F53}\u{B}\u{9A}\u{5}\u{9A}\u{F55}\u{A}\u{9A}\u{3}" .
		    "\u{9A}\u{5}\u{9A}\u{F58}\u{A}\u{9A}\u{3}\u{9B}\u{3}\u{9B}\u{3}\u{9C}" .
		    "\u{3}\u{9C}\u{3}\u{9D}\u{3}\u{9D}\u{3}\u{9E}\u{3}\u{9E}\u{3}\u{9E}" .
		    "\u{3}\u{9E}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}" .
		    "\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}" .
		    "\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}" .
		    "\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}" .
		    "\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}" .
		    "\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}" .
		    "\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{9F}" .
		    "\u{3}\u{9F}\u{7}\u{9F}\u{F8E}\u{A}\u{9F}\u{C}\u{9F}\u{E}\u{9F}\u{F91}" .
		    "\u{B}\u{9F}\u{3}\u{9F}\u{3}\u{9F}\u{5}\u{9F}\u{F95}\u{A}\u{9F}\u{3}" .
		    "\u{A0}\u{3}\u{A0}\u{3}\u{A0}\u{3}\u{A0}\u{3}\u{A0}\u{3}\u{A0}\u{3}" .
		    "\u{A1}\u{3}\u{A1}\u{3}\u{A2}\u{3}\u{A2}\u{3}\u{A2}\u{3}\u{A2}\u{3}" .
		    "\u{A2}\u{3}\u{A2}\u{3}\u{A2}\u{3}\u{A2}\u{3}\u{A2}\u{3}\u{A2}\u{3}" .
		    "\u{A2}\u{3}\u{A2}\u{3}\u{A2}\u{3}\u{A2}\u{3}\u{A2}\u{3}\u{A2}\u{3}" .
		    "\u{A2}\u{3}\u{A2}\u{5}\u{A2}\u{FB1}\u{A}\u{A2}\u{3}\u{A3}\u{3}\u{A3}" .
		    "\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}" .
		    "\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{5}\u{A3}\u{FBF}\u{A}" .
		    "\u{A3}\u{3}\u{A4}\u{3}\u{A4}\u{3}\u{A4}\u{7}\u{A4}\u{FC4}\u{A}\u{A4}" .
		    "\u{C}\u{A4}\u{E}\u{A4}\u{FC7}\u{B}\u{A4}\u{3}\u{A4}\u{5}\u{A4}\u{FCA}" .
		    "\u{A}\u{A4}\u{3}\u{A5}\u{3}\u{A5}\u{3}\u{A5}\u{3}\u{A5}\u{5}\u{A5}" .
		    "\u{FD0}\u{A}\u{A5}\u{3}\u{A6}\u{3}\u{A6}\u{3}\u{A6}\u{3}\u{A6}\u{3}" .
		    "\u{A6}\u{3}\u{A6}\u{5}\u{A6}\u{FD8}\u{A}\u{A6}\u{5}\u{A6}\u{FDA}\u{A}" .
		    "\u{A6}\u{3}\u{A7}\u{3}\u{A7}\u{3}\u{A7}\u{3}\u{A7}\u{3}\u{A8}\u{3}" .
		    "\u{A8}\u{3}\u{A8}\u{3}\u{A8}\u{3}\u{A8}\u{5}\u{A8}\u{FE5}\u{A}\u{A8}" .
		    "\u{3}\u{A9}\u{3}\u{A9}\u{3}\u{A9}\u{3}\u{A9}\u{3}\u{AA}\u{3}\u{AA}" .
		    "\u{3}\u{AA}\u{3}\u{AA}\u{5}\u{AA}\u{FEF}\u{A}\u{AA}\u{3}\u{AB}\u{3}" .
		    "\u{AB}\u{3}\u{AB}\u{3}\u{AB}\u{3}\u{AB}\u{5}\u{AB}\u{FF6}\u{A}\u{AB}" .
		    "\u{3}\u{AC}\u{3}\u{AC}\u{3}\u{AC}\u{3}\u{AC}\u{5}\u{AC}\u{FFC}\u{A}" .
		    "\u{AC}\u{3}\u{AD}\u{3}\u{AD}\u{3}\u{AD}\u{3}\u{AD}\u{3}\u{AE}\u{3}" .
		    "\u{AE}\u{5}\u{AE}\u{1004}\u{A}\u{AE}\u{3}\u{AF}\u{3}\u{AF}\u{3}\u{AF}" .
		    "\u{5}\u{AF}\u{1009}\u{A}\u{AF}\u{3}\u{AF}\u{3}\u{AF}\u{3}\u{AF}\u{3}" .
		    "\u{AF}\u{7}\u{AF}\u{100F}\u{A}\u{AF}\u{C}\u{AF}\u{E}\u{AF}\u{1012}" .
		    "\u{B}\u{AF}\u{3}\u{AF}\u{3}\u{AF}\u{3}\u{AF}\u{7}\u{AF}\u{1017}\u{A}" .
		    "\u{AF}\u{C}\u{AF}\u{E}\u{AF}\u{101A}\u{B}\u{AF}\u{3}\u{AF}\u{3}\u{AF}" .
		    "\u{3}\u{AF}\u{7}\u{AF}\u{101F}\u{A}\u{AF}\u{C}\u{AF}\u{E}\u{AF}\u{1022}" .
		    "\u{B}\u{AF}\u{3}\u{AF}\u{3}\u{AF}\u{3}\u{AF}\u{7}\u{AF}\u{1027}\u{A}" .
		    "\u{AF}\u{C}\u{AF}\u{E}\u{AF}\u{102A}\u{B}\u{AF}\u{3}\u{AF}\u{7}\u{AF}" .
		    "\u{102D}\u{A}\u{AF}\u{C}\u{AF}\u{E}\u{AF}\u{1030}\u{B}\u{AF}\u{5}" .
		    "\u{AF}\u{1032}\u{A}\u{AF}\u{3}\u{AF}\u{3}\u{AF}\u{5}\u{AF}\u{1036}" .
		    "\u{A}\u{AF}\u{3}\u{B0}\u{3}\u{B0}\u{3}\u{B0}\u{5}\u{B0}\u{103B}\u{A}" .
		    "\u{B0}\u{3}\u{B0}\u{6}\u{B0}\u{103E}\u{A}\u{B0}\u{D}\u{B0}\u{E}\u{B0}" .
		    "\u{103F}\u{3}\u{B0}\u{3}\u{B0}\u{6}\u{B0}\u{1044}\u{A}\u{B0}\u{D}" .
		    "\u{B0}\u{E}\u{B0}\u{1045}\u{5}\u{B0}\u{1048}\u{A}\u{B0}\u{3}\u{B0}" .
		    "\u{3}\u{B0}\u{3}\u{B0}\u{3}\u{B1}\u{3}\u{B1}\u{3}\u{B1}\u{3}\u{B1}" .
		    "\u{6}\u{B1}\u{1051}\u{A}\u{B1}\u{D}\u{B1}\u{E}\u{B1}\u{1052}\u{3}" .
		    "\u{B1}\u{7}\u{B1}\u{1056}\u{A}\u{B1}\u{C}\u{B1}\u{E}\u{B1}\u{1059}" .
		    "\u{B}\u{B1}\u{3}\u{B1}\u{3}\u{B1}\u{6}\u{B1}\u{105D}\u{A}\u{B1}\u{D}" .
		    "\u{B1}\u{E}\u{B1}\u{105E}\u{5}\u{B1}\u{1061}\u{A}\u{B1}\u{3}\u{B1}" .
		    "\u{3}\u{B1}\u{3}\u{B1}\u{3}\u{B2}\u{3}\u{B2}\u{3}\u{B2}\u{3}\u{B3}" .
		    "\u{3}\u{B3}\u{3}\u{B3}\u{3}\u{B4}\u{3}\u{B4}\u{3}\u{B4}\u{5}\u{B4}" .
		    "\u{106F}\u{A}\u{B4}\u{3}\u{B4}\u{3}\u{B4}\u{6}\u{B4}\u{1073}\u{A}" .
		    "\u{B4}\u{D}\u{B4}\u{E}\u{B4}\u{1074}\u{3}\u{B4}\u{3}\u{B4}\u{3}\u{B4}" .
		    "\u{5}\u{B4}\u{107A}\u{A}\u{B4}\u{3}\u{B5}\u{3}\u{B5}\u{3}\u{B5}\u{5}" .
		    "\u{B5}\u{107F}\u{A}\u{B5}\u{3}\u{B5}\u{3}\u{B5}\u{6}\u{B5}\u{1083}" .
		    "\u{A}\u{B5}\u{D}\u{B5}\u{E}\u{B5}\u{1084}\u{3}\u{B5}\u{3}\u{B5}\u{3}" .
		    "\u{B5}\u{3}\u{B5}\u{3}\u{B5}\u{5}\u{B5}\u{108C}\u{A}\u{B5}\u{3}\u{B6}" .
		    "\u{3}\u{B6}\u{3}\u{B6}\u{3}\u{B7}\u{3}\u{B7}\u{3}\u{B7}\u{5}\u{B7}" .
		    "\u{1094}\u{A}\u{B7}\u{3}\u{B7}\u{3}\u{B7}\u{3}\u{B7}\u{3}\u{B7}\u{6}" .
		    "\u{B7}\u{109A}\u{A}\u{B7}\u{D}\u{B7}\u{E}\u{B7}\u{109B}\u{3}\u{B7}" .
		    "\u{3}\u{B7}\u{3}\u{B7}\u{5}\u{B7}\u{10A1}\u{A}\u{B7}\u{3}\u{B8}\u{3}" .
		    "\u{B8}\u{3}\u{B8}\u{3}\u{B8}\u{5}\u{B8}\u{10A7}\u{A}\u{B8}\u{3}\u{B8}" .
		    "\u{5}\u{B8}\u{10AA}\u{A}\u{B8}\u{3}\u{B8}\u{3}\u{B8}\u{3}\u{B8}\u{3}" .
		    "\u{B8}\u{3}\u{B8}\u{3}\u{B8}\u{5}\u{B8}\u{10B2}\u{A}\u{B8}\u{3}\u{B9}" .
		    "\u{3}\u{B9}\u{3}\u{B9}\u{3}\u{B9}\u{3}\u{B9}\u{5}\u{B9}\u{10B9}\u{A}" .
		    "\u{B9}\u{3}\u{BA}\u{3}\u{BA}\u{3}\u{BA}\u{3}\u{BA}\u{3}\u{BA}\u{3}" .
		    "\u{BA}\u{3}\u{BA}\u{5}\u{BA}\u{10C2}\u{A}\u{BA}\u{3}\u{BA}\u{5}\u{BA}" .
		    "\u{10C5}\u{A}\u{BA}\u{3}\u{BB}\u{3}\u{BB}\u{3}\u{BB}\u{3}\u{BB}\u{3}" .
		    "\u{BB}\u{3}\u{BB}\u{3}\u{BC}\u{3}\u{BC}\u{3}\u{BC}\u{3}\u{BC}\u{3}" .
		    "\u{BC}\u{3}\u{BC}\u{3}\u{BC}\u{7}\u{BC}\u{10D4}\u{A}\u{BC}\u{C}\u{BC}" .
		    "\u{E}\u{BC}\u{10D7}\u{B}\u{BC}\u{3}\u{BC}\u{3}\u{BC}\u{3}\u{BD}\u{3}" .
		    "\u{BD}\u{3}\u{BD}\u{5}\u{BD}\u{10DE}\u{A}\u{BD}\u{3}\u{BD}\u{3}\u{BD}" .
		    "\u{3}\u{BD}\u{3}\u{BD}\u{3}\u{BD}\u{3}\u{BD}\u{5}\u{BD}\u{10E6}\u{A}" .
		    "\u{BD}\u{3}\u{BE}\u{3}\u{BE}\u{5}\u{BE}\u{10EA}\u{A}\u{BE}\u{3}\u{BE}" .
		    "\u{3}\u{BE}\u{3}\u{BF}\u{3}\u{BF}\u{3}\u{BF}\u{5}\u{BF}\u{10F1}\u{A}" .
		    "\u{BF}\u{3}\u{BF}\u{3}\u{BF}\u{6}\u{BF}\u{10F5}\u{A}\u{BF}\u{D}\u{BF}" .
		    "\u{E}\u{BF}\u{10F6}\u{3}\u{C0}\u{3}\u{C0}\u{3}\u{C0}\u{3}\u{C0}\u{6}" .
		    "\u{C0}\u{10FD}\u{A}\u{C0}\u{D}\u{C0}\u{E}\u{C0}\u{10FE}\u{3}\u{C1}" .
		    "\u{3}\u{C1}\u{3}\u{C1}\u{3}\u{C1}\u{3}\u{C1}\u{7}\u{C1}\u{1106}\u{A}" .
		    "\u{C1}\u{C}\u{C1}\u{E}\u{C1}\u{1109}\u{B}\u{C1}\u{3}\u{C1}\u{3}\u{C1}" .
		    "\u{3}\u{C1}\u{5}\u{C1}\u{110E}\u{A}\u{C1}\u{3}\u{C1}\u{3}\u{C1}\u{3}" .
		    "\u{C1}\u{7}\u{C1}\u{1113}\u{A}\u{C1}\u{C}\u{C1}\u{E}\u{C1}\u{1116}" .
		    "\u{B}\u{C1}\u{3}\u{C1}\u{3}\u{C1}\u{3}\u{C1}\u{3}\u{C1}\u{5}\u{C1}" .
		    "\u{111C}\u{A}\u{C1}\u{3}\u{C1}\u{7}\u{C1}\u{111F}\u{A}\u{C1}\u{C}" .
		    "\u{C1}\u{E}\u{C1}\u{1122}\u{B}\u{C1}\u{5}\u{C1}\u{1124}\u{A}\u{C1}" .
		    "\u{5}\u{C1}\u{1126}\u{A}\u{C1}\u{3}\u{C1}\u{3}\u{C1}\u{6}\u{C1}\u{112A}" .
		    "\u{A}\u{C1}\u{D}\u{C1}\u{E}\u{C1}\u{112B}\u{5}\u{C1}\u{112E}\u{A}" .
		    "\u{C1}\u{3}\u{C1}\u{3}\u{C1}\u{7}\u{C1}\u{1132}\u{A}\u{C1}\u{C}\u{C1}" .
		    "\u{E}\u{C1}\u{1135}\u{B}\u{C1}\u{5}\u{C1}\u{1137}\u{A}\u{C1}\u{3}" .
		    "\u{C2}\u{3}\u{C2}\u{3}\u{C2}\u{3}\u{C2}\u{3}\u{C2}\u{7}\u{C2}\u{113E}" .
		    "\u{A}\u{C2}\u{C}\u{C2}\u{E}\u{C2}\u{1141}\u{B}\u{C2}\u{3}\u{C2}\u{3}" .
		    "\u{C2}\u{3}\u{C2}\u{5}\u{C2}\u{1146}\u{A}\u{C2}\u{3}\u{C2}\u{3}\u{C2}" .
		    "\u{3}\u{C2}\u{7}\u{C2}\u{114B}\u{A}\u{C2}\u{C}\u{C2}\u{E}\u{C2}\u{114E}" .
		    "\u{B}\u{C2}\u{3}\u{C2}\u{3}\u{C2}\u{3}\u{C2}\u{3}\u{C2}\u{5}\u{C2}" .
		    "\u{1154}\u{A}\u{C2}\u{3}\u{C2}\u{7}\u{C2}\u{1157}\u{A}\u{C2}\u{C}" .
		    "\u{C2}\u{E}\u{C2}\u{115A}\u{B}\u{C2}\u{5}\u{C2}\u{115C}\u{A}\u{C2}" .
		    "\u{5}\u{C2}\u{115E}\u{A}\u{C2}\u{3}\u{C2}\u{3}\u{C2}\u{6}\u{C2}\u{1162}" .
		    "\u{A}\u{C2}\u{D}\u{C2}\u{E}\u{C2}\u{1163}\u{5}\u{C2}\u{1166}\u{A}" .
		    "\u{C2}\u{3}\u{C2}\u{3}\u{C2}\u{7}\u{C2}\u{116A}\u{A}\u{C2}\u{C}\u{C2}" .
		    "\u{E}\u{C2}\u{116D}\u{B}\u{C2}\u{5}\u{C2}\u{116F}\u{A}\u{C2}\u{3}" .
		    "\u{C3}\u{3}\u{C3}\u{3}\u{C3}\u{5}\u{C3}\u{1174}\u{A}\u{C3}\u{3}\u{C3}" .
		    "\u{3}\u{C3}\u{3}\u{C3}\u{7}\u{C3}\u{1179}\u{A}\u{C3}\u{C}\u{C3}\u{E}" .
		    "\u{C3}\u{117C}\u{B}\u{C3}\u{3}\u{C4}\u{3}\u{C4}\u{3}\u{C4}\u{3}\u{C4}" .
		    "\u{7}\u{C4}\u{1182}\u{A}\u{C4}\u{C}\u{C4}\u{E}\u{C4}\u{1185}\u{B}" .
		    "\u{C4}\u{3}\u{C4}\u{3}\u{C4}\u{5}\u{C4}\u{1189}\u{A}\u{C4}\u{3}\u{C4}" .
		    "\u{3}\u{C4}\u{3}\u{C4}\u{3}\u{C4}\u{3}\u{C4}\u{7}\u{C4}\u{1190}\u{A}" .
		    "\u{C4}\u{C}\u{C4}\u{E}\u{C4}\u{1193}\u{B}\u{C4}\u{3}\u{C4}\u{3}\u{C4}" .
		    "\u{3}\u{C4}\u{3}\u{C4}\u{5}\u{C4}\u{1199}\u{A}\u{C4}\u{3}\u{C4}\u{7}" .
		    "\u{C4}\u{119C}\u{A}\u{C4}\u{C}\u{C4}\u{E}\u{C4}\u{119F}\u{B}\u{C4}" .
		    "\u{5}\u{C4}\u{11A1}\u{A}\u{C4}\u{5}\u{C4}\u{11A3}\u{A}\u{C4}\u{3}" .
		    "\u{C4}\u{3}\u{C4}\u{3}\u{C4}\u{3}\u{C4}\u{7}\u{C4}\u{11A9}\u{A}\u{C4}" .
		    "\u{C}\u{C4}\u{E}\u{C4}\u{11AC}\u{B}\u{C4}\u{5}\u{C4}\u{11AE}\u{A}" .
		    "\u{C4}\u{3}\u{C5}\u{3}\u{C5}\u{3}\u{C5}\u{3}\u{C5}\u{3}\u{C5}\u{3}" .
		    "\u{C5}\u{3}\u{C5}\u{3}\u{C5}\u{7}\u{C5}\u{11B8}\u{A}\u{C5}\u{C}\u{C5}" .
		    "\u{E}\u{C5}\u{11BB}\u{B}\u{C5}\u{3}\u{C5}\u{3}\u{C5}\u{3}\u{C5}\u{5}" .
		    "\u{C5}\u{11C0}\u{A}\u{C5}\u{3}\u{C6}\u{3}\u{C6}\u{3}\u{C6}\u{3}\u{C6}" .
		    "\u{3}\u{C6}\u{7}\u{C6}\u{11C7}\u{A}\u{C6}\u{C}\u{C6}\u{E}\u{C6}\u{11CA}" .
		    "\u{B}\u{C6}\u{3}\u{C7}\u{3}\u{C7}\u{3}\u{C7}\u{3}\u{C7}\u{7}\u{C7}" .
		    "\u{11D0}\u{A}\u{C7}\u{C}\u{C7}\u{E}\u{C7}\u{11D3}\u{B}\u{C7}\u{3}" .
		    "\u{C7}\u{3}\u{C7}\u{5}\u{C7}\u{11D7}\u{A}\u{C7}\u{3}\u{C7}\u{3}\u{C7}" .
		    "\u{3}\u{C7}\u{3}\u{C7}\u{3}\u{C7}\u{7}\u{C7}\u{11DE}\u{A}\u{C7}\u{C}" .
		    "\u{C7}\u{E}\u{C7}\u{11E1}\u{B}\u{C7}\u{3}\u{C7}\u{3}\u{C7}\u{3}\u{C7}" .
		    "\u{5}\u{C7}\u{11E6}\u{A}\u{C7}\u{3}\u{C7}\u{3}\u{C7}\u{3}\u{C7}\u{3}" .
		    "\u{C7}\u{3}\u{C7}\u{3}\u{C7}\u{3}\u{C7}\u{7}\u{C7}\u{11EF}\u{A}\u{C7}" .
		    "\u{C}\u{C7}\u{E}\u{C7}\u{11F2}\u{B}\u{C7}\u{5}\u{C7}\u{11F4}\u{A}" .
		    "\u{C7}\u{3}\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{3}" .
		    "\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{7}\u{C8}\u{11FE}\u{A}\u{C8}\u{C}\u{C8}" .
		    "\u{E}\u{C8}\u{1201}\u{B}\u{C8}\u{3}\u{C9}\u{3}\u{C9}\u{3}\u{C9}\u{3}" .
		    "\u{C9}\u{5}\u{C9}\u{1207}\u{A}\u{C9}\u{3}\u{C9}\u{3}\u{C9}\u{3}\u{C9}" .
		    "\u{5}\u{C9}\u{120C}\u{A}\u{C9}\u{3}\u{CA}\u{3}\u{CA}\u{3}\u{CA}\u{3}" .
		    "\u{CB}\u{3}\u{CB}\u{3}\u{CB}\u{3}\u{CB}\u{3}\u{CB}\u{3}\u{CB}\u{3}" .
		    "\u{CB}\u{3}\u{CB}\u{3}\u{CB}\u{3}\u{CB}\u{5}\u{CB}\u{121B}\u{A}\u{CB}" .
		    "\u{3}\u{CB}\u{3}\u{CB}\u{3}\u{CB}\u{3}\u{CB}\u{3}\u{CB}\u{3}\u{CB}" .
		    "\u{3}\u{CB}\u{3}\u{CB}\u{3}\u{CB}\u{5}\u{CB}\u{1226}\u{A}\u{CB}\u{3}" .
		    "\u{CB}\u{5}\u{CB}\u{1229}\u{A}\u{CB}\u{3}\u{CC}\u{3}\u{CC}\u{3}\u{CC}" .
		    "\u{3}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{5}\u{CC}" .
		    "\u{1233}\u{A}\u{CC}\u{3}\u{CD}\u{3}\u{CD}\u{3}\u{CD}\u{3}\u{CD}\u{3}" .
		    "\u{CD}\u{3}\u{CD}\u{3}\u{CD}\u{3}\u{CD}\u{5}\u{CD}\u{123D}\u{A}\u{CD}" .
		    "\u{3}\u{CE}\u{3}\u{CE}\u{3}\u{CE}\u{3}\u{CE}\u{3}\u{CE}\u{3}\u{CE}" .
		    "\u{3}\u{CE}\u{3}\u{CE}\u{5}\u{CE}\u{1247}\u{A}\u{CE}\u{3}\u{CF}\u{3}" .
		    "\u{CF}\u{3}\u{CF}\u{3}\u{D0}\u{3}\u{D0}\u{3}\u{D0}\u{3}\u{D0}\u{3}" .
		    "\u{D0}\u{5}\u{D0}\u{1251}\u{A}\u{D0}\u{3}\u{D1}\u{3}\u{D1}\u{5}\u{D1}" .
		    "\u{1255}\u{A}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{5}\u{D1}\u{1259}\u{A}" .
		    "\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}" .
		    "\u{D1}\u{3}\u{D1}\u{5}\u{D1}\u{1262}\u{A}\u{D1}\u{3}\u{D1}\u{3}\u{D1}" .
		    "\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}" .
		    "\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}" .
		    "\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}" .
		    "\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}" .
		    "\u{5}\u{D1}\u{127E}\u{A}\u{D1}\u{3}\u{D2}\u{3}\u{D2}\u{3}\u{D2}\u{3}" .
		    "\u{D2}\u{3}\u{D2}\u{3}\u{D2}\u{3}\u{D2}\u{3}\u{D2}\u{3}\u{D2}\u{3}" .
		    "\u{D2}\u{3}\u{D2}\u{3}\u{D2}\u{3}\u{D2}\u{3}\u{D2}\u{3}\u{D2}\u{3}" .
		    "\u{D2}\u{5}\u{D2}\u{1290}\u{A}\u{D2}\u{3}\u{D3}\u{3}\u{D3}\u{3}\u{D3}" .
		    "\u{3}\u{D3}\u{3}\u{D4}\u{3}\u{D4}\u{5}\u{D4}\u{1298}\u{A}\u{D4}\u{3}" .
		    "\u{D4}\u{3}\u{D4}\u{3}\u{D4}\u{3}\u{D5}\u{3}\u{D5}\u{3}\u{D5}\u{3}" .
		    "\u{D5}\u{7}\u{D5}\u{12A1}\u{A}\u{D5}\u{C}\u{D5}\u{E}\u{D5}\u{12A4}" .
		    "\u{B}\u{D5}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{5}\u{D6}" .
		    "\u{12AA}\u{A}\u{D6}\u{3}\u{D7}\u{3}\u{D7}\u{5}\u{D7}\u{12AE}\u{A}" .
		    "\u{D7}\u{3}\u{D7}\u{3}\u{D7}\u{3}\u{D7}\u{3}\u{D8}\u{3}\u{D8}\u{5}" .
		    "\u{D8}\u{12B5}\u{A}\u{D8}\u{3}\u{D8}\u{3}\u{D8}\u{3}\u{D8}\u{5}\u{D8}" .
		    "\u{12BA}\u{A}\u{D8}\u{3}\u{D8}\u{5}\u{D8}\u{12BD}\u{A}\u{D8}\u{3}" .
		    "\u{D8}\u{5}\u{D8}\u{12C0}\u{A}\u{D8}\u{3}\u{D9}\u{3}\u{D9}\u{3}\u{D9}" .
		    "\u{3}\u{D9}\u{3}\u{D9}\u{3}\u{D9}\u{3}\u{D9}\u{5}\u{D9}\u{12C9}\u{A}" .
		    "\u{D9}\u{3}\u{DA}\u{3}\u{DA}\u{5}\u{DA}\u{12CD}\u{A}\u{DA}\u{3}\u{DA}" .
		    "\u{3}\u{DA}\u{3}\u{DA}\u{3}\u{DA}\u{3}\u{DA}\u{3}\u{DA}\u{3}\u{DA}" .
		    "\u{3}\u{DB}\u{3}\u{DB}\u{3}\u{DB}\u{3}\u{DB}\u{3}\u{DB}\u{3}\u{DB}" .
		    "\u{3}\u{DC}\u{3}\u{DC}\u{3}\u{DC}\u{3}\u{DC}\u{3}\u{DD}\u{3}\u{DD}" .
		    "\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}" .
		    "\u{3}\u{DD}\u{7}\u{DD}\u{12E9}\u{A}\u{DD}\u{C}\u{DD}\u{E}\u{DD}\u{12EC}" .
		    "\u{B}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{5}\u{DD}" .
		    "\u{12F2}\u{A}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{5}\u{DD}\u{12F6}\u{A}" .
		    "\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{5}" .
		    "\u{DD}\u{12FD}\u{A}\u{DD}\u{3}\u{DD}\u{5}\u{DD}\u{1300}\u{A}\u{DD}" .
		    "\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}" .
		    "\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}" .
		    "\u{7}\u{DD}\u{130E}\u{A}\u{DD}\u{C}\u{DD}\u{E}\u{DD}\u{1311}\u{B}" .
		    "\u{DD}\u{5}\u{DD}\u{1313}\u{A}\u{DD}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}" .
		    "\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{5}\u{DE}" .
		    "\u{131D}\u{A}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{5}\u{DE}\u{1321}\u{A}" .
		    "\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{5}\u{DE}\u{1327}" .
		    "\u{A}\u{DE}\u{3}\u{DE}\u{5}\u{DE}\u{132A}\u{A}\u{DE}\u{3}\u{DE}\u{3}" .
		    "\u{DE}\u{3}\u{DE}\u{5}\u{DE}\u{132F}\u{A}\u{DE}\u{3}\u{DE}\u{3}\u{DE}" .
		    "\u{5}\u{DE}\u{1333}\u{A}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}" .
		    "\u{DE}\u{3}\u{DE}\u{5}\u{DE}\u{133A}\u{A}\u{DE}\u{3}\u{DE}\u{5}\u{DE}" .
		    "\u{133D}\u{A}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{5}" .
		    "\u{DE}\u{1343}\u{A}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}" .
		    "\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}" .
		    "\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}" .
		    "\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}" .
		    "\u{5}\u{DE}\u{135B}\u{A}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}" .
		    "\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}" .
		    "\u{DE}\u{3}\u{DE}\u{5}\u{DE}\u{1368}\u{A}\u{DE}\u{3}\u{DE}\u{5}\u{DE}" .
		    "\u{136B}\u{A}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}" .
		    "\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{5}\u{DE}\u{1375}\u{A}\u{DE}" .
		    "\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}" .
		    "\u{5}\u{DE}\u{137D}\u{A}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{5}\u{DE}\u{1381}" .
		    "\u{A}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}" .
		    "\u{5}\u{DE}\u{1388}\u{A}\u{DE}\u{3}\u{DE}\u{5}\u{DE}\u{138B}\u{A}" .
		    "\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{7}" .
		    "\u{DE}\u{1392}\u{A}\u{DE}\u{C}\u{DE}\u{E}\u{DE}\u{1395}\u{B}\u{DE}" .
		    "\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{5}\u{DE}\u{139A}\u{A}\u{DE}\u{3}" .
		    "\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{5}\u{DE}\u{13A0}\u{A}\u{DE}" .
		    "\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}" .
		    "\u{3}\u{DE}\u{3}\u{DE}\u{5}\u{DE}\u{13AA}\u{A}\u{DE}\u{5}\u{DE}\u{13AC}" .
		    "\u{A}\u{DE}\u{3}\u{DF}\u{3}\u{DF}\u{3}\u{DF}\u{3}\u{DF}\u{5}\u{DF}" .
		    "\u{13B2}\u{A}\u{DF}\u{3}\u{DF}\u{5}\u{DF}\u{13B5}\u{A}\u{DF}\u{3}" .
		    "\u{DF}\u{5}\u{DF}\u{13B8}\u{A}\u{DF}\u{3}\u{E0}\u{3}\u{E0}\u{3}\u{E0}" .
		    "\u{3}\u{E0}\u{3}\u{E0}\u{3}\u{E0}\u{3}\u{E0}\u{3}\u{E0}\u{3}\u{E0}" .
		    "\u{3}\u{E0}\u{5}\u{E0}\u{13C4}\u{A}\u{E0}\u{3}\u{E0}\u{5}\u{E0}\u{13C7}" .
		    "\u{A}\u{E0}\u{3}\u{E1}\u{3}\u{E1}\u{3}\u{E1}\u{3}\u{E1}\u{5}\u{E1}" .
		    "\u{13CD}\u{A}\u{E1}\u{3}\u{E2}\u{5}\u{E2}\u{13D0}\u{A}\u{E2}\u{3}" .
		    "\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{5}" .
		    "\u{E2}\u{13D8}\u{A}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}" .
		    "\u{3}\u{E2}\u{3}\u{E2}\u{5}\u{E2}\u{13E0}\u{A}\u{E2}\u{3}\u{E3}\u{3}" .
		    "\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{5}\u{E3}\u{13E6}\u{A}\u{E3}\u{3}\u{E3}" .
		    "\u{3}\u{E3}\u{5}\u{E3}\u{13EA}\u{A}\u{E3}\u{3}\u{E4}\u{3}\u{E4}\u{3}" .
		    "\u{E4}\u{3}\u{E4}\u{3}\u{E4}\u{3}\u{E4}\u{3}\u{E4}\u{3}\u{E4}\u{3}" .
		    "\u{E4}\u{3}\u{E4}\u{3}\u{E4}\u{3}\u{E4}\u{5}\u{E4}\u{13F8}\u{A}\u{E4}" .
		    "\u{3}\u{E5}\u{3}\u{E5}\u{3}\u{E5}\u{3}\u{E6}\u{3}\u{E6}\u{3}\u{E6}" .
		    "\u{3}\u{E6}\u{3}\u{E6}\u{7}\u{E6}\u{1402}\u{A}\u{E6}\u{C}\u{E6}\u{E}" .
		    "\u{E6}\u{1405}\u{B}\u{E6}\u{3}\u{E6}\u{3}\u{E6}\u{3}\u{E6}\u{3}\u{E6}" .
		    "\u{5}\u{E6}\u{140B}\u{A}\u{E6}\u{3}\u{E6}\u{5}\u{E6}\u{140E}\u{A}" .
		    "\u{E6}\u{3}\u{E6}\u{3}\u{E6}\u{3}\u{E6}\u{3}\u{E7}\u{3}\u{E7}\u{5}" .
		    "\u{E7}\u{1415}\u{A}\u{E7}\u{3}\u{E7}\u{3}\u{E7}\u{3}\u{E7}\u{7}\u{E7}" .
		    "\u{141A}\u{A}\u{E7}\u{C}\u{E7}\u{E}\u{E7}\u{141D}\u{B}\u{E7}\u{3}" .
		    "\u{E8}\u{3}\u{E8}\u{5}\u{E8}\u{1421}\u{A}\u{E8}\u{3}\u{E8}\u{6}\u{E8}" .
		    "\u{1424}\u{A}\u{E8}\u{D}\u{E8}\u{E}\u{E8}\u{1425}\u{3}\u{E9}\u{3}" .
		    "\u{E9}\u{3}\u{E9}\u{3}\u{E9}\u{3}\u{E9}\u{3}\u{E9}\u{3}\u{E9}\u{7}" .
		    "\u{E9}\u{142F}\u{A}\u{E9}\u{C}\u{E9}\u{E}\u{E9}\u{1432}\u{B}\u{E9}" .
		    "\u{3}\u{EA}\u{3}\u{EA}\u{3}\u{EA}\u{3}\u{EA}\u{3}\u{EB}\u{3}\u{EB}" .
		    "\u{3}\u{EC}\u{3}\u{EC}\u{5}\u{EC}\u{143C}\u{A}\u{EC}\u{3}\u{EC}\u{3}" .
		    "\u{EC}\u{3}\u{EC}\u{3}\u{EC}\u{5}\u{EC}\u{1442}\u{A}\u{EC}\u{3}\u{ED}" .
		    "\u{3}\u{ED}\u{3}\u{ED}\u{5}\u{ED}\u{1447}\u{A}\u{ED}\u{3}\u{ED}\u{3}" .
		    "\u{ED}\u{3}\u{ED}\u{3}\u{ED}\u{3}\u{ED}\u{3}\u{ED}\u{3}\u{ED}\u{3}" .
		    "\u{ED}\u{3}\u{ED}\u{3}\u{ED}\u{3}\u{ED}\u{5}\u{ED}\u{1454}\u{A}\u{ED}" .
		    "\u{5}\u{ED}\u{1456}\u{A}\u{ED}\u{3}\u{ED}\u{3}\u{ED}\u{3}\u{ED}\u{5}" .
		    "\u{ED}\u{145B}\u{A}\u{ED}\u{3}\u{ED}\u{3}\u{ED}\u{3}\u{ED}\u{5}\u{ED}" .
		    "\u{1460}\u{A}\u{ED}\u{5}\u{ED}\u{1462}\u{A}\u{ED}\u{3}\u{EE}\u{3}" .
		    "\u{EE}\u{3}\u{EE}\u{3}\u{EE}\u{3}\u{EE}\u{5}\u{EE}\u{1469}\u{A}\u{EE}" .
		    "\u{3}\u{EF}\u{3}\u{EF}\u{3}\u{EF}\u{3}\u{EF}\u{3}\u{EF}\u{5}\u{EF}" .
		    "\u{1470}\u{A}\u{EF}\u{3}\u{EF}\u{5}\u{EF}\u{1473}\u{A}\u{EF}\u{3}" .
		    "\u{EF}\u{5}\u{EF}\u{1476}\u{A}\u{EF}\u{3}\u{EF}\u{3}\u{EF}\u{3}\u{EF}" .
		    "\u{3}\u{EF}\u{5}\u{EF}\u{147C}\u{A}\u{EF}\u{3}\u{EF}\u{3}\u{EF}\u{5}" .
		    "\u{EF}\u{1480}\u{A}\u{EF}\u{3}\u{F0}\u{3}\u{F0}\u{3}\u{F0}\u{3}\u{F0}" .
		    "\u{5}\u{F0}\u{1486}\u{A}\u{F0}\u{3}\u{F1}\u{3}\u{F1}\u{3}\u{F1}\u{3}" .
		    "\u{F1}\u{5}\u{F1}\u{148C}\u{A}\u{F1}\u{3}\u{F1}\u{3}\u{F1}\u{3}\u{F2}" .
		    "\u{3}\u{F2}\u{3}\u{F2}\u{3}\u{F3}\u{3}\u{F3}\u{3}\u{F3}\u{3}\u{F4}" .
		    "\u{3}\u{F4}\u{3}\u{F4}\u{5}\u{F4}\u{1499}\u{A}\u{F4}\u{3}\u{F4}\u{3}" .
		    "\u{F4}\u{3}\u{F4}\u{5}\u{F4}\u{149E}\u{A}\u{F4}\u{3}\u{F4}\u{3}\u{F4}" .
		    "\u{3}\u{F4}\u{3}\u{F4}\u{7}\u{F4}\u{14A4}\u{A}\u{F4}\u{C}\u{F4}\u{E}" .
		    "\u{F4}\u{14A7}\u{B}\u{F4}\u{5}\u{F4}\u{14A9}\u{A}\u{F4}\u{3}\u{F5}" .
		    "\u{3}\u{F5}\u{3}\u{F5}\u{5}\u{F5}\u{14AE}\u{A}\u{F5}\u{3}\u{F5}\u{3}" .
		    "\u{F5}\u{3}\u{F5}\u{5}\u{F5}\u{14B3}\u{A}\u{F5}\u{3}\u{F5}\u{3}\u{F5}" .
		    "\u{3}\u{F5}\u{3}\u{F5}\u{7}\u{F5}\u{14B9}\u{A}\u{F5}\u{C}\u{F5}\u{E}" .
		    "\u{F5}\u{14BC}\u{B}\u{F5}\u{5}\u{F5}\u{14BE}\u{A}\u{F5}\u{3}\u{F6}" .
		    "\u{3}\u{F6}\u{3}\u{F6}\u{3}\u{F6}\u{5}\u{F6}\u{14C4}\u{A}\u{F6}\u{3}" .
		    "\u{F7}\u{3}\u{F7}\u{5}\u{F7}\u{14C8}\u{A}\u{F7}\u{3}\u{F7}\u{3}\u{F7}" .
		    "\u{3}\u{F7}\u{3}\u{F7}\u{3}\u{F7}\u{3}\u{F7}\u{3}\u{F7}\u{3}\u{F7}" .
		    "\u{3}\u{F7}\u{7}\u{F7}\u{14D3}\u{A}\u{F7}\u{C}\u{F7}\u{E}\u{F7}\u{14D6}" .
		    "\u{B}\u{F7}\u{3}\u{F7}\u{3}\u{F7}\u{3}\u{F7}\u{5}\u{F7}\u{14DB}\u{A}" .
		    "\u{F7}\u{3}\u{F7}\u{3}\u{F7}\u{3}\u{F7}\u{3}\u{F7}\u{3}\u{F7}\u{3}" .
		    "\u{F7}\u{3}\u{F7}\u{3}\u{F7}\u{7}\u{F7}\u{14E5}\u{A}\u{F7}\u{C}\u{F7}" .
		    "\u{E}\u{F7}\u{14E8}\u{B}\u{F7}\u{5}\u{F7}\u{14EA}\u{A}\u{F7}\u{3}" .
		    "\u{F8}\u{3}\u{F8}\u{3}\u{F9}\u{3}\u{F9}\u{3}\u{F9}\u{3}\u{F9}\u{3}" .
		    "\u{F9}\u{5}\u{F9}\u{14F3}\u{A}\u{F9}\u{3}\u{F9}\u{3}\u{F9}\u{3}\u{F9}" .
		    "\u{5}\u{F9}\u{14F8}\u{A}\u{F9}\u{3}\u{FA}\u{3}\u{FA}\u{3}\u{FA}\u{3}" .
		    "\u{FA}\u{5}\u{FA}\u{14FE}\u{A}\u{FA}\u{3}\u{FB}\u{3}\u{FB}\u{3}\u{FC}" .
		    "\u{3}\u{FC}\u{3}\u{FC}\u{5}\u{FC}\u{1505}\u{A}\u{FC}\u{5}\u{FC}\u{1507}" .
		    "\u{A}\u{FC}\u{3}\u{FD}\u{3}\u{FD}\u{5}\u{FD}\u{150B}\u{A}\u{FD}\u{3}" .
		    "\u{FD}\u{3}\u{FD}\u{3}\u{FD}\u{3}\u{FD}\u{5}\u{FD}\u{1511}\u{A}\u{FD}" .
		    "\u{3}\u{FD}\u{5}\u{FD}\u{1514}\u{A}\u{FD}\u{3}\u{FE}\u{3}\u{FE}\u{3}" .
		    "\u{FF}\u{3}\u{FF}\u{3}\u{100}\u{3}\u{100}\u{3}\u{100}\u{3}\u{100}" .
		    "\u{5}\u{100}\u{151E}\u{A}\u{100}\u{3}\u{101}\u{3}\u{101}\u{5}\u{101}" .
		    "\u{1522}\u{A}\u{101}\u{3}\u{102}\u{3}\u{102}\u{3}\u{103}\u{3}\u{103}" .
		    "\u{3}\u{103}\u{3}\u{103}\u{3}\u{103}\u{3}\u{103}\u{3}\u{103}\u{3}" .
		    "\u{103}\u{3}\u{103}\u{3}\u{103}\u{3}\u{103}\u{3}\u{103}\u{3}\u{103}" .
		    "\u{3}\u{103}\u{6}\u{103}\u{1534}\u{A}\u{103}\u{D}\u{103}\u{E}\u{103}" .
		    "\u{1535}\u{3}\u{104}\u{3}\u{104}\u{3}\u{104}\u{3}\u{104}\u{3}\u{104}" .
		    "\u{5}\u{104}\u{153D}\u{A}\u{104}\u{5}\u{104}\u{153F}\u{A}\u{104}\u{3}" .
		    "\u{105}\u{3}\u{105}\u{3}\u{105}\u{6}\u{105}\u{1544}\u{A}\u{105}\u{D}" .
		    "\u{105}\u{E}\u{105}\u{1545}\u{5}\u{105}\u{1548}\u{A}\u{105}\u{3}\u{106}" .
		    "\u{3}\u{106}\u{5}\u{106}\u{154C}\u{A}\u{106}\u{3}\u{107}\u{3}\u{107}" .
		    "\u{3}\u{107}\u{5}\u{107}\u{1551}\u{A}\u{107}\u{3}\u{108}\u{3}\u{108}" .
		    "\u{3}\u{108}\u{3}\u{108}\u{3}\u{108}\u{3}\u{108}\u{3}\u{108}\u{3}" .
		    "\u{108}\u{3}\u{108}\u{5}\u{108}\u{155C}\u{A}\u{108}\u{3}\u{109}\u{3}" .
		    "\u{109}\u{3}\u{109}\u{5}\u{109}\u{1561}\u{A}\u{109}\u{3}\u{10A}\u{3}" .
		    "\u{10A}\u{3}\u{10B}\u{3}\u{10B}\u{5}\u{10B}\u{1567}\u{A}\u{10B}\u{3}" .
		    "\u{10C}\u{5}\u{10C}\u{156A}\u{A}\u{10C}\u{3}\u{10C}\u{3}\u{10C}\u{5}" .
		    "\u{10C}\u{156E}\u{A}\u{10C}\u{3}\u{10C}\u{6}\u{10C}\u{1571}\u{A}\u{10C}" .
		    "\u{D}\u{10C}\u{E}\u{10C}\u{1572}\u{3}\u{10C}\u{5}\u{10C}\u{1576}\u{A}" .
		    "\u{10C}\u{3}\u{10C}\u{3}\u{10C}\u{5}\u{10C}\u{157A}\u{A}\u{10C}\u{3}" .
		    "\u{10C}\u{3}\u{10C}\u{5}\u{10C}\u{157E}\u{A}\u{10C}\u{5}\u{10C}\u{1580}" .
		    "\u{A}\u{10C}\u{3}\u{10D}\u{3}\u{10D}\u{3}\u{10E}\u{5}\u{10E}\u{1585}" .
		    "\u{A}\u{10E}\u{3}\u{10E}\u{3}\u{10E}\u{3}\u{10F}\u{5}\u{10F}\u{158A}" .
		    "\u{A}\u{10F}\u{3}\u{10F}\u{3}\u{10F}\u{3}\u{110}\u{3}\u{110}\u{3}" .
		    "\u{110}\u{3}\u{110}\u{3}\u{110}\u{3}\u{110}\u{3}\u{110}\u{3}\u{110}" .
		    "\u{3}\u{110}\u{5}\u{110}\u{1597}\u{A}\u{110}\u{3}\u{110}\u{5}\u{110}" .
		    "\u{159A}\u{A}\u{110}\u{3}\u{111}\u{3}\u{111}\u{5}\u{111}\u{159E}\u{A}" .
		    "\u{111}\u{3}\u{111}\u{5}\u{111}\u{15A1}\u{A}\u{111}\u{3}\u{111}\u{3}" .
		    "\u{111}\u{3}\u{111}\u{5}\u{111}\u{15A6}\u{A}\u{111}\u{3}\u{111}\u{5}" .
		    "\u{111}\u{15A9}\u{A}\u{111}\u{3}\u{111}\u{3}\u{111}\u{5}\u{111}\u{15AD}" .
		    "\u{A}\u{111}\u{3}\u{111}\u{3}\u{111}\u{3}\u{111}\u{5}\u{111}\u{15B2}" .
		    "\u{A}\u{111}\u{3}\u{111}\u{5}\u{111}\u{15B5}\u{A}\u{111}\u{3}\u{111}" .
		    "\u{3}\u{111}\u{3}\u{111}\u{5}\u{111}\u{15BA}\u{A}\u{111}\u{3}\u{111}" .
		    "\u{5}\u{111}\u{15BD}\u{A}\u{111}\u{3}\u{111}\u{3}\u{111}\u{3}\u{111}" .
		    "\u{3}\u{111}\u{5}\u{111}\u{15C3}\u{A}\u{111}\u{3}\u{111}\u{5}\u{111}" .
		    "\u{15C6}\u{A}\u{111}\u{3}\u{111}\u{3}\u{111}\u{5}\u{111}\u{15CA}\u{A}" .
		    "\u{111}\u{3}\u{111}\u{5}\u{111}\u{15CD}\u{A}\u{111}\u{3}\u{111}\u{5}" .
		    "\u{111}\u{15D0}\u{A}\u{111}\u{3}\u{111}\u{3}\u{111}\u{5}\u{111}\u{15D4}" .
		    "\u{A}\u{111}\u{3}\u{111}\u{5}\u{111}\u{15D7}\u{A}\u{111}\u{3}\u{111}" .
		    "\u{5}\u{111}\u{15DA}\u{A}\u{111}\u{3}\u{111}\u{3}\u{111}\u{5}\u{111}" .
		    "\u{15DE}\u{A}\u{111}\u{3}\u{111}\u{5}\u{111}\u{15E1}\u{A}\u{111}\u{3}" .
		    "\u{111}\u{5}\u{111}\u{15E4}\u{A}\u{111}\u{3}\u{111}\u{5}\u{111}\u{15E7}" .
		    "\u{A}\u{111}\u{3}\u{111}\u{3}\u{111}\u{5}\u{111}\u{15EB}\u{A}\u{111}" .
		    "\u{3}\u{111}\u{5}\u{111}\u{15EE}\u{A}\u{111}\u{3}\u{111}\u{5}\u{111}" .
		    "\u{15F1}\u{A}\u{111}\u{3}\u{111}\u{3}\u{111}\u{3}\u{111}\u{5}\u{111}" .
		    "\u{15F6}\u{A}\u{111}\u{3}\u{111}\u{3}\u{111}\u{3}\u{111}\u{5}\u{111}" .
		    "\u{15FB}\u{A}\u{111}\u{3}\u{111}\u{3}\u{111}\u{3}\u{111}\u{5}\u{111}" .
		    "\u{1600}\u{A}\u{111}\u{3}\u{111}\u{5}\u{111}\u{1603}\u{A}\u{111}\u{3}" .
		    "\u{111}\u{5}\u{111}\u{1606}\u{A}\u{111}\u{3}\u{112}\u{3}\u{112}\u{3}" .
		    "\u{112}\u{3}\u{112}\u{7}\u{112}\u{160C}\u{A}\u{112}\u{C}\u{112}\u{E}" .
		    "\u{112}\u{160F}\u{B}\u{112}\u{3}\u{112}\u{3}\u{112}\u{3}\u{113}\u{3}" .
		    "\u{113}\u{5}\u{113}\u{1615}\u{A}\u{113}\u{3}\u{113}\u{3}\u{113}\u{5}" .
		    "\u{113}\u{1619}\u{A}\u{113}\u{3}\u{113}\u{3}\u{113}\u{3}\u{113}\u{5}" .
		    "\u{113}\u{161E}\u{A}\u{113}\u{3}\u{113}\u{5}\u{113}\u{1621}\u{A}\u{113}" .
		    "\u{3}\u{113}\u{3}\u{113}\u{3}\u{113}\u{5}\u{113}\u{1626}\u{A}\u{113}" .
		    "\u{3}\u{113}\u{3}\u{113}\u{5}\u{113}\u{162A}\u{A}\u{113}\u{5}\u{113}" .
		    "\u{162C}\u{A}\u{113}\u{3}\u{114}\u{3}\u{114}\u{3}\u{114}\u{3}\u{114}" .
		    "\u{3}\u{115}\u{3}\u{115}\u{3}\u{115}\u{3}\u{115}\u{3}\u{115}\u{3}" .
		    "\u{115}\u{3}\u{116}\u{3}\u{116}\u{3}\u{116}\u{3}\u{116}\u{5}\u{116}" .
		    "\u{163C}\u{A}\u{116}\u{3}\u{116}\u{3}\u{116}\u{3}\u{117}\u{3}\u{117}" .
		    "\u{3}\u{117}\u{7}\u{117}\u{1643}\u{A}\u{117}\u{C}\u{117}\u{E}\u{117}" .
		    "\u{1646}\u{B}\u{117}\u{3}\u{118}\u{3}\u{118}\u{3}\u{118}\u{7}\u{118}" .
		    "\u{164B}\u{A}\u{118}\u{C}\u{118}\u{E}\u{118}\u{164E}\u{B}\u{118}\u{3}" .
		    "\u{119}\u{3}\u{119}\u{3}\u{119}\u{3}\u{119}\u{7}\u{119}\u{1654}\u{A}" .
		    "\u{119}\u{C}\u{119}\u{E}\u{119}\u{1657}\u{B}\u{119}\u{3}\u{119}\u{3}" .
		    "\u{119}\u{3}\u{11A}\u{3}\u{11A}\u{3}\u{11A}\u{7}\u{11A}\u{165E}\u{A}" .
		    "\u{11A}\u{C}\u{11A}\u{E}\u{11A}\u{1661}\u{B}\u{11A}\u{3}\u{11B}\u{3}" .
		    "\u{11B}\u{3}\u{11B}\u{7}\u{11B}\u{1666}\u{A}\u{11B}\u{C}\u{11B}\u{E}" .
		    "\u{11B}\u{1669}\u{B}\u{11B}\u{3}\u{11C}\u{3}\u{11C}\u{3}\u{11C}\u{7}" .
		    "\u{11C}\u{166E}\u{A}\u{11C}\u{C}\u{11C}\u{E}\u{11C}\u{1671}\u{B}\u{11C}" .
		    "\u{3}\u{11D}\u{3}\u{11D}\u{3}\u{11D}\u{7}\u{11D}\u{1676}\u{A}\u{11D}" .
		    "\u{C}\u{11D}\u{E}\u{11D}\u{1679}\u{B}\u{11D}\u{3}\u{11E}\u{3}\u{11E}" .
		    "\u{3}\u{11E}\u{7}\u{11E}\u{167E}\u{A}\u{11E}\u{C}\u{11E}\u{E}\u{11E}" .
		    "\u{1681}\u{B}\u{11E}\u{3}\u{11F}\u{3}\u{11F}\u{3}\u{11F}\u{7}\u{11F}" .
		    "\u{1686}\u{A}\u{11F}\u{C}\u{11F}\u{E}\u{11F}\u{1689}\u{B}\u{11F}\u{3}" .
		    "\u{120}\u{3}\u{120}\u{5}\u{120}\u{168D}\u{A}\u{120}\u{3}\u{120}\u{3}" .
		    "\u{120}\u{3}\u{120}\u{3}\u{120}\u{3}\u{120}\u{5}\u{120}\u{1694}\u{A}" .
		    "\u{120}\u{5}\u{120}\u{1696}\u{A}\u{120}\u{3}\u{121}\u{3}\u{121}\u{3}" .
		    "\u{121}\u{5}\u{121}\u{169B}\u{A}\u{121}\u{3}\u{121}\u{5}\u{121}\u{169E}" .
		    "\u{A}\u{121}\u{3}\u{121}\u{3}\u{121}\u{3}\u{121}\u{5}\u{121}\u{16A3}" .
		    "\u{A}\u{121}\u{3}\u{121}\u{5}\u{121}\u{16A6}\u{A}\u{121}\u{3}\u{122}" .
		    "\u{3}\u{122}\u{5}\u{122}\u{16AA}\u{A}\u{122}\u{3}\u{123}\u{3}\u{123}" .
		    "\u{3}\u{123}\u{3}\u{124}\u{3}\u{124}\u{3}\u{124}\u{3}\u{124}\u{3}" .
		    "\u{125}\u{3}\u{125}\u{3}\u{125}\u{3}\u{125}\u{3}\u{125}\u{5}\u{125}" .
		    "\u{16B8}\u{A}\u{125}\u{3}\u{125}\u{3}\u{125}\u{3}\u{125}\u{3}\u{125}" .
		    "\u{3}\u{125}\u{5}\u{125}\u{16BF}\u{A}\u{125}\u{3}\u{125}\u{3}\u{125}" .
		    "\u{3}\u{125}\u{5}\u{125}\u{16C4}\u{A}\u{125}\u{3}\u{126}\u{3}\u{126}" .
		    "\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}" .
		    "\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}" .
		    "\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}" .
		    "\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}" .
		    "\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}" .
		    "\u{126}\u{6}\u{126}\u{16E4}\u{A}\u{126}\u{D}\u{126}\u{E}\u{126}\u{16E5}" .
		    "\u{3}\u{126}\u{3}\u{126}\u{5}\u{126}\u{16EA}\u{A}\u{126}\u{3}\u{126}" .
		    "\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{6}\u{126}\u{16F0}\u{A}\u{126}" .
		    "\u{D}\u{126}\u{E}\u{126}\u{16F1}\u{3}\u{126}\u{3}\u{126}\u{5}\u{126}" .
		    "\u{16F6}\u{A}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}" .
		    "\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{5}\u{126}\u{16FF}\u{A}\u{126}" .
		    "\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}" .
		    "\u{126}\u{5}\u{126}\u{1707}\u{A}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}" .
		    "\u{126}\u{5}\u{126}\u{170C}\u{A}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}" .
		    "\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{5}\u{126}\u{1714}\u{A}" .
		    "\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{5}\u{126}\u{1719}\u{A}" .
		    "\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{5}\u{126}\u{171E}\u{A}" .
		    "\u{126}\u{5}\u{126}\u{1720}\u{A}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}" .
		    "\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{5}\u{126}" .
		    "\u{1729}\u{A}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{5}\u{126}" .
		    "\u{172E}\u{A}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}" .
		    "\u{3}\u{126}\u{3}\u{126}\u{5}\u{126}\u{1736}\u{A}\u{126}\u{3}\u{126}" .
		    "\u{3}\u{126}\u{3}\u{126}\u{5}\u{126}\u{173B}\u{A}\u{126}\u{3}\u{126}" .
		    "\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{5}" .
		    "\u{126}\u{1743}\u{A}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}" .
		    "\u{126}\u{3}\u{126}\u{3}\u{126}\u{5}\u{126}\u{174B}\u{A}\u{126}\u{3}" .
		    "\u{126}\u{5}\u{126}\u{174E}\u{A}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}" .
		    "\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}" .
		    "\u{5}\u{126}\u{1758}\u{A}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}" .
		    "\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}" .
		    "\u{126}\u{5}\u{126}\u{1763}\u{A}\u{126}\u{3}\u{127}\u{3}\u{127}\u{3}" .
		    "\u{127}\u{3}\u{127}\u{3}\u{127}\u{3}\u{128}\u{3}\u{128}\u{3}\u{128}" .
		    "\u{3}\u{128}\u{7}\u{128}\u{176E}\u{A}\u{128}\u{C}\u{128}\u{E}\u{128}" .
		    "\u{1771}\u{B}\u{128}\u{3}\u{128}\u{3}\u{128}\u{3}\u{128}\u{3}\u{128}" .
		    "\u{3}\u{128}\u{5}\u{128}\u{1778}\u{A}\u{128}\u{3}\u{129}\u{3}\u{129}" .
		    "\u{5}\u{129}\u{177C}\u{A}\u{129}\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}" .
		    "\u{5}\u{12A}\u{1781}\u{A}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}" .
		    "\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{5}\u{12A}\u{178A}" .
		    "\u{A}\u{12A}\u{3}\u{12A}\u{5}\u{12A}\u{178D}\u{A}\u{12A}\u{3}\u{12A}" .
		    "\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{3}" .
		    "\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{5}\u{12A}\u{1799}\u{A}" .
		    "\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}" .
		    "\u{3}\u{12A}\u{5}\u{12A}\u{17A1}\u{A}\u{12A}\u{3}\u{12A}\u{3}\u{12A}" .
		    "\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{7}\u{12A}\u{17A9}" .
		    "\u{A}\u{12A}\u{C}\u{12A}\u{E}\u{12A}\u{17AC}\u{B}\u{12A}\u{5}\u{12A}" .
		    "\u{17AE}\u{A}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{5}\u{12A}\u{17B2}\u{A}" .
		    "\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{5}\u{12A}\u{17B6}\u{A}\u{12A}\u{3}" .
		    "\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}" .
		    "\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}" .
		    "\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}" .
		    "\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}" .
		    "\u{12B}\u{5}\u{12B}\u{17CF}\u{A}\u{12B}\u{3}\u{12C}\u{3}\u{12C}\u{3}" .
		    "\u{12C}\u{3}\u{12C}\u{3}\u{12C}\u{3}\u{12D}\u{3}\u{12D}\u{3}\u{12D}" .
		    "\u{3}\u{12D}\u{5}\u{12D}\u{17DA}\u{A}\u{12D}\u{3}\u{12D}\u{3}\u{12D}" .
		    "\u{3}\u{12D}\u{3}\u{12D}\u{3}\u{12D}\u{5}\u{12D}\u{17E1}\u{A}\u{12D}" .
		    "\u{7}\u{12D}\u{17E3}\u{A}\u{12D}\u{C}\u{12D}\u{E}\u{12D}\u{17E6}\u{B}" .
		    "\u{12D}\u{3}\u{12E}\u{3}\u{12E}\u{3}\u{12E}\u{3}\u{12E}\u{5}\u{12E}" .
		    "\u{17EC}\u{A}\u{12E}\u{3}\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{3}\u{12F}" .
		    "\u{3}\u{12F}\u{3}\u{12F}\u{5}\u{12F}\u{17F4}\u{A}\u{12F}\u{3}\u{12F}" .
		    "\u{3}\u{12F}\u{3}\u{12F}\u{5}\u{12F}\u{17F9}\u{A}\u{12F}\u{3}\u{12F}" .
		    "\u{3}\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{7}\u{12F}\u{17FF}\u{A}\u{12F}" .
		    "\u{C}\u{12F}\u{E}\u{12F}\u{1802}\u{B}\u{12F}\u{3}\u{130}\u{3}\u{130}" .
		    "\u{3}\u{130}\u{5}\u{130}\u{1807}\u{A}\u{130}\u{3}\u{130}\u{3}\u{130}" .
		    "\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}" .
		    "\u{130}\u{5}\u{130}\u{1811}\u{A}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}" .
		    "\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}" .
		    "\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{5}\u{130}\u{181E}\u{A}\u{130}" .
		    "\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{5}\u{130}\u{1824}" .
		    "\u{A}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{5}" .
		    "\u{130}\u{182A}\u{A}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}" .
		    "\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}" .
		    "\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{5}" .
		    "\u{130}\u{183A}\u{A}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}" .
		    "\u{130}\u{5}\u{130}\u{1840}\u{A}\u{130}\u{7}\u{130}\u{1842}\u{A}\u{130}" .
		    "\u{C}\u{130}\u{E}\u{130}\u{1845}\u{B}\u{130}\u{3}\u{131}\u{3}\u{131}" .
		    "\u{3}\u{131}\u{3}\u{131}\u{5}\u{131}\u{184B}\u{A}\u{131}\u{3}\u{131}" .
		    "\u{3}\u{131}\u{3}\u{131}\u{3}\u{131}\u{3}\u{131}\u{3}\u{131}\u{3}" .
		    "\u{131}\u{5}\u{131}\u{1854}\u{A}\u{131}\u{3}\u{131}\u{7}\u{131}\u{1857}" .
		    "\u{A}\u{131}\u{C}\u{131}\u{E}\u{131}\u{185A}\u{B}\u{131}\u{3}\u{132}" .
		    "\u{3}\u{132}\u{3}\u{132}\u{5}\u{132}\u{185F}\u{A}\u{132}\u{3}\u{132}" .
		    "\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}" .
		    "\u{132}\u{3}\u{132}\u{5}\u{132}\u{1869}\u{A}\u{132}\u{3}\u{132}\u{3}" .
		    "\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}" .
		    "\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{5}\u{132}\u{1876}" .
		    "\u{A}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{5}" .
		    "\u{132}\u{187C}\u{A}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}" .
		    "\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}" .
		    "\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{5}" .
		    "\u{132}\u{188C}\u{A}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}\u{132}\u{3}" .
		    "\u{132}\u{5}\u{132}\u{1892}\u{A}\u{132}\u{3}\u{132}\u{3}\u{132}\u{5}" .
		    "\u{132}\u{1896}\u{A}\u{132}\u{3}\u{132}\u{3}\u{132}\u{7}\u{132}\u{189A}" .
		    "\u{A}\u{132}\u{C}\u{132}\u{E}\u{132}\u{189D}\u{B}\u{132}\u{3}\u{133}" .
		    "\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}" .
		    "\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}" .
		    "\u{3}\u{133}\u{3}\u{133}\u{7}\u{133}\u{18AD}\u{A}\u{133}\u{C}\u{133}" .
		    "\u{E}\u{133}\u{18B0}\u{B}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}" .
		    "\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{6}\u{133}\u{18B9}" .
		    "\u{A}\u{133}\u{D}\u{133}\u{E}\u{133}\u{18BA}\u{3}\u{133}\u{3}\u{133}" .
		    "\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}" .
		    "\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}" .
		    "\u{3}\u{133}\u{3}\u{133}\u{5}\u{133}\u{18CC}\u{A}\u{133}\u{3}\u{133}" .
		    "\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}" .
		    "\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{3}\u{133}\u{7}\u{133}" .
		    "\u{18D9}\u{A}\u{133}\u{C}\u{133}\u{E}\u{133}\u{18DC}\u{B}\u{133}\u{3}" .
		    "\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}" .
		    "\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}" .
		    "\u{134}\u{3}\u{134}\u{3}\u{134}\u{7}\u{134}\u{18EC}\u{A}\u{134}\u{C}" .
		    "\u{134}\u{E}\u{134}\u{18EF}\u{B}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}" .
		    "\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{6}\u{134}" .
		    "\u{18F8}\u{A}\u{134}\u{D}\u{134}\u{E}\u{134}\u{18F9}\u{3}\u{134}\u{3}" .
		    "\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}" .
		    "\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}" .
		    "\u{134}\u{3}\u{134}\u{3}\u{134}\u{5}\u{134}\u{190B}\u{A}\u{134}\u{3}" .
		    "\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}" .
		    "\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}\u{7}" .
		    "\u{134}\u{1918}\u{A}\u{134}\u{C}\u{134}\u{E}\u{134}\u{191B}\u{B}\u{134}" .
		    "\u{3}\u{135}\u{3}\u{135}\u{3}\u{136}\u{3}\u{136}\u{3}\u{136}\u{3}" .
		    "\u{136}\u{3}\u{136}\u{3}\u{136}\u{3}\u{136}\u{3}\u{136}\u{3}\u{136}" .
		    "\u{3}\u{136}\u{3}\u{136}\u{3}\u{136}\u{3}\u{136}\u{3}\u{136}\u{5}" .
		    "\u{136}\u{192D}\u{A}\u{136}\u{3}\u{137}\u{3}\u{137}\u{3}\u{137}\u{3}" .
		    "\u{137}\u{3}\u{137}\u{3}\u{137}\u{3}\u{137}\u{5}\u{137}\u{1936}\u{A}" .
		    "\u{137}\u{3}\u{138}\u{3}\u{138}\u{3}\u{138}\u{3}\u{138}\u{3}\u{138}" .
		    "\u{3}\u{138}\u{3}\u{138}\u{5}\u{138}\u{193F}\u{A}\u{138}\u{3}\u{139}" .
		    "\u{3}\u{139}\u{3}\u{13A}\u{3}\u{13A}\u{3}\u{13B}\u{3}\u{13B}\u{3}" .
		    "\u{13C}\u{3}\u{13C}\u{3}\u{13D}\u{3}\u{13D}\u{3}\u{13E}\u{3}\u{13E}" .
		    "\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{2}" .
		    "\u{8}\u{25C}\u{25E}\u{260}\u{262}\u{264}\u{266}\u{141}\u{2}\u{4}\u{6}" .
		    "\u{8}\u{A}\u{C}\u{E}\u{10}\u{12}\u{14}\u{16}\u{18}\u{1A}\u{1C}\u{1E}" .
		    "\u{20}\u{22}\u{24}\u{26}\u{28}\u{2A}\u{2C}\u{2E}\u{30}\u{32}\u{34}" .
		    "\u{36}\u{38}\u{3A}\u{3C}\u{3E}\u{40}\u{42}\u{44}\u{46}\u{48}\u{4A}" .
		    "\u{4C}\u{4E}\u{50}\u{52}\u{54}\u{56}\u{58}\u{5A}\u{5C}\u{5E}\u{60}" .
		    "\u{62}\u{64}\u{66}\u{68}\u{6A}\u{6C}\u{6E}\u{70}\u{72}\u{74}\u{76}" .
		    "\u{78}\u{7A}\u{7C}\u{7E}\u{80}\u{82}\u{84}\u{86}\u{88}\u{8A}\u{8C}" .
		    "\u{8E}\u{90}\u{92}\u{94}\u{96}\u{98}\u{9A}\u{9C}\u{9E}\u{A0}\u{A2}" .
		    "\u{A4}\u{A6}\u{A8}\u{AA}\u{AC}\u{AE}\u{B0}\u{B2}\u{B4}\u{B6}\u{B8}" .
		    "\u{BA}\u{BC}\u{BE}\u{C0}\u{C2}\u{C4}\u{C6}\u{C8}\u{CA}\u{CC}\u{CE}" .
		    "\u{D0}\u{D2}\u{D4}\u{D6}\u{D8}\u{DA}\u{DC}\u{DE}\u{E0}\u{E2}\u{E4}" .
		    "\u{E6}\u{E8}\u{EA}\u{EC}\u{EE}\u{F0}\u{F2}\u{F4}\u{F6}\u{F8}\u{FA}" .
		    "\u{FC}\u{FE}\u{100}\u{102}\u{104}\u{106}\u{108}\u{10A}\u{10C}\u{10E}" .
		    "\u{110}\u{112}\u{114}\u{116}\u{118}\u{11A}\u{11C}\u{11E}\u{120}\u{122}" .
		    "\u{124}\u{126}\u{128}\u{12A}\u{12C}\u{12E}\u{130}\u{132}\u{134}\u{136}" .
		    "\u{138}\u{13A}\u{13C}\u{13E}\u{140}\u{142}\u{144}\u{146}\u{148}\u{14A}" .
		    "\u{14C}\u{14E}\u{150}\u{152}\u{154}\u{156}\u{158}\u{15A}\u{15C}\u{15E}" .
		    "\u{160}\u{162}\u{164}\u{166}\u{168}\u{16A}\u{16C}\u{16E}\u{170}\u{172}" .
		    "\u{174}\u{176}\u{178}\u{17A}\u{17C}\u{17E}\u{180}\u{182}\u{184}\u{186}" .
		    "\u{188}\u{18A}\u{18C}\u{18E}\u{190}\u{192}\u{194}\u{196}\u{198}\u{19A}" .
		    "\u{19C}\u{19E}\u{1A0}\u{1A2}\u{1A4}\u{1A6}\u{1A8}\u{1AA}\u{1AC}\u{1AE}" .
		    "\u{1B0}\u{1B2}\u{1B4}\u{1B6}\u{1B8}\u{1BA}\u{1BC}\u{1BE}\u{1C0}\u{1C2}" .
		    "\u{1C4}\u{1C6}\u{1C8}\u{1CA}\u{1CC}\u{1CE}\u{1D0}\u{1D2}\u{1D4}\u{1D6}" .
		    "\u{1D8}\u{1DA}\u{1DC}\u{1DE}\u{1E0}\u{1E2}\u{1E4}\u{1E6}\u{1E8}\u{1EA}" .
		    "\u{1EC}\u{1EE}\u{1F0}\u{1F2}\u{1F4}\u{1F6}\u{1F8}\u{1FA}\u{1FC}\u{1FE}" .
		    "\u{200}\u{202}\u{204}\u{206}\u{208}\u{20A}\u{20C}\u{20E}\u{210}\u{212}" .
		    "\u{214}\u{216}\u{218}\u{21A}\u{21C}\u{21E}\u{220}\u{222}\u{224}\u{226}" .
		    "\u{228}\u{22A}\u{22C}\u{22E}\u{230}\u{232}\u{234}\u{236}\u{238}\u{23A}" .
		    "\u{23C}\u{23E}\u{240}\u{242}\u{244}\u{246}\u{248}\u{24A}\u{24C}\u{24E}" .
		    "\u{250}\u{252}\u{254}\u{256}\u{258}\u{25A}\u{25C}\u{25E}\u{260}\u{262}" .
		    "\u{264}\u{266}\u{268}\u{26A}\u{26C}\u{26E}\u{270}\u{272}\u{274}\u{276}" .
		    "\u{278}\u{27A}\u{27C}\u{27E}\u{2}\u{7F}\u{4}\u{2}\u{25}\u{25}\u{89}" .
		    "\u{89}\u{4}\u{2}\u{1C6}\u{1C6}\u{1CC}\u{1CC}\u{5}\u{2}\u{40}\u{40}" .
		    "\u{90}\u{90}\u{A5}\u{A5}\u{5}\u{2}\u{28}\u{28}\u{142}\u{142}\u{181}" .
		    "\u{181}\u{6}\u{2}\u{28}\u{28}\u{162}\u{162}\u{1C5}\u{1C5}\u{20C}\u{20C}" .
		    "\u{4}\u{2}\u{1BC}\u{1BC}\u{40F}\u{40F}\u{4}\u{2}\u{48}\u{48}\u{81}" .
		    "\u{81}\u{4}\u{2}\u{F}\u{F}\u{112}\u{112}\u{5}\u{2}\u{2A}\u{2A}\u{4E}" .
		    "\u{4E}\u{A8}\u{A8}\u{4}\u{2}\u{16F}\u{16F}\u{1DE}\u{1DE}\u{5}\u{2}" .
		    "\u{1B4}\u{1B4}\u{232}\u{232}\u{239}\u{239}\u{4}\u{2}\u{149}\u{149}" .
		    "\u{186}\u{186}\u{4}\u{2}\u{124}\u{124}\u{194}\u{194}\u{4}\u{2}\u{122}" .
		    "\u{122}\u{178}\u{178}\u{5}\u{2}\u{49}\u{49}\u{4D}\u{4D}\u{72}\u{72}" .
		    "\u{5}\u{2}\u{28}\u{28}\u{153}\u{153}\u{16D}\u{16D}\u{5}\u{2}\u{28}" .
		    "\u{28}\u{14F}\u{14F}\u{2AE}\u{2AE}\u{4}\u{2}\u{226}\u{226}\u{247}" .
		    "\u{247}\u{4}\u{2}\u{4A}\u{4A}\u{54}\u{54}\u{5}\u{2}\u{171}\u{171}" .
		    "\u{1D5}\u{1D5}\u{20E}\u{20E}\u{4}\u{2}\u{40}\u{40}\u{90}\u{90}\u{3}" .
		    "\u{2}\u{128}\u{129}\u{3}\u{2}\u{405}\u{406}\u{4}\u{2}\u{40F}\u{40F}" .
		    "\u{417}\u{417}\u{5}\u{2}\u{16C}\u{16C}\u{18F}\u{18F}\u{1C3}\u{1C3}" .
		    "\u{4}\u{2}\u{28}\u{28}\u{405}\u{406}\u{8}\u{2}\u{28}\u{28}\u{135}" .
		    "\u{135}\u{137}\u{137}\u{153}\u{153}\u{16D}\u{16D}\u{1EB}\u{1EB}\u{3}" .
		    "\u{2}\u{406}\u{407}\u{4}\u{2}\u{7}\u{7}\u{31}\u{31}\u{4}\u{2}\u{D}" .
		    "\u{D}\u{9F}\u{9F}\u{4}\u{2}\u{B0}\u{B0}\u{24B}\u{24B}\u{4}\u{2}\u{14}" .
		    "\u{14}\u{84}\u{84}\u{5}\u{2}\u{29}\u{29}\u{46}\u{46}\u{61}\u{61}\u{4}" .
		    "\u{2}\u{61}\u{61}\u{139}\u{139}\u{4}\u{2}\u{130}\u{130}\u{169}\u{169}" .
		    "\u{4}\u{2}\u{5D}\u{5D}\u{204}\u{204}\u{4}\u{2}\u{29}\u{29}\u{61}\u{61}" .
		    "\u{4}\u{2}\u{8}\u{8}\u{2F}\u{2F}\u{4}\u{2}\u{AC}\u{AC}\u{244}\u{244}" .
		    "\u{6}\u{2}\u{16C}\u{16C}\u{18F}\u{18F}\u{1C2}\u{1C2}\u{1E1}\u{1E1}" .
		    "\u{4}\u{2}\u{16C}\u{16C}\u{1C2}\u{1C2}\u{4}\u{2}\u{E}\u{E}\u{2B}\u{2B}" .
		    "\u{5}\u{2}\u{3D}\u{3D}\u{48}\u{48}\u{AA}\u{AA}\u{4}\u{2}\u{21}\u{21}" .
		    "\u{4C}\u{4C}\u{4}\u{2}\u{59}\u{59}\u{87}\u{87}\u{4}\u{2}\u{8}\u{8}" .
		    "\u{2F}\u{30}\u{3}\u{2}\u{21B}\u{21C}\u{4}\u{2}\u{174}\u{174}\u{20A}" .
		    "\u{20A}\u{4}\u{2}\u{D2}\u{D2}\u{197}\u{197}\u{7}\u{2}\u{62}\u{62}" .
		    "\u{19C}\u{19D}\u{19F}\u{19F}\u{1A3}\u{1AB}\u{1ED}\u{1ED}\u{6}\u{2}" .
		    "\u{199}\u{19A}\u{19E}\u{19E}\u{1A0}\u{1A1}\u{1EE}\u{1EE}\u{5}\u{2}" .
		    "\u{63}\u{63}\u{198}\u{198}\u{1A2}\u{1A2}\u{4}\u{2}\u{188}\u{188}\u{21D}" .
		    "\u{21D}\u{4}\u{2}\u{217}\u{217}\u{219}\u{219}\u{4}\u{2}\u{11C}\u{11C}" .
		    "\u{21E}\u{21E}\u{4}\u{2}\u{53}\u{53}\u{1FC}\u{1FC}\u{4}\u{2}\u{31}" .
		    "\u{31}\u{147}\u{147}\u{5}\u{2}\u{1E}\u{1E}\u{38}\u{38}\u{A3}\u{A3}" .
		    "\u{5}\u{2}\u{77}\u{77}\u{9C}\u{9C}\u{172}\u{172}\u{4}\u{2}\u{5F}\u{5F}" .
		    "\u{A6}\u{A6}\u{4}\u{2}\u{12C}\u{12C}\u{20F}\u{20F}\u{4}\u{2}\u{26}" .
		    "\u{26}\u{246}\u{246}\u{4}\u{2}\u{69}\u{69}\u{194}\u{194}\u{4}\u{2}" .
		    "\u{165}\u{165}\u{1E7}\u{1E7}\u{6}\u{2}\u{BE}\u{BE}\u{C0}\u{C0}\u{C6}" .
		    "\u{C6}\u{227}\u{227}\u{4}\u{2}\u{3E6}\u{3E6}\u{3F7}\u{3F7}\u{4}\u{2}" .
		    "\u{11D}\u{11D}\u{1EF}\u{1EF}\u{4}\u{2}\u{3F}\u{3F}\u{49}\u{49}\u{8}" .
		    "\u{2}\u{77}\u{77}\u{9C}\u{9C}\u{A1}\u{A1}\u{15E}\u{15E}\u{172}\u{172}" .
		    "\u{246}\u{246}\u{4}\u{2}\u{1BB}\u{1BB}\u{223}\u{223}\u{4}\u{2}\u{15B}" .
		    "\u{15B}\u{24A}\u{24A}\u{4}\u{2}\u{77}\u{77}\u{172}\u{172}\u{5}\u{2}" .
		    "\u{4A}\u{4A}\u{55}\u{55}\u{17F}\u{17F}\u{5}\u{2}\u{174}\u{174}\u{194}" .
		    "\u{194}\u{20A}\u{20A}\u{4}\u{2}\u{223}\u{223}\u{245}\u{245}\u{4}\u{2}" .
		    "\u{13A}\u{13A}\u{1E6}\u{1E6}\u{8}\u{2}\u{D2}\u{D2}\u{158}\u{158}\u{15A}" .
		    "\u{15A}\u{173}\u{173}\u{1EC}\u{1EC}\u{210}\u{210}\u{4}\u{2}\u{2B}" .
		    "\u{2C}\u{39}\u{39}\u{5}\u{2}\u{165}\u{165}\u{1D7}\u{1D7}\u{30A}\u{30A}" .
		    "\u{4}\u{2}\u{18C}\u{18C}\u{234}\u{234}\u{C}\u{2}\u{12B}\u{12B}\u{132}" .
		    "\u{132}\u{13C}\u{13E}\u{144}\u{144}\u{1B5}\u{1B5}\u{1BD}\u{1BD}\u{228}" .
		    "\u{228}\u{22F}\u{22F}\u{2DA}\u{2DA}\u{380}\u{380}\u{4}\u{2}\u{22}" .
		    "\u{22}\u{99}\u{99}\u{4}\u{2}\u{6B}\u{6B}\u{378}\u{378}\u{D}\u{2}\u{12B}" .
		    "\u{12B}\u{132}\u{132}\u{13C}\u{13E}\u{144}\u{144}\u{1B5}\u{1B5}\u{1BD}" .
		    "\u{1BD}\u{1FD}\u{1FD}\u{228}\u{228}\u{22F}\u{22F}\u{2DA}\u{2DA}\u{380}" .
		    "\u{380}\u{5}\u{2}\u{40F}\u{40F}\u{417}\u{417}\u{419}\u{419}\u{3}\u{2}" .
		    "\u{41A}\u{41B}\u{5}\u{2}\u{2A9}\u{2B4}\u{40F}\u{40F}\u{417}\u{418}" .
		    "\u{4}\u{2}\u{405}\u{407}\u{410}\u{410}\u{4}\u{2}\u{3A}\u{3A}\u{A2}" .
		    "\u{A2}\u{4}\u{2}\u{6A}\u{6A}\u{413}\u{413}\u{6}\u{2}\u{18}\u{18}\u{CE}" .
		    "\u{D0}\u{D9}\u{DC}\u{1C0}\u{1C0}\u{4}\u{2}\u{18}\u{18}\u{CF}\u{CF}" .
		    "\u{4}\u{2}\u{18}\u{18}\u{CE}\u{CE}\u{5}\u{2}\u{B4}\u{B6}\u{B8}\u{B8}" .
		    "\u{BE}\u{BF}\u{4}\u{2}\u{A7}\u{A7}\u{20D}\u{20D}\u{5}\u{2}\u{C3}\u{C3}" .
		    "\u{C6}\u{C8}\u{16D}\u{16D}\u{7}\u{2}\u{C9}\u{C9}\u{D4}\u{D6}\u{D8}" .
		    "\u{D8}\u{DF}\u{DF}\u{120}\u{121}\u{5}\u{2}\u{CA}\u{CD}\u{D2}\u{D3}" .
		    "\u{11E}\u{11E}\u{4}\u{2}\u{8C}\u{8C}\u{DD}\u{DD}\u{4}\u{2}\u{18C}" .
		    "\u{18C}\u{2B9}\u{2C1}\u{4}\u{2}\u{D2}\u{D2}\u{1C0}\u{1C0}\u{5}\u{2}" .
		    "\u{C9}\u{CA}\u{CC}\u{CC}\u{18C}\u{18C}\u{4}\u{2}\u{FF}\u{100}\u{106}" .
		    "\u{106}\u{4}\u{2}\u{23}\u{23}\u{FD}\u{100}\u{3}\u{2}\u{109}\u{10A}" .
		    "\u{5}\u{2}\u{11}\u{11}\u{57}\u{57}\u{A0}\u{A0}\u{4}\u{2}\u{CE}\u{CE}" .
		    "\u{D2}\u{D2}\u{4}\u{2}\u{C9}\u{CA}\u{CC}\u{CC}\u{5}\u{2}\u{E}\u{E}" .
		    "\u{2B}\u{2B}\u{376}\u{376}\u{5}\u{2}\u{ED}\u{ED}\u{F3}\u{F4}\u{F9}" .
		    "\u{F9}\u{5}\u{2}\u{EE}\u{F0}\u{F5}\u{F8}\u{FA}\u{FC}\u{4}\u{2}\u{1CA}" .
		    "\u{1CA}\u{1D8}\u{1D8}\u{4}\u{2}\u{68}\u{68}\u{3FA}\u{3FA}\u{5}\u{2}" .
		    "\u{3A}\u{3A}\u{A2}\u{A2}\u{23D}\u{23D}\u{4}\u{2}\u{7D}\u{7D}\u{88}" .
		    "\u{88}\u{5}\u{2}\u{8}\u{8}\u{115}\u{115}\u{213}\u{213}\u{6}\u{2}\u{68}" .
		    "\u{68}\u{3F2}\u{3F2}\u{3F4}\u{3F4}\u{3FA}\u{3FB}\u{3}\u{2}\u{3EF}" .
		    "\u{3F6}\u{3}\u{2}\u{281}\u{2A8}\u{3}\u{2}\u{2B5}\u{2B8}\u{3}\u{2}" .
		    "\u{25E}\u{266}\u{3}\u{2}\u{256}\u{25D}\u{5}\u{2}\u{C9}\u{CD}\u{DA}" .
		    "\u{DA}\u{DD}\u{DD}\u{13}\u{2}\u{22}\u{22}\u{2E}\u{2E}\u{6B}\u{6B}" .
		    "\u{99}\u{99}\u{DF}\u{DF}\u{110}\u{184}\u{186}\u{1B2}\u{1B4}\u{1C7}" .
		    "\u{1C9}\u{1FE}\u{200}\u{225}\u{227}\u{235}\u{237}\u{246}\u{249}\u{250}" .
		    "\u{255}\u{255}\u{2AE}\u{2AE}\u{2DA}\u{2DA}\u{380}\u{380}\u{11}\u{2}" .
		    "\u{25}\u{25}\u{59}\u{59}\u{87}\u{87}\u{C9}\u{CB}\u{CD}\u{CD}\u{F1}" .
		    "\u{F1}\u{108}\u{108}\u{185}\u{185}\u{248}\u{248}\u{256}\u{25D}\u{27A}" .
		    "\u{27A}\u{2B9}\u{2B9}\u{2BC}\u{2D9}\u{2DB}\u{37F}\u{381}\u{3E5}\u{2}" .
		    "\u{1DAD}\u{2}\u{281}\u{3}\u{2}\u{2}\u{2}\u{4}\u{292}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{6}\u{2A6}\u{3}\u{2}\u{2}\u{2}\u{8}\u{2A8}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{A}\u{2CD}\u{3}\u{2}\u{2}\u{2}\u{C}\u{2D9}\u{3}\u{2}\u{2}\u{2}\u{E}" .
		    "\u{2E4}\u{3}\u{2}\u{2}\u{2}\u{10}\u{2F5}\u{3}\u{2}\u{2}\u{2}\u{12}" .
		    "\u{2FA}\u{3}\u{2}\u{2}\u{2}\u{14}\u{306}\u{3}\u{2}\u{2}\u{2}\u{16}" .
		    "\u{321}\u{3}\u{2}\u{2}\u{2}\u{18}\u{32A}\u{3}\u{2}\u{2}\u{2}\u{1A}" .
		    "\u{32C}\u{3}\u{2}\u{2}\u{2}\u{1C}\u{338}\u{3}\u{2}\u{2}\u{2}\u{1E}" .
		    "\u{356}\u{3}\u{2}\u{2}\u{2}\u{20}\u{37A}\u{3}\u{2}\u{2}\u{2}\u{22}" .
		    "\u{3AD}\u{3}\u{2}\u{2}\u{2}\u{24}\u{3C7}\u{3}\u{2}\u{2}\u{2}\u{26}" .
		    "\u{3E5}\u{3}\u{2}\u{2}\u{2}\u{28}\u{446}\u{3}\u{2}\u{2}\u{2}\u{2A}" .
		    "\u{448}\u{3}\u{2}\u{2}\u{2}\u{2C}\u{45A}\u{3}\u{2}\u{2}\u{2}\u{2E}" .
		    "\u{497}\u{3}\u{2}\u{2}\u{2}\u{30}\u{4AA}\u{3}\u{2}\u{2}\u{2}\u{32}" .
		    "\u{4E5}\u{3}\u{2}\u{2}\u{2}\u{34}\u{4E7}\u{3}\u{2}\u{2}\u{2}\u{36}" .
		    "\u{513}\u{3}\u{2}\u{2}\u{2}\u{38}\u{519}\u{3}\u{2}\u{2}\u{2}\u{3A}" .
		    "\u{51B}\u{3}\u{2}\u{2}\u{2}\u{3C}\u{530}\u{3}\u{2}\u{2}\u{2}\u{3E}" .
		    "\u{537}\u{3}\u{2}\u{2}\u{2}\u{40}\u{539}\u{3}\u{2}\u{2}\u{2}\u{42}" .
		    "\u{549}\u{3}\u{2}\u{2}\u{2}\u{44}\u{54C}\u{3}\u{2}\u{2}\u{2}\u{46}" .
		    "\u{551}\u{3}\u{2}\u{2}\u{2}\u{48}\u{56B}\u{3}\u{2}\u{2}\u{2}\u{4A}" .
		    "\u{57B}\u{3}\u{2}\u{2}\u{2}\u{4C}\u{57D}\u{3}\u{2}\u{2}\u{2}\u{4E}" .
		    "\u{58D}\u{3}\u{2}\u{2}\u{2}\u{50}\u{58F}\u{3}\u{2}\u{2}\u{2}\u{52}" .
		    "\u{5BE}\u{3}\u{2}\u{2}\u{2}\u{54}\u{605}\u{3}\u{2}\u{2}\u{2}\u{56}" .
		    "\u{607}\u{3}\u{2}\u{2}\u{2}\u{58}\u{623}\u{3}\u{2}\u{2}\u{2}\u{5A}" .
		    "\u{62B}\u{3}\u{2}\u{2}\u{2}\u{5C}\u{649}\u{3}\u{2}\u{2}\u{2}\u{5E}" .
		    "\u{6DB}\u{3}\u{2}\u{2}\u{2}\u{60}\u{6DD}\u{3}\u{2}\u{2}\u{2}\u{62}" .
		    "\u{6E0}\u{3}\u{2}\u{2}\u{2}\u{64}\u{72A}\u{3}\u{2}\u{2}\u{2}\u{66}" .
		    "\u{741}\u{3}\u{2}\u{2}\u{2}\u{68}\u{7C6}\u{3}\u{2}\u{2}\u{2}\u{6A}" .
		    "\u{7CB}\u{3}\u{2}\u{2}\u{2}\u{6C}\u{7CD}\u{3}\u{2}\u{2}\u{2}\u{6E}" .
		    "\u{7D7}\u{3}\u{2}\u{2}\u{2}\u{70}\u{80C}\u{3}\u{2}\u{2}\u{2}\u{72}" .
		    "\u{820}\u{3}\u{2}\u{2}\u{2}\u{74}\u{822}\u{3}\u{2}\u{2}\u{2}\u{76}" .
		    "\u{845}\u{3}\u{2}\u{2}\u{2}\u{78}\u{84E}\u{3}\u{2}\u{2}\u{2}\u{7A}" .
		    "\u{855}\u{3}\u{2}\u{2}\u{2}\u{7C}\u{86C}\u{3}\u{2}\u{2}\u{2}\u{7E}" .
		    "\u{875}\u{3}\u{2}\u{2}\u{2}\u{80}\u{884}\u{3}\u{2}\u{2}\u{2}\u{82}" .
		    "\u{89A}\u{3}\u{2}\u{2}\u{2}\u{84}\u{8AE}\u{3}\u{2}\u{2}\u{2}\u{86}" .
		    "\u{A34}\u{3}\u{2}\u{2}\u{2}\u{88}\u{A36}\u{3}\u{2}\u{2}\u{2}\u{8A}" .
		    "\u{A3D}\u{3}\u{2}\u{2}\u{2}\u{8C}\u{A44}\u{3}\u{2}\u{2}\u{2}\u{8E}" .
		    "\u{A5B}\u{3}\u{2}\u{2}\u{2}\u{90}\u{A63}\u{3}\u{2}\u{2}\u{2}\u{92}" .
		    "\u{A6A}\u{3}\u{2}\u{2}\u{2}\u{94}\u{A71}\u{3}\u{2}\u{2}\u{2}\u{96}" .
		    "\u{A78}\u{3}\u{2}\u{2}\u{2}\u{98}\u{A84}\u{3}\u{2}\u{2}\u{2}\u{9A}" .
		    "\u{A8E}\u{3}\u{2}\u{2}\u{2}\u{9C}\u{A95}\u{3}\u{2}\u{2}\u{2}\u{9E}" .
		    "\u{AA5}\u{3}\u{2}\u{2}\u{2}\u{A0}\u{AAF}\u{3}\u{2}\u{2}\u{2}\u{A2}" .
		    "\u{AB3}\u{3}\u{2}\u{2}\u{2}\u{A4}\u{AB9}\u{3}\u{2}\u{2}\u{2}\u{A6}" .
		    "\u{AC5}\u{3}\u{2}\u{2}\u{2}\u{A8}\u{AC7}\u{3}\u{2}\u{2}\u{2}\u{AA}" .
		    "\u{ACE}\u{3}\u{2}\u{2}\u{2}\u{AC}\u{AD0}\u{3}\u{2}\u{2}\u{2}\u{AE}" .
		    "\u{B03}\u{3}\u{2}\u{2}\u{2}\u{B0}\u{B4D}\u{3}\u{2}\u{2}\u{2}\u{B2}" .
		    "\u{B88}\u{3}\u{2}\u{2}\u{2}\u{B4}\u{BE0}\u{3}\u{2}\u{2}\u{2}\u{B6}" .
		    "\u{BE4}\u{3}\u{2}\u{2}\u{2}\u{B8}\u{BF8}\u{3}\u{2}\u{2}\u{2}\u{BA}" .
		    "\u{BFA}\u{3}\u{2}\u{2}\u{2}\u{BC}\u{C02}\u{3}\u{2}\u{2}\u{2}\u{BE}" .
		    "\u{C0A}\u{3}\u{2}\u{2}\u{2}\u{C0}\u{C0C}\u{3}\u{2}\u{2}\u{2}\u{C2}" .
		    "\u{C2A}\u{3}\u{2}\u{2}\u{2}\u{C4}\u{C61}\u{3}\u{2}\u{2}\u{2}\u{C6}" .
		    "\u{C6A}\u{3}\u{2}\u{2}\u{2}\u{C8}\u{C7E}\u{3}\u{2}\u{2}\u{2}\u{CA}" .
		    "\u{C8A}\u{3}\u{2}\u{2}\u{2}\u{CC}\u{C8E}\u{3}\u{2}\u{2}\u{2}\u{CE}" .
		    "\u{CAF}\u{3}\u{2}\u{2}\u{2}\u{D0}\u{CC4}\u{3}\u{2}\u{2}\u{2}\u{D2}" .
		    "\u{CCE}\u{3}\u{2}\u{2}\u{2}\u{D4}\u{CD2}\u{3}\u{2}\u{2}\u{2}\u{D6}" .
		    "\u{CEB}\u{3}\u{2}\u{2}\u{2}\u{D8}\u{D15}\u{3}\u{2}\u{2}\u{2}\u{DA}" .
		    "\u{D17}\u{3}\u{2}\u{2}\u{2}\u{DC}\u{D26}\u{3}\u{2}\u{2}\u{2}\u{DE}" .
		    "\u{D54}\u{3}\u{2}\u{2}\u{2}\u{E0}\u{D5E}\u{3}\u{2}\u{2}\u{2}\u{E2}" .
		    "\u{D68}\u{3}\u{2}\u{2}\u{2}\u{E4}\u{D92}\u{3}\u{2}\u{2}\u{2}\u{E6}" .
		    "\u{D94}\u{3}\u{2}\u{2}\u{2}\u{E8}\u{DA5}\u{3}\u{2}\u{2}\u{2}\u{EA}" .
		    "\u{DAB}\u{3}\u{2}\u{2}\u{2}\u{EC}\u{DBB}\u{3}\u{2}\u{2}\u{2}\u{EE}" .
		    "\u{DBF}\u{3}\u{2}\u{2}\u{2}\u{F0}\u{DE5}\u{3}\u{2}\u{2}\u{2}\u{F2}" .
		    "\u{E0B}\u{3}\u{2}\u{2}\u{2}\u{F4}\u{E19}\u{3}\u{2}\u{2}\u{2}\u{F6}" .
		    "\u{E21}\u{3}\u{2}\u{2}\u{2}\u{F8}\u{E23}\u{3}\u{2}\u{2}\u{2}\u{FA}" .
		    "\u{E3D}\u{3}\u{2}\u{2}\u{2}\u{FC}\u{E41}\u{3}\u{2}\u{2}\u{2}\u{FE}" .
		    "\u{E50}\u{3}\u{2}\u{2}\u{2}\u{100}\u{E52}\u{3}\u{2}\u{2}\u{2}\u{102}" .
		    "\u{E5E}\u{3}\u{2}\u{2}\u{2}\u{104}\u{E62}\u{3}\u{2}\u{2}\u{2}\u{106}" .
		    "\u{E73}\u{3}\u{2}\u{2}\u{2}\u{108}\u{E84}\u{3}\u{2}\u{2}\u{2}\u{10A}" .
		    "\u{E87}\u{3}\u{2}\u{2}\u{2}\u{10C}\u{E91}\u{3}\u{2}\u{2}\u{2}\u{10E}" .
		    "\u{E95}\u{3}\u{2}\u{2}\u{2}\u{110}\u{E9F}\u{3}\u{2}\u{2}\u{2}\u{112}" .
		    "\u{EA2}\u{3}\u{2}\u{2}\u{2}\u{114}\u{EA7}\u{3}\u{2}\u{2}\u{2}\u{116}" .
		    "\u{EBB}\u{3}\u{2}\u{2}\u{2}\u{118}\u{EBD}\u{3}\u{2}\u{2}\u{2}\u{11A}" .
		    "\u{ECE}\u{3}\u{2}\u{2}\u{2}\u{11C}\u{ED7}\u{3}\u{2}\u{2}\u{2}\u{11E}" .
		    "\u{EE0}\u{3}\u{2}\u{2}\u{2}\u{120}\u{EE2}\u{3}\u{2}\u{2}\u{2}\u{122}" .
		    "\u{EF0}\u{3}\u{2}\u{2}\u{2}\u{124}\u{EFB}\u{3}\u{2}\u{2}\u{2}\u{126}" .
		    "\u{F04}\u{3}\u{2}\u{2}\u{2}\u{128}\u{F07}\u{3}\u{2}\u{2}\u{2}\u{12A}" .
		    "\u{F0F}\u{3}\u{2}\u{2}\u{2}\u{12C}\u{F28}\u{3}\u{2}\u{2}\u{2}\u{12E}" .
		    "\u{F34}\u{3}\u{2}\u{2}\u{2}\u{130}\u{F37}\u{3}\u{2}\u{2}\u{2}\u{132}" .
		    "\u{F57}\u{3}\u{2}\u{2}\u{2}\u{134}\u{F59}\u{3}\u{2}\u{2}\u{2}\u{136}" .
		    "\u{F5B}\u{3}\u{2}\u{2}\u{2}\u{138}\u{F5D}\u{3}\u{2}\u{2}\u{2}\u{13A}" .
		    "\u{F5F}\u{3}\u{2}\u{2}\u{2}\u{13C}\u{F94}\u{3}\u{2}\u{2}\u{2}\u{13E}" .
		    "\u{F96}\u{3}\u{2}\u{2}\u{2}\u{140}\u{F9C}\u{3}\u{2}\u{2}\u{2}\u{142}" .
		    "\u{FB0}\u{3}\u{2}\u{2}\u{2}\u{144}\u{FBE}\u{3}\u{2}\u{2}\u{2}\u{146}" .
		    "\u{FC9}\u{3}\u{2}\u{2}\u{2}\u{148}\u{FCB}\u{3}\u{2}\u{2}\u{2}\u{14A}" .
		    "\u{FD1}\u{3}\u{2}\u{2}\u{2}\u{14C}\u{FDB}\u{3}\u{2}\u{2}\u{2}\u{14E}" .
		    "\u{FDF}\u{3}\u{2}\u{2}\u{2}\u{150}\u{FE6}\u{3}\u{2}\u{2}\u{2}\u{152}" .
		    "\u{FEA}\u{3}\u{2}\u{2}\u{2}\u{154}\u{FF0}\u{3}\u{2}\u{2}\u{2}\u{156}" .
		    "\u{FF7}\u{3}\u{2}\u{2}\u{2}\u{158}\u{FFD}\u{3}\u{2}\u{2}\u{2}\u{15A}" .
		    "\u{1003}\u{3}\u{2}\u{2}\u{2}\u{15C}\u{1008}\u{3}\u{2}\u{2}\u{2}\u{15E}" .
		    "\u{1037}\u{3}\u{2}\u{2}\u{2}\u{160}\u{104C}\u{3}\u{2}\u{2}\u{2}\u{162}" .
		    "\u{1065}\u{3}\u{2}\u{2}\u{2}\u{164}\u{1068}\u{3}\u{2}\u{2}\u{2}\u{166}" .
		    "\u{106E}\u{3}\u{2}\u{2}\u{2}\u{168}\u{107E}\u{3}\u{2}\u{2}\u{2}\u{16A}" .
		    "\u{108D}\u{3}\u{2}\u{2}\u{2}\u{16C}\u{1093}\u{3}\u{2}\u{2}\u{2}\u{16E}" .
		    "\u{10B1}\u{3}\u{2}\u{2}\u{2}\u{170}\u{10B3}\u{3}\u{2}\u{2}\u{2}\u{172}" .
		    "\u{10BA}\u{3}\u{2}\u{2}\u{2}\u{174}\u{10C6}\u{3}\u{2}\u{2}\u{2}\u{176}" .
		    "\u{10CC}\u{3}\u{2}\u{2}\u{2}\u{178}\u{10E5}\u{3}\u{2}\u{2}\u{2}\u{17A}" .
		    "\u{10E9}\u{3}\u{2}\u{2}\u{2}\u{17C}\u{10ED}\u{3}\u{2}\u{2}\u{2}\u{17E}" .
		    "\u{10F8}\u{3}\u{2}\u{2}\u{2}\u{180}\u{1136}\u{3}\u{2}\u{2}\u{2}\u{182}" .
		    "\u{116E}\u{3}\u{2}\u{2}\u{2}\u{184}\u{1170}\u{3}\u{2}\u{2}\u{2}\u{186}" .
		    "\u{117D}\u{3}\u{2}\u{2}\u{2}\u{188}\u{11AF}\u{3}\u{2}\u{2}\u{2}\u{18A}" .
		    "\u{11C1}\u{3}\u{2}\u{2}\u{2}\u{18C}\u{11F3}\u{3}\u{2}\u{2}\u{2}\u{18E}" .
		    "\u{11F5}\u{3}\u{2}\u{2}\u{2}\u{190}\u{1202}\u{3}\u{2}\u{2}\u{2}\u{192}" .
		    "\u{120D}\u{3}\u{2}\u{2}\u{2}\u{194}\u{1228}\u{3}\u{2}\u{2}\u{2}\u{196}" .
		    "\u{1232}\u{3}\u{2}\u{2}\u{2}\u{198}\u{123C}\u{3}\u{2}\u{2}\u{2}\u{19A}" .
		    "\u{123E}\u{3}\u{2}\u{2}\u{2}\u{19C}\u{1248}\u{3}\u{2}\u{2}\u{2}\u{19E}" .
		    "\u{124B}\u{3}\u{2}\u{2}\u{2}\u{1A0}\u{127D}\u{3}\u{2}\u{2}\u{2}\u{1A2}" .
		    "\u{128F}\u{3}\u{2}\u{2}\u{2}\u{1A4}\u{1291}\u{3}\u{2}\u{2}\u{2}\u{1A6}" .
		    "\u{1295}\u{3}\u{2}\u{2}\u{2}\u{1A8}\u{129C}\u{3}\u{2}\u{2}\u{2}\u{1AA}" .
		    "\u{12A5}\u{3}\u{2}\u{2}\u{2}\u{1AC}\u{12AB}\u{3}\u{2}\u{2}\u{2}\u{1AE}" .
		    "\u{12B2}\u{3}\u{2}\u{2}\u{2}\u{1B0}\u{12C8}\u{3}\u{2}\u{2}\u{2}\u{1B2}" .
		    "\u{12CA}\u{3}\u{2}\u{2}\u{2}\u{1B4}\u{12D5}\u{3}\u{2}\u{2}\u{2}\u{1B6}" .
		    "\u{12DB}\u{3}\u{2}\u{2}\u{2}\u{1B8}\u{1312}\u{3}\u{2}\u{2}\u{2}\u{1BA}" .
		    "\u{13AB}\u{3}\u{2}\u{2}\u{2}\u{1BC}\u{13B7}\u{3}\u{2}\u{2}\u{2}\u{1BE}" .
		    "\u{13C6}\u{3}\u{2}\u{2}\u{2}\u{1C0}\u{13CC}\u{3}\u{2}\u{2}\u{2}\u{1C2}" .
		    "\u{13DF}\u{3}\u{2}\u{2}\u{2}\u{1C4}\u{13E9}\u{3}\u{2}\u{2}\u{2}\u{1C6}" .
		    "\u{13F7}\u{3}\u{2}\u{2}\u{2}\u{1C8}\u{13F9}\u{3}\u{2}\u{2}\u{2}\u{1CA}" .
		    "\u{13FC}\u{3}\u{2}\u{2}\u{2}\u{1CC}\u{1412}\u{3}\u{2}\u{2}\u{2}\u{1CE}" .
		    "\u{141E}\u{3}\u{2}\u{2}\u{2}\u{1D0}\u{1427}\u{3}\u{2}\u{2}\u{2}\u{1D2}" .
		    "\u{1433}\u{3}\u{2}\u{2}\u{2}\u{1D4}\u{1437}\u{3}\u{2}\u{2}\u{2}\u{1D6}" .
		    "\u{1439}\u{3}\u{2}\u{2}\u{2}\u{1D8}\u{1461}\u{3}\u{2}\u{2}\u{2}\u{1DA}" .
		    "\u{1468}\u{3}\u{2}\u{2}\u{2}\u{1DC}\u{146A}\u{3}\u{2}\u{2}\u{2}\u{1DE}" .
		    "\u{1481}\u{3}\u{2}\u{2}\u{2}\u{1E0}\u{1487}\u{3}\u{2}\u{2}\u{2}\u{1E2}" .
		    "\u{148F}\u{3}\u{2}\u{2}\u{2}\u{1E4}\u{1492}\u{3}\u{2}\u{2}\u{2}\u{1E6}" .
		    "\u{1495}\u{3}\u{2}\u{2}\u{2}\u{1E8}\u{14AA}\u{3}\u{2}\u{2}\u{2}\u{1EA}" .
		    "\u{14BF}\u{3}\u{2}\u{2}\u{2}\u{1EC}\u{14C5}\u{3}\u{2}\u{2}\u{2}\u{1EE}" .
		    "\u{14EB}\u{3}\u{2}\u{2}\u{2}\u{1F0}\u{14F7}\u{3}\u{2}\u{2}\u{2}\u{1F2}" .
		    "\u{14F9}\u{3}\u{2}\u{2}\u{2}\u{1F4}\u{14FF}\u{3}\u{2}\u{2}\u{2}\u{1F6}" .
		    "\u{1501}\u{3}\u{2}\u{2}\u{2}\u{1F8}\u{150A}\u{3}\u{2}\u{2}\u{2}\u{1FA}" .
		    "\u{1515}\u{3}\u{2}\u{2}\u{2}\u{1FC}\u{1517}\u{3}\u{2}\u{2}\u{2}\u{1FE}" .
		    "\u{151D}\u{3}\u{2}\u{2}\u{2}\u{200}\u{1521}\u{3}\u{2}\u{2}\u{2}\u{202}" .
		    "\u{1523}\u{3}\u{2}\u{2}\u{2}\u{204}\u{1525}\u{3}\u{2}\u{2}\u{2}\u{206}" .
		    "\u{1537}\u{3}\u{2}\u{2}\u{2}\u{208}\u{1547}\u{3}\u{2}\u{2}\u{2}\u{20A}" .
		    "\u{154B}\u{3}\u{2}\u{2}\u{2}\u{20C}\u{1550}\u{3}\u{2}\u{2}\u{2}\u{20E}" .
		    "\u{155B}\u{3}\u{2}\u{2}\u{2}\u{210}\u{1560}\u{3}\u{2}\u{2}\u{2}\u{212}" .
		    "\u{1562}\u{3}\u{2}\u{2}\u{2}\u{214}\u{1566}\u{3}\u{2}\u{2}\u{2}\u{216}" .
		    "\u{157F}\u{3}\u{2}\u{2}\u{2}\u{218}\u{1581}\u{3}\u{2}\u{2}\u{2}\u{21A}" .
		    "\u{1584}\u{3}\u{2}\u{2}\u{2}\u{21C}\u{1589}\u{3}\u{2}\u{2}\u{2}\u{21E}" .
		    "\u{1599}\u{3}\u{2}\u{2}\u{2}\u{220}\u{1605}\u{3}\u{2}\u{2}\u{2}\u{222}" .
		    "\u{1607}\u{3}\u{2}\u{2}\u{2}\u{224}\u{162B}\u{3}\u{2}\u{2}\u{2}\u{226}" .
		    "\u{162D}\u{3}\u{2}\u{2}\u{2}\u{228}\u{1631}\u{3}\u{2}\u{2}\u{2}\u{22A}" .
		    "\u{1637}\u{3}\u{2}\u{2}\u{2}\u{22C}\u{163F}\u{3}\u{2}\u{2}\u{2}\u{22E}" .
		    "\u{1647}\u{3}\u{2}\u{2}\u{2}\u{230}\u{164F}\u{3}\u{2}\u{2}\u{2}\u{232}" .
		    "\u{165A}\u{3}\u{2}\u{2}\u{2}\u{234}\u{1662}\u{3}\u{2}\u{2}\u{2}\u{236}" .
		    "\u{166A}\u{3}\u{2}\u{2}\u{2}\u{238}\u{1672}\u{3}\u{2}\u{2}\u{2}\u{23A}" .
		    "\u{167A}\u{3}\u{2}\u{2}\u{2}\u{23C}\u{1682}\u{3}\u{2}\u{2}\u{2}\u{23E}" .
		    "\u{1695}\u{3}\u{2}\u{2}\u{2}\u{240}\u{16A5}\u{3}\u{2}\u{2}\u{2}\u{242}" .
		    "\u{16A9}\u{3}\u{2}\u{2}\u{2}\u{244}\u{16AB}\u{3}\u{2}\u{2}\u{2}\u{246}" .
		    "\u{16AE}\u{3}\u{2}\u{2}\u{2}\u{248}\u{16C3}\u{3}\u{2}\u{2}\u{2}\u{24A}" .
		    "\u{1762}\u{3}\u{2}\u{2}\u{2}\u{24C}\u{1764}\u{3}\u{2}\u{2}\u{2}\u{24E}" .
		    "\u{1777}\u{3}\u{2}\u{2}\u{2}\u{250}\u{1779}\u{3}\u{2}\u{2}\u{2}\u{252}" .
		    "\u{17B5}\u{3}\u{2}\u{2}\u{2}\u{254}\u{17CE}\u{3}\u{2}\u{2}\u{2}\u{256}" .
		    "\u{17D0}\u{3}\u{2}\u{2}\u{2}\u{258}\u{17D9}\u{3}\u{2}\u{2}\u{2}\u{25A}" .
		    "\u{17EB}\u{3}\u{2}\u{2}\u{2}\u{25C}\u{17F8}\u{3}\u{2}\u{2}\u{2}\u{25E}" .
		    "\u{1803}\u{3}\u{2}\u{2}\u{2}\u{260}\u{184A}\u{3}\u{2}\u{2}\u{2}\u{262}" .
		    "\u{185B}\u{3}\u{2}\u{2}\u{2}\u{264}\u{18CB}\u{3}\u{2}\u{2}\u{2}\u{266}" .
		    "\u{190A}\u{3}\u{2}\u{2}\u{2}\u{268}\u{191C}\u{3}\u{2}\u{2}\u{2}\u{26A}" .
		    "\u{192C}\u{3}\u{2}\u{2}\u{2}\u{26C}\u{1935}\u{3}\u{2}\u{2}\u{2}\u{26E}" .
		    "\u{193E}\u{3}\u{2}\u{2}\u{2}\u{270}\u{1940}\u{3}\u{2}\u{2}\u{2}\u{272}" .
		    "\u{1942}\u{3}\u{2}\u{2}\u{2}\u{274}\u{1944}\u{3}\u{2}\u{2}\u{2}\u{276}" .
		    "\u{1946}\u{3}\u{2}\u{2}\u{2}\u{278}\u{1948}\u{3}\u{2}\u{2}\u{2}\u{27A}" .
		    "\u{194A}\u{3}\u{2}\u{2}\u{2}\u{27C}\u{194C}\u{3}\u{2}\u{2}\u{2}\u{27E}" .
		    "\u{194E}\u{3}\u{2}\u{2}\u{2}\u{280}\u{282}\u{5}\u{4}\u{3}\u{2}\u{281}" .
		    "\u{280}\u{3}\u{2}\u{2}\u{2}\u{281}\u{282}\u{3}\u{2}\u{2}\u{2}\u{282}" .
		    "\u{284}\u{3}\u{2}\u{2}\u{2}\u{283}\u{285}\u{7}\u{3F3}\u{2}\u{2}\u{284}" .
		    "\u{283}\u{3}\u{2}\u{2}\u{2}\u{284}\u{285}\u{3}\u{2}\u{2}\u{2}\u{285}" .
		    "\u{286}\u{3}\u{2}\u{2}\u{2}\u{286}\u{287}\u{7}\u{2}\u{2}\u{3}\u{287}" .
		    "\u{3}\u{3}\u{2}\u{2}\u{2}\u{288}\u{28A}\u{5}\u{6}\u{4}\u{2}\u{289}" .
		    "\u{28B}\u{7}\u{3F3}\u{2}\u{2}\u{28A}\u{289}\u{3}\u{2}\u{2}\u{2}\u{28A}" .
		    "\u{28B}\u{3}\u{2}\u{2}\u{2}\u{28B}\u{28D}\u{3}\u{2}\u{2}\u{2}\u{28C}" .
		    "\u{28E}\u{7}\u{403}\u{2}\u{2}\u{28D}\u{28C}\u{3}\u{2}\u{2}\u{2}\u{28D}" .
		    "\u{28E}\u{3}\u{2}\u{2}\u{2}\u{28E}\u{291}\u{3}\u{2}\u{2}\u{2}\u{28F}" .
		    "\u{291}\u{5}\u{8}\u{5}\u{2}\u{290}\u{288}\u{3}\u{2}\u{2}\u{2}\u{290}" .
		    "\u{28F}\u{3}\u{2}\u{2}\u{2}\u{291}\u{294}\u{3}\u{2}\u{2}\u{2}\u{292}" .
		    "\u{290}\u{3}\u{2}\u{2}\u{2}\u{292}\u{293}\u{3}\u{2}\u{2}\u{2}\u{293}" .
		    "\u{29D}\u{3}\u{2}\u{2}\u{2}\u{294}\u{292}\u{3}\u{2}\u{2}\u{2}\u{295}" .
		    "\u{29A}\u{5}\u{6}\u{4}\u{2}\u{296}\u{298}\u{7}\u{3F3}\u{2}\u{2}\u{297}" .
		    "\u{296}\u{3}\u{2}\u{2}\u{2}\u{297}\u{298}\u{3}\u{2}\u{2}\u{2}\u{298}" .
		    "\u{299}\u{3}\u{2}\u{2}\u{2}\u{299}\u{29B}\u{7}\u{403}\u{2}\u{2}\u{29A}" .
		    "\u{297}\u{3}\u{2}\u{2}\u{2}\u{29A}\u{29B}\u{3}\u{2}\u{2}\u{2}\u{29B}" .
		    "\u{29E}\u{3}\u{2}\u{2}\u{2}\u{29C}\u{29E}\u{5}\u{8}\u{5}\u{2}\u{29D}" .
		    "\u{295}\u{3}\u{2}\u{2}\u{2}\u{29D}\u{29C}\u{3}\u{2}\u{2}\u{2}\u{29E}" .
		    "\u{5}\u{3}\u{2}\u{2}\u{2}\u{29F}\u{2A7}\u{5}\u{A}\u{6}\u{2}\u{2A0}" .
		    "\u{2A7}\u{5}\u{C}\u{7}\u{2}\u{2A1}\u{2A7}\u{5}\u{E}\u{8}\u{2}\u{2A2}" .
		    "\u{2A7}\u{5}\u{10}\u{9}\u{2}\u{2A3}\u{2A7}\u{5}\u{12}\u{A}\u{2}\u{2A4}" .
		    "\u{2A7}\u{5}\u{16}\u{C}\u{2}\u{2A5}\u{2A7}\u{5}\u{18}\u{D}\u{2}\u{2A6}" .
		    "\u{29F}\u{3}\u{2}\u{2}\u{2}\u{2A6}\u{2A0}\u{3}\u{2}\u{2}\u{2}\u{2A6}" .
		    "\u{2A1}\u{3}\u{2}\u{2}\u{2}\u{2A6}\u{2A2}\u{3}\u{2}\u{2}\u{2}\u{2A6}" .
		    "\u{2A3}\u{3}\u{2}\u{2}\u{2}\u{2A6}\u{2A4}\u{3}\u{2}\u{2}\u{2}\u{2A6}" .
		    "\u{2A5}\u{3}\u{2}\u{2}\u{2}\u{2A7}\u{7}\u{3}\u{2}\u{2}\u{2}\u{2A8}" .
		    "\u{2A9}\u{7}\u{403}\u{2}\u{2}\u{2A9}\u{9}\u{3}\u{2}\u{2}\u{2}\u{2AA}" .
		    "\u{2CE}\u{5}\u{1A}\u{E}\u{2}\u{2AB}\u{2CE}\u{5}\u{1C}\u{F}\u{2}\u{2AC}" .
		    "\u{2CE}\u{5}\u{1E}\u{10}\u{2}\u{2AD}\u{2CE}\u{5}\u{20}\u{11}\u{2}" .
		    "\u{2AE}\u{2CE}\u{5}\u{22}\u{12}\u{2}\u{2AF}\u{2CE}\u{5}\u{24}\u{13}" .
		    "\u{2}\u{2B0}\u{2CE}\u{5}\u{26}\u{14}\u{2}\u{2B1}\u{2CE}\u{5}\u{28}" .
		    "\u{15}\u{2}\u{2B2}\u{2CE}\u{5}\u{2A}\u{16}\u{2}\u{2B3}\u{2CE}\u{5}" .
		    "\u{2C}\u{17}\u{2}\u{2B4}\u{2CE}\u{5}\u{2E}\u{18}\u{2}\u{2B5}\u{2CE}" .
		    "\u{5}\u{30}\u{19}\u{2}\u{2B6}\u{2CE}\u{5}\u{72}\u{3A}\u{2}\u{2B7}" .
		    "\u{2CE}\u{5}\u{74}\u{3B}\u{2}\u{2B8}\u{2CE}\u{5}\u{76}\u{3C}\u{2}" .
		    "\u{2B9}\u{2CE}\u{5}\u{78}\u{3D}\u{2}\u{2BA}\u{2CE}\u{5}\u{7A}\u{3E}" .
		    "\u{2}\u{2BB}\u{2CE}\u{5}\u{7C}\u{3F}\u{2}\u{2BC}\u{2CE}\u{5}\u{7E}" .
		    "\u{40}\u{2}\u{2BD}\u{2CE}\u{5}\u{80}\u{41}\u{2}\u{2BE}\u{2CE}\u{5}" .
		    "\u{82}\u{42}\u{2}\u{2BF}\u{2CE}\u{5}\u{84}\u{43}\u{2}\u{2C0}\u{2CE}" .
		    "\u{5}\u{88}\u{45}\u{2}\u{2C1}\u{2CE}\u{5}\u{8A}\u{46}\u{2}\u{2C2}" .
		    "\u{2CE}\u{5}\u{8C}\u{47}\u{2}\u{2C3}\u{2CE}\u{5}\u{8E}\u{48}\u{2}" .
		    "\u{2C4}\u{2CE}\u{5}\u{90}\u{49}\u{2}\u{2C5}\u{2CE}\u{5}\u{92}\u{4A}" .
		    "\u{2}\u{2C6}\u{2CE}\u{5}\u{94}\u{4B}\u{2}\u{2C7}\u{2CE}\u{5}\u{96}" .
		    "\u{4C}\u{2}\u{2C8}\u{2CE}\u{5}\u{98}\u{4D}\u{2}\u{2C9}\u{2CE}\u{5}" .
		    "\u{9A}\u{4E}\u{2}\u{2CA}\u{2CE}\u{5}\u{9C}\u{4F}\u{2}\u{2CB}\u{2CE}" .
		    "\u{5}\u{9E}\u{50}\u{2}\u{2CC}\u{2CE}\u{5}\u{A2}\u{52}\u{2}\u{2CD}" .
		    "\u{2AA}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2AB}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2AC}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2AD}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2AE}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2AF}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2B0}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2B1}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2B2}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2B3}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2B4}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2B5}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2B6}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2B7}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2B8}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2B9}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2BA}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2BB}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2BC}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2BD}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2BE}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2BF}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2C0}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2C1}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2C2}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2C3}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2C4}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2C5}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2C6}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2C7}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2C8}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2C9}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2CA}\u{3}\u{2}\u{2}\u{2}\u{2CD}\u{2CB}\u{3}\u{2}\u{2}\u{2}\u{2CD}" .
		    "\u{2CC}\u{3}\u{2}\u{2}\u{2}\u{2CE}\u{B}\u{3}\u{2}\u{2}\u{2}\u{2CF}" .
		    "\u{2DA}\u{5}\u{B4}\u{5B}\u{2}\u{2D0}\u{2DA}\u{5}\u{AC}\u{57}\u{2}" .
		    "\u{2D1}\u{2DA}\u{5}\u{B6}\u{5C}\u{2}\u{2D2}\u{2DA}\u{5}\u{A6}\u{54}" .
		    "\u{2}\u{2D3}\u{2DA}\u{5}\u{B2}\u{5A}\u{2}\u{2D4}\u{2DA}\u{5}\u{A4}" .
		    "\u{53}\u{2}\u{2D5}\u{2DA}\u{5}\u{AE}\u{58}\u{2}\u{2D6}\u{2DA}\u{5}" .
		    "\u{B0}\u{59}\u{2}\u{2D7}\u{2DA}\u{5}\u{A8}\u{55}\u{2}\u{2D8}\u{2DA}" .
		    "\u{5}\u{AA}\u{56}\u{2}\u{2D9}\u{2CF}\u{3}\u{2}\u{2}\u{2}\u{2D9}\u{2D0}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{2D9}\u{2D1}\u{3}\u{2}\u{2}\u{2}\u{2D9}\u{2D2}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{2D9}\u{2D3}\u{3}\u{2}\u{2}\u{2}\u{2D9}\u{2D4}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{2D9}\u{2D5}\u{3}\u{2}\u{2}\u{2}\u{2D9}\u{2D6}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{2D9}\u{2D7}\u{3}\u{2}\u{2}\u{2}\u{2D9}\u{2D8}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{2DA}\u{D}\u{3}\u{2}\u{2}\u{2}\u{2DB}\u{2E5}" .
		    "\u{5}\u{100}\u{81}\u{2}\u{2DC}\u{2E5}\u{5}\u{102}\u{82}\u{2}\u{2DD}" .
		    "\u{2E5}\u{5}\u{104}\u{83}\u{2}\u{2DE}\u{2E5}\u{5}\u{106}\u{84}\u{2}" .
		    "\u{2DF}\u{2E5}\u{5}\u{108}\u{85}\u{2}\u{2E0}\u{2E5}\u{5}\u{10A}\u{86}" .
		    "\u{2}\u{2E1}\u{2E5}\u{5}\u{10C}\u{87}\u{2}\u{2E2}\u{2E5}\u{5}\u{10E}" .
		    "\u{88}\u{2}\u{2E3}\u{2E5}\u{5}\u{110}\u{89}\u{2}\u{2E4}\u{2DB}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{2E4}\u{2DC}\u{3}\u{2}\u{2}\u{2}\u{2E4}\u{2DD}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{2E4}\u{2DE}\u{3}\u{2}\u{2}\u{2}\u{2E4}\u{2DF}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{2E4}\u{2E0}\u{3}\u{2}\u{2}\u{2}\u{2E4}\u{2E1}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{2E4}\u{2E2}\u{3}\u{2}\u{2}\u{2}\u{2E4}\u{2E3}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{2E5}\u{F}\u{3}\u{2}\u{2}\u{2}\u{2E6}\u{2F6}\u{5}" .
		    "\u{120}\u{91}\u{2}\u{2E7}\u{2F6}\u{5}\u{122}\u{92}\u{2}\u{2E8}\u{2F6}" .
		    "\u{5}\u{124}\u{93}\u{2}\u{2E9}\u{2F6}\u{5}\u{126}\u{94}\u{2}\u{2EA}" .
		    "\u{2F6}\u{5}\u{128}\u{95}\u{2}\u{2EB}\u{2F6}\u{5}\u{12A}\u{96}\u{2}" .
		    "\u{2EC}\u{2F6}\u{5}\u{12C}\u{97}\u{2}\u{2ED}\u{2F6}\u{5}\u{12E}\u{98}" .
		    "\u{2}\u{2EE}\u{2F6}\u{5}\u{130}\u{99}\u{2}\u{2EF}\u{2F6}\u{5}\u{148}" .
		    "\u{A5}\u{2}\u{2F0}\u{2F6}\u{5}\u{14A}\u{A6}\u{2}\u{2F1}\u{2F6}\u{5}" .
		    "\u{14C}\u{A7}\u{2}\u{2F2}\u{2F6}\u{5}\u{14E}\u{A8}\u{2}\u{2F3}\u{2F6}" .
		    "\u{5}\u{150}\u{A9}\u{2}\u{2F4}\u{2F6}\u{5}\u{152}\u{AA}\u{2}\u{2F5}" .
		    "\u{2E6}\u{3}\u{2}\u{2}\u{2}\u{2F5}\u{2E7}\u{3}\u{2}\u{2}\u{2}\u{2F5}" .
		    "\u{2E8}\u{3}\u{2}\u{2}\u{2}\u{2F5}\u{2E9}\u{3}\u{2}\u{2}\u{2}\u{2F5}" .
		    "\u{2EA}\u{3}\u{2}\u{2}\u{2}\u{2F5}\u{2EB}\u{3}\u{2}\u{2}\u{2}\u{2F5}" .
		    "\u{2EC}\u{3}\u{2}\u{2}\u{2}\u{2F5}\u{2ED}\u{3}\u{2}\u{2}\u{2}\u{2F5}" .
		    "\u{2EE}\u{3}\u{2}\u{2}\u{2}\u{2F5}\u{2EF}\u{3}\u{2}\u{2}\u{2}\u{2F5}" .
		    "\u{2F0}\u{3}\u{2}\u{2}\u{2}\u{2F5}\u{2F1}\u{3}\u{2}\u{2}\u{2}\u{2F5}" .
		    "\u{2F2}\u{3}\u{2}\u{2}\u{2}\u{2F5}\u{2F3}\u{3}\u{2}\u{2}\u{2}\u{2F5}" .
		    "\u{2F4}\u{3}\u{2}\u{2}\u{2}\u{2F6}\u{11}\u{3}\u{2}\u{2}\u{2}\u{2F7}" .
		    "\u{2FB}\u{5}\u{154}\u{AB}\u{2}\u{2F8}\u{2FB}\u{5}\u{156}\u{AC}\u{2}" .
		    "\u{2F9}\u{2FB}\u{5}\u{158}\u{AD}\u{2}\u{2FA}\u{2F7}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{2FA}\u{2F8}\u{3}\u{2}\u{2}\u{2}\u{2FA}\u{2F9}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{2FB}\u{13}\u{3}\u{2}\u{2}\u{2}\u{2FC}\u{307}\u{5}\u{15C}\u{AF}" .
		    "\u{2}\u{2FD}\u{307}\u{5}\u{15E}\u{B0}\u{2}\u{2FE}\u{307}\u{5}\u{160}" .
		    "\u{B1}\u{2}\u{2FF}\u{307}\u{5}\u{164}\u{B3}\u{2}\u{300}\u{307}\u{5}" .
		    "\u{166}\u{B4}\u{2}\u{301}\u{307}\u{5}\u{168}\u{B5}\u{2}\u{302}\u{307}" .
		    "\u{5}\u{16C}\u{B7}\u{2}\u{303}\u{307}\u{5}\u{162}\u{B2}\u{2}\u{304}" .
		    "\u{307}\u{5}\u{16A}\u{B6}\u{2}\u{305}\u{307}\u{5}\u{16E}\u{B8}\u{2}" .
		    "\u{306}\u{2FC}\u{3}\u{2}\u{2}\u{2}\u{306}\u{2FD}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{306}\u{2FE}\u{3}\u{2}\u{2}\u{2}\u{306}\u{2FF}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{306}\u{300}\u{3}\u{2}\u{2}\u{2}\u{306}\u{301}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{306}\u{302}\u{3}\u{2}\u{2}\u{2}\u{306}\u{303}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{306}\u{304}\u{3}\u{2}\u{2}\u{2}\u{306}\u{305}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{307}\u{15}\u{3}\u{2}\u{2}\u{2}\u{308}\u{322}\u{5}\u{180}\u{C1}" .
		    "\u{2}\u{309}\u{322}\u{5}\u{182}\u{C2}\u{2}\u{30A}\u{322}\u{5}\u{184}" .
		    "\u{C3}\u{2}\u{30B}\u{322}\u{5}\u{186}\u{C4}\u{2}\u{30C}\u{322}\u{5}" .
		    "\u{188}\u{C5}\u{2}\u{30D}\u{322}\u{5}\u{18A}\u{C6}\u{2}\u{30E}\u{322}" .
		    "\u{5}\u{18C}\u{C7}\u{2}\u{30F}\u{322}\u{5}\u{18E}\u{C8}\u{2}\u{310}" .
		    "\u{322}\u{5}\u{1A6}\u{D4}\u{2}\u{311}\u{322}\u{5}\u{1A8}\u{D5}\u{2}" .
		    "\u{312}\u{322}\u{5}\u{1AA}\u{D6}\u{2}\u{313}\u{322}\u{5}\u{1AC}\u{D7}" .
		    "\u{2}\u{314}\u{322}\u{5}\u{1AE}\u{D8}\u{2}\u{315}\u{322}\u{5}\u{1B2}" .
		    "\u{DA}\u{2}\u{316}\u{322}\u{5}\u{1B4}\u{DB}\u{2}\u{317}\u{322}\u{5}" .
		    "\u{1B6}\u{DC}\u{2}\u{318}\u{322}\u{5}\u{1B8}\u{DD}\u{2}\u{319}\u{322}" .
		    "\u{5}\u{1BA}\u{DE}\u{2}\u{31A}\u{322}\u{5}\u{1C8}\u{E5}\u{2}\u{31B}" .
		    "\u{322}\u{5}\u{1CA}\u{E6}\u{2}\u{31C}\u{322}\u{5}\u{1CC}\u{E7}\u{2}" .
		    "\u{31D}\u{322}\u{5}\u{1CE}\u{E8}\u{2}\u{31E}\u{322}\u{5}\u{1D0}\u{E9}" .
		    "\u{2}\u{31F}\u{322}\u{5}\u{1D2}\u{EA}\u{2}\u{320}\u{322}\u{5}\u{1D4}" .
		    "\u{EB}\u{2}\u{321}\u{308}\u{3}\u{2}\u{2}\u{2}\u{321}\u{309}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{321}\u{30A}\u{3}\u{2}\u{2}\u{2}\u{321}\u{30B}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{321}\u{30C}\u{3}\u{2}\u{2}\u{2}\u{321}\u{30D}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{321}\u{30E}\u{3}\u{2}\u{2}\u{2}\u{321}\u{30F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{321}\u{310}\u{3}\u{2}\u{2}\u{2}\u{321}\u{311}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{321}\u{312}\u{3}\u{2}\u{2}\u{2}\u{321}\u{313}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{321}\u{314}\u{3}\u{2}\u{2}\u{2}\u{321}\u{315}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{321}\u{316}\u{3}\u{2}\u{2}\u{2}\u{321}\u{317}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{321}\u{318}\u{3}\u{2}\u{2}\u{2}\u{321}\u{319}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{321}\u{31A}\u{3}\u{2}\u{2}\u{2}\u{321}\u{31B}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{321}\u{31C}\u{3}\u{2}\u{2}\u{2}\u{321}\u{31D}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{321}\u{31E}\u{3}\u{2}\u{2}\u{2}\u{321}\u{31F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{321}\u{320}\u{3}\u{2}\u{2}\u{2}\u{322}\u{17}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{323}\u{32B}\u{5}\u{1DE}\u{F0}\u{2}\u{324}\u{32B}\u{5}" .
		    "\u{1E0}\u{F1}\u{2}\u{325}\u{32B}\u{5}\u{1E2}\u{F2}\u{2}\u{326}\u{32B}" .
		    "\u{5}\u{1E4}\u{F3}\u{2}\u{327}\u{32B}\u{5}\u{1E6}\u{F4}\u{2}\u{328}" .
		    "\u{32B}\u{5}\u{1E8}\u{F5}\u{2}\u{329}\u{32B}\u{5}\u{1EC}\u{F7}\u{2}" .
		    "\u{32A}\u{323}\u{3}\u{2}\u{2}\u{2}\u{32A}\u{324}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{32A}\u{325}\u{3}\u{2}\u{2}\u{2}\u{32A}\u{326}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{32A}\u{327}\u{3}\u{2}\u{2}\u{2}\u{32A}\u{328}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{32A}\u{329}\u{3}\u{2}\u{2}\u{2}\u{32B}\u{19}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{32C}\u{32D}\u{7}\u{20}\u{2}\u{2}\u{32D}\u{32F}\u{9}\u{2}\u{2}\u{2}" .
		    "\u{32E}\u{330}\u{5}\u{246}\u{124}\u{2}\u{32F}\u{32E}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{32F}\u{330}\u{3}\u{2}\u{2}\u{2}\u{330}\u{331}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{331}\u{335}\u{5}\u{20C}\u{107}\u{2}\u{332}\u{334}\u{5}\u{32}" .
		    "\u{1A}\u{2}\u{333}\u{332}\u{3}\u{2}\u{2}\u{2}\u{334}\u{337}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{335}\u{333}\u{3}\u{2}\u{2}\u{2}\u{335}\u{336}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{336}\u{1B}\u{3}\u{2}\u{2}\u{2}\u{337}\u{335}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{338}\u{33A}\u{7}\u{20}\u{2}\u{2}\u{339}\u{33B}\u{5}\u{34}" .
		    "\u{1B}\u{2}\u{33A}\u{339}\u{3}\u{2}\u{2}\u{2}\u{33A}\u{33B}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{33B}\u{33C}\u{3}\u{2}\u{2}\u{2}\u{33C}\u{33E}\u{7}\u{15E}" .
		    "\u{2}\u{2}\u{33D}\u{33F}\u{5}\u{246}\u{124}\u{2}\u{33E}\u{33D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{33E}\u{33F}\u{3}\u{2}\u{2}\u{2}\u{33F}\u{340}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{340}\u{341}\u{5}\u{1F2}\u{FA}\u{2}\u{341}\u{342}" .
		    "\u{7}\u{6C}\u{2}\u{2}\u{342}\u{343}\u{7}\u{207}\u{2}\u{2}\u{343}\u{34A}" .
		    "\u{5}\u{36}\u{1C}\u{2}\u{344}\u{345}\u{7}\u{6C}\u{2}\u{2}\u{345}\u{347}" .
		    "\u{7}\u{136}\u{2}\u{2}\u{346}\u{348}\u{7}\u{68}\u{2}\u{2}\u{347}\u{346}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{347}\u{348}\u{3}\u{2}\u{2}\u{2}\u{348}\u{349}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{349}\u{34B}\u{7}\u{1E0}\u{2}\u{2}\u{34A}\u{344}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{34A}\u{34B}\u{3}\u{2}\u{2}\u{2}\u{34B}\u{34D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{34C}\u{34E}\u{5}\u{3E}\u{20}\u{2}\u{34D}\u{34C}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{34D}\u{34E}\u{3}\u{2}\u{2}\u{2}\u{34E}\u{351}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{34F}\u{350}\u{7}\u{133}\u{2}\u{2}\u{350}\u{352}" .
		    "\u{7}\u{40F}\u{2}\u{2}\u{351}\u{34F}\u{3}\u{2}\u{2}\u{2}\u{351}\u{352}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{352}\u{353}\u{3}\u{2}\u{2}\u{2}\u{353}\u{354}" .
		    "\u{7}\u{150}\u{2}\u{2}\u{354}\u{355}\u{5}\u{15A}\u{AE}\u{2}\u{355}" .
		    "\u{1D}\u{3}\u{2}\u{2}\u{2}\u{356}\u{358}\u{7}\u{20}\u{2}\u{2}\u{357}" .
		    "\u{359}\u{9}\u{3}\u{2}\u{2}\u{358}\u{357}\u{3}\u{2}\u{2}\u{2}\u{358}" .
		    "\u{359}\u{3}\u{2}\u{2}\u{2}\u{359}\u{35B}\u{3}\u{2}\u{2}\u{2}\u{35A}" .
		    "\u{35C}\u{9}\u{4}\u{2}\u{2}\u{35B}\u{35A}\u{3}\u{2}\u{2}\u{2}\u{35B}" .
		    "\u{35C}\u{3}\u{2}\u{2}\u{2}\u{35C}\u{35D}\u{3}\u{2}\u{2}\u{2}\u{35D}" .
		    "\u{35E}\u{7}\u{4A}\u{2}\u{2}\u{35E}\u{360}\u{5}\u{20C}\u{107}\u{2}" .
		    "\u{35F}\u{361}\u{5}\u{40}\u{21}\u{2}\u{360}\u{35F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{360}\u{361}\u{3}\u{2}\u{2}\u{2}\u{361}\u{362}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{362}\u{363}\u{7}\u{6C}\u{2}\u{2}\u{363}\u{364}\u{5}\u{1F4}" .
		    "\u{FB}\u{2}\u{364}\u{368}\u{5}\u{230}\u{119}\u{2}\u{365}\u{367}\u{5}" .
		    "\u{42}\u{22}\u{2}\u{366}\u{365}\u{3}\u{2}\u{2}\u{2}\u{367}\u{36A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{368}\u{366}\u{3}\u{2}\u{2}\u{2}\u{368}\u{369}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{369}\u{377}\u{3}\u{2}\u{2}\u{2}\u{36A}\u{368}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{36B}\u{36D}\u{7}\u{114}\u{2}\u{2}\u{36C}\u{36E}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{36D}\u{36C}\u{3}\u{2}\u{2}\u{2}\u{36D}\u{36E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{36E}\u{36F}\u{3}\u{2}\u{2}\u{2}\u{36F}\u{376}" .
		    "\u{9}\u{5}\u{2}\u{2}\u{370}\u{372}\u{7}\u{5F}\u{2}\u{2}\u{371}\u{373}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{372}\u{371}\u{3}\u{2}\u{2}\u{2}\u{372}\u{373}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{373}\u{374}\u{3}\u{2}\u{2}\u{2}\u{374}\u{376}" .
		    "\u{9}\u{6}\u{2}\u{2}\u{375}\u{36B}\u{3}\u{2}\u{2}\u{2}\u{375}\u{370}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{376}\u{379}\u{3}\u{2}\u{2}\u{2}\u{377}\u{375}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{377}\u{378}\u{3}\u{2}\u{2}\u{2}\u{378}\u{1F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{379}\u{377}\u{3}\u{2}\u{2}\u{2}\u{37A}\u{37B}" .
		    "\u{7}\u{20}\u{2}\u{2}\u{37B}\u{37C}\u{7}\u{195}\u{2}\u{2}\u{37C}\u{37D}" .
		    "\u{7}\u{44}\u{2}\u{2}\u{37D}\u{37E}\u{5}\u{20C}\u{107}\u{2}\u{37E}" .
		    "\u{37F}\u{7}\u{7}\u{2}\u{2}\u{37F}\u{380}\u{7}\u{23A}\u{2}\u{2}\u{380}" .
		    "\u{386}\u{7}\u{40F}\u{2}\u{2}\u{381}\u{383}\u{7}\u{180}\u{2}\u{2}" .
		    "\u{382}\u{384}\u{7}\u{3F7}\u{2}\u{2}\u{383}\u{382}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{383}\u{384}\u{3}\u{2}\u{2}\u{2}\u{384}\u{385}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{385}\u{387}\u{5}\u{214}\u{10B}\u{2}\u{386}\u{381}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{386}\u{387}\u{3}\u{2}\u{2}\u{2}\u{387}\u{38D}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{388}\u{38A}\u{7}\u{23B}\u{2}\u{2}\u{389}\u{38B}\u{7}" .
		    "\u{3F7}\u{2}\u{2}\u{38A}\u{389}\u{3}\u{2}\u{2}\u{2}\u{38A}\u{38B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{38B}\u{38C}\u{3}\u{2}\u{2}\u{2}\u{38C}\u{38E}" .
		    "\u{5}\u{214}\u{10B}\u{2}\u{38D}\u{388}\u{3}\u{2}\u{2}\u{2}\u{38D}" .
		    "\u{38E}\u{3}\u{2}\u{2}\u{2}\u{38E}\u{394}\u{3}\u{2}\u{2}\u{2}\u{38F}" .
		    "\u{391}\u{7}\u{1EA}\u{2}\u{2}\u{390}\u{392}\u{7}\u{3F7}\u{2}\u{2}" .
		    "\u{391}\u{390}\u{3}\u{2}\u{2}\u{2}\u{391}\u{392}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{392}\u{393}\u{3}\u{2}\u{2}\u{2}\u{393}\u{395}\u{5}\u{214}\u{10B}" .
		    "\u{2}\u{394}\u{38F}\u{3}\u{2}\u{2}\u{2}\u{394}\u{395}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{395}\u{39B}\u{3}\u{2}\u{2}\u{2}\u{396}\u{398}\u{7}\u{1C4}" .
		    "\u{2}\u{2}\u{397}\u{399}\u{7}\u{3F7}\u{2}\u{2}\u{398}\u{397}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{398}\u{399}\u{3}\u{2}\u{2}\u{2}\u{399}\u{39A}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{39A}\u{39C}\u{5}\u{20C}\u{107}\u{2}\u{39B}\u{396}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{39B}\u{39C}\u{3}\u{2}\u{2}\u{2}\u{39C}\u{39E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{39D}\u{39F}\u{7}\u{249}\u{2}\u{2}\u{39E}\u{39D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{39E}\u{39F}\u{3}\u{2}\u{2}\u{2}\u{39F}\u{3A5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{3A0}\u{3A2}\u{7}\u{133}\u{2}\u{2}\u{3A1}\u{3A3}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{3A2}\u{3A1}\u{3}\u{2}\u{2}\u{2}\u{3A2}\u{3A3}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{3A3}\u{3A4}\u{3}\u{2}\u{2}\u{2}\u{3A4}\u{3A6}" .
		    "\u{7}\u{40F}\u{2}\u{2}\u{3A5}\u{3A0}\u{3}\u{2}\u{2}\u{2}\u{3A5}\u{3A6}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{3A6}\u{3A7}\u{3}\u{2}\u{2}\u{2}\u{3A7}\u{3A9}" .
		    "\u{7}\u{158}\u{2}\u{2}\u{3A8}\u{3AA}\u{7}\u{3F7}\u{2}\u{2}\u{3A9}" .
		    "\u{3A8}\u{3}\u{2}\u{2}\u{2}\u{3A9}\u{3AA}\u{3}\u{2}\u{2}\u{2}\u{3AA}" .
		    "\u{3AB}\u{3}\u{2}\u{2}\u{2}\u{3AB}\u{3AC}\u{5}\u{202}\u{102}\u{2}" .
		    "\u{3AC}\u{21}\u{3}\u{2}\u{2}\u{2}\u{3AD}\u{3AF}\u{7}\u{20}\u{2}\u{2}" .
		    "\u{3AE}\u{3B0}\u{5}\u{34}\u{1B}\u{2}\u{3AF}\u{3AE}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{3AF}\u{3B0}\u{3}\u{2}\u{2}\u{2}\u{3B0}\u{3B1}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{3B1}\u{3B2}\u{7}\u{77}\u{2}\u{2}\u{3B2}\u{3B3}\u{5}\u{1F2}" .
		    "\u{FA}\u{2}\u{3B3}\u{3B5}\u{7}\u{400}\u{2}\u{2}\u{3B4}\u{3B6}\u{5}" .
		    "\u{44}\u{23}\u{2}\u{3B5}\u{3B4}\u{3}\u{2}\u{2}\u{2}\u{3B5}\u{3B6}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{3B6}\u{3BB}\u{3}\u{2}\u{2}\u{2}\u{3B7}\u{3B8}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{3B8}\u{3BA}\u{5}\u{44}\u{23}\u{2}\u{3B9}" .
		    "\u{3B7}\u{3}\u{2}\u{2}\u{2}\u{3BA}\u{3BD}\u{3}\u{2}\u{2}\u{2}\u{3BB}" .
		    "\u{3B9}\u{3}\u{2}\u{2}\u{2}\u{3BB}\u{3BC}\u{3}\u{2}\u{2}\u{2}\u{3BC}" .
		    "\u{3BE}\u{3}\u{2}\u{2}\u{2}\u{3BD}\u{3BB}\u{3}\u{2}\u{2}\u{2}\u{3BE}" .
		    "\u{3C2}\u{7}\u{401}\u{2}\u{2}\u{3BF}\u{3C1}\u{5}\u{48}\u{25}\u{2}" .
		    "\u{3C0}\u{3BF}\u{3}\u{2}\u{2}\u{2}\u{3C1}\u{3C4}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{3C2}\u{3C0}\u{3}\u{2}\u{2}\u{2}\u{3C2}\u{3C3}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{3C3}\u{3C5}\u{3}\u{2}\u{2}\u{2}\u{3C4}\u{3C2}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{3C5}\u{3C6}\u{5}\u{15A}\u{AE}\u{2}\u{3C6}\u{23}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{3C7}\u{3C9}\u{7}\u{20}\u{2}\u{2}\u{3C8}\u{3CA}\u{5}\u{34}" .
		    "\u{1B}\u{2}\u{3C9}\u{3C8}\u{3}\u{2}\u{2}\u{2}\u{3C9}\u{3CA}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{3CA}\u{3CB}\u{3}\u{2}\u{2}\u{2}\u{3CB}\u{3CC}\u{7}\u{172}" .
		    "\u{2}\u{2}\u{3CC}\u{3CD}\u{5}\u{1F2}\u{FA}\u{2}\u{3CD}\u{3CF}\u{7}" .
		    "\u{400}\u{2}\u{2}\u{3CE}\u{3D0}\u{5}\u{46}\u{24}\u{2}\u{3CF}\u{3CE}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{3CF}\u{3D0}\u{3}\u{2}\u{2}\u{2}\u{3D0}\u{3D5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{3D1}\u{3D2}\u{7}\u{402}\u{2}\u{2}\u{3D2}\u{3D4}" .
		    "\u{5}\u{46}\u{24}\u{2}\u{3D3}\u{3D1}\u{3}\u{2}\u{2}\u{2}\u{3D4}\u{3D7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{3D5}\u{3D3}\u{3}\u{2}\u{2}\u{2}\u{3D5}\u{3D6}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{3D6}\u{3D8}\u{3}\u{2}\u{2}\u{2}\u{3D7}\u{3D5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{3D8}\u{3D9}\u{7}\u{401}\u{2}\u{2}\u{3D9}\u{3DA}" .
		    "\u{7}\u{1FE}\u{2}\u{2}\u{3DA}\u{3DE}\u{5}\u{220}\u{111}\u{2}\u{3DB}" .
		    "\u{3DD}\u{5}\u{48}\u{25}\u{2}\u{3DC}\u{3DB}\u{3}\u{2}\u{2}\u{2}\u{3DD}" .
		    "\u{3E0}\u{3}\u{2}\u{2}\u{2}\u{3DE}\u{3DC}\u{3}\u{2}\u{2}\u{2}\u{3DE}" .
		    "\u{3DF}\u{3}\u{2}\u{2}\u{2}\u{3DF}\u{3E3}\u{3}\u{2}\u{2}\u{2}\u{3E0}" .
		    "\u{3DE}\u{3}\u{2}\u{2}\u{2}\u{3E1}\u{3E4}\u{5}\u{15A}\u{AE}\u{2}\u{3E2}" .
		    "\u{3E4}\u{5}\u{16A}\u{B6}\u{2}\u{3E3}\u{3E1}\u{3}\u{2}\u{2}\u{2}\u{3E3}" .
		    "\u{3E2}\u{3}\u{2}\u{2}\u{2}\u{3E4}\u{25}\u{3}\u{2}\u{2}\u{2}\u{3E5}" .
		    "\u{3E6}\u{7}\u{20}\u{2}\u{2}\u{3E6}\u{3E7}\u{7}\u{209}\u{2}\u{2}\u{3E7}" .
		    "\u{3E8}\u{5}\u{20C}\u{107}\u{2}\u{3E8}\u{3E9}\u{7}\u{3E}\u{2}\u{2}" .
		    "\u{3E9}\u{3EA}\u{7}\u{145}\u{2}\u{2}\u{3EA}\u{3EB}\u{7}\u{24D}\u{2}" .
		    "\u{2}\u{3EB}\u{3EC}\u{9}\u{7}\u{2}\u{2}\u{3EC}\u{3ED}\u{7}\u{1D0}" .
		    "\u{2}\u{2}\u{3ED}\u{3EE}\u{7}\u{400}\u{2}\u{2}\u{3EE}\u{3F3}\u{5}" .
		    "\u{4A}\u{26}\u{2}\u{3EF}\u{3F0}\u{7}\u{402}\u{2}\u{2}\u{3F0}\u{3F2}" .
		    "\u{5}\u{4A}\u{26}\u{2}\u{3F1}\u{3EF}\u{3}\u{2}\u{2}\u{2}\u{3F2}\u{3F5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{3F3}\u{3F1}\u{3}\u{2}\u{2}\u{2}\u{3F3}\u{3F4}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{3F4}\u{3F6}\u{3}\u{2}\u{2}\u{2}\u{3F5}\u{3F3}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{3F6}\u{3F7}\u{7}\u{401}\u{2}\u{2}\u{3F7}\u{27}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{3F8}\u{3FA}\u{7}\u{20}\u{2}\u{2}\u{3F9}\u{3FB}" .
		    "\u{7}\u{231}\u{2}\u{2}\u{3FA}\u{3F9}\u{3}\u{2}\u{2}\u{2}\u{3FA}\u{3FB}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{3FB}\u{3FC}\u{3}\u{2}\u{2}\u{2}\u{3FC}\u{3FE}" .
		    "\u{7}\u{9C}\u{2}\u{2}\u{3FD}\u{3FF}\u{5}\u{246}\u{124}\u{2}\u{3FE}" .
		    "\u{3FD}\u{3}\u{2}\u{2}\u{2}\u{3FE}\u{3FF}\u{3}\u{2}\u{2}\u{2}\u{3FF}" .
		    "\u{400}\u{3}\u{2}\u{2}\u{2}\u{400}\u{408}\u{5}\u{1F4}\u{FB}\u{2}\u{401}" .
		    "\u{402}\u{7}\u{5A}\u{2}\u{2}\u{402}\u{409}\u{5}\u{1F4}\u{FB}\u{2}" .
		    "\u{403}\u{404}\u{7}\u{400}\u{2}\u{2}\u{404}\u{405}\u{7}\u{5A}\u{2}" .
		    "\u{2}\u{405}\u{406}\u{5}\u{1F4}\u{FB}\u{2}\u{406}\u{407}\u{7}\u{401}" .
		    "\u{2}\u{2}\u{407}\u{409}\u{3}\u{2}\u{2}\u{2}\u{408}\u{401}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{408}\u{403}\u{3}\u{2}\u{2}\u{2}\u{409}\u{447}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{40A}\u{40C}\u{7}\u{20}\u{2}\u{2}\u{40B}\u{40D}\u{7}\u{231}" .
		    "\u{2}\u{2}\u{40C}\u{40B}\u{3}\u{2}\u{2}\u{2}\u{40C}\u{40D}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{40D}\u{40E}\u{3}\u{2}\u{2}\u{2}\u{40E}\u{410}\u{7}\u{9C}" .
		    "\u{2}\u{2}\u{40F}\u{411}\u{5}\u{246}\u{124}\u{2}\u{410}\u{40F}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{410}\u{411}\u{3}\u{2}\u{2}\u{2}\u{411}\u{412}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{412}\u{414}\u{5}\u{1F4}\u{FB}\u{2}\u{413}\u{415}" .
		    "\u{5}\u{4C}\u{27}\u{2}\u{414}\u{413}\u{3}\u{2}\u{2}\u{2}\u{414}\u{415}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{415}\u{420}\u{3}\u{2}\u{2}\u{2}\u{416}\u{41D}" .
		    "\u{5}\u{5E}\u{30}\u{2}\u{417}\u{419}\u{7}\u{402}\u{2}\u{2}\u{418}" .
		    "\u{417}\u{3}\u{2}\u{2}\u{2}\u{418}\u{419}\u{3}\u{2}\u{2}\u{2}\u{419}" .
		    "\u{41A}\u{3}\u{2}\u{2}\u{2}\u{41A}\u{41C}\u{5}\u{5E}\u{30}\u{2}\u{41B}" .
		    "\u{418}\u{3}\u{2}\u{2}\u{2}\u{41C}\u{41F}\u{3}\u{2}\u{2}\u{2}\u{41D}" .
		    "\u{41B}\u{3}\u{2}\u{2}\u{2}\u{41D}\u{41E}\u{3}\u{2}\u{2}\u{2}\u{41E}" .
		    "\u{421}\u{3}\u{2}\u{2}\u{2}\u{41F}\u{41D}\u{3}\u{2}\u{2}\u{2}\u{420}" .
		    "\u{416}\u{3}\u{2}\u{2}\u{2}\u{420}\u{421}\u{3}\u{2}\u{2}\u{2}\u{421}" .
		    "\u{423}\u{3}\u{2}\u{2}\u{2}\u{422}\u{424}\u{5}\u{62}\u{32}\u{2}\u{423}" .
		    "\u{422}\u{3}\u{2}\u{2}\u{2}\u{423}\u{424}\u{3}\u{2}\u{2}\u{2}\u{424}" .
		    "\u{426}\u{3}\u{2}\u{2}\u{2}\u{425}\u{427}\u{9}\u{8}\u{2}\u{2}\u{426}" .
		    "\u{425}\u{3}\u{2}\u{2}\u{2}\u{426}\u{427}\u{3}\u{2}\u{2}\u{2}\u{427}" .
		    "\u{429}\u{3}\u{2}\u{2}\u{2}\u{428}\u{42A}\u{7}\u{D}\u{2}\u{2}\u{429}" .
		    "\u{428}\u{3}\u{2}\u{2}\u{2}\u{429}\u{42A}\u{3}\u{2}\u{2}\u{2}\u{42A}" .
		    "\u{42B}\u{3}\u{2}\u{2}\u{2}\u{42B}\u{42C}\u{5}\u{B4}\u{5B}\u{2}\u{42C}" .
		    "\u{447}\u{3}\u{2}\u{2}\u{2}\u{42D}\u{42F}\u{7}\u{20}\u{2}\u{2}\u{42E}" .
		    "\u{430}\u{7}\u{231}\u{2}\u{2}\u{42F}\u{42E}\u{3}\u{2}\u{2}\u{2}\u{42F}" .
		    "\u{430}\u{3}\u{2}\u{2}\u{2}\u{430}\u{431}\u{3}\u{2}\u{2}\u{2}\u{431}" .
		    "\u{433}\u{7}\u{9C}\u{2}\u{2}\u{432}\u{434}\u{5}\u{246}\u{124}\u{2}" .
		    "\u{433}\u{432}\u{3}\u{2}\u{2}\u{2}\u{433}\u{434}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{434}\u{435}\u{3}\u{2}\u{2}\u{2}\u{435}\u{436}\u{5}\u{1F4}\u{FB}" .
		    "\u{2}\u{436}\u{441}\u{5}\u{4C}\u{27}\u{2}\u{437}\u{43E}\u{5}\u{5E}" .
		    "\u{30}\u{2}\u{438}\u{43A}\u{7}\u{402}\u{2}\u{2}\u{439}\u{438}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{439}\u{43A}\u{3}\u{2}\u{2}\u{2}\u{43A}\u{43B}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{43B}\u{43D}\u{5}\u{5E}\u{30}\u{2}\u{43C}\u{439}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{43D}\u{440}\u{3}\u{2}\u{2}\u{2}\u{43E}\u{43C}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{43E}\u{43F}\u{3}\u{2}\u{2}\u{2}\u{43F}\u{442}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{440}\u{43E}\u{3}\u{2}\u{2}\u{2}\u{441}\u{437}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{441}\u{442}\u{3}\u{2}\u{2}\u{2}\u{442}\u{444}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{443}\u{445}\u{5}\u{62}\u{32}\u{2}\u{444}\u{443}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{444}\u{445}\u{3}\u{2}\u{2}\u{2}\u{445}\u{447}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{446}\u{3F8}\u{3}\u{2}\u{2}\u{2}\u{446}\u{40A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{446}\u{42D}\u{3}\u{2}\u{2}\u{2}\u{447}\u{29}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{448}\u{449}\u{7}\u{20}\u{2}\u{2}\u{449}\u{44A}" .
		    "\u{7}\u{230}\u{2}\u{2}\u{44A}\u{44B}\u{5}\u{20C}\u{107}\u{2}\u{44B}" .
		    "\u{44C}\u{7}\u{7}\u{2}\u{2}\u{44C}\u{44D}\u{7}\u{146}\u{2}\u{2}\u{44D}" .
		    "\u{451}\u{7}\u{40F}\u{2}\u{2}\u{44E}\u{44F}\u{7}\u{16A}\u{2}\u{2}" .
		    "\u{44F}\u{450}\u{7}\u{3F7}\u{2}\u{2}\u{450}\u{452}\u{5}\u{214}\u{10B}" .
		    "\u{2}\u{451}\u{44E}\u{3}\u{2}\u{2}\u{2}\u{451}\u{452}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{452}\u{458}\u{3}\u{2}\u{2}\u{2}\u{453}\u{455}\u{7}\u{158}" .
		    "\u{2}\u{2}\u{454}\u{456}\u{7}\u{3F7}\u{2}\u{2}\u{455}\u{454}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{455}\u{456}\u{3}\u{2}\u{2}\u{2}\u{456}\u{457}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{457}\u{459}\u{5}\u{202}\u{102}\u{2}\u{458}\u{453}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{458}\u{459}\u{3}\u{2}\u{2}\u{2}\u{459}\u{2B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{45A}\u{45B}\u{7}\u{20}\u{2}\u{2}\u{45B}\u{45C}" .
		    "\u{7}\u{230}\u{2}\u{2}\u{45C}\u{45D}\u{5}\u{20C}\u{107}\u{2}\u{45D}" .
		    "\u{45E}\u{7}\u{7}\u{2}\u{2}\u{45E}\u{45F}\u{7}\u{146}\u{2}\u{2}\u{45F}" .
		    "\u{460}\u{7}\u{40F}\u{2}\u{2}\u{460}\u{461}\u{7}\u{AA}\u{2}\u{2}\u{461}" .
		    "\u{462}\u{7}\u{195}\u{2}\u{2}\u{462}\u{463}\u{7}\u{44}\u{2}\u{2}\u{463}" .
		    "\u{469}\u{5}\u{20C}\u{107}\u{2}\u{464}\u{466}\u{7}\u{166}\u{2}\u{2}" .
		    "\u{465}\u{467}\u{7}\u{3F7}\u{2}\u{2}\u{466}\u{465}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{466}\u{467}\u{3}\u{2}\u{2}\u{2}\u{467}\u{468}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{468}\u{46A}\u{5}\u{214}\u{10B}\u{2}\u{469}\u{464}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{469}\u{46A}\u{3}\u{2}\u{2}\u{2}\u{46A}\u{470}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{46B}\u{46D}\u{7}\u{180}\u{2}\u{2}\u{46C}\u{46E}\u{7}" .
		    "\u{3F7}\u{2}\u{2}\u{46D}\u{46C}\u{3}\u{2}\u{2}\u{2}\u{46D}\u{46E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{46E}\u{46F}\u{3}\u{2}\u{2}\u{2}\u{46F}\u{471}" .
		    "\u{5}\u{214}\u{10B}\u{2}\u{470}\u{46B}\u{3}\u{2}\u{2}\u{2}\u{470}" .
		    "\u{471}\u{3}\u{2}\u{2}\u{2}\u{471}\u{477}\u{3}\u{2}\u{2}\u{2}\u{472}" .
		    "\u{474}\u{7}\u{119}\u{2}\u{2}\u{473}\u{475}\u{7}\u{3F7}\u{2}\u{2}" .
		    "\u{474}\u{473}\u{3}\u{2}\u{2}\u{2}\u{474}\u{475}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{475}\u{476}\u{3}\u{2}\u{2}\u{2}\u{476}\u{478}\u{5}\u{214}\u{10B}" .
		    "\u{2}\u{477}\u{472}\u{3}\u{2}\u{2}\u{2}\u{477}\u{478}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{478}\u{47E}\u{3}\u{2}\u{2}\u{2}\u{479}\u{47B}\u{7}\u{1AF}" .
		    "\u{2}\u{2}\u{47A}\u{47C}\u{7}\u{3F7}\u{2}\u{2}\u{47B}\u{47A}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{47B}\u{47C}\u{3}\u{2}\u{2}\u{2}\u{47C}\u{47D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{47D}\u{47F}\u{5}\u{214}\u{10B}\u{2}\u{47E}\u{479}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{47E}\u{47F}\u{3}\u{2}\u{2}\u{2}\u{47F}\u{485}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{480}\u{482}\u{7}\u{1C4}\u{2}\u{2}\u{481}\u{483}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{482}\u{481}\u{3}\u{2}\u{2}\u{2}\u{482}\u{483}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{483}\u{484}\u{3}\u{2}\u{2}\u{2}\u{484}\u{486}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{485}\u{480}\u{3}\u{2}\u{2}\u{2}\u{485}" .
		    "\u{486}\u{3}\u{2}\u{2}\u{2}\u{486}\u{488}\u{3}\u{2}\u{2}\u{2}\u{487}" .
		    "\u{489}\u{7}\u{249}\u{2}\u{2}\u{488}\u{487}\u{3}\u{2}\u{2}\u{2}\u{488}" .
		    "\u{489}\u{3}\u{2}\u{2}\u{2}\u{489}\u{48F}\u{3}\u{2}\u{2}\u{2}\u{48A}" .
		    "\u{48C}\u{7}\u{133}\u{2}\u{2}\u{48B}\u{48D}\u{7}\u{3F7}\u{2}\u{2}" .
		    "\u{48C}\u{48B}\u{3}\u{2}\u{2}\u{2}\u{48C}\u{48D}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{48D}\u{48E}\u{3}\u{2}\u{2}\u{2}\u{48E}\u{490}\u{7}\u{40F}\u{2}" .
		    "\u{2}\u{48F}\u{48A}\u{3}\u{2}\u{2}\u{2}\u{48F}\u{490}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{490}\u{491}\u{3}\u{2}\u{2}\u{2}\u{491}\u{493}\u{7}\u{158}" .
		    "\u{2}\u{2}\u{492}\u{494}\u{7}\u{3F7}\u{2}\u{2}\u{493}\u{492}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{493}\u{494}\u{3}\u{2}\u{2}\u{2}\u{494}\u{495}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{495}\u{496}\u{5}\u{202}\u{102}\u{2}\u{496}\u{2D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{497}\u{499}\u{7}\u{20}\u{2}\u{2}\u{498}\u{49A}" .
		    "\u{5}\u{34}\u{1B}\u{2}\u{499}\u{498}\u{3}\u{2}\u{2}\u{2}\u{499}\u{49A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{49A}\u{49B}\u{3}\u{2}\u{2}\u{2}\u{49B}\u{49C}" .
		    "\u{7}\u{A1}\u{2}\u{2}\u{49C}\u{49D}\u{5}\u{1F2}\u{FA}\u{2}\u{49D}" .
		    "\u{49E}\u{9}\u{9}\u{2}\u{2}\u{49E}\u{49F}\u{9}\u{A}\u{2}\u{2}\u{49F}" .
		    "\u{4A0}\u{7}\u{6C}\u{2}\u{2}\u{4A0}\u{4A1}\u{5}\u{1F4}\u{FB}\u{2}" .
		    "\u{4A1}\u{4A2}\u{7}\u{3C}\u{2}\u{2}\u{4A2}\u{4A3}\u{7}\u{32}\u{2}" .
		    "\u{2}\u{4A3}\u{4A6}\u{7}\u{203}\u{2}\u{2}\u{4A4}\u{4A5}\u{9}\u{B}" .
		    "\u{2}\u{2}\u{4A5}\u{4A7}\u{5}\u{1F2}\u{FA}\u{2}\u{4A6}\u{4A4}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{4A6}\u{4A7}\u{3}\u{2}\u{2}\u{2}\u{4A7}\u{4A8}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{4A8}\u{4A9}\u{5}\u{15A}\u{AE}\u{2}\u{4A9}\u{2F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{4AA}\u{4AD}\u{7}\u{20}\u{2}\u{2}\u{4AB}\u{4AC}" .
		    "\u{7}\u{70}\u{2}\u{2}\u{4AC}\u{4AE}\u{7}\u{81}\u{2}\u{2}\u{4AD}\u{4AB}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{4AD}\u{4AE}\u{3}\u{2}\u{2}\u{2}\u{4AE}\u{4B2}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{4AF}\u{4B0}\u{7}\u{114}\u{2}\u{2}\u{4B0}\u{4B1}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{4B1}\u{4B3}\u{9}\u{C}\u{2}\u{2}\u{4B2}\u{4AF}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{4B2}\u{4B3}\u{3}\u{2}\u{2}\u{2}\u{4B3}\u{4B5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{4B4}\u{4B6}\u{5}\u{34}\u{1B}\u{2}\u{4B5}\u{4B4}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{4B5}\u{4B6}\u{3}\u{2}\u{2}\u{2}\u{4B6}\u{4BA}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{4B7}\u{4B8}\u{7}\u{91}\u{2}\u{2}\u{4B8}\u{4B9}" .
		    "\u{7}\u{208}\u{2}\u{2}\u{4B9}\u{4BB}\u{9}\u{D}\u{2}\u{2}\u{4BA}\u{4B7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{4BA}\u{4BB}\u{3}\u{2}\u{2}\u{2}\u{4BB}\u{4BC}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{4BC}\u{4BD}\u{7}\u{246}\u{2}\u{2}\u{4BD}\u{4C2}" .
		    "\u{5}\u{1F2}\u{FA}\u{2}\u{4BE}\u{4BF}\u{7}\u{400}\u{2}\u{2}\u{4BF}" .
		    "\u{4C0}\u{5}\u{22C}\u{117}\u{2}\u{4C0}\u{4C1}\u{7}\u{401}\u{2}\u{2}" .
		    "\u{4C1}\u{4C3}\u{3}\u{2}\u{2}\u{2}\u{4C2}\u{4BE}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{4C2}\u{4C3}\u{3}\u{2}\u{2}\u{2}\u{4C3}\u{4C4}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{4C4}\u{4C5}\u{7}\u{D}\u{2}\u{2}\u{4C5}\u{4CC}\u{5}\u{B4}\u{5B}" .
		    "\u{2}\u{4C6}\u{4C8}\u{7}\u{B0}\u{2}\u{2}\u{4C7}\u{4C9}\u{9}\u{E}\u{2}" .
		    "\u{2}\u{4C8}\u{4C7}\u{3}\u{2}\u{2}\u{2}\u{4C8}\u{4C9}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{4C9}\u{4CA}\u{3}\u{2}\u{2}\u{2}\u{4CA}\u{4CB}\u{7}\u{19}\u{2}" .
		    "\u{2}\u{4CB}\u{4CD}\u{7}\u{6E}\u{2}\u{2}\u{4CC}\u{4C6}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{4CC}\u{4CD}\u{3}\u{2}\u{2}\u{2}\u{4CD}\u{31}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{4CE}\u{4D0}\u{7}\u{28}\u{2}\u{2}\u{4CF}\u{4CE}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{4CF}\u{4D0}\u{3}\u{2}\u{2}\u{2}\u{4D0}\u{4D4}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{4D1}\u{4D2}\u{7}\u{18}\u{2}\u{2}\u{4D2}\u{4D5}\u{7}\u{8C}" .
		    "\u{2}\u{2}\u{4D3}\u{4D5}\u{7}\u{2DF}\u{2}\u{2}\u{4D4}\u{4D1}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{4D4}\u{4D3}\u{3}\u{2}\u{2}\u{2}\u{4D5}\u{4D7}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{4D6}\u{4D8}\u{7}\u{3F7}\u{2}\u{2}\u{4D7}\u{4D6}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{4D7}\u{4D8}\u{3}\u{2}\u{2}\u{2}\u{4D8}\u{4DB}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{4D9}\u{4DC}\u{5}\u{1FE}\u{100}\u{2}\u{4DA}" .
		    "\u{4DC}\u{7}\u{28}\u{2}\u{2}\u{4DB}\u{4D9}\u{3}\u{2}\u{2}\u{2}\u{4DB}" .
		    "\u{4DA}\u{3}\u{2}\u{2}\u{2}\u{4DC}\u{4E6}\u{3}\u{2}\u{2}\u{2}\u{4DD}" .
		    "\u{4DF}\u{7}\u{28}\u{2}\u{2}\u{4DE}\u{4DD}\u{3}\u{2}\u{2}\u{2}\u{4DE}" .
		    "\u{4DF}\u{3}\u{2}\u{2}\u{2}\u{4DF}\u{4E0}\u{3}\u{2}\u{2}\u{2}\u{4E0}" .
		    "\u{4E2}\u{7}\u{1A}\u{2}\u{2}\u{4E1}\u{4E3}\u{7}\u{3F7}\u{2}\u{2}\u{4E2}" .
		    "\u{4E1}\u{3}\u{2}\u{2}\u{2}\u{4E2}\u{4E3}\u{3}\u{2}\u{2}\u{2}\u{4E3}" .
		    "\u{4E4}\u{3}\u{2}\u{2}\u{2}\u{4E4}\u{4E6}\u{5}\u{200}\u{101}\u{2}" .
		    "\u{4E5}\u{4CF}\u{3}\u{2}\u{2}\u{2}\u{4E5}\u{4DE}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{4E6}\u{33}\u{3}\u{2}\u{2}\u{2}\u{4E7}\u{4E8}\u{7}\u{149}\u{2}\u{2}" .
		    "\u{4E8}\u{4EF}\u{7}\u{3F7}\u{2}\u{2}\u{4E9}\u{4F0}\u{5}\u{1FA}\u{FE}" .
		    "\u{2}\u{4EA}\u{4ED}\u{7}\u{23}\u{2}\u{2}\u{4EB}\u{4EC}\u{7}\u{400}" .
		    "\u{2}\u{2}\u{4EC}\u{4EE}\u{7}\u{401}\u{2}\u{2}\u{4ED}\u{4EB}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{4ED}\u{4EE}\u{3}\u{2}\u{2}\u{2}\u{4EE}\u{4F0}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{4EF}\u{4E9}\u{3}\u{2}\u{2}\u{2}\u{4EF}\u{4EA}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{4F0}\u{35}\u{3}\u{2}\u{2}\u{2}\u{4F1}\u{4F2}\u{7}" .
		    "\u{116}\u{2}\u{2}\u{4F2}\u{4F6}\u{5}\u{38}\u{1D}\u{2}\u{4F3}\u{4F5}" .
		    "\u{5}\u{3A}\u{1E}\u{2}\u{4F4}\u{4F3}\u{3}\u{2}\u{2}\u{2}\u{4F5}\u{4F8}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{4F6}\u{4F4}\u{3}\u{2}\u{2}\u{2}\u{4F6}\u{4F7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{4F7}\u{514}\u{3}\u{2}\u{2}\u{2}\u{4F8}\u{4F6}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{4F9}\u{4FC}\u{7}\u{160}\u{2}\u{2}\u{4FA}\u{4FD}" .
		    "\u{5}\u{212}\u{10A}\u{2}\u{4FB}\u{4FD}\u{5}\u{25C}\u{12F}\u{2}\u{4FC}" .
		    "\u{4FA}\u{3}\u{2}\u{2}\u{2}\u{4FC}\u{4FB}\u{3}\u{2}\u{2}\u{2}\u{4FD}" .
		    "\u{4FE}\u{3}\u{2}\u{2}\u{2}\u{4FE}\u{507}\u{5}\u{3C}\u{1F}\u{2}\u{4FF}" .
		    "\u{500}\u{7}\u{21F}\u{2}\u{2}\u{500}\u{504}\u{5}\u{38}\u{1D}\u{2}" .
		    "\u{501}\u{503}\u{5}\u{3A}\u{1E}\u{2}\u{502}\u{501}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{503}\u{506}\u{3}\u{2}\u{2}\u{2}\u{504}\u{502}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{504}\u{505}\u{3}\u{2}\u{2}\u{2}\u{505}\u{508}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{506}\u{504}\u{3}\u{2}\u{2}\u{2}\u{507}\u{4FF}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{507}\u{508}\u{3}\u{2}\u{2}\u{2}\u{508}\u{511}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{509}\u{50A}\u{7}\u{157}\u{2}\u{2}\u{50A}\u{50E}\u{5}\u{38}" .
		    "\u{1D}\u{2}\u{50B}\u{50D}\u{5}\u{3A}\u{1E}\u{2}\u{50C}\u{50B}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{50D}\u{510}\u{3}\u{2}\u{2}\u{2}\u{50E}\u{50C}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{50E}\u{50F}\u{3}\u{2}\u{2}\u{2}\u{50F}\u{512}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{510}\u{50E}\u{3}\u{2}\u{2}\u{2}\u{511}\u{509}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{511}\u{512}\u{3}\u{2}\u{2}\u{2}\u{512}\u{514}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{513}\u{4F1}\u{3}\u{2}\u{2}\u{2}\u{513}\u{4F9}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{514}\u{37}\u{3}\u{2}\u{2}\u{2}\u{515}\u{51A}\u{7}" .
		    "\u{FF}\u{2}\u{2}\u{516}\u{51A}\u{5}\u{216}\u{10C}\u{2}\u{517}\u{51A}" .
		    "\u{5}\u{212}\u{10A}\u{2}\u{518}\u{51A}\u{5}\u{25C}\u{12F}\u{2}\u{519}" .
		    "\u{515}\u{3}\u{2}\u{2}\u{2}\u{519}\u{516}\u{3}\u{2}\u{2}\u{2}\u{519}" .
		    "\u{517}\u{3}\u{2}\u{2}\u{2}\u{519}\u{518}\u{3}\u{2}\u{2}\u{2}\u{51A}" .
		    "\u{39}\u{3}\u{2}\u{2}\u{2}\u{51B}\u{51C}\u{7}\u{3F2}\u{2}\u{2}\u{51C}" .
		    "\u{51F}\u{7}\u{4F}\u{2}\u{2}\u{51D}\u{520}\u{5}\u{212}\u{10A}\u{2}" .
		    "\u{51E}\u{520}\u{5}\u{25C}\u{12F}\u{2}\u{51F}\u{51D}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{51F}\u{51E}\u{3}\u{2}\u{2}\u{2}\u{520}\u{521}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{521}\u{522}\u{5}\u{3C}\u{1F}\u{2}\u{522}\u{3B}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{523}\u{531}\u{5}\u{278}\u{13D}\u{2}\u{524}\u{531}\u{7}\u{CD}" .
		    "\u{2}\u{2}\u{525}\u{531}\u{7}\u{E0}\u{2}\u{2}\u{526}\u{531}\u{7}\u{E1}" .
		    "\u{2}\u{2}\u{527}\u{531}\u{7}\u{E2}\u{2}\u{2}\u{528}\u{531}\u{7}\u{E3}" .
		    "\u{2}\u{2}\u{529}\u{531}\u{7}\u{E4}\u{2}\u{2}\u{52A}\u{531}\u{7}\u{E5}" .
		    "\u{2}\u{2}\u{52B}\u{531}\u{7}\u{E6}\u{2}\u{2}\u{52C}\u{531}\u{7}\u{E7}" .
		    "\u{2}\u{2}\u{52D}\u{531}\u{7}\u{E8}\u{2}\u{2}\u{52E}\u{531}\u{7}\u{E9}" .
		    "\u{2}\u{2}\u{52F}\u{531}\u{7}\u{EA}\u{2}\u{2}\u{530}\u{523}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{530}\u{524}\u{3}\u{2}\u{2}\u{2}\u{530}\u{525}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{530}\u{526}\u{3}\u{2}\u{2}\u{2}\u{530}\u{527}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{530}\u{528}\u{3}\u{2}\u{2}\u{2}\u{530}\u{529}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{530}\u{52A}\u{3}\u{2}\u{2}\u{2}\u{530}\u{52B}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{530}\u{52C}\u{3}\u{2}\u{2}\u{2}\u{530}\u{52D}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{530}\u{52E}\u{3}\u{2}\u{2}\u{2}\u{530}\u{52F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{531}\u{3D}\u{3}\u{2}\u{2}\u{2}\u{532}\u{538}\u{7}\u{154}" .
		    "\u{2}\u{2}\u{533}\u{538}\u{7}\u{14D}\u{2}\u{2}\u{534}\u{535}\u{7}" .
		    "\u{14D}\u{2}\u{2}\u{535}\u{536}\u{7}\u{6C}\u{2}\u{2}\u{536}\u{538}" .
		    "\u{7}\u{20F}\u{2}\u{2}\u{537}\u{532}\u{3}\u{2}\u{2}\u{2}\u{537}\u{533}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{537}\u{534}\u{3}\u{2}\u{2}\u{2}\u{538}\u{3F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{539}\u{53A}\u{7}\u{AB}\u{2}\u{2}\u{53A}\u{53B}" .
		    "\u{9}\u{F}\u{2}\u{2}\u{53B}\u{41}\u{3}\u{2}\u{2}\u{2}\u{53C}\u{53E}" .
		    "\u{7}\u{18D}\u{2}\u{2}\u{53D}\u{53F}\u{7}\u{3F7}\u{2}\u{2}\u{53E}" .
		    "\u{53D}\u{3}\u{2}\u{2}\u{2}\u{53E}\u{53F}\u{3}\u{2}\u{2}\u{2}\u{53F}" .
		    "\u{540}\u{3}\u{2}\u{2}\u{2}\u{540}\u{54A}\u{5}\u{214}\u{10B}\u{2}" .
		    "\u{541}\u{54A}\u{5}\u{40}\u{21}\u{2}\u{542}\u{543}\u{7}\u{B0}\u{2}" .
		    "\u{2}\u{543}\u{544}\u{7}\u{1D4}\u{2}\u{2}\u{544}\u{54A}\u{5}\u{20C}" .
		    "\u{107}\u{2}\u{545}\u{546}\u{7}\u{133}\u{2}\u{2}\u{546}\u{54A}\u{7}" .
		    "\u{40F}\u{2}\u{2}\u{547}\u{54A}\u{7}\u{185}\u{2}\u{2}\u{548}\u{54A}" .
		    "\u{7}\u{248}\u{2}\u{2}\u{549}\u{53C}\u{3}\u{2}\u{2}\u{2}\u{549}\u{541}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{549}\u{542}\u{3}\u{2}\u{2}\u{2}\u{549}\u{545}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{549}\u{547}\u{3}\u{2}\u{2}\u{2}\u{549}\u{548}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{54A}\u{43}\u{3}\u{2}\u{2}\u{2}\u{54B}\u{54D}" .
		    "\u{9}\u{10}\u{2}\u{2}\u{54C}\u{54B}\u{3}\u{2}\u{2}\u{2}\u{54C}\u{54D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{54D}\u{54E}\u{3}\u{2}\u{2}\u{2}\u{54E}\u{54F}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{54F}\u{550}\u{5}\u{220}\u{111}\u{2}\u{550}" .
		    "\u{45}\u{3}\u{2}\u{2}\u{2}\u{551}\u{552}\u{5}\u{20C}\u{107}\u{2}\u{552}" .
		    "\u{553}\u{5}\u{220}\u{111}\u{2}\u{553}\u{47}\u{3}\u{2}\u{2}\u{2}\u{554}" .
		    "\u{555}\u{7}\u{133}\u{2}\u{2}\u{555}\u{56C}\u{7}\u{40F}\u{2}\u{2}" .
		    "\u{556}\u{557}\u{7}\u{18E}\u{2}\u{2}\u{557}\u{56C}\u{7}\u{91}\u{2}" .
		    "\u{2}\u{558}\u{55A}\u{7}\u{68}\u{2}\u{2}\u{559}\u{558}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{559}\u{55A}\u{3}\u{2}\u{2}\u{2}\u{55A}\u{55B}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{55B}\u{56C}\u{7}\u{2D}\u{2}\u{2}\u{55C}\u{55D}\u{7}\u{13F}" .
		    "\u{2}\u{2}\u{55D}\u{567}\u{7}\u{91}\u{2}\u{2}\u{55E}\u{55F}\u{7}\u{1C3}" .
		    "\u{2}\u{2}\u{55F}\u{567}\u{7}\u{91}\u{2}\u{2}\u{560}\u{561}\u{7}\u{7B}" .
		    "\u{2}\u{2}\u{561}\u{562}\u{7}\u{91}\u{2}\u{2}\u{562}\u{567}\u{7}\u{145}" .
		    "\u{2}\u{2}\u{563}\u{564}\u{7}\u{66}\u{2}\u{2}\u{564}\u{565}\u{7}\u{91}" .
		    "\u{2}\u{2}\u{565}\u{567}\u{7}\u{145}\u{2}\u{2}\u{566}\u{55C}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{566}\u{55E}\u{3}\u{2}\u{2}\u{2}\u{566}\u{560}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{566}\u{563}\u{3}\u{2}\u{2}\u{2}\u{567}\u{56C}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{568}\u{569}\u{7}\u{91}\u{2}\u{2}\u{569}\u{56A}\u{7}" .
		    "\u{208}\u{2}\u{2}\u{56A}\u{56C}\u{9}\u{D}\u{2}\u{2}\u{56B}\u{554}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{56B}\u{556}\u{3}\u{2}\u{2}\u{2}\u{56B}\u{559}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{56B}\u{566}\u{3}\u{2}\u{2}\u{2}\u{56B}\u{568}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{56C}\u{49}\u{3}\u{2}\u{2}\u{2}\u{56D}\u{56E}" .
		    "\u{7}\u{17A}\u{2}\u{2}\u{56E}\u{57C}\u{7}\u{40F}\u{2}\u{2}\u{56F}" .
		    "\u{570}\u{7}\u{25}\u{2}\u{2}\u{570}\u{57C}\u{7}\u{40F}\u{2}\u{2}\u{571}" .
		    "\u{572}\u{7}\u{240}\u{2}\u{2}\u{572}\u{57C}\u{7}\u{40F}\u{2}\u{2}" .
		    "\u{573}\u{574}\u{7}\u{1D8}\u{2}\u{2}\u{574}\u{57C}\u{7}\u{40F}\u{2}" .
		    "\u{2}\u{575}\u{576}\u{7}\u{212}\u{2}\u{2}\u{576}\u{57C}\u{7}\u{40F}" .
		    "\u{2}\u{2}\u{577}\u{578}\u{7}\u{1D1}\u{2}\u{2}\u{578}\u{57C}\u{7}" .
		    "\u{40F}\u{2}\u{2}\u{579}\u{57A}\u{7}\u{1DD}\u{2}\u{2}\u{57A}\u{57C}" .
		    "\u{5}\u{212}\u{10A}\u{2}\u{57B}\u{56D}\u{3}\u{2}\u{2}\u{2}\u{57B}" .
		    "\u{56F}\u{3}\u{2}\u{2}\u{2}\u{57B}\u{571}\u{3}\u{2}\u{2}\u{2}\u{57B}" .
		    "\u{573}\u{3}\u{2}\u{2}\u{2}\u{57B}\u{575}\u{3}\u{2}\u{2}\u{2}\u{57B}" .
		    "\u{577}\u{3}\u{2}\u{2}\u{2}\u{57B}\u{579}\u{3}\u{2}\u{2}\u{2}\u{57C}" .
		    "\u{4B}\u{3}\u{2}\u{2}\u{2}\u{57D}\u{57E}\u{7}\u{400}\u{2}\u{2}\u{57E}" .
		    "\u{583}\u{5}\u{4E}\u{28}\u{2}\u{57F}\u{580}\u{7}\u{402}\u{2}\u{2}" .
		    "\u{580}\u{582}\u{5}\u{4E}\u{28}\u{2}\u{581}\u{57F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{582}\u{585}\u{3}\u{2}\u{2}\u{2}\u{583}\u{581}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{583}\u{584}\u{3}\u{2}\u{2}\u{2}\u{584}\u{586}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{585}\u{583}\u{3}\u{2}\u{2}\u{2}\u{586}\u{587}\u{7}\u{401}" .
		    "\u{2}\u{2}\u{587}\u{4D}\u{3}\u{2}\u{2}\u{2}\u{588}\u{589}\u{5}\u{20C}" .
		    "\u{107}\u{2}\u{589}\u{58A}\u{5}\u{50}\u{29}\u{2}\u{58A}\u{58E}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{58B}\u{58E}\u{5}\u{54}\u{2B}\u{2}\u{58C}\u{58E}" .
		    "\u{5}\u{5C}\u{2F}\u{2}\u{58D}\u{588}\u{3}\u{2}\u{2}\u{2}\u{58D}\u{58B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{58D}\u{58C}\u{3}\u{2}\u{2}\u{2}\u{58E}\u{4F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{58F}\u{593}\u{5}\u{220}\u{111}\u{2}\u{590}" .
		    "\u{592}\u{5}\u{52}\u{2A}\u{2}\u{591}\u{590}\u{3}\u{2}\u{2}\u{2}\u{592}" .
		    "\u{595}\u{3}\u{2}\u{2}\u{2}\u{593}\u{591}\u{3}\u{2}\u{2}\u{2}\u{593}" .
		    "\u{594}\u{3}\u{2}\u{2}\u{2}\u{594}\u{51}\u{3}\u{2}\u{2}\u{2}\u{595}" .
		    "\u{593}\u{3}\u{2}\u{2}\u{2}\u{596}\u{5BF}\u{5}\u{21C}\u{10F}\u{2}" .
		    "\u{597}\u{598}\u{7}\u{28}\u{2}\u{2}\u{598}\u{5BF}\u{5}\u{23E}\u{120}" .
		    "\u{2}\u{599}\u{59E}\u{7}\u{11A}\u{2}\u{2}\u{59A}\u{59B}\u{7}\u{6C}" .
		    "\u{2}\u{2}\u{59B}\u{59C}\u{7}\u{A8}\u{2}\u{2}\u{59C}\u{59E}\u{5}\u{240}" .
		    "\u{121}\u{2}\u{59D}\u{599}\u{3}\u{2}\u{2}\u{2}\u{59D}\u{59A}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{59E}\u{5BF}\u{3}\u{2}\u{2}\u{2}\u{59F}\u{5A1}\u{7}" .
		    "\u{76}\u{2}\u{2}\u{5A0}\u{59F}\u{3}\u{2}\u{2}\u{2}\u{5A0}\u{5A1}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{5A1}\u{5A2}\u{3}\u{2}\u{2}\u{2}\u{5A2}\u{5BF}\u{7}" .
		    "\u{54}\u{2}\u{2}\u{5A3}\u{5A5}\u{7}\u{A5}\u{2}\u{2}\u{5A4}\u{5A6}" .
		    "\u{7}\u{54}\u{2}\u{2}\u{5A5}\u{5A4}\u{3}\u{2}\u{2}\u{2}\u{5A5}\u{5A6}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{5A6}\u{5BF}\u{3}\u{2}\u{2}\u{2}\u{5A7}\u{5A8}" .
		    "\u{7}\u{133}\u{2}\u{2}\u{5A8}\u{5BF}\u{7}\u{40F}\u{2}\u{2}\u{5A9}" .
		    "\u{5AA}\u{7}\u{131}\u{2}\u{2}\u{5AA}\u{5BF}\u{9}\u{11}\u{2}\u{2}\u{5AB}" .
		    "\u{5AC}\u{7}\u{225}\u{2}\u{2}\u{5AC}\u{5BF}\u{9}\u{12}\u{2}\u{2}\u{5AD}" .
		    "\u{5BF}\u{5}\u{56}\u{2C}\u{2}\u{5AE}\u{5AF}\u{7}\u{1A}\u{2}\u{2}\u{5AF}" .
		    "\u{5BF}\u{5}\u{200}\u{101}\u{2}\u{5B0}\u{5B1}\u{7}\u{41}\u{2}\u{2}" .
		    "\u{5B1}\u{5B3}\u{7}\u{A}\u{2}\u{2}\u{5B2}\u{5B0}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{5B2}\u{5B3}\u{3}\u{2}\u{2}\u{2}\u{5B3}\u{5B4}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{5B4}\u{5B5}\u{7}\u{D}\u{2}\u{2}\u{5B5}\u{5B6}\u{7}\u{400}\u{2}" .
		    "\u{2}\u{5B6}\u{5B7}\u{5}\u{25C}\u{12F}\u{2}\u{5B7}\u{5B9}\u{7}\u{401}" .
		    "\u{2}\u{2}\u{5B8}\u{5BA}\u{9}\u{13}\u{2}\u{2}\u{5B9}\u{5B8}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{5B9}\u{5BA}\u{3}\u{2}\u{2}\u{2}\u{5BA}\u{5BF}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{5BB}\u{5BC}\u{7}\u{DF}\u{2}\u{2}\u{5BC}\u{5BD}\u{7}\u{28}" .
		    "\u{2}\u{2}\u{5BD}\u{5BF}\u{7}\u{244}\u{2}\u{2}\u{5BE}\u{596}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{5BE}\u{597}\u{3}\u{2}\u{2}\u{2}\u{5BE}\u{59D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{5BE}\u{5A0}\u{3}\u{2}\u{2}\u{2}\u{5BE}\u{5A3}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{5BE}\u{5A7}\u{3}\u{2}\u{2}\u{2}\u{5BE}\u{5A9}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{5BE}\u{5AB}\u{3}\u{2}\u{2}\u{2}\u{5BE}\u{5AD}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{5BE}\u{5AE}\u{3}\u{2}\u{2}\u{2}\u{5BE}\u{5B2}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{5BE}\u{5BB}\u{3}\u{2}\u{2}\u{2}\u{5BF}\u{53}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{5C0}\u{5C2}\u{7}\u{1D}\u{2}\u{2}\u{5C1}\u{5C3}\u{5}" .
		    "\u{20C}\u{107}\u{2}\u{5C2}\u{5C1}\u{3}\u{2}\u{2}\u{2}\u{5C2}\u{5C3}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{5C3}\u{5C5}\u{3}\u{2}\u{2}\u{2}\u{5C4}\u{5C0}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{5C4}\u{5C5}\u{3}\u{2}\u{2}\u{2}\u{5C5}\u{5C6}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{5C6}\u{5C7}\u{7}\u{76}\u{2}\u{2}\u{5C7}\u{5C9}" .
		    "\u{7}\u{54}\u{2}\u{2}\u{5C8}\u{5CA}\u{5}\u{20C}\u{107}\u{2}\u{5C9}" .
		    "\u{5C8}\u{3}\u{2}\u{2}\u{2}\u{5C9}\u{5CA}\u{3}\u{2}\u{2}\u{2}\u{5CA}" .
		    "\u{5CC}\u{3}\u{2}\u{2}\u{2}\u{5CB}\u{5CD}\u{5}\u{40}\u{21}\u{2}\u{5CC}" .
		    "\u{5CB}\u{3}\u{2}\u{2}\u{2}\u{5CC}\u{5CD}\u{3}\u{2}\u{2}\u{2}\u{5CD}" .
		    "\u{5CE}\u{3}\u{2}\u{2}\u{2}\u{5CE}\u{5D2}\u{5}\u{230}\u{119}\u{2}" .
		    "\u{5CF}\u{5D1}\u{5}\u{42}\u{22}\u{2}\u{5D0}\u{5CF}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{5D1}\u{5D4}\u{3}\u{2}\u{2}\u{2}\u{5D2}\u{5D0}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{5D2}\u{5D3}\u{3}\u{2}\u{2}\u{2}\u{5D3}\u{606}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{5D4}\u{5D2}\u{3}\u{2}\u{2}\u{2}\u{5D5}\u{5D7}\u{7}\u{1D}\u{2}" .
		    "\u{2}\u{5D6}\u{5D8}\u{5}\u{20C}\u{107}\u{2}\u{5D7}\u{5D6}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{5D7}\u{5D8}\u{3}\u{2}\u{2}\u{2}\u{5D8}\u{5DA}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{5D9}\u{5D5}\u{3}\u{2}\u{2}\u{2}\u{5D9}\u{5DA}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{5DA}\u{5DB}\u{3}\u{2}\u{2}\u{2}\u{5DB}\u{5DD}\u{7}\u{A5}" .
		    "\u{2}\u{2}\u{5DC}\u{5DE}\u{9}\u{14}\u{2}\u{2}\u{5DD}\u{5DC}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{5DD}\u{5DE}\u{3}\u{2}\u{2}\u{2}\u{5DE}\u{5E0}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{5DF}\u{5E1}\u{5}\u{20C}\u{107}\u{2}\u{5E0}\u{5DF}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{5E0}\u{5E1}\u{3}\u{2}\u{2}\u{2}\u{5E1}\u{5E3}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{5E2}\u{5E4}\u{5}\u{40}\u{21}\u{2}\u{5E3}\u{5E2}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{5E3}\u{5E4}\u{3}\u{2}\u{2}\u{2}\u{5E4}\u{5E5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{5E5}\u{5E9}\u{5}\u{230}\u{119}\u{2}\u{5E6}" .
		    "\u{5E8}\u{5}\u{42}\u{22}\u{2}\u{5E7}\u{5E6}\u{3}\u{2}\u{2}\u{2}\u{5E8}" .
		    "\u{5EB}\u{3}\u{2}\u{2}\u{2}\u{5E9}\u{5E7}\u{3}\u{2}\u{2}\u{2}\u{5E9}" .
		    "\u{5EA}\u{3}\u{2}\u{2}\u{2}\u{5EA}\u{606}\u{3}\u{2}\u{2}\u{2}\u{5EB}" .
		    "\u{5E9}\u{3}\u{2}\u{2}\u{2}\u{5EC}\u{5EE}\u{7}\u{1D}\u{2}\u{2}\u{5ED}" .
		    "\u{5EF}\u{5}\u{20C}\u{107}\u{2}\u{5EE}\u{5ED}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{5EE}\u{5EF}\u{3}\u{2}\u{2}\u{2}\u{5EF}\u{5F1}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{5F0}\u{5EC}\u{3}\u{2}\u{2}\u{2}\u{5F0}\u{5F1}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{5F1}\u{5F2}\u{3}\u{2}\u{2}\u{2}\u{5F2}\u{5F3}\u{7}\u{3E}\u{2}\u{2}" .
		    "\u{5F3}\u{5F5}\u{7}\u{54}\u{2}\u{2}\u{5F4}\u{5F6}\u{5}\u{20C}\u{107}" .
		    "\u{2}\u{5F5}\u{5F4}\u{3}\u{2}\u{2}\u{2}\u{5F5}\u{5F6}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{5F6}\u{5F7}\u{3}\u{2}\u{2}\u{2}\u{5F7}\u{5F8}\u{5}\u{230}" .
		    "\u{119}\u{2}\u{5F8}\u{5F9}\u{5}\u{56}\u{2C}\u{2}\u{5F9}\u{606}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{5FA}\u{5FC}\u{7}\u{1D}\u{2}\u{2}\u{5FB}\u{5FD}\u{5}" .
		    "\u{20C}\u{107}\u{2}\u{5FC}\u{5FB}\u{3}\u{2}\u{2}\u{2}\u{5FC}\u{5FD}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{5FD}\u{5FF}\u{3}\u{2}\u{2}\u{2}\u{5FE}\u{5FA}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{5FE}\u{5FF}\u{3}\u{2}\u{2}\u{2}\u{5FF}\u{600}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{600}\u{601}\u{7}\u{19}\u{2}\u{2}\u{601}\u{602}" .
		    "\u{7}\u{400}\u{2}\u{2}\u{602}\u{603}\u{5}\u{25C}\u{12F}\u{2}\u{603}" .
		    "\u{604}\u{7}\u{401}\u{2}\u{2}\u{604}\u{606}\u{3}\u{2}\u{2}\u{2}\u{605}" .
		    "\u{5C4}\u{3}\u{2}\u{2}\u{2}\u{605}\u{5D9}\u{3}\u{2}\u{2}\u{2}\u{605}" .
		    "\u{5F0}\u{3}\u{2}\u{2}\u{2}\u{605}\u{5FE}\u{3}\u{2}\u{2}\u{2}\u{606}" .
		    "\u{55}\u{3}\u{2}\u{2}\u{2}\u{607}\u{608}\u{7}\u{7C}\u{2}\u{2}\u{608}" .
		    "\u{60A}\u{5}\u{1F4}\u{FB}\u{2}\u{609}\u{60B}\u{5}\u{230}\u{119}\u{2}" .
		    "\u{60A}\u{609}\u{3}\u{2}\u{2}\u{2}\u{60A}\u{60B}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{60B}\u{60E}\u{3}\u{2}\u{2}\u{2}\u{60C}\u{60D}\u{7}\u{64}\u{2}\u{2}" .
		    "\u{60D}\u{60F}\u{9}\u{15}\u{2}\u{2}\u{60E}\u{60C}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{60E}\u{60F}\u{3}\u{2}\u{2}\u{2}\u{60F}\u{611}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{610}\u{612}\u{5}\u{58}\u{2D}\u{2}\u{611}\u{610}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{611}\u{612}\u{3}\u{2}\u{2}\u{2}\u{612}\u{57}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{613}\u{614}\u{7}\u{6C}\u{2}\u{2}\u{614}\u{615}\u{7}\u{2A}" .
		    "\u{2}\u{2}\u{615}\u{619}\u{5}\u{5A}\u{2E}\u{2}\u{616}\u{617}\u{7}" .
		    "\u{6C}\u{2}\u{2}\u{617}\u{618}\u{7}\u{A8}\u{2}\u{2}\u{618}\u{61A}" .
		    "\u{5}\u{5A}\u{2E}\u{2}\u{619}\u{616}\u{3}\u{2}\u{2}\u{2}\u{619}\u{61A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{61A}\u{624}\u{3}\u{2}\u{2}\u{2}\u{61B}\u{61C}" .
		    "\u{7}\u{6C}\u{2}\u{2}\u{61C}\u{61D}\u{7}\u{A8}\u{2}\u{2}\u{61D}\u{621}" .
		    "\u{5}\u{5A}\u{2E}\u{2}\u{61E}\u{61F}\u{7}\u{6C}\u{2}\u{2}\u{61F}\u{620}" .
		    "\u{7}\u{2A}\u{2}\u{2}\u{620}\u{622}\u{5}\u{5A}\u{2E}\u{2}\u{621}\u{61E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{621}\u{622}\u{3}\u{2}\u{2}\u{2}\u{622}\u{624}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{623}\u{613}\u{3}\u{2}\u{2}\u{2}\u{623}\u{61B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{624}\u{59}\u{3}\u{2}\u{2}\u{2}\u{625}\u{62C}" .
		    "\u{7}\u{84}\u{2}\u{2}\u{626}\u{62C}\u{7}\u{14}\u{2}\u{2}\u{627}\u{628}" .
		    "\u{7}\u{8C}\u{2}\u{2}\u{628}\u{62C}\u{7}\u{6A}\u{2}\u{2}\u{629}\u{62A}" .
		    "\u{7}\u{1C3}\u{2}\u{2}\u{62A}\u{62C}\u{7}\u{111}\u{2}\u{2}\u{62B}" .
		    "\u{625}\u{3}\u{2}\u{2}\u{2}\u{62B}\u{626}\u{3}\u{2}\u{2}\u{2}\u{62B}" .
		    "\u{627}\u{3}\u{2}\u{2}\u{2}\u{62B}\u{629}\u{3}\u{2}\u{2}\u{2}\u{62C}" .
		    "\u{5B}\u{3}\u{2}\u{2}\u{2}\u{62D}\u{62F}\u{9}\u{14}\u{2}\u{2}\u{62E}" .
		    "\u{630}\u{5}\u{20C}\u{107}\u{2}\u{62F}\u{62E}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{62F}\u{630}\u{3}\u{2}\u{2}\u{2}\u{630}\u{632}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{631}\u{633}\u{5}\u{40}\u{21}\u{2}\u{632}\u{631}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{632}\u{633}\u{3}\u{2}\u{2}\u{2}\u{633}\u{634}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{634}\u{638}\u{5}\u{230}\u{119}\u{2}\u{635}\u{637}\u{5}\u{42}" .
		    "\u{22}\u{2}\u{636}\u{635}\u{3}\u{2}\u{2}\u{2}\u{637}\u{63A}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{638}\u{636}\u{3}\u{2}\u{2}\u{2}\u{638}\u{639}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{639}\u{64A}\u{3}\u{2}\u{2}\u{2}\u{63A}\u{638}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{63B}\u{63D}\u{9}\u{16}\u{2}\u{2}\u{63C}\u{63E}\u{9}\u{14}" .
		    "\u{2}\u{2}\u{63D}\u{63C}\u{3}\u{2}\u{2}\u{2}\u{63D}\u{63E}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{63E}\u{640}\u{3}\u{2}\u{2}\u{2}\u{63F}\u{641}\u{5}\u{20C}" .
		    "\u{107}\u{2}\u{640}\u{63F}\u{3}\u{2}\u{2}\u{2}\u{640}\u{641}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{641}\u{642}\u{3}\u{2}\u{2}\u{2}\u{642}\u{646}\u{5}" .
		    "\u{230}\u{119}\u{2}\u{643}\u{645}\u{5}\u{42}\u{22}\u{2}\u{644}\u{643}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{645}\u{648}\u{3}\u{2}\u{2}\u{2}\u{646}\u{644}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{646}\u{647}\u{3}\u{2}\u{2}\u{2}\u{647}\u{64A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{648}\u{646}\u{3}\u{2}\u{2}\u{2}\u{649}\u{62D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{649}\u{63B}\u{3}\u{2}\u{2}\u{2}\u{64A}\u{5D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{64B}\u{64D}\u{7}\u{158}\u{2}\u{2}\u{64C}\u{64E}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{64D}\u{64C}\u{3}\u{2}\u{2}\u{2}\u{64D}\u{64E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{64E}\u{64F}\u{3}\u{2}\u{2}\u{2}\u{64F}\u{6DC}" .
		    "\u{5}\u{202}\u{102}\u{2}\u{650}\u{652}\u{7}\u{11A}\u{2}\u{2}\u{651}" .
		    "\u{653}\u{7}\u{3F7}\u{2}\u{2}\u{652}\u{651}\u{3}\u{2}\u{2}\u{2}\u{652}" .
		    "\u{653}\u{3}\u{2}\u{2}\u{2}\u{653}\u{654}\u{3}\u{2}\u{2}\u{2}\u{654}" .
		    "\u{6DC}\u{5}\u{212}\u{10A}\u{2}\u{655}\u{657}\u{7}\u{11B}\u{2}\u{2}" .
		    "\u{656}\u{658}\u{7}\u{3F7}\u{2}\u{2}\u{657}\u{656}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{657}\u{658}\u{3}\u{2}\u{2}\u{2}\u{658}\u{659}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{659}\u{6DC}\u{5}\u{212}\u{10A}\u{2}\u{65A}\u{65C}\u{7}\u{28}" .
		    "\u{2}\u{2}\u{65B}\u{65A}\u{3}\u{2}\u{2}\u{2}\u{65B}\u{65C}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{65C}\u{660}\u{3}\u{2}\u{2}\u{2}\u{65D}\u{65E}\u{7}\u{18}" .
		    "\u{2}\u{2}\u{65E}\u{661}\u{7}\u{8C}\u{2}\u{2}\u{65F}\u{661}\u{7}\u{2DF}" .
		    "\u{2}\u{2}\u{660}\u{65D}\u{3}\u{2}\u{2}\u{2}\u{660}\u{65F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{661}\u{663}\u{3}\u{2}\u{2}\u{2}\u{662}\u{664}\u{7}\u{3F7}" .
		    "\u{2}\u{2}\u{663}\u{662}\u{3}\u{2}\u{2}\u{2}\u{663}\u{664}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{664}\u{667}\u{3}\u{2}\u{2}\u{2}\u{665}\u{668}\u{5}\u{1FE}" .
		    "\u{100}\u{2}\u{666}\u{668}\u{7}\u{28}\u{2}\u{2}\u{667}\u{665}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{667}\u{666}\u{3}\u{2}\u{2}\u{2}\u{668}\u{6DC}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{669}\u{66B}\u{9}\u{17}\u{2}\u{2}\u{66A}\u{66C}\u{7}" .
		    "\u{3F7}\u{2}\u{2}\u{66B}\u{66A}\u{3}\u{2}\u{2}\u{2}\u{66B}\u{66C}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{66C}\u{66D}\u{3}\u{2}\u{2}\u{2}\u{66D}\u{6DC}" .
		    "\u{9}\u{18}\u{2}\u{2}\u{66E}\u{670}\u{7}\u{28}\u{2}\u{2}\u{66F}\u{66E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{66F}\u{670}\u{3}\u{2}\u{2}\u{2}\u{670}\u{671}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{671}\u{673}\u{7}\u{1A}\u{2}\u{2}\u{672}\u{674}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{673}\u{672}\u{3}\u{2}\u{2}\u{2}\u{673}\u{674}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{674}\u{675}\u{3}\u{2}\u{2}\u{2}\u{675}\u{6DC}" .
		    "\u{5}\u{200}\u{101}\u{2}\u{676}\u{678}\u{7}\u{133}\u{2}\u{2}\u{677}" .
		    "\u{679}\u{7}\u{3F7}\u{2}\u{2}\u{678}\u{677}\u{3}\u{2}\u{2}\u{2}\u{678}" .
		    "\u{679}\u{3}\u{2}\u{2}\u{2}\u{679}\u{67A}\u{3}\u{2}\u{2}\u{2}\u{67A}" .
		    "\u{6DC}\u{7}\u{40F}\u{2}\u{2}\u{67B}\u{67D}\u{7}\u{138}\u{2}\u{2}" .
		    "\u{67C}\u{67E}\u{7}\u{3F7}\u{2}\u{2}\u{67D}\u{67C}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{67D}\u{67E}\u{3}\u{2}\u{2}\u{2}\u{67E}\u{67F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{67F}\u{6DC}\u{9}\u{19}\u{2}\u{2}\u{680}\u{682}\u{7}\u{13A}" .
		    "\u{2}\u{2}\u{681}\u{683}\u{7}\u{3F7}\u{2}\u{2}\u{682}\u{681}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{682}\u{683}\u{3}\u{2}\u{2}\u{2}\u{683}\u{684}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{684}\u{6DC}\u{7}\u{40F}\u{2}\u{2}\u{685}\u{686}" .
		    "\u{7}\u{145}\u{2}\u{2}\u{686}\u{688}\u{7}\u{14C}\u{2}\u{2}\u{687}" .
		    "\u{689}\u{7}\u{3F7}\u{2}\u{2}\u{688}\u{687}\u{3}\u{2}\u{2}\u{2}\u{688}" .
		    "\u{689}\u{3}\u{2}\u{2}\u{2}\u{689}\u{68A}\u{3}\u{2}\u{2}\u{2}\u{68A}" .
		    "\u{6DC}\u{7}\u{40F}\u{2}\u{2}\u{68B}\u{68D}\u{7}\u{14A}\u{2}\u{2}" .
		    "\u{68C}\u{68E}\u{7}\u{3F7}\u{2}\u{2}\u{68D}\u{68C}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{68D}\u{68E}\u{3}\u{2}\u{2}\u{2}\u{68E}\u{68F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{68F}\u{6DC}\u{9}\u{18}\u{2}\u{2}\u{690}\u{692}\u{7}\u{155}" .
		    "\u{2}\u{2}\u{691}\u{693}\u{7}\u{3F7}\u{2}\u{2}\u{692}\u{691}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{692}\u{693}\u{3}\u{2}\u{2}\u{2}\u{693}\u{694}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{694}\u{6DC}\u{7}\u{40F}\u{2}\u{2}\u{695}\u{696}" .
		    "\u{7}\u{4A}\u{2}\u{2}\u{696}\u{698}\u{7}\u{14C}\u{2}\u{2}\u{697}\u{699}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{698}\u{697}\u{3}\u{2}\u{2}\u{2}\u{698}\u{699}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{699}\u{69A}\u{3}\u{2}\u{2}\u{2}\u{69A}\u{6DC}" .
		    "\u{7}\u{40F}\u{2}\u{2}\u{69B}\u{69D}\u{7}\u{182}\u{2}\u{2}\u{69C}" .
		    "\u{69E}\u{7}\u{3F7}\u{2}\u{2}\u{69D}\u{69C}\u{3}\u{2}\u{2}\u{2}\u{69D}" .
		    "\u{69E}\u{3}\u{2}\u{2}\u{2}\u{69E}\u{69F}\u{3}\u{2}\u{2}\u{2}\u{69F}" .
		    "\u{6DC}\u{9}\u{1A}\u{2}\u{2}\u{6A0}\u{6A2}\u{7}\u{18D}\u{2}\u{2}\u{6A1}" .
		    "\u{6A3}\u{7}\u{3F7}\u{2}\u{2}\u{6A2}\u{6A1}\u{3}\u{2}\u{2}\u{2}\u{6A2}" .
		    "\u{6A3}\u{3}\u{2}\u{2}\u{2}\u{6A3}\u{6A4}\u{3}\u{2}\u{2}\u{2}\u{6A4}" .
		    "\u{6DC}\u{5}\u{214}\u{10B}\u{2}\u{6A5}\u{6A7}\u{7}\u{1AE}\u{2}\u{2}" .
		    "\u{6A6}\u{6A8}\u{7}\u{3F7}\u{2}\u{2}\u{6A7}\u{6A6}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{6A7}\u{6A8}\u{3}\u{2}\u{2}\u{2}\u{6A8}\u{6A9}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{6A9}\u{6DC}\u{5}\u{212}\u{10A}\u{2}\u{6AA}\u{6AC}\u{7}\u{1B8}" .
		    "\u{2}\u{2}\u{6AB}\u{6AD}\u{7}\u{3F7}\u{2}\u{2}\u{6AC}\u{6AB}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{6AC}\u{6AD}\u{3}\u{2}\u{2}\u{2}\u{6AD}\u{6AE}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{6AE}\u{6DC}\u{5}\u{212}\u{10A}\u{2}\u{6AF}\u{6B1}" .
		    "\u{7}\u{1D2}\u{2}\u{2}\u{6B0}\u{6B2}\u{7}\u{3F7}\u{2}\u{2}\u{6B1}" .
		    "\u{6B0}\u{3}\u{2}\u{2}\u{2}\u{6B1}\u{6B2}\u{3}\u{2}\u{2}\u{2}\u{6B2}" .
		    "\u{6B3}\u{3}\u{2}\u{2}\u{2}\u{6B3}\u{6DC}\u{9}\u{1B}\u{2}\u{2}\u{6B4}" .
		    "\u{6B6}\u{7}\u{1D8}\u{2}\u{2}\u{6B5}\u{6B7}\u{7}\u{3F7}\u{2}\u{2}" .
		    "\u{6B6}\u{6B5}\u{3}\u{2}\u{2}\u{2}\u{6B6}\u{6B7}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{6B7}\u{6B8}\u{3}\u{2}\u{2}\u{2}\u{6B8}\u{6DC}\u{7}\u{40F}\u{2}" .
		    "\u{2}\u{6B9}\u{6BB}\u{7}\u{205}\u{2}\u{2}\u{6BA}\u{6BC}\u{7}\u{3F7}" .
		    "\u{2}\u{2}\u{6BB}\u{6BA}\u{3}\u{2}\u{2}\u{2}\u{6BB}\u{6BC}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{6BC}\u{6BD}\u{3}\u{2}\u{2}\u{2}\u{6BD}\u{6DC}\u{9}\u{1C}" .
		    "\u{2}\u{2}\u{6BE}\u{6C0}\u{7}\u{220}\u{2}\u{2}\u{6BF}\u{6C1}\u{7}" .
		    "\u{3F7}\u{2}\u{2}\u{6C0}\u{6BF}\u{3}\u{2}\u{2}\u{2}\u{6C0}\u{6C1}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6C1}\u{6C2}\u{3}\u{2}\u{2}\u{2}\u{6C2}\u{6DC}" .
		    "\u{9}\u{1B}\u{2}\u{2}\u{6C3}\u{6C5}\u{7}\u{221}\u{2}\u{2}\u{6C4}\u{6C6}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{6C5}\u{6C4}\u{3}\u{2}\u{2}\u{2}\u{6C5}\u{6C6}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6C6}\u{6C7}\u{3}\u{2}\u{2}\u{2}\u{6C7}\u{6DC}" .
		    "\u{9}\u{1B}\u{2}\u{2}\u{6C8}\u{6CA}\u{7}\u{222}\u{2}\u{2}\u{6C9}\u{6CB}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{6CA}\u{6C9}\u{3}\u{2}\u{2}\u{2}\u{6CA}\u{6CB}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6CB}\u{6CC}\u{3}\u{2}\u{2}\u{2}\u{6CC}\u{6DC}" .
		    "\u{5}\u{212}\u{10A}\u{2}\u{6CD}\u{6CE}\u{7}\u{230}\u{2}\u{2}\u{6CE}" .
		    "\u{6D0}\u{5}\u{20C}\u{107}\u{2}\u{6CF}\u{6D1}\u{5}\u{60}\u{31}\u{2}" .
		    "\u{6D0}\u{6CF}\u{3}\u{2}\u{2}\u{2}\u{6D0}\u{6D1}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{6D1}\u{6DC}\u{3}\u{2}\u{2}\u{2}\u{6D2}\u{6DC}\u{5}\u{60}\u{31}" .
		    "\u{2}\u{6D3}\u{6D5}\u{7}\u{A4}\u{2}\u{2}\u{6D4}\u{6D6}\u{7}\u{3F7}" .
		    "\u{2}\u{2}\u{6D5}\u{6D4}\u{3}\u{2}\u{2}\u{2}\u{6D5}\u{6D6}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{6D6}\u{6D7}\u{3}\u{2}\u{2}\u{2}\u{6D7}\u{6D8}\u{7}\u{400}" .
		    "\u{2}\u{2}\u{6D8}\u{6D9}\u{5}\u{22E}\u{118}\u{2}\u{6D9}\u{6DA}\u{7}" .
		    "\u{401}\u{2}\u{2}\u{6DA}\u{6DC}\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{64B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{650}\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{655}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{65B}\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{669}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{66F}\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{676}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{67B}\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{680}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{685}\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{68B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{690}\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{695}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{69B}\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{6A0}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{6A5}\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{6AA}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{6AF}\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{6B4}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{6B9}\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{6BE}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{6C3}\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{6C8}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{6CD}\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{6D2}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6DB}\u{6D3}\u{3}\u{2}\u{2}\u{2}\u{6DC}\u{5F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{6DD}\u{6DE}\u{7}\u{225}\u{2}\u{2}\u{6DE}\u{6DF}" .
		    "\u{9}\u{12}\u{2}\u{2}\u{6DF}\u{61}\u{3}\u{2}\u{2}\u{2}\u{6E0}\u{6E1}" .
		    "\u{7}\u{75}\u{2}\u{2}\u{6E1}\u{6E2}\u{7}\u{12}\u{2}\u{2}\u{6E2}\u{6E5}" .
		    "\u{5}\u{64}\u{33}\u{2}\u{6E3}\u{6E4}\u{7}\u{1D7}\u{2}\u{2}\u{6E4}" .
		    "\u{6E6}\u{5}\u{212}\u{10A}\u{2}\u{6E5}\u{6E3}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{6E5}\u{6E6}\u{3}\u{2}\u{2}\u{2}\u{6E6}\u{6EE}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{6E7}\u{6E8}\u{7}\u{22A}\u{2}\u{2}\u{6E8}\u{6E9}\u{7}\u{12}\u{2}" .
		    "\u{2}\u{6E9}\u{6EC}\u{5}\u{66}\u{34}\u{2}\u{6EA}\u{6EB}\u{7}\u{22B}" .
		    "\u{2}\u{2}\u{6EB}\u{6ED}\u{5}\u{212}\u{10A}\u{2}\u{6EC}\u{6EA}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{6EC}\u{6ED}\u{3}\u{2}\u{2}\u{2}\u{6ED}\u{6EF}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{6EE}\u{6E7}\u{3}\u{2}\u{2}\u{2}\u{6EE}\u{6EF}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{6EF}\u{6FB}\u{3}\u{2}\u{2}\u{2}\u{6F0}\u{6F1}\u{7}" .
		    "\u{400}\u{2}\u{2}\u{6F1}\u{6F6}\u{5}\u{68}\u{35}\u{2}\u{6F2}\u{6F3}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{6F3}\u{6F5}\u{5}\u{68}\u{35}\u{2}\u{6F4}" .
		    "\u{6F2}\u{3}\u{2}\u{2}\u{2}\u{6F5}\u{6F8}\u{3}\u{2}\u{2}\u{2}\u{6F6}" .
		    "\u{6F4}\u{3}\u{2}\u{2}\u{2}\u{6F6}\u{6F7}\u{3}\u{2}\u{2}\u{2}\u{6F7}" .
		    "\u{6F9}\u{3}\u{2}\u{2}\u{2}\u{6F8}\u{6F6}\u{3}\u{2}\u{2}\u{2}\u{6F9}" .
		    "\u{6FA}\u{7}\u{401}\u{2}\u{2}\u{6FA}\u{6FC}\u{3}\u{2}\u{2}\u{2}\u{6FB}" .
		    "\u{6F0}\u{3}\u{2}\u{2}\u{2}\u{6FB}\u{6FC}\u{3}\u{2}\u{2}\u{2}\u{6FC}" .
		    "\u{63}\u{3}\u{2}\u{2}\u{2}\u{6FD}\u{6FF}\u{7}\u{5C}\u{2}\u{2}\u{6FE}" .
		    "\u{6FD}\u{3}\u{2}\u{2}\u{2}\u{6FE}\u{6FF}\u{3}\u{2}\u{2}\u{2}\u{6FF}" .
		    "\u{700}\u{3}\u{2}\u{2}\u{2}\u{700}\u{701}\u{7}\u{178}\u{2}\u{2}\u{701}" .
		    "\u{702}\u{7}\u{400}\u{2}\u{2}\u{702}\u{703}\u{5}\u{25C}\u{12F}\u{2}" .
		    "\u{703}\u{704}\u{7}\u{401}\u{2}\u{2}\u{704}\u{72B}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{705}\u{707}\u{7}\u{5C}\u{2}\u{2}\u{706}\u{705}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{706}\u{707}\u{3}\u{2}\u{2}\u{2}\u{707}\u{708}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{708}\u{70C}\u{7}\u{54}\u{2}\u{2}\u{709}\u{70A}\u{7}\u{114}" .
		    "\u{2}\u{2}\u{70A}\u{70B}\u{7}\u{3F7}\u{2}\u{2}\u{70B}\u{70D}\u{9}" .
		    "\u{1D}\u{2}\u{2}\u{70C}\u{709}\u{3}\u{2}\u{2}\u{2}\u{70C}\u{70D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{70D}\u{70E}\u{3}\u{2}\u{2}\u{2}\u{70E}\u{70F}\u{7}" .
		    "\u{400}\u{2}\u{2}\u{70F}\u{710}\u{5}\u{22C}\u{117}\u{2}\u{710}\u{711}" .
		    "\u{7}\u{401}\u{2}\u{2}\u{711}\u{72B}\u{3}\u{2}\u{2}\u{2}\u{712}\u{71C}" .
		    "\u{7}\u{79}\u{2}\u{2}\u{713}\u{714}\u{7}\u{400}\u{2}\u{2}\u{714}\u{715}" .
		    "\u{5}\u{25C}\u{12F}\u{2}\u{715}\u{716}\u{7}\u{401}\u{2}\u{2}\u{716}" .
		    "\u{71D}\u{3}\u{2}\u{2}\u{2}\u{717}\u{718}\u{7}\u{130}\u{2}\u{2}\u{718}" .
		    "\u{719}\u{7}\u{400}\u{2}\u{2}\u{719}\u{71A}\u{5}\u{22C}\u{117}\u{2}" .
		    "\u{71A}\u{71B}\u{7}\u{401}\u{2}\u{2}\u{71B}\u{71D}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{71C}\u{713}\u{3}\u{2}\u{2}\u{2}\u{71C}\u{717}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{71D}\u{72B}\u{3}\u{2}\u{2}\u{2}\u{71E}\u{728}\u{7}\u{193}" .
		    "\u{2}\u{2}\u{71F}\u{720}\u{7}\u{400}\u{2}\u{2}\u{720}\u{721}\u{5}" .
		    "\u{25C}\u{12F}\u{2}\u{721}\u{722}\u{7}\u{401}\u{2}\u{2}\u{722}\u{729}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{723}\u{724}\u{7}\u{130}\u{2}\u{2}\u{724}\u{725}" .
		    "\u{7}\u{400}\u{2}\u{2}\u{725}\u{726}\u{5}\u{22C}\u{117}\u{2}\u{726}" .
		    "\u{727}\u{7}\u{401}\u{2}\u{2}\u{727}\u{729}\u{3}\u{2}\u{2}\u{2}\u{728}" .
		    "\u{71F}\u{3}\u{2}\u{2}\u{2}\u{728}\u{723}\u{3}\u{2}\u{2}\u{2}\u{729}" .
		    "\u{72B}\u{3}\u{2}\u{2}\u{2}\u{72A}\u{6FE}\u{3}\u{2}\u{2}\u{2}\u{72A}" .
		    "\u{706}\u{3}\u{2}\u{2}\u{2}\u{72A}\u{712}\u{3}\u{2}\u{2}\u{2}\u{72A}" .
		    "\u{71E}\u{3}\u{2}\u{2}\u{2}\u{72B}\u{65}\u{3}\u{2}\u{2}\u{2}\u{72C}" .
		    "\u{72E}\u{7}\u{5C}\u{2}\u{2}\u{72D}\u{72C}\u{3}\u{2}\u{2}\u{2}\u{72D}" .
		    "\u{72E}\u{3}\u{2}\u{2}\u{2}\u{72E}\u{72F}\u{3}\u{2}\u{2}\u{2}\u{72F}" .
		    "\u{730}\u{7}\u{178}\u{2}\u{2}\u{730}\u{731}\u{7}\u{400}\u{2}\u{2}" .
		    "\u{731}\u{732}\u{5}\u{25C}\u{12F}\u{2}\u{732}\u{733}\u{7}\u{401}\u{2}" .
		    "\u{2}\u{733}\u{742}\u{3}\u{2}\u{2}\u{2}\u{734}\u{736}\u{7}\u{5C}\u{2}" .
		    "\u{2}\u{735}\u{734}\u{3}\u{2}\u{2}\u{2}\u{735}\u{736}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{736}\u{737}\u{3}\u{2}\u{2}\u{2}\u{737}\u{73B}\u{7}\u{54}\u{2}" .
		    "\u{2}\u{738}\u{739}\u{7}\u{114}\u{2}\u{2}\u{739}\u{73A}\u{7}\u{3F7}" .
		    "\u{2}\u{2}\u{73A}\u{73C}\u{9}\u{1D}\u{2}\u{2}\u{73B}\u{738}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{73B}\u{73C}\u{3}\u{2}\u{2}\u{2}\u{73C}\u{73D}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{73D}\u{73E}\u{7}\u{400}\u{2}\u{2}\u{73E}\u{73F}\u{5}" .
		    "\u{22C}\u{117}\u{2}\u{73F}\u{740}\u{7}\u{401}\u{2}\u{2}\u{740}\u{742}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{741}\u{72D}\u{3}\u{2}\u{2}\u{2}\u{741}\u{735}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{742}\u{67}\u{3}\u{2}\u{2}\u{2}\u{743}\u{744}" .
		    "\u{7}\u{75}\u{2}\u{2}\u{744}\u{745}\u{5}\u{20C}\u{107}\u{2}\u{745}" .
		    "\u{746}\u{7}\u{AC}\u{2}\u{2}\u{746}\u{747}\u{7}\u{191}\u{2}\u{2}\u{747}" .
		    "\u{748}\u{7}\u{233}\u{2}\u{2}\u{748}\u{749}\u{7}\u{400}\u{2}\u{2}" .
		    "\u{749}\u{74E}\u{5}\u{6A}\u{36}\u{2}\u{74A}\u{74B}\u{7}\u{402}\u{2}" .
		    "\u{2}\u{74B}\u{74D}\u{5}\u{6A}\u{36}\u{2}\u{74C}\u{74A}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{74D}\u{750}\u{3}\u{2}\u{2}\u{2}\u{74E}\u{74C}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{74E}\u{74F}\u{3}\u{2}\u{2}\u{2}\u{74F}\u{751}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{750}\u{74E}\u{3}\u{2}\u{2}\u{2}\u{751}\u{755}\u{7}\u{401}" .
		    "\u{2}\u{2}\u{752}\u{754}\u{5}\u{70}\u{39}\u{2}\u{753}\u{752}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{754}\u{757}\u{3}\u{2}\u{2}\u{2}\u{755}\u{753}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{755}\u{756}\u{3}\u{2}\u{2}\u{2}\u{756}\u{760}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{757}\u{755}\u{3}\u{2}\u{2}\u{2}\u{758}\u{75D}\u{5}" .
		    "\u{6E}\u{38}\u{2}\u{759}\u{75A}\u{7}\u{402}\u{2}\u{2}\u{75A}\u{75C}" .
		    "\u{5}\u{6E}\u{38}\u{2}\u{75B}\u{759}\u{3}\u{2}\u{2}\u{2}\u{75C}\u{75F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{75D}\u{75B}\u{3}\u{2}\u{2}\u{2}\u{75D}\u{75E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{75E}\u{761}\u{3}\u{2}\u{2}\u{2}\u{75F}\u{75D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{760}\u{758}\u{3}\u{2}\u{2}\u{2}\u{760}\u{761}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{761}\u{7C7}\u{3}\u{2}\u{2}\u{2}\u{762}\u{763}" .
		    "\u{7}\u{75}\u{2}\u{2}\u{763}\u{764}\u{5}\u{20C}\u{107}\u{2}\u{764}" .
		    "\u{765}\u{7}\u{AC}\u{2}\u{2}\u{765}\u{766}\u{7}\u{191}\u{2}\u{2}\u{766}" .
		    "\u{767}\u{7}\u{233}\u{2}\u{2}\u{767}\u{76B}\u{5}\u{6A}\u{36}\u{2}" .
		    "\u{768}\u{76A}\u{5}\u{70}\u{39}\u{2}\u{769}\u{768}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{76A}\u{76D}\u{3}\u{2}\u{2}\u{2}\u{76B}\u{769}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{76B}\u{76C}\u{3}\u{2}\u{2}\u{2}\u{76C}\u{776}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{76D}\u{76B}\u{3}\u{2}\u{2}\u{2}\u{76E}\u{773}\u{5}\u{6E}\u{38}" .
		    "\u{2}\u{76F}\u{770}\u{7}\u{402}\u{2}\u{2}\u{770}\u{772}\u{5}\u{6E}" .
		    "\u{38}\u{2}\u{771}\u{76F}\u{3}\u{2}\u{2}\u{2}\u{772}\u{775}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{773}\u{771}\u{3}\u{2}\u{2}\u{2}\u{773}\u{774}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{774}\u{777}\u{3}\u{2}\u{2}\u{2}\u{775}\u{773}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{776}\u{76E}\u{3}\u{2}\u{2}\u{2}\u{776}\u{777}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{777}\u{7C7}\u{3}\u{2}\u{2}\u{2}\u{778}\u{779}\u{7}\u{75}" .
		    "\u{2}\u{2}\u{779}\u{77A}\u{5}\u{20C}\u{107}\u{2}\u{77A}\u{77B}\u{7}" .
		    "\u{AC}\u{2}\u{2}\u{77B}\u{77C}\u{7}\u{49}\u{2}\u{2}\u{77C}\u{77D}" .
		    "\u{7}\u{400}\u{2}\u{2}\u{77D}\u{782}\u{5}\u{6A}\u{36}\u{2}\u{77E}" .
		    "\u{77F}\u{7}\u{402}\u{2}\u{2}\u{77F}\u{781}\u{5}\u{6A}\u{36}\u{2}" .
		    "\u{780}\u{77E}\u{3}\u{2}\u{2}\u{2}\u{781}\u{784}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{782}\u{780}\u{3}\u{2}\u{2}\u{2}\u{782}\u{783}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{783}\u{785}\u{3}\u{2}\u{2}\u{2}\u{784}\u{782}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{785}\u{789}\u{7}\u{401}\u{2}\u{2}\u{786}\u{788}\u{5}\u{70}\u{39}" .
		    "\u{2}\u{787}\u{786}\u{3}\u{2}\u{2}\u{2}\u{788}\u{78B}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{789}\u{787}\u{3}\u{2}\u{2}\u{2}\u{789}\u{78A}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{78A}\u{794}\u{3}\u{2}\u{2}\u{2}\u{78B}\u{789}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{78C}\u{791}\u{5}\u{6E}\u{38}\u{2}\u{78D}\u{78E}\u{7}\u{402}" .
		    "\u{2}\u{2}\u{78E}\u{790}\u{5}\u{6E}\u{38}\u{2}\u{78F}\u{78D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{790}\u{793}\u{3}\u{2}\u{2}\u{2}\u{791}\u{78F}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{791}\u{792}\u{3}\u{2}\u{2}\u{2}\u{792}\u{795}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{793}\u{791}\u{3}\u{2}\u{2}\u{2}\u{794}\u{78C}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{794}\u{795}\u{3}\u{2}\u{2}\u{2}\u{795}\u{7C7}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{796}\u{797}\u{7}\u{75}\u{2}\u{2}\u{797}\u{798}\u{5}" .
		    "\u{20C}\u{107}\u{2}\u{798}\u{799}\u{7}\u{AC}\u{2}\u{2}\u{799}\u{79A}" .
		    "\u{7}\u{49}\u{2}\u{2}\u{79A}\u{79B}\u{7}\u{400}\u{2}\u{2}\u{79B}\u{7A0}" .
		    "\u{5}\u{6C}\u{37}\u{2}\u{79C}\u{79D}\u{7}\u{402}\u{2}\u{2}\u{79D}" .
		    "\u{79F}\u{5}\u{6C}\u{37}\u{2}\u{79E}\u{79C}\u{3}\u{2}\u{2}\u{2}\u{79F}" .
		    "\u{7A2}\u{3}\u{2}\u{2}\u{2}\u{7A0}\u{79E}\u{3}\u{2}\u{2}\u{2}\u{7A0}" .
		    "\u{7A1}\u{3}\u{2}\u{2}\u{2}\u{7A1}\u{7A3}\u{3}\u{2}\u{2}\u{2}\u{7A2}" .
		    "\u{7A0}\u{3}\u{2}\u{2}\u{2}\u{7A3}\u{7A7}\u{7}\u{401}\u{2}\u{2}\u{7A4}" .
		    "\u{7A6}\u{5}\u{70}\u{39}\u{2}\u{7A5}\u{7A4}\u{3}\u{2}\u{2}\u{2}\u{7A6}" .
		    "\u{7A9}\u{3}\u{2}\u{2}\u{2}\u{7A7}\u{7A5}\u{3}\u{2}\u{2}\u{2}\u{7A7}" .
		    "\u{7A8}\u{3}\u{2}\u{2}\u{2}\u{7A8}\u{7B2}\u{3}\u{2}\u{2}\u{2}\u{7A9}" .
		    "\u{7A7}\u{3}\u{2}\u{2}\u{2}\u{7AA}\u{7AF}\u{5}\u{6E}\u{38}\u{2}\u{7AB}" .
		    "\u{7AC}\u{7}\u{402}\u{2}\u{2}\u{7AC}\u{7AE}\u{5}\u{6E}\u{38}\u{2}" .
		    "\u{7AD}\u{7AB}\u{3}\u{2}\u{2}\u{2}\u{7AE}\u{7B1}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{7AF}\u{7AD}\u{3}\u{2}\u{2}\u{2}\u{7AF}\u{7B0}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{7B0}\u{7B3}\u{3}\u{2}\u{2}\u{2}\u{7B1}\u{7AF}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{7B2}\u{7AA}\u{3}\u{2}\u{2}\u{2}\u{7B2}\u{7B3}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{7B3}\u{7C7}\u{3}\u{2}\u{2}\u{2}\u{7B4}\u{7B5}\u{7}\u{75}\u{2}\u{2}" .
		    "\u{7B5}\u{7B9}\u{5}\u{20C}\u{107}\u{2}\u{7B6}\u{7B8}\u{5}\u{70}\u{39}" .
		    "\u{2}\u{7B7}\u{7B6}\u{3}\u{2}\u{2}\u{2}\u{7B8}\u{7BB}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{7B9}\u{7B7}\u{3}\u{2}\u{2}\u{2}\u{7B9}\u{7BA}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{7BA}\u{7C4}\u{3}\u{2}\u{2}\u{2}\u{7BB}\u{7B9}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{7BC}\u{7C1}\u{5}\u{6E}\u{38}\u{2}\u{7BD}\u{7BE}\u{7}\u{402}" .
		    "\u{2}\u{2}\u{7BE}\u{7C0}\u{5}\u{6E}\u{38}\u{2}\u{7BF}\u{7BD}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{7C0}\u{7C3}\u{3}\u{2}\u{2}\u{2}\u{7C1}\u{7BF}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{7C1}\u{7C2}\u{3}\u{2}\u{2}\u{2}\u{7C2}\u{7C5}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{7C3}\u{7C1}\u{3}\u{2}\u{2}\u{2}\u{7C4}\u{7BC}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{7C4}\u{7C5}\u{3}\u{2}\u{2}\u{2}\u{7C5}\u{7C7}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{7C6}\u{743}\u{3}\u{2}\u{2}\u{2}\u{7C6}\u{762}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{7C6}\u{778}\u{3}\u{2}\u{2}\u{2}\u{7C6}\u{796}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{7C6}\u{7B4}\u{3}\u{2}\u{2}\u{2}\u{7C7}\u{69}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{7C8}\u{7CC}\u{5}\u{21E}\u{110}\u{2}\u{7C9}\u{7CC}" .
		    "\u{5}\u{25C}\u{12F}\u{2}\u{7CA}\u{7CC}\u{7}\u{65}\u{2}\u{2}\u{7CB}" .
		    "\u{7C8}\u{3}\u{2}\u{2}\u{2}\u{7CB}\u{7C9}\u{3}\u{2}\u{2}\u{2}\u{7CB}" .
		    "\u{7CA}\u{3}\u{2}\u{2}\u{2}\u{7CC}\u{6B}\u{3}\u{2}\u{2}\u{2}\u{7CD}" .
		    "\u{7CE}\u{7}\u{400}\u{2}\u{2}\u{7CE}\u{7D1}\u{5}\u{6A}\u{36}\u{2}" .
		    "\u{7CF}\u{7D0}\u{7}\u{402}\u{2}\u{2}\u{7D0}\u{7D2}\u{5}\u{6A}\u{36}" .
		    "\u{2}\u{7D1}\u{7CF}\u{3}\u{2}\u{2}\u{2}\u{7D2}\u{7D3}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{7D3}\u{7D1}\u{3}\u{2}\u{2}\u{2}\u{7D3}\u{7D4}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{7D4}\u{7D5}\u{3}\u{2}\u{2}\u{2}\u{7D5}\u{7D6}\u{7}\u{401}" .
		    "\u{2}\u{2}\u{7D6}\u{6D}\u{3}\u{2}\u{2}\u{2}\u{7D7}\u{7D8}\u{7}\u{22A}" .
		    "\u{2}\u{2}\u{7D8}\u{7DC}\u{5}\u{20C}\u{107}\u{2}\u{7D9}\u{7DB}\u{5}" .
		    "\u{70}\u{39}\u{2}\u{7DA}\u{7D9}\u{3}\u{2}\u{2}\u{2}\u{7DB}\u{7DE}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{7DC}\u{7DA}\u{3}\u{2}\u{2}\u{2}\u{7DC}\u{7DD}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{7DD}\u{6F}\u{3}\u{2}\u{2}\u{2}\u{7DE}\u{7DC}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{7DF}\u{7E1}\u{7}\u{225}\u{2}\u{2}\u{7E0}\u{7DF}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{7E0}\u{7E1}\u{3}\u{2}\u{2}\u{2}\u{7E1}\u{7E2}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{7E2}\u{7E4}\u{7}\u{158}\u{2}\u{2}\u{7E3}\u{7E5}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{7E4}\u{7E3}\u{3}\u{2}\u{2}\u{2}\u{7E4}\u{7E5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{7E5}\u{7E6}\u{3}\u{2}\u{2}\u{2}\u{7E6}\u{80D}" .
		    "\u{5}\u{202}\u{102}\u{2}\u{7E7}\u{7E9}\u{7}\u{133}\u{2}\u{2}\u{7E8}" .
		    "\u{7EA}\u{7}\u{3F7}\u{2}\u{2}\u{7E9}\u{7E8}\u{3}\u{2}\u{2}\u{2}\u{7E9}" .
		    "\u{7EA}\u{3}\u{2}\u{2}\u{2}\u{7EA}\u{7EB}\u{3}\u{2}\u{2}\u{2}\u{7EB}" .
		    "\u{80D}\u{7}\u{40F}\u{2}\u{2}\u{7EC}\u{7ED}\u{7}\u{145}\u{2}\u{2}" .
		    "\u{7ED}\u{7EF}\u{7}\u{14C}\u{2}\u{2}\u{7EE}\u{7F0}\u{7}\u{3F7}\u{2}" .
		    "\u{2}\u{7EF}\u{7EE}\u{3}\u{2}\u{2}\u{2}\u{7EF}\u{7F0}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{7F0}\u{7F1}\u{3}\u{2}\u{2}\u{2}\u{7F1}\u{80D}\u{7}\u{40F}" .
		    "\u{2}\u{2}\u{7F2}\u{7F3}\u{7}\u{4A}\u{2}\u{2}\u{7F3}\u{7F5}\u{7}\u{14C}" .
		    "\u{2}\u{2}\u{7F4}\u{7F6}\u{7}\u{3F7}\u{2}\u{2}\u{7F5}\u{7F4}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{7F5}\u{7F6}\u{3}\u{2}\u{2}\u{2}\u{7F6}\u{7F7}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{7F7}\u{80D}\u{7}\u{40F}\u{2}\u{2}\u{7F8}\u{7FA}" .
		    "\u{7}\u{1AE}\u{2}\u{2}\u{7F9}\u{7FB}\u{7}\u{3F7}\u{2}\u{2}\u{7FA}" .
		    "\u{7F9}\u{3}\u{2}\u{2}\u{2}\u{7FA}\u{7FB}\u{3}\u{2}\u{2}\u{2}\u{7FB}" .
		    "\u{7FC}\u{3}\u{2}\u{2}\u{2}\u{7FC}\u{80D}\u{5}\u{212}\u{10A}\u{2}" .
		    "\u{7FD}\u{7FF}\u{7}\u{1B8}\u{2}\u{2}\u{7FE}\u{800}\u{7}\u{3F7}\u{2}" .
		    "\u{2}\u{7FF}\u{7FE}\u{3}\u{2}\u{2}\u{2}\u{7FF}\u{800}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{800}\u{801}\u{3}\u{2}\u{2}\u{2}\u{801}\u{80D}\u{5}\u{212}" .
		    "\u{10A}\u{2}\u{802}\u{804}\u{7}\u{230}\u{2}\u{2}\u{803}\u{805}\u{7}" .
		    "\u{3F7}\u{2}\u{2}\u{804}\u{803}\u{3}\u{2}\u{2}\u{2}\u{804}\u{805}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{805}\u{806}\u{3}\u{2}\u{2}\u{2}\u{806}\u{80D}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{807}\u{809}\u{7}\u{1C4}\u{2}\u{2}\u{808}" .
		    "\u{80A}\u{7}\u{3F7}\u{2}\u{2}\u{809}\u{808}\u{3}\u{2}\u{2}\u{2}\u{809}" .
		    "\u{80A}\u{3}\u{2}\u{2}\u{2}\u{80A}\u{80B}\u{3}\u{2}\u{2}\u{2}\u{80B}" .
		    "\u{80D}\u{5}\u{20C}\u{107}\u{2}\u{80C}\u{7E0}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{80C}\u{7E7}\u{3}\u{2}\u{2}\u{2}\u{80C}\u{7EC}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{80C}\u{7F2}\u{3}\u{2}\u{2}\u{2}\u{80C}\u{7F8}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{80C}\u{7FD}\u{3}\u{2}\u{2}\u{2}\u{80C}\u{802}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{80C}\u{807}\u{3}\u{2}\u{2}\u{2}\u{80D}\u{71}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{80E}\u{80F}\u{7}\u{9}\u{2}\u{2}\u{80F}\u{811}\u{9}\u{2}\u{2}\u{2}" .
		    "\u{810}\u{812}\u{5}\u{20C}\u{107}\u{2}\u{811}\u{810}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{811}\u{812}\u{3}\u{2}\u{2}\u{2}\u{812}\u{814}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{813}\u{815}\u{5}\u{32}\u{1A}\u{2}\u{814}\u{813}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{815}\u{816}\u{3}\u{2}\u{2}\u{2}\u{816}\u{814}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{816}\u{817}\u{3}\u{2}\u{2}\u{2}\u{817}\u{821}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{818}\u{819}\u{7}\u{9}\u{2}\u{2}\u{819}\u{81A}\u{9}\u{2}" .
		    "\u{2}\u{2}\u{81A}\u{81B}\u{5}\u{20C}\u{107}\u{2}\u{81B}\u{81C}\u{7}" .
		    "\u{23F}\u{2}\u{2}\u{81C}\u{81D}\u{7}\u{145}\u{2}\u{2}\u{81D}\u{81E}" .
		    "\u{7}\u{14C}\u{2}\u{2}\u{81E}\u{81F}\u{7}\u{1BE}\u{2}\u{2}\u{81F}" .
		    "\u{821}\u{3}\u{2}\u{2}\u{2}\u{820}\u{80E}\u{3}\u{2}\u{2}\u{2}\u{820}" .
		    "\u{818}\u{3}\u{2}\u{2}\u{2}\u{821}\u{73}\u{3}\u{2}\u{2}\u{2}\u{822}" .
		    "\u{824}\u{7}\u{9}\u{2}\u{2}\u{823}\u{825}\u{5}\u{34}\u{1B}\u{2}\u{824}" .
		    "\u{823}\u{3}\u{2}\u{2}\u{2}\u{824}\u{825}\u{3}\u{2}\u{2}\u{2}\u{825}" .
		    "\u{826}\u{3}\u{2}\u{2}\u{2}\u{826}\u{827}\u{7}\u{15E}\u{2}\u{2}\u{827}" .
		    "\u{82B}\u{5}\u{1F2}\u{FA}\u{2}\u{828}\u{829}\u{7}\u{6C}\u{2}\u{2}" .
		    "\u{829}\u{82A}\u{7}\u{207}\u{2}\u{2}\u{82A}\u{82C}\u{5}\u{36}\u{1C}" .
		    "\u{2}\u{82B}\u{828}\u{3}\u{2}\u{2}\u{2}\u{82B}\u{82C}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{82C}\u{833}\u{3}\u{2}\u{2}\u{2}\u{82D}\u{82E}\u{7}\u{6C}\u{2}" .
		    "\u{2}\u{82E}\u{830}\u{7}\u{136}\u{2}\u{2}\u{82F}\u{831}\u{7}\u{68}" .
		    "\u{2}\u{2}\u{830}\u{82F}\u{3}\u{2}\u{2}\u{2}\u{830}\u{831}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{831}\u{832}\u{3}\u{2}\u{2}\u{2}\u{832}\u{834}\u{7}\u{1E0}" .
		    "\u{2}\u{2}\u{833}\u{82D}\u{3}\u{2}\u{2}\u{2}\u{833}\u{834}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{834}\u{838}\u{3}\u{2}\u{2}\u{2}\u{835}\u{836}\u{7}\u{7F}" .
		    "\u{2}\u{2}\u{836}\u{837}\u{7}\u{9F}\u{2}\u{2}\u{837}\u{839}\u{5}\u{1F2}" .
		    "\u{FA}\u{2}\u{838}\u{835}\u{3}\u{2}\u{2}\u{2}\u{838}\u{839}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{839}\u{83B}\u{3}\u{2}\u{2}\u{2}\u{83A}\u{83C}\u{5}\u{3E}" .
		    "\u{20}\u{2}\u{83B}\u{83A}\u{3}\u{2}\u{2}\u{2}\u{83B}\u{83C}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{83C}\u{83F}\u{3}\u{2}\u{2}\u{2}\u{83D}\u{83E}\u{7}\u{133}" .
		    "\u{2}\u{2}\u{83E}\u{840}\u{7}\u{40F}\u{2}\u{2}\u{83F}\u{83D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{83F}\u{840}\u{3}\u{2}\u{2}\u{2}\u{840}\u{843}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{841}\u{842}\u{7}\u{150}\u{2}\u{2}\u{842}\u{844}" .
		    "\u{5}\u{15A}\u{AE}\u{2}\u{843}\u{841}\u{3}\u{2}\u{2}\u{2}\u{843}\u{844}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{844}\u{75}\u{3}\u{2}\u{2}\u{2}\u{845}\u{846}" .
		    "\u{7}\u{9}\u{2}\u{2}\u{846}\u{847}\u{7}\u{172}\u{2}\u{2}\u{847}\u{84B}" .
		    "\u{5}\u{1F2}\u{FA}\u{2}\u{848}\u{84A}\u{5}\u{48}\u{25}\u{2}\u{849}" .
		    "\u{848}\u{3}\u{2}\u{2}\u{2}\u{84A}\u{84D}\u{3}\u{2}\u{2}\u{2}\u{84B}" .
		    "\u{849}\u{3}\u{2}\u{2}\u{2}\u{84B}\u{84C}\u{3}\u{2}\u{2}\u{2}\u{84C}" .
		    "\u{77}\u{3}\u{2}\u{2}\u{2}\u{84D}\u{84B}\u{3}\u{2}\u{2}\u{2}\u{84E}" .
		    "\u{84F}\u{7}\u{9}\u{2}\u{2}\u{84F}\u{850}\u{7}\u{184}\u{2}\u{2}\u{850}" .
		    "\u{851}\u{7}\u{202}\u{2}\u{2}\u{851}\u{852}\u{7}\u{2AD}\u{2}\u{2}" .
		    "\u{852}\u{853}\u{7}\u{197}\u{2}\u{2}\u{853}\u{854}\u{7}\u{54}\u{2}" .
		    "\u{2}\u{854}\u{79}\u{3}\u{2}\u{2}\u{2}\u{855}\u{856}\u{7}\u{9}\u{2}" .
		    "\u{2}\u{856}\u{857}\u{7}\u{195}\u{2}\u{2}\u{857}\u{858}\u{7}\u{44}" .
		    "\u{2}\u{2}\u{858}\u{859}\u{5}\u{20C}\u{107}\u{2}\u{859}\u{85A}\u{7}" .
		    "\u{7}\u{2}\u{2}\u{85A}\u{85B}\u{7}\u{23A}\u{2}\u{2}\u{85B}\u{861}" .
		    "\u{7}\u{40F}\u{2}\u{2}\u{85C}\u{85E}\u{7}\u{180}\u{2}\u{2}\u{85D}" .
		    "\u{85F}\u{7}\u{3F7}\u{2}\u{2}\u{85E}\u{85D}\u{3}\u{2}\u{2}\u{2}\u{85E}" .
		    "\u{85F}\u{3}\u{2}\u{2}\u{2}\u{85F}\u{860}\u{3}\u{2}\u{2}\u{2}\u{860}" .
		    "\u{862}\u{5}\u{214}\u{10B}\u{2}\u{861}\u{85C}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{861}\u{862}\u{3}\u{2}\u{2}\u{2}\u{862}\u{864}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{863}\u{865}\u{7}\u{249}\u{2}\u{2}\u{864}\u{863}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{864}\u{865}\u{3}\u{2}\u{2}\u{2}\u{865}\u{866}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{866}\u{868}\u{7}\u{158}\u{2}\u{2}\u{867}\u{869}\u{7}\u{3F7}" .
		    "\u{2}\u{2}\u{868}\u{867}\u{3}\u{2}\u{2}\u{2}\u{868}\u{869}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{869}\u{86A}\u{3}\u{2}\u{2}\u{2}\u{86A}\u{86B}\u{5}\u{202}" .
		    "\u{102}\u{2}\u{86B}\u{7B}\u{3}\u{2}\u{2}\u{2}\u{86C}\u{86D}\u{7}\u{9}" .
		    "\u{2}\u{2}\u{86D}\u{86E}\u{7}\u{77}\u{2}\u{2}\u{86E}\u{872}\u{5}\u{1F2}" .
		    "\u{FA}\u{2}\u{86F}\u{871}\u{5}\u{48}\u{25}\u{2}\u{870}\u{86F}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{871}\u{874}\u{3}\u{2}\u{2}\u{2}\u{872}\u{870}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{872}\u{873}\u{3}\u{2}\u{2}\u{2}\u{873}\u{7D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{874}\u{872}\u{3}\u{2}\u{2}\u{2}\u{875}\u{876}\u{7}" .
		    "\u{9}\u{2}\u{2}\u{876}\u{877}\u{7}\u{209}\u{2}\u{2}\u{877}\u{878}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{878}\u{879}\u{7}\u{1D0}\u{2}\u{2}\u{879}" .
		    "\u{87A}\u{7}\u{400}\u{2}\u{2}\u{87A}\u{87F}\u{5}\u{4A}\u{26}\u{2}" .
		    "\u{87B}\u{87C}\u{7}\u{402}\u{2}\u{2}\u{87C}\u{87E}\u{5}\u{4A}\u{26}" .
		    "\u{2}\u{87D}\u{87B}\u{3}\u{2}\u{2}\u{2}\u{87E}\u{881}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{87F}\u{87D}\u{3}\u{2}\u{2}\u{2}\u{87F}\u{880}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{880}\u{882}\u{3}\u{2}\u{2}\u{2}\u{881}\u{87F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{882}\u{883}\u{7}\u{401}\u{2}\u{2}\u{883}\u{7F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{884}\u{886}\u{7}\u{9}\u{2}\u{2}\u{885}\u{887}\u{9}\u{3}\u{2}" .
		    "\u{2}\u{886}\u{885}\u{3}\u{2}\u{2}\u{2}\u{886}\u{887}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{887}\u{889}\u{3}\u{2}\u{2}\u{2}\u{888}\u{88A}\u{7}\u{48}\u{2}" .
		    "\u{2}\u{889}\u{888}\u{3}\u{2}\u{2}\u{2}\u{889}\u{88A}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{88A}\u{88B}\u{3}\u{2}\u{2}\u{2}\u{88B}\u{88C}\u{7}\u{9C}\u{2}" .
		    "\u{2}\u{88C}\u{895}\u{5}\u{1F4}\u{FB}\u{2}\u{88D}\u{892}\u{5}\u{86}" .
		    "\u{44}\u{2}\u{88E}\u{88F}\u{7}\u{402}\u{2}\u{2}\u{88F}\u{891}\u{5}" .
		    "\u{86}\u{44}\u{2}\u{890}\u{88E}\u{3}\u{2}\u{2}\u{2}\u{891}\u{894}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{892}\u{890}\u{3}\u{2}\u{2}\u{2}\u{892}\u{893}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{893}\u{896}\u{3}\u{2}\u{2}\u{2}\u{894}\u{892}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{895}\u{88D}\u{3}\u{2}\u{2}\u{2}\u{895}\u{896}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{896}\u{898}\u{3}\u{2}\u{2}\u{2}\u{897}\u{899}" .
		    "\u{5}\u{62}\u{32}\u{2}\u{898}\u{897}\u{3}\u{2}\u{2}\u{2}\u{898}\u{899}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{899}\u{81}\u{3}\u{2}\u{2}\u{2}\u{89A}\u{89B}" .
		    "\u{7}\u{9}\u{2}\u{2}\u{89B}\u{89C}\u{7}\u{230}\u{2}\u{2}\u{89C}\u{89D}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{89D}\u{89E}\u{9}\u{1E}\u{2}\u{2}\u{89E}" .
		    "\u{89F}\u{7}\u{146}\u{2}\u{2}\u{89F}\u{8A3}\u{7}\u{40F}\u{2}\u{2}" .
		    "\u{8A0}\u{8A1}\u{7}\u{180}\u{2}\u{2}\u{8A1}\u{8A2}\u{7}\u{3F7}\u{2}" .
		    "\u{2}\u{8A2}\u{8A4}\u{5}\u{214}\u{10B}\u{2}\u{8A3}\u{8A0}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{8A3}\u{8A4}\u{3}\u{2}\u{2}\u{2}\u{8A4}\u{8A6}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{8A5}\u{8A7}\u{7}\u{249}\u{2}\u{2}\u{8A6}\u{8A5}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{8A6}\u{8A7}\u{3}\u{2}\u{2}\u{2}\u{8A7}\u{8A8}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{8A8}\u{8AA}\u{7}\u{158}\u{2}\u{2}\u{8A9}\u{8AB}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{8AA}\u{8A9}\u{3}\u{2}\u{2}\u{2}\u{8AA}\u{8AB}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{8AB}\u{8AC}\u{3}\u{2}\u{2}\u{2}\u{8AC}\u{8AD}" .
		    "\u{5}\u{202}\u{102}\u{2}\u{8AD}\u{83}\u{3}\u{2}\u{2}\u{2}\u{8AE}\u{8B2}" .
		    "\u{7}\u{9}\u{2}\u{2}\u{8AF}\u{8B0}\u{7}\u{114}\u{2}\u{2}\u{8B0}\u{8B1}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{8B1}\u{8B3}\u{9}\u{C}\u{2}\u{2}\u{8B2}\u{8AF}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{8B2}\u{8B3}\u{3}\u{2}\u{2}\u{2}\u{8B3}\u{8B5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{8B4}\u{8B6}\u{5}\u{34}\u{1B}\u{2}\u{8B5}\u{8B4}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{8B5}\u{8B6}\u{3}\u{2}\u{2}\u{2}\u{8B6}\u{8BA}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{8B7}\u{8B8}\u{7}\u{91}\u{2}\u{2}\u{8B8}\u{8B9}" .
		    "\u{7}\u{208}\u{2}\u{2}\u{8B9}\u{8BB}\u{9}\u{D}\u{2}\u{2}\u{8BA}\u{8B7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{8BA}\u{8BB}\u{3}\u{2}\u{2}\u{2}\u{8BB}\u{8BC}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{8BC}\u{8BD}\u{7}\u{246}\u{2}\u{2}\u{8BD}\u{8C2}" .
		    "\u{5}\u{1F2}\u{FA}\u{2}\u{8BE}\u{8BF}\u{7}\u{400}\u{2}\u{2}\u{8BF}" .
		    "\u{8C0}\u{5}\u{22C}\u{117}\u{2}\u{8C0}\u{8C1}\u{7}\u{401}\u{2}\u{2}" .
		    "\u{8C1}\u{8C3}\u{3}\u{2}\u{2}\u{2}\u{8C2}\u{8BE}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{8C2}\u{8C3}\u{3}\u{2}\u{2}\u{2}\u{8C3}\u{8C4}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{8C4}\u{8C5}\u{7}\u{D}\u{2}\u{2}\u{8C5}\u{8CC}\u{5}\u{B4}\u{5B}" .
		    "\u{2}\u{8C6}\u{8C8}\u{7}\u{B0}\u{2}\u{2}\u{8C7}\u{8C9}\u{9}\u{E}\u{2}" .
		    "\u{2}\u{8C8}\u{8C7}\u{3}\u{2}\u{2}\u{2}\u{8C8}\u{8C9}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{8C9}\u{8CA}\u{3}\u{2}\u{2}\u{2}\u{8CA}\u{8CB}\u{7}\u{19}\u{2}" .
		    "\u{2}\u{8CB}\u{8CD}\u{7}\u{6E}\u{2}\u{2}\u{8CC}\u{8C6}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{8CC}\u{8CD}\u{3}\u{2}\u{2}\u{2}\u{8CD}\u{85}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{8CE}\u{8D5}\u{5}\u{5E}\u{30}\u{2}\u{8CF}\u{8D1}\u{7}\u{402}" .
		    "\u{2}\u{2}\u{8D0}\u{8CF}\u{3}\u{2}\u{2}\u{2}\u{8D0}\u{8D1}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{8D1}\u{8D2}\u{3}\u{2}\u{2}\u{2}\u{8D2}\u{8D4}\u{5}\u{5E}" .
		    "\u{30}\u{2}\u{8D3}\u{8D0}\u{3}\u{2}\u{2}\u{2}\u{8D4}\u{8D7}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{8D5}\u{8D3}\u{3}\u{2}\u{2}\u{2}\u{8D5}\u{8D6}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{8D6}\u{A35}\u{3}\u{2}\u{2}\u{2}\u{8D7}\u{8D5}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{8D8}\u{8DA}\u{7}\u{7}\u{2}\u{2}\u{8D9}\u{8DB}\u{7}\u{1B}" .
		    "\u{2}\u{2}\u{8DA}\u{8D9}\u{3}\u{2}\u{2}\u{2}\u{8DA}\u{8DB}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{8DB}\u{8DC}\u{3}\u{2}\u{2}\u{2}\u{8DC}\u{8DD}\u{5}\u{20C}" .
		    "\u{107}\u{2}\u{8DD}\u{8E1}\u{5}\u{50}\u{29}\u{2}\u{8DE}\u{8E2}\u{7}" .
		    "\u{16C}\u{2}\u{2}\u{8DF}\u{8E0}\u{7}\u{112}\u{2}\u{2}\u{8E0}\u{8E2}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{8E1}\u{8DE}\u{3}\u{2}\u{2}\u{2}\u{8E1}" .
		    "\u{8DF}\u{3}\u{2}\u{2}\u{2}\u{8E1}\u{8E2}\u{3}\u{2}\u{2}\u{2}\u{8E2}" .
		    "\u{A35}\u{3}\u{2}\u{2}\u{2}\u{8E3}\u{8E5}\u{7}\u{7}\u{2}\u{2}\u{8E4}" .
		    "\u{8E6}\u{7}\u{1B}\u{2}\u{2}\u{8E5}\u{8E4}\u{3}\u{2}\u{2}\u{2}\u{8E5}" .
		    "\u{8E6}\u{3}\u{2}\u{2}\u{2}\u{8E6}\u{8E7}\u{3}\u{2}\u{2}\u{2}\u{8E7}" .
		    "\u{8E8}\u{7}\u{400}\u{2}\u{2}\u{8E8}\u{8E9}\u{5}\u{20C}\u{107}\u{2}" .
		    "\u{8E9}\u{8F0}\u{5}\u{50}\u{29}\u{2}\u{8EA}\u{8EB}\u{7}\u{402}\u{2}" .
		    "\u{2}\u{8EB}\u{8EC}\u{5}\u{20C}\u{107}\u{2}\u{8EC}\u{8ED}\u{5}\u{50}" .
		    "\u{29}\u{2}\u{8ED}\u{8EF}\u{3}\u{2}\u{2}\u{2}\u{8EE}\u{8EA}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{8EF}\u{8F2}\u{3}\u{2}\u{2}\u{2}\u{8F0}\u{8EE}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{8F0}\u{8F1}\u{3}\u{2}\u{2}\u{2}\u{8F1}\u{8F3}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{8F2}\u{8F0}\u{3}\u{2}\u{2}\u{2}\u{8F3}\u{8F4}\u{7}\u{401}" .
		    "\u{2}\u{2}\u{8F4}\u{A35}\u{3}\u{2}\u{2}\u{2}\u{8F5}\u{8F6}\u{7}\u{7}" .
		    "\u{2}\u{2}\u{8F6}\u{8F8}\u{9}\u{14}\u{2}\u{2}\u{8F7}\u{8F9}\u{5}\u{20C}" .
		    "\u{107}\u{2}\u{8F8}\u{8F7}\u{3}\u{2}\u{2}\u{2}\u{8F8}\u{8F9}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{8F9}\u{8FB}\u{3}\u{2}\u{2}\u{2}\u{8FA}\u{8FC}\u{5}" .
		    "\u{40}\u{21}\u{2}\u{8FB}\u{8FA}\u{3}\u{2}\u{2}\u{2}\u{8FB}\u{8FC}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{8FC}\u{8FD}\u{3}\u{2}\u{2}\u{2}\u{8FD}\u{901}" .
		    "\u{5}\u{230}\u{119}\u{2}\u{8FE}\u{900}\u{5}\u{42}\u{22}\u{2}\u{8FF}" .
		    "\u{8FE}\u{3}\u{2}\u{2}\u{2}\u{900}\u{903}\u{3}\u{2}\u{2}\u{2}\u{901}" .
		    "\u{8FF}\u{3}\u{2}\u{2}\u{2}\u{901}\u{902}\u{3}\u{2}\u{2}\u{2}\u{902}" .
		    "\u{A35}\u{3}\u{2}\u{2}\u{2}\u{903}\u{901}\u{3}\u{2}\u{2}\u{2}\u{904}" .
		    "\u{909}\u{7}\u{7}\u{2}\u{2}\u{905}\u{907}\u{7}\u{1D}\u{2}\u{2}\u{906}" .
		    "\u{908}\u{5}\u{20C}\u{107}\u{2}\u{907}\u{906}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{907}\u{908}\u{3}\u{2}\u{2}\u{2}\u{908}\u{90A}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{909}\u{905}\u{3}\u{2}\u{2}\u{2}\u{909}\u{90A}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{90A}\u{90B}\u{3}\u{2}\u{2}\u{2}\u{90B}\u{90C}\u{7}\u{76}\u{2}\u{2}" .
		    "\u{90C}\u{90E}\u{7}\u{54}\u{2}\u{2}\u{90D}\u{90F}\u{5}\u{20C}\u{107}" .
		    "\u{2}\u{90E}\u{90D}\u{3}\u{2}\u{2}\u{2}\u{90E}\u{90F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{90F}\u{911}\u{3}\u{2}\u{2}\u{2}\u{910}\u{912}\u{5}\u{40}\u{21}" .
		    "\u{2}\u{911}\u{910}\u{3}\u{2}\u{2}\u{2}\u{911}\u{912}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{912}\u{913}\u{3}\u{2}\u{2}\u{2}\u{913}\u{917}\u{5}\u{230}" .
		    "\u{119}\u{2}\u{914}\u{916}\u{5}\u{42}\u{22}\u{2}\u{915}\u{914}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{916}\u{919}\u{3}\u{2}\u{2}\u{2}\u{917}\u{915}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{917}\u{918}\u{3}\u{2}\u{2}\u{2}\u{918}\u{A35}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{919}\u{917}\u{3}\u{2}\u{2}\u{2}\u{91A}\u{91F}\u{7}" .
		    "\u{7}\u{2}\u{2}\u{91B}\u{91D}\u{7}\u{1D}\u{2}\u{2}\u{91C}\u{91E}\u{5}" .
		    "\u{20C}\u{107}\u{2}\u{91D}\u{91C}\u{3}\u{2}\u{2}\u{2}\u{91D}\u{91E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{91E}\u{920}\u{3}\u{2}\u{2}\u{2}\u{91F}\u{91B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{91F}\u{920}\u{3}\u{2}\u{2}\u{2}\u{920}\u{921}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{921}\u{923}\u{7}\u{A5}\u{2}\u{2}\u{922}\u{924}" .
		    "\u{9}\u{14}\u{2}\u{2}\u{923}\u{922}\u{3}\u{2}\u{2}\u{2}\u{923}\u{924}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{924}\u{926}\u{3}\u{2}\u{2}\u{2}\u{925}\u{927}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{926}\u{925}\u{3}\u{2}\u{2}\u{2}\u{926}" .
		    "\u{927}\u{3}\u{2}\u{2}\u{2}\u{927}\u{929}\u{3}\u{2}\u{2}\u{2}\u{928}" .
		    "\u{92A}\u{5}\u{40}\u{21}\u{2}\u{929}\u{928}\u{3}\u{2}\u{2}\u{2}\u{929}" .
		    "\u{92A}\u{3}\u{2}\u{2}\u{2}\u{92A}\u{92B}\u{3}\u{2}\u{2}\u{2}\u{92B}" .
		    "\u{92F}\u{5}\u{230}\u{119}\u{2}\u{92C}\u{92E}\u{5}\u{42}\u{22}\u{2}" .
		    "\u{92D}\u{92C}\u{3}\u{2}\u{2}\u{2}\u{92E}\u{931}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{92F}\u{92D}\u{3}\u{2}\u{2}\u{2}\u{92F}\u{930}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{930}\u{A35}\u{3}\u{2}\u{2}\u{2}\u{931}\u{92F}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{932}\u{933}\u{7}\u{7}\u{2}\u{2}\u{933}\u{935}\u{9}\u{16}\u{2}\u{2}" .
		    "\u{934}\u{936}\u{9}\u{14}\u{2}\u{2}\u{935}\u{934}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{935}\u{936}\u{3}\u{2}\u{2}\u{2}\u{936}\u{938}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{937}\u{939}\u{5}\u{20C}\u{107}\u{2}\u{938}\u{937}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{938}\u{939}\u{3}\u{2}\u{2}\u{2}\u{939}\u{93A}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{93A}\u{93E}\u{5}\u{230}\u{119}\u{2}\u{93B}\u{93D}\u{5}\u{42}" .
		    "\u{22}\u{2}\u{93C}\u{93B}\u{3}\u{2}\u{2}\u{2}\u{93D}\u{940}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{93E}\u{93C}\u{3}\u{2}\u{2}\u{2}\u{93E}\u{93F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{93F}\u{A35}\u{3}\u{2}\u{2}\u{2}\u{940}\u{93E}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{941}\u{946}\u{7}\u{7}\u{2}\u{2}\u{942}\u{944}\u{7}\u{1D}" .
		    "\u{2}\u{2}\u{943}\u{945}\u{5}\u{20C}\u{107}\u{2}\u{944}\u{943}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{944}\u{945}\u{3}\u{2}\u{2}\u{2}\u{945}\u{947}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{946}\u{942}\u{3}\u{2}\u{2}\u{2}\u{946}\u{947}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{947}\u{948}\u{3}\u{2}\u{2}\u{2}\u{948}\u{949}\u{7}" .
		    "\u{3E}\u{2}\u{2}\u{949}\u{94B}\u{7}\u{54}\u{2}\u{2}\u{94A}\u{94C}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{94B}\u{94A}\u{3}\u{2}\u{2}\u{2}\u{94B}" .
		    "\u{94C}\u{3}\u{2}\u{2}\u{2}\u{94C}\u{94D}\u{3}\u{2}\u{2}\u{2}\u{94D}" .
		    "\u{94E}\u{5}\u{230}\u{119}\u{2}\u{94E}\u{94F}\u{5}\u{56}\u{2C}\u{2}" .
		    "\u{94F}\u{A35}\u{3}\u{2}\u{2}\u{2}\u{950}\u{955}\u{7}\u{7}\u{2}\u{2}" .
		    "\u{951}\u{953}\u{7}\u{1D}\u{2}\u{2}\u{952}\u{954}\u{5}\u{20C}\u{107}" .
		    "\u{2}\u{953}\u{952}\u{3}\u{2}\u{2}\u{2}\u{953}\u{954}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{954}\u{956}\u{3}\u{2}\u{2}\u{2}\u{955}\u{951}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{955}\u{956}\u{3}\u{2}\u{2}\u{2}\u{956}\u{957}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{957}\u{958}\u{7}\u{19}\u{2}\u{2}\u{958}\u{959}\u{7}\u{400}" .
		    "\u{2}\u{2}\u{959}\u{95A}\u{5}\u{25C}\u{12F}\u{2}\u{95A}\u{95B}\u{7}" .
		    "\u{401}\u{2}\u{2}\u{95B}\u{A35}\u{3}\u{2}\u{2}\u{2}\u{95C}\u{95E}" .
		    "\u{7}\u{114}\u{2}\u{2}\u{95D}\u{95F}\u{7}\u{3F7}\u{2}\u{2}\u{95E}" .
		    "\u{95D}\u{3}\u{2}\u{2}\u{2}\u{95E}\u{95F}\u{3}\u{2}\u{2}\u{2}\u{95F}" .
		    "\u{960}\u{3}\u{2}\u{2}\u{2}\u{960}\u{A35}\u{9}\u{5}\u{2}\u{2}\u{961}" .
		    "\u{963}\u{7}\u{9}\u{2}\u{2}\u{962}\u{964}\u{7}\u{1B}\u{2}\u{2}\u{963}" .
		    "\u{962}\u{3}\u{2}\u{2}\u{2}\u{963}\u{964}\u{3}\u{2}\u{2}\u{2}\u{964}" .
		    "\u{965}\u{3}\u{2}\u{2}\u{2}\u{965}\u{96B}\u{5}\u{20C}\u{107}\u{2}" .
		    "\u{966}\u{967}\u{7}\u{8C}\u{2}\u{2}\u{967}\u{968}\u{7}\u{28}\u{2}" .
		    "\u{2}\u{968}\u{96C}\u{5}\u{23E}\u{120}\u{2}\u{969}\u{96A}\u{7}\u{31}" .
		    "\u{2}\u{2}\u{96A}\u{96C}\u{7}\u{28}\u{2}\u{2}\u{96B}\u{966}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{96B}\u{969}\u{3}\u{2}\u{2}\u{2}\u{96C}\u{A35}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{96D}\u{96F}\u{7}\u{17}\u{2}\u{2}\u{96E}\u{970}\u{7}\u{1B}" .
		    "\u{2}\u{2}\u{96F}\u{96E}\u{3}\u{2}\u{2}\u{2}\u{96F}\u{970}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{970}\u{971}\u{3}\u{2}\u{2}\u{2}\u{971}\u{972}\u{5}\u{20C}" .
		    "\u{107}\u{2}\u{972}\u{973}\u{5}\u{20C}\u{107}\u{2}\u{973}\u{977}\u{5}" .
		    "\u{50}\u{29}\u{2}\u{974}\u{978}\u{7}\u{16C}\u{2}\u{2}\u{975}\u{976}" .
		    "\u{7}\u{112}\u{2}\u{2}\u{976}\u{978}\u{5}\u{20C}\u{107}\u{2}\u{977}" .
		    "\u{974}\u{3}\u{2}\u{2}\u{2}\u{977}\u{975}\u{3}\u{2}\u{2}\u{2}\u{977}" .
		    "\u{978}\u{3}\u{2}\u{2}\u{2}\u{978}\u{A35}\u{3}\u{2}\u{2}\u{2}\u{979}" .
		    "\u{97A}\u{7}\u{7F}\u{2}\u{2}\u{97A}\u{97B}\u{7}\u{1B}\u{2}\u{2}\u{97B}" .
		    "\u{97C}\u{5}\u{20C}\u{107}\u{2}\u{97C}\u{97D}\u{7}\u{9F}\u{2}\u{2}" .
		    "\u{97D}\u{97E}\u{5}\u{20C}\u{107}\u{2}\u{97E}\u{A35}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{97F}\u{981}\u{7}\u{5F}\u{2}\u{2}\u{980}\u{982}\u{7}\u{3F7}" .
		    "\u{2}\u{2}\u{981}\u{980}\u{3}\u{2}\u{2}\u{2}\u{981}\u{982}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{982}\u{983}\u{3}\u{2}\u{2}\u{2}\u{983}\u{A35}\u{9}\u{6}" .
		    "\u{2}\u{2}\u{984}\u{986}\u{7}\u{1BA}\u{2}\u{2}\u{985}\u{987}\u{7}" .
		    "\u{1B}\u{2}\u{2}\u{986}\u{985}\u{3}\u{2}\u{2}\u{2}\u{986}\u{987}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{987}\u{988}\u{3}\u{2}\u{2}\u{2}\u{988}\u{989}\u{5}" .
		    "\u{20C}\u{107}\u{2}\u{989}\u{98D}\u{5}\u{50}\u{29}\u{2}\u{98A}\u{98E}" .
		    "\u{7}\u{16C}\u{2}\u{2}\u{98B}\u{98C}\u{7}\u{112}\u{2}\u{2}\u{98C}" .
		    "\u{98E}\u{5}\u{20C}\u{107}\u{2}\u{98D}\u{98A}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{98D}\u{98B}\u{3}\u{2}\u{2}\u{2}\u{98D}\u{98E}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{98E}\u{A35}\u{3}\u{2}\u{2}\u{2}\u{98F}\u{991}\u{7}\u{31}\u{2}\u{2}" .
		    "\u{990}\u{992}\u{7}\u{1B}\u{2}\u{2}\u{991}\u{990}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{991}\u{992}\u{3}\u{2}\u{2}\u{2}\u{992}\u{993}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{993}\u{995}\u{5}\u{20C}\u{107}\u{2}\u{994}\u{996}\u{7}\u{84}\u{2}" .
		    "\u{2}\u{995}\u{994}\u{3}\u{2}\u{2}\u{2}\u{995}\u{996}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{996}\u{A35}\u{3}\u{2}\u{2}\u{2}\u{997}\u{998}\u{7}\u{31}\u{2}" .
		    "\u{2}\u{998}\u{999}\u{7}\u{76}\u{2}\u{2}\u{999}\u{A35}\u{7}\u{54}" .
		    "\u{2}\u{2}\u{99A}\u{99B}\u{7}\u{7F}\u{2}\u{2}\u{99B}\u{99C}\u{9}\u{14}" .
		    "\u{2}\u{2}\u{99C}\u{99D}\u{5}\u{20C}\u{107}\u{2}\u{99D}\u{99E}\u{7}" .
		    "\u{9F}\u{2}\u{2}\u{99E}\u{99F}\u{5}\u{20C}\u{107}\u{2}\u{99F}\u{A35}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{9A0}\u{9A1}\u{7}\u{31}\u{2}\u{2}\u{9A1}\u{9A2}" .
		    "\u{9}\u{14}\u{2}\u{2}\u{9A2}\u{A35}\u{5}\u{20C}\u{107}\u{2}\u{9A3}" .
		    "\u{9A4}\u{7}\u{31}\u{2}\u{2}\u{9A4}\u{9A5}\u{7}\u{3E}\u{2}\u{2}\u{9A5}" .
		    "\u{9A6}\u{7}\u{54}\u{2}\u{2}\u{9A6}\u{A35}\u{5}\u{20C}\u{107}\u{2}" .
		    "\u{9A7}\u{9A8}\u{7}\u{14D}\u{2}\u{2}\u{9A8}\u{A35}\u{7}\u{55}\u{2}" .
		    "\u{2}\u{9A9}\u{9AA}\u{7}\u{154}\u{2}\u{2}\u{9AA}\u{A35}\u{7}\u{55}" .
		    "\u{2}\u{2}\u{9AB}\u{9AD}\u{7}\u{7F}\u{2}\u{2}\u{9AC}\u{9AE}\u{9}\u{1F}" .
		    "\u{2}\u{2}\u{9AD}\u{9AC}\u{3}\u{2}\u{2}\u{2}\u{9AD}\u{9AE}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{9AE}\u{9B1}\u{3}\u{2}\u{2}\u{2}\u{9AF}\u{9B2}\u{5}\u{20C}" .
		    "\u{107}\u{2}\u{9B0}\u{9B2}\u{5}\u{1F2}\u{FA}\u{2}\u{9B1}\u{9AF}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{9B1}\u{9B0}\u{3}\u{2}\u{2}\u{2}\u{9B2}\u{A35}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{9B3}\u{9B4}\u{7}\u{71}\u{2}\u{2}\u{9B4}\u{9B5}\u{7}" .
		    "\u{12}\u{2}\u{2}\u{9B5}\u{A35}\u{5}\u{22C}\u{117}\u{2}\u{9B6}\u{9B7}" .
		    "\u{7}\u{1F}\u{2}\u{2}\u{9B7}\u{9B8}\u{7}\u{9F}\u{2}\u{2}\u{9B8}\u{9B9}" .
		    "\u{7}\u{18}\u{2}\u{2}\u{9B9}\u{9BA}\u{7}\u{8C}\u{2}\u{2}\u{9BA}\u{9BD}" .
		    "\u{5}\u{1FE}\u{100}\u{2}\u{9BB}\u{9BC}\u{7}\u{1A}\u{2}\u{2}\u{9BC}" .
		    "\u{9BE}\u{5}\u{200}\u{101}\u{2}\u{9BD}\u{9BB}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{9BD}\u{9BE}\u{3}\u{2}\u{2}\u{2}\u{9BE}\u{A35}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{9BF}\u{9C1}\u{7}\u{28}\u{2}\u{2}\u{9C0}\u{9BF}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{9C0}\u{9C1}\u{3}\u{2}\u{2}\u{2}\u{9C1}\u{9C2}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{9C2}\u{9C3}\u{7}\u{18}\u{2}\u{2}\u{9C3}\u{9C4}\u{7}\u{8C}\u{2}" .
		    "\u{2}\u{9C4}\u{9C5}\u{7}\u{3F7}\u{2}\u{2}\u{9C5}\u{9C9}\u{5}\u{1FE}" .
		    "\u{100}\u{2}\u{9C6}\u{9C7}\u{7}\u{1A}\u{2}\u{2}\u{9C7}\u{9C8}\u{7}" .
		    "\u{3F7}\u{2}\u{2}\u{9C8}\u{9CA}\u{5}\u{200}\u{101}\u{2}\u{9C9}\u{9C6}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{9C9}\u{9CA}\u{3}\u{2}\u{2}\u{2}\u{9CA}\u{A35}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{9CB}\u{9CC}\u{7}\u{14E}\u{2}\u{2}\u{9CC}\u{A35}" .
		    "\u{7}\u{230}\u{2}\u{2}\u{9CD}\u{9CE}\u{7}\u{17E}\u{2}\u{2}\u{9CE}" .
		    "\u{A35}\u{7}\u{230}\u{2}\u{2}\u{9CF}\u{A35}\u{7}\u{3D}\u{2}\u{2}\u{9D0}" .
		    "\u{9D1}\u{9}\u{20}\u{2}\u{2}\u{9D1}\u{A35}\u{7}\u{243}\u{2}\u{2}\u{9D2}" .
		    "\u{9D3}\u{7}\u{7}\u{2}\u{2}\u{9D3}\u{9D4}\u{7}\u{75}\u{2}\u{2}\u{9D4}" .
		    "\u{9D5}\u{7}\u{400}\u{2}\u{2}\u{9D5}\u{9DA}\u{5}\u{68}\u{35}\u{2}" .
		    "\u{9D6}\u{9D7}\u{7}\u{402}\u{2}\u{2}\u{9D7}\u{9D9}\u{5}\u{68}\u{35}" .
		    "\u{2}\u{9D8}\u{9D6}\u{3}\u{2}\u{2}\u{2}\u{9D9}\u{9DC}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{9DA}\u{9D8}\u{3}\u{2}\u{2}\u{2}\u{9DA}\u{9DB}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{9DB}\u{9DD}\u{3}\u{2}\u{2}\u{2}\u{9DC}\u{9DA}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{9DD}\u{9DE}\u{7}\u{401}\u{2}\u{2}\u{9DE}\u{A35}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{9DF}\u{9E0}\u{7}\u{31}\u{2}\u{2}\u{9E0}\u{9E1}\u{7}\u{75}" .
		    "\u{2}\u{2}\u{9E1}\u{A35}\u{5}\u{22C}\u{117}\u{2}\u{9E2}\u{9E3}\u{7}" .
		    "\u{14E}\u{2}\u{2}\u{9E3}\u{9E6}\u{7}\u{75}\u{2}\u{2}\u{9E4}\u{9E7}" .
		    "\u{5}\u{22C}\u{117}\u{2}\u{9E5}\u{9E7}\u{7}\u{8}\u{2}\u{2}\u{9E6}" .
		    "\u{9E4}\u{3}\u{2}\u{2}\u{2}\u{9E6}\u{9E5}\u{3}\u{2}\u{2}\u{2}\u{9E7}" .
		    "\u{9E8}\u{3}\u{2}\u{2}\u{2}\u{9E8}\u{A35}\u{7}\u{230}\u{2}\u{2}\u{9E9}" .
		    "\u{9EA}\u{7}\u{17E}\u{2}\u{2}\u{9EA}\u{9ED}\u{7}\u{75}\u{2}\u{2}\u{9EB}" .
		    "\u{9EE}\u{5}\u{22C}\u{117}\u{2}\u{9EC}\u{9EE}\u{7}\u{8}\u{2}\u{2}" .
		    "\u{9ED}\u{9EB}\u{3}\u{2}\u{2}\u{2}\u{9ED}\u{9EC}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{9EE}\u{9EF}\u{3}\u{2}\u{2}\u{2}\u{9EF}\u{A35}\u{7}\u{230}\u{2}" .
		    "\u{2}\u{9F0}\u{9F1}\u{7}\u{238}\u{2}\u{2}\u{9F1}\u{9F4}\u{7}\u{75}" .
		    "\u{2}\u{2}\u{9F2}\u{9F5}\u{5}\u{22C}\u{117}\u{2}\u{9F3}\u{9F5}\u{7}" .
		    "\u{8}\u{2}\u{2}\u{9F4}\u{9F2}\u{3}\u{2}\u{2}\u{2}\u{9F4}\u{9F3}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{9F5}\u{A35}\u{3}\u{2}\u{2}\u{2}\u{9F6}\u{9F7}\u{7}" .
		    "\u{12E}\u{2}\u{2}\u{9F7}\u{9F8}\u{7}\u{75}\u{2}\u{2}\u{9F8}\u{A35}" .
		    "\u{5}\u{212}\u{10A}\u{2}\u{9F9}\u{9FA}\u{7}\u{1F1}\u{2}\u{2}\u{9FA}" .
		    "\u{9FB}\u{7}\u{75}\u{2}\u{2}\u{9FB}\u{9FC}\u{5}\u{22C}\u{117}\u{2}" .
		    "\u{9FC}\u{9FD}\u{7}\u{50}\u{2}\u{2}\u{9FD}\u{9FE}\u{7}\u{400}\u{2}" .
		    "\u{2}\u{9FE}\u{A03}\u{5}\u{68}\u{35}\u{2}\u{9FF}\u{A00}\u{7}\u{402}" .
		    "\u{2}\u{2}\u{A00}\u{A02}\u{5}\u{68}\u{35}\u{2}\u{A01}\u{9FF}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{A02}\u{A05}\u{3}\u{2}\u{2}\u{2}\u{A03}\u{A01}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{A03}\u{A04}\u{3}\u{2}\u{2}\u{2}\u{A04}\u{A06}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{A05}\u{A03}\u{3}\u{2}\u{2}\u{2}\u{A06}\u{A07}\u{7}" .
		    "\u{401}\u{2}\u{2}\u{A07}\u{A35}\u{3}\u{2}\u{2}\u{2}\u{A08}\u{A09}" .
		    "\u{7}\u{161}\u{2}\u{2}\u{A09}\u{A0A}\u{7}\u{75}\u{2}\u{2}\u{A0A}\u{A0B}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{A0B}\u{A0C}\u{7}\u{B0}\u{2}\u{2}\u{A0C}" .
		    "\u{A0D}\u{7}\u{9C}\u{2}\u{2}\u{A0D}\u{A10}\u{5}\u{1F4}\u{FB}\u{2}" .
		    "\u{A0E}\u{A0F}\u{9}\u{20}\u{2}\u{2}\u{A0F}\u{A11}\u{7}\u{243}\u{2}" .
		    "\u{2}\u{A10}\u{A0E}\u{3}\u{2}\u{2}\u{2}\u{A10}\u{A11}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{A11}\u{A35}\u{3}\u{2}\u{2}\u{2}\u{A12}\u{A13}\u{7}\u{B}\u{2}" .
		    "\u{2}\u{A13}\u{A16}\u{7}\u{75}\u{2}\u{2}\u{A14}\u{A17}\u{5}\u{22C}" .
		    "\u{117}\u{2}\u{A15}\u{A17}\u{7}\u{8}\u{2}\u{2}\u{A16}\u{A14}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{A16}\u{A15}\u{3}\u{2}\u{2}\u{2}\u{A17}\u{A35}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{A18}\u{A19}\u{7}\u{19}\u{2}\u{2}\u{A19}\u{A1C}\u{7}" .
		    "\u{75}\u{2}\u{2}\u{A1A}\u{A1D}\u{5}\u{22C}\u{117}\u{2}\u{A1B}\u{A1D}" .
		    "\u{7}\u{8}\u{2}\u{2}\u{A1C}\u{A1A}\u{3}\u{2}\u{2}\u{2}\u{A1C}\u{A1B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A1D}\u{A35}\u{3}\u{2}\u{2}\u{2}\u{A1E}\u{A1F}" .
		    "\u{7}\u{6D}\u{2}\u{2}\u{A1F}\u{A22}\u{7}\u{75}\u{2}\u{2}\u{A20}\u{A23}" .
		    "\u{5}\u{22C}\u{117}\u{2}\u{A21}\u{A23}\u{7}\u{8}\u{2}\u{2}\u{A22}" .
		    "\u{A20}\u{3}\u{2}\u{2}\u{2}\u{A22}\u{A21}\u{3}\u{2}\u{2}\u{2}\u{A23}" .
		    "\u{A35}\u{3}\u{2}\u{2}\u{2}\u{A24}\u{A25}\u{7}\u{1E8}\u{2}\u{2}\u{A25}" .
		    "\u{A28}\u{7}\u{75}\u{2}\u{2}\u{A26}\u{A29}\u{5}\u{22C}\u{117}\u{2}" .
		    "\u{A27}\u{A29}\u{7}\u{8}\u{2}\u{2}\u{A28}\u{A26}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{A28}\u{A27}\u{3}\u{2}\u{2}\u{2}\u{A29}\u{A35}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{A2A}\u{A2B}\u{7}\u{1F2}\u{2}\u{2}\u{A2B}\u{A2E}\u{7}\u{75}\u{2}" .
		    "\u{2}\u{A2C}\u{A2F}\u{5}\u{22C}\u{117}\u{2}\u{A2D}\u{A2F}\u{7}\u{8}" .
		    "\u{2}\u{2}\u{A2E}\u{A2C}\u{3}\u{2}\u{2}\u{2}\u{A2E}\u{A2D}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{A2F}\u{A35}\u{3}\u{2}\u{2}\u{2}\u{A30}\u{A31}\u{7}\u{1F0}" .
		    "\u{2}\u{2}\u{A31}\u{A35}\u{7}\u{1D6}\u{2}\u{2}\u{A32}\u{A33}\u{7}" .
		    "\u{23F}\u{2}\u{2}\u{A33}\u{A35}\u{7}\u{1D6}\u{2}\u{2}\u{A34}\u{8CE}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{8D8}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{8E3}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{8F5}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{904}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{91A}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{932}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{941}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{950}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{95C}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{961}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{96D}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{979}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{97F}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{984}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{98F}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{997}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{99A}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9A0}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9A3}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9A7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9A9}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9AB}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9B3}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9B6}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9C0}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9CB}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9CD}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9CF}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9D0}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9D2}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9DF}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9E2}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9E9}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9F0}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9F6}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{9F9}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{A08}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{A12}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{A18}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{A1E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{A24}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{A2A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A34}\u{A30}\u{3}\u{2}\u{2}\u{2}\u{A34}\u{A32}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A35}\u{87}\u{3}\u{2}\u{2}\u{2}\u{A36}\u{A37}" .
		    "\u{7}\u{31}\u{2}\u{2}\u{A37}\u{A39}\u{9}\u{2}\u{2}\u{2}\u{A38}\u{A3A}" .
		    "\u{5}\u{244}\u{123}\u{2}\u{A39}\u{A38}\u{3}\u{2}\u{2}\u{2}\u{A39}" .
		    "\u{A3A}\u{3}\u{2}\u{2}\u{2}\u{A3A}\u{A3B}\u{3}\u{2}\u{2}\u{2}\u{A3B}" .
		    "\u{A3C}\u{5}\u{20C}\u{107}\u{2}\u{A3C}\u{89}\u{3}\u{2}\u{2}\u{2}\u{A3D}" .
		    "\u{A3E}\u{7}\u{31}\u{2}\u{2}\u{A3E}\u{A40}\u{7}\u{15E}\u{2}\u{2}\u{A3F}" .
		    "\u{A41}\u{5}\u{244}\u{123}\u{2}\u{A40}\u{A3F}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{A40}\u{A41}\u{3}\u{2}\u{2}\u{2}\u{A41}\u{A42}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{A42}\u{A43}\u{5}\u{1F2}\u{FA}\u{2}\u{A43}\u{8B}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{A44}\u{A45}\u{7}\u{31}\u{2}\u{2}\u{A45}\u{A47}\u{7}\u{4A}" .
		    "\u{2}\u{2}\u{A46}\u{A48}\u{9}\u{3}\u{2}\u{2}\u{A47}\u{A46}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{A47}\u{A48}\u{3}\u{2}\u{2}\u{2}\u{A48}\u{A49}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{A49}\u{A4A}\u{5}\u{20C}\u{107}\u{2}\u{A4A}\u{A4B}\u{7}" .
		    "\u{6C}\u{2}\u{2}\u{A4B}\u{A58}\u{5}\u{1F4}\u{FB}\u{2}\u{A4C}\u{A4E}" .
		    "\u{7}\u{114}\u{2}\u{2}\u{A4D}\u{A4F}\u{7}\u{3F7}\u{2}\u{2}\u{A4E}" .
		    "\u{A4D}\u{3}\u{2}\u{2}\u{2}\u{A4E}\u{A4F}\u{3}\u{2}\u{2}\u{2}\u{A4F}" .
		    "\u{A50}\u{3}\u{2}\u{2}\u{2}\u{A50}\u{A57}\u{9}\u{5}\u{2}\u{2}\u{A51}" .
		    "\u{A53}\u{7}\u{5F}\u{2}\u{2}\u{A52}\u{A54}\u{7}\u{3F7}\u{2}\u{2}\u{A53}" .
		    "\u{A52}\u{3}\u{2}\u{2}\u{2}\u{A53}\u{A54}\u{3}\u{2}\u{2}\u{2}\u{A54}" .
		    "\u{A55}\u{3}\u{2}\u{2}\u{2}\u{A55}\u{A57}\u{9}\u{6}\u{2}\u{2}\u{A56}" .
		    "\u{A4C}\u{3}\u{2}\u{2}\u{2}\u{A56}\u{A51}\u{3}\u{2}\u{2}\u{2}\u{A57}" .
		    "\u{A5A}\u{3}\u{2}\u{2}\u{2}\u{A58}\u{A56}\u{3}\u{2}\u{2}\u{2}\u{A58}" .
		    "\u{A59}\u{3}\u{2}\u{2}\u{2}\u{A59}\u{8D}\u{3}\u{2}\u{2}\u{2}\u{A5A}" .
		    "\u{A58}\u{3}\u{2}\u{2}\u{2}\u{A5B}\u{A5C}\u{7}\u{31}\u{2}\u{2}\u{A5C}" .
		    "\u{A5D}\u{7}\u{195}\u{2}\u{2}\u{A5D}\u{A5E}\u{7}\u{44}\u{2}\u{2}\u{A5E}" .
		    "\u{A5F}\u{5}\u{20C}\u{107}\u{2}\u{A5F}\u{A60}\u{7}\u{158}\u{2}\u{2}" .
		    "\u{A60}\u{A61}\u{7}\u{3F7}\u{2}\u{2}\u{A61}\u{A62}\u{5}\u{202}\u{102}" .
		    "\u{2}\u{A62}\u{8F}\u{3}\u{2}\u{2}\u{2}\u{A63}\u{A64}\u{7}\u{31}\u{2}" .
		    "\u{2}\u{A64}\u{A66}\u{7}\u{77}\u{2}\u{2}\u{A65}\u{A67}\u{5}\u{244}" .
		    "\u{123}\u{2}\u{A66}\u{A65}\u{3}\u{2}\u{2}\u{2}\u{A66}\u{A67}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{A67}\u{A68}\u{3}\u{2}\u{2}\u{2}\u{A68}\u{A69}\u{5}" .
		    "\u{1F2}\u{FA}\u{2}\u{A69}\u{91}\u{3}\u{2}\u{2}\u{2}\u{A6A}\u{A6B}" .
		    "\u{7}\u{31}\u{2}\u{2}\u{A6B}\u{A6D}\u{7}\u{172}\u{2}\u{2}\u{A6C}\u{A6E}" .
		    "\u{5}\u{244}\u{123}\u{2}\u{A6D}\u{A6C}\u{3}\u{2}\u{2}\u{2}\u{A6D}" .
		    "\u{A6E}\u{3}\u{2}\u{2}\u{2}\u{A6E}\u{A6F}\u{3}\u{2}\u{2}\u{2}\u{A6F}" .
		    "\u{A70}\u{5}\u{1F2}\u{FA}\u{2}\u{A70}\u{93}\u{3}\u{2}\u{2}\u{2}\u{A71}" .
		    "\u{A72}\u{7}\u{31}\u{2}\u{2}\u{A72}\u{A74}\u{7}\u{209}\u{2}\u{2}\u{A73}" .
		    "\u{A75}\u{5}\u{244}\u{123}\u{2}\u{A74}\u{A73}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{A74}\u{A75}\u{3}\u{2}\u{2}\u{2}\u{A75}\u{A76}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{A76}\u{A77}\u{5}\u{20C}\u{107}\u{2}\u{A77}\u{95}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{A78}\u{A7A}\u{7}\u{31}\u{2}\u{2}\u{A79}\u{A7B}\u{7}\u{231}" .
		    "\u{2}\u{2}\u{A7A}\u{A79}\u{3}\u{2}\u{2}\u{2}\u{A7A}\u{A7B}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{A7B}\u{A7C}\u{3}\u{2}\u{2}\u{2}\u{A7C}\u{A7E}\u{7}\u{9C}" .
		    "\u{2}\u{2}\u{A7D}\u{A7F}\u{5}\u{244}\u{123}\u{2}\u{A7E}\u{A7D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{A7E}\u{A7F}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A80}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{A80}\u{A82}\u{5}\u{22E}\u{118}\u{2}\u{A81}\u{A83}" .
		    "\u{9}\u{21}\u{2}\u{2}\u{A82}\u{A81}\u{3}\u{2}\u{2}\u{2}\u{A82}\u{A83}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A83}\u{97}\u{3}\u{2}\u{2}\u{2}\u{A84}\u{A85}" .
		    "\u{7}\u{31}\u{2}\u{2}\u{A85}\u{A86}\u{7}\u{230}\u{2}\u{2}\u{A86}\u{A8C}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{A87}\u{A89}\u{7}\u{158}\u{2}\u{2}\u{A88}" .
		    "\u{A8A}\u{7}\u{3F7}\u{2}\u{2}\u{A89}\u{A88}\u{3}\u{2}\u{2}\u{2}\u{A89}" .
		    "\u{A8A}\u{3}\u{2}\u{2}\u{2}\u{A8A}\u{A8B}\u{3}\u{2}\u{2}\u{2}\u{A8B}" .
		    "\u{A8D}\u{5}\u{202}\u{102}\u{2}\u{A8C}\u{A87}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{A8C}\u{A8D}\u{3}\u{2}\u{2}\u{2}\u{A8D}\u{99}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{A8E}\u{A8F}\u{7}\u{31}\u{2}\u{2}\u{A8F}\u{A91}\u{7}\u{A1}\u{2}" .
		    "\u{2}\u{A90}\u{A92}\u{5}\u{244}\u{123}\u{2}\u{A91}\u{A90}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{A91}\u{A92}\u{3}\u{2}\u{2}\u{2}\u{A92}\u{A93}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{A93}\u{A94}\u{5}\u{1F2}\u{FA}\u{2}\u{A94}\u{9B}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{A95}\u{A96}\u{7}\u{31}\u{2}\u{2}\u{A96}\u{A98}\u{7}" .
		    "\u{246}\u{2}\u{2}\u{A97}\u{A99}\u{5}\u{244}\u{123}\u{2}\u{A98}\u{A97}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A98}\u{A99}\u{3}\u{2}\u{2}\u{2}\u{A99}\u{A9A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{A9A}\u{A9F}\u{5}\u{1F2}\u{FA}\u{2}\u{A9B}\u{A9C}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{A9C}\u{A9E}\u{5}\u{1F2}\u{FA}\u{2}\u{A9D}" .
		    "\u{A9B}\u{3}\u{2}\u{2}\u{2}\u{A9E}\u{AA1}\u{3}\u{2}\u{2}\u{2}\u{A9F}" .
		    "\u{A9D}\u{3}\u{2}\u{2}\u{2}\u{A9F}\u{AA0}\u{3}\u{2}\u{2}\u{2}\u{AA0}" .
		    "\u{AA3}\u{3}\u{2}\u{2}\u{2}\u{AA1}\u{A9F}\u{3}\u{2}\u{2}\u{2}\u{AA2}" .
		    "\u{AA4}\u{9}\u{21}\u{2}\u{2}\u{AA3}\u{AA2}\u{3}\u{2}\u{2}\u{2}\u{AA3}" .
		    "\u{AA4}\u{3}\u{2}\u{2}\u{2}\u{AA4}\u{9D}\u{3}\u{2}\u{2}\u{2}\u{AA5}" .
		    "\u{AA6}\u{7}\u{7F}\u{2}\u{2}\u{AA6}\u{AA7}\u{7}\u{9C}\u{2}\u{2}\u{AA7}" .
		    "\u{AAC}\u{5}\u{A0}\u{51}\u{2}\u{AA8}\u{AA9}\u{7}\u{402}\u{2}\u{2}" .
		    "\u{AA9}\u{AAB}\u{5}\u{A0}\u{51}\u{2}\u{AAA}\u{AA8}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{AAB}\u{AAE}\u{3}\u{2}\u{2}\u{2}\u{AAC}\u{AAA}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{AAC}\u{AAD}\u{3}\u{2}\u{2}\u{2}\u{AAD}\u{9F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{AAE}\u{AAC}\u{3}\u{2}\u{2}\u{2}\u{AAF}\u{AB0}\u{5}\u{1F4}" .
		    "\u{FB}\u{2}\u{AB0}\u{AB1}\u{7}\u{9F}\u{2}\u{2}\u{AB1}\u{AB2}\u{5}" .
		    "\u{1F4}\u{FB}\u{2}\u{AB2}\u{A1}\u{3}\u{2}\u{2}\u{2}\u{AB3}\u{AB5}" .
		    "\u{7}\u{238}\u{2}\u{2}\u{AB4}\u{AB6}\u{7}\u{9C}\u{2}\u{2}\u{AB5}\u{AB4}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{AB5}\u{AB6}\u{3}\u{2}\u{2}\u{2}\u{AB6}\u{AB7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{AB7}\u{AB8}\u{5}\u{1F4}\u{FB}\u{2}\u{AB8}\u{A3}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{AB9}\u{ABA}\u{7}\u{13}\u{2}\u{2}\u{ABA}\u{AC1}" .
		    "\u{5}\u{1F2}\u{FA}\u{2}\u{ABB}\u{ABE}\u{7}\u{400}\u{2}\u{2}\u{ABC}" .
		    "\u{ABF}\u{5}\u{238}\u{11D}\u{2}\u{ABD}\u{ABF}\u{5}\u{232}\u{11A}\u{2}" .
		    "\u{ABE}\u{ABC}\u{3}\u{2}\u{2}\u{2}\u{ABE}\u{ABD}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{ABE}\u{ABF}\u{3}\u{2}\u{2}\u{2}\u{ABF}\u{AC0}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{AC0}\u{AC2}\u{7}\u{401}\u{2}\u{2}\u{AC1}\u{ABB}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{AC1}\u{AC2}\u{3}\u{2}\u{2}\u{2}\u{AC2}\u{A5}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{AC3}\u{AC6}\u{5}\u{C0}\u{61}\u{2}\u{AC4}\u{AC6}\u{5}\u{C2}" .
		    "\u{62}\u{2}\u{AC5}\u{AC3}\u{3}\u{2}\u{2}\u{2}\u{AC5}\u{AC4}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{AC6}\u{A7}\u{3}\u{2}\u{2}\u{2}\u{AC7}\u{AC8}\u{7}\u{150}" .
		    "\u{2}\u{2}\u{AC8}\u{AC9}\u{5}\u{232}\u{11A}\u{2}\u{AC9}\u{A9}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{ACA}\u{ACF}\u{5}\u{C4}\u{63}\u{2}\u{ACB}\u{ACF}" .
		    "\u{5}\u{C6}\u{64}\u{2}\u{ACC}\u{ACF}\u{5}\u{C8}\u{65}\u{2}\u{ACD}" .
		    "\u{ACF}\u{5}\u{CA}\u{66}\u{2}\u{ACE}\u{ACA}\u{3}\u{2}\u{2}\u{2}\u{ACE}" .
		    "\u{ACB}\u{3}\u{2}\u{2}\u{2}\u{ACE}\u{ACC}\u{3}\u{2}\u{2}\u{2}\u{ACE}" .
		    "\u{ACD}\u{3}\u{2}\u{2}\u{2}\u{ACF}\u{AB}\u{3}\u{2}\u{2}\u{2}\u{AD0}" .
		    "\u{AD2}\u{7}\u{4E}\u{2}\u{2}\u{AD1}\u{AD3}\u{9}\u{22}\u{2}\u{2}\u{AD2}" .
		    "\u{AD1}\u{3}\u{2}\u{2}\u{2}\u{AD2}\u{AD3}\u{3}\u{2}\u{2}\u{2}\u{AD3}" .
		    "\u{AD5}\u{3}\u{2}\u{2}\u{2}\u{AD4}\u{AD6}\u{7}\u{48}\u{2}\u{2}\u{AD5}" .
		    "\u{AD4}\u{3}\u{2}\u{2}\u{2}\u{AD5}\u{AD6}\u{3}\u{2}\u{2}\u{2}\u{AD6}" .
		    "\u{AD8}\u{3}\u{2}\u{2}\u{2}\u{AD7}\u{AD9}\u{7}\u{50}\u{2}\u{2}\u{AD8}" .
		    "\u{AD7}\u{3}\u{2}\u{2}\u{2}\u{AD8}\u{AD9}\u{3}\u{2}\u{2}\u{2}\u{AD9}" .
		    "\u{ADA}\u{3}\u{2}\u{2}\u{2}\u{ADA}\u{AE1}\u{5}\u{1F4}\u{FB}\u{2}\u{ADB}" .
		    "\u{ADC}\u{7}\u{75}\u{2}\u{2}\u{ADC}\u{ADE}\u{7}\u{400}\u{2}\u{2}\u{ADD}" .
		    "\u{ADF}\u{5}\u{22C}\u{117}\u{2}\u{ADE}\u{ADD}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{ADE}\u{ADF}\u{3}\u{2}\u{2}\u{2}\u{ADF}\u{AE0}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{AE0}\u{AE2}\u{7}\u{401}\u{2}\u{2}\u{AE1}\u{ADB}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{AE1}\u{AE2}\u{3}\u{2}\u{2}\u{2}\u{AE2}\u{AF3}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{AE3}\u{AE4}\u{7}\u{400}\u{2}\u{2}\u{AE4}\u{AE5}\u{5}\u{22C}" .
		    "\u{117}\u{2}\u{AE5}\u{AE6}\u{7}\u{401}\u{2}\u{2}\u{AE6}\u{AE8}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{AE7}\u{AE3}\u{3}\u{2}\u{2}\u{2}\u{AE7}\u{AE8}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{AE8}\u{AE9}\u{3}\u{2}\u{2}\u{2}\u{AE9}\u{AF4}\u{5}" .
		    "\u{B8}\u{5D}\u{2}\u{AEA}\u{AEB}\u{7}\u{8C}\u{2}\u{2}\u{AEB}\u{AF0}" .
		    "\u{5}\u{BA}\u{5E}\u{2}\u{AEC}\u{AED}\u{7}\u{402}\u{2}\u{2}\u{AED}" .
		    "\u{AEF}\u{5}\u{BA}\u{5E}\u{2}\u{AEE}\u{AEC}\u{3}\u{2}\u{2}\u{2}\u{AEF}" .
		    "\u{AF2}\u{3}\u{2}\u{2}\u{2}\u{AF0}\u{AEE}\u{3}\u{2}\u{2}\u{2}\u{AF0}" .
		    "\u{AF1}\u{3}\u{2}\u{2}\u{2}\u{AF1}\u{AF4}\u{3}\u{2}\u{2}\u{2}\u{AF2}" .
		    "\u{AF0}\u{3}\u{2}\u{2}\u{2}\u{AF3}\u{AE7}\u{3}\u{2}\u{2}\u{2}\u{AF3}" .
		    "\u{AEA}\u{3}\u{2}\u{2}\u{2}\u{AF4}\u{B01}\u{3}\u{2}\u{2}\u{2}\u{AF5}" .
		    "\u{AF6}\u{7}\u{6C}\u{2}\u{2}\u{AF6}\u{AF7}\u{7}\u{152}\u{2}\u{2}\u{AF7}" .
		    "\u{AF8}\u{7}\u{54}\u{2}\u{2}\u{AF8}\u{AF9}\u{7}\u{A8}\u{2}\u{2}\u{AF9}" .
		    "\u{AFE}\u{5}\u{BA}\u{5E}\u{2}\u{AFA}\u{AFB}\u{7}\u{402}\u{2}\u{2}" .
		    "\u{AFB}\u{AFD}\u{5}\u{BA}\u{5E}\u{2}\u{AFC}\u{AFA}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{AFD}\u{B00}\u{3}\u{2}\u{2}\u{2}\u{AFE}\u{AFC}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{AFE}\u{AFF}\u{3}\u{2}\u{2}\u{2}\u{AFF}\u{B02}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{B00}\u{AFE}\u{3}\u{2}\u{2}\u{2}\u{B01}\u{AF5}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{B01}\u{B02}\u{3}\u{2}\u{2}\u{2}\u{B02}\u{AD}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{B03}\u{B04}\u{7}\u{5E}\u{2}\u{2}\u{B04}\u{B06}\u{7}\u{145}" .
		    "\u{2}\u{2}\u{B05}\u{B07}\u{9}\u{23}\u{2}\u{2}\u{B06}\u{B05}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B06}\u{B07}\u{3}\u{2}\u{2}\u{2}\u{B07}\u{B09}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B08}\u{B0A}\u{7}\u{194}\u{2}\u{2}\u{B09}\u{B08}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{B09}\u{B0A}\u{3}\u{2}\u{2}\u{2}\u{B0A}\u{B0B}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{B0B}\u{B0C}\u{7}\u{4B}\u{2}\u{2}\u{B0C}\u{B0E}\u{7}" .
		    "\u{40F}\u{2}\u{2}\u{B0D}\u{B0F}\u{9}\u{8}\u{2}\u{2}\u{B0E}\u{B0D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{B0E}\u{B0F}\u{3}\u{2}\u{2}\u{2}\u{B0F}\u{B10}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{B10}\u{B11}\u{7}\u{50}\u{2}\u{2}\u{B11}\u{B12}" .
		    "\u{7}\u{9C}\u{2}\u{2}\u{B12}\u{B18}\u{5}\u{1F4}\u{FB}\u{2}\u{B13}" .
		    "\u{B14}\u{7}\u{75}\u{2}\u{2}\u{B14}\u{B15}\u{7}\u{400}\u{2}\u{2}\u{B15}" .
		    "\u{B16}\u{5}\u{22C}\u{117}\u{2}\u{B16}\u{B17}\u{7}\u{401}\u{2}\u{2}" .
		    "\u{B17}\u{B19}\u{3}\u{2}\u{2}\u{2}\u{B18}\u{B13}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{B18}\u{B19}\u{3}\u{2}\u{2}\u{2}\u{B19}\u{B1D}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{B1A}\u{B1B}\u{7}\u{18}\u{2}\u{2}\u{B1B}\u{B1C}\u{7}\u{8C}\u{2}" .
		    "\u{2}\u{B1C}\u{B1E}\u{5}\u{1FE}\u{100}\u{2}\u{B1D}\u{B1A}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B1D}\u{B1E}\u{3}\u{2}\u{2}\u{2}\u{B1E}\u{B25}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B1F}\u{B21}\u{9}\u{24}\u{2}\u{2}\u{B20}\u{B22}\u{5}\u{F4}" .
		    "\u{7B}\u{2}\u{B21}\u{B20}\u{3}\u{2}\u{2}\u{2}\u{B22}\u{B23}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B23}\u{B21}\u{3}\u{2}\u{2}\u{2}\u{B23}\u{B24}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B24}\u{B26}\u{3}\u{2}\u{2}\u{2}\u{B25}\u{B1F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B25}\u{B26}\u{3}\u{2}\u{2}\u{2}\u{B26}\u{B2D}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B27}\u{B29}\u{7}\u{5D}\u{2}\u{2}\u{B28}\u{B2A}\u{5}\u{F6}" .
		    "\u{7C}\u{2}\u{B29}\u{B28}\u{3}\u{2}\u{2}\u{2}\u{B2A}\u{B2B}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B2B}\u{B29}\u{3}\u{2}\u{2}\u{2}\u{B2B}\u{B2C}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B2C}\u{B2E}\u{3}\u{2}\u{2}\u{2}\u{B2D}\u{B27}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B2D}\u{B2E}\u{3}\u{2}\u{2}\u{2}\u{B2E}\u{B33}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B2F}\u{B30}\u{7}\u{48}\u{2}\u{2}\u{B30}\u{B31}\u{5}\u{212}" .
		    "\u{10A}\u{2}\u{B31}\u{B32}\u{9}\u{25}\u{2}\u{2}\u{B32}\u{B34}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{B33}\u{B2F}\u{3}\u{2}\u{2}\u{2}\u{B33}\u{B34}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{B34}\u{B40}\u{3}\u{2}\u{2}\u{2}\u{B35}\u{B36}\u{7}" .
		    "\u{400}\u{2}\u{2}\u{B36}\u{B3B}\u{5}\u{BC}\u{5F}\u{2}\u{B37}\u{B38}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{B38}\u{B3A}\u{5}\u{BC}\u{5F}\u{2}\u{B39}" .
		    "\u{B37}\u{3}\u{2}\u{2}\u{2}\u{B3A}\u{B3D}\u{3}\u{2}\u{2}\u{2}\u{B3B}" .
		    "\u{B39}\u{3}\u{2}\u{2}\u{2}\u{B3B}\u{B3C}\u{3}\u{2}\u{2}\u{2}\u{B3C}" .
		    "\u{B3E}\u{3}\u{2}\u{2}\u{2}\u{B3D}\u{B3B}\u{3}\u{2}\u{2}\u{2}\u{B3E}" .
		    "\u{B3F}\u{7}\u{401}\u{2}\u{2}\u{B3F}\u{B41}\u{3}\u{2}\u{2}\u{2}\u{B40}" .
		    "\u{B35}\u{3}\u{2}\u{2}\u{2}\u{B40}\u{B41}\u{3}\u{2}\u{2}\u{2}\u{B41}" .
		    "\u{B4B}\u{3}\u{2}\u{2}\u{2}\u{B42}\u{B43}\u{7}\u{8C}\u{2}\u{2}\u{B43}" .
		    "\u{B48}\u{5}\u{BA}\u{5E}\u{2}\u{B44}\u{B45}\u{7}\u{402}\u{2}\u{2}" .
		    "\u{B45}\u{B47}\u{5}\u{BA}\u{5E}\u{2}\u{B46}\u{B44}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{B47}\u{B4A}\u{3}\u{2}\u{2}\u{2}\u{B48}\u{B46}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{B48}\u{B49}\u{3}\u{2}\u{2}\u{2}\u{B49}\u{B4C}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{B4A}\u{B48}\u{3}\u{2}\u{2}\u{2}\u{B4B}\u{B42}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{B4B}\u{B4C}\u{3}\u{2}\u{2}\u{2}\u{B4C}\u{AF}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{B4D}\u{B4E}\u{7}\u{5E}\u{2}\u{2}\u{B4E}\u{B50}\u{7}\u{250}" .
		    "\u{2}\u{2}\u{B4F}\u{B51}\u{9}\u{23}\u{2}\u{2}\u{B50}\u{B4F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B50}\u{B51}\u{3}\u{2}\u{2}\u{2}\u{B51}\u{B53}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B52}\u{B54}\u{7}\u{194}\u{2}\u{2}\u{B53}\u{B52}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{B53}\u{B54}\u{3}\u{2}\u{2}\u{2}\u{B54}\u{B55}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{B55}\u{B56}\u{7}\u{4B}\u{2}\u{2}\u{B56}\u{B58}\u{7}" .
		    "\u{40F}\u{2}\u{2}\u{B57}\u{B59}\u{9}\u{8}\u{2}\u{2}\u{B58}\u{B57}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{B58}\u{B59}\u{3}\u{2}\u{2}\u{2}\u{B59}\u{B5A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{B5A}\u{B5B}\u{7}\u{50}\u{2}\u{2}\u{B5B}\u{B5C}" .
		    "\u{7}\u{9C}\u{2}\u{2}\u{B5C}\u{B60}\u{5}\u{1F4}\u{FB}\u{2}\u{B5D}" .
		    "\u{B5E}\u{7}\u{18}\u{2}\u{2}\u{B5E}\u{B5F}\u{7}\u{8C}\u{2}\u{2}\u{B5F}" .
		    "\u{B61}\u{5}\u{1FE}\u{100}\u{2}\u{B60}\u{B5D}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{B60}\u{B61}\u{3}\u{2}\u{2}\u{2}\u{B61}\u{B68}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{B62}\u{B63}\u{7}\u{204}\u{2}\u{2}\u{B63}\u{B64}\u{7}\u{17C}\u{2}" .
		    "\u{2}\u{B64}\u{B65}\u{7}\u{12}\u{2}\u{2}\u{B65}\u{B66}\u{7}\u{3F9}" .
		    "\u{2}\u{2}\u{B66}\u{B67}\u{7}\u{40F}\u{2}\u{2}\u{B67}\u{B69}\u{7}" .
		    "\u{3F8}\u{2}\u{2}\u{B68}\u{B62}\u{3}\u{2}\u{2}\u{2}\u{B68}\u{B69}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{B69}\u{B6E}\u{3}\u{2}\u{2}\u{2}\u{B6A}\u{B6B}" .
		    "\u{7}\u{48}\u{2}\u{2}\u{B6B}\u{B6C}\u{5}\u{212}\u{10A}\u{2}\u{B6C}" .
		    "\u{B6D}\u{9}\u{25}\u{2}\u{2}\u{B6D}\u{B6F}\u{3}\u{2}\u{2}\u{2}\u{B6E}" .
		    "\u{B6A}\u{3}\u{2}\u{2}\u{2}\u{B6E}\u{B6F}\u{3}\u{2}\u{2}\u{2}\u{B6F}" .
		    "\u{B7B}\u{3}\u{2}\u{2}\u{2}\u{B70}\u{B71}\u{7}\u{400}\u{2}\u{2}\u{B71}" .
		    "\u{B76}\u{5}\u{BC}\u{5F}\u{2}\u{B72}\u{B73}\u{7}\u{402}\u{2}\u{2}" .
		    "\u{B73}\u{B75}\u{5}\u{BC}\u{5F}\u{2}\u{B74}\u{B72}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{B75}\u{B78}\u{3}\u{2}\u{2}\u{2}\u{B76}\u{B74}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{B76}\u{B77}\u{3}\u{2}\u{2}\u{2}\u{B77}\u{B79}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{B78}\u{B76}\u{3}\u{2}\u{2}\u{2}\u{B79}\u{B7A}\u{7}\u{401}" .
		    "\u{2}\u{2}\u{B7A}\u{B7C}\u{3}\u{2}\u{2}\u{2}\u{B7B}\u{B70}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B7B}\u{B7C}\u{3}\u{2}\u{2}\u{2}\u{B7C}\u{B86}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{B7D}\u{B7E}\u{7}\u{8C}\u{2}\u{2}\u{B7E}\u{B83}\u{5}\u{BA}" .
		    "\u{5E}\u{2}\u{B7F}\u{B80}\u{7}\u{402}\u{2}\u{2}\u{B80}\u{B82}\u{5}" .
		    "\u{BA}\u{5E}\u{2}\u{B81}\u{B7F}\u{3}\u{2}\u{2}\u{2}\u{B82}\u{B85}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{B83}\u{B81}\u{3}\u{2}\u{2}\u{2}\u{B83}\u{B84}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{B84}\u{B87}\u{3}\u{2}\u{2}\u{2}\u{B85}\u{B83}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{B86}\u{B7D}\u{3}\u{2}\u{2}\u{2}\u{B86}\u{B87}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{B87}\u{B1}\u{3}\u{2}\u{2}\u{2}\u{B88}\u{B8A}" .
		    "\u{7}\u{81}\u{2}\u{2}\u{B89}\u{B8B}\u{9}\u{26}\u{2}\u{2}\u{B8A}\u{B89}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{B8A}\u{B8B}\u{3}\u{2}\u{2}\u{2}\u{B8B}\u{B8D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{B8C}\u{B8E}\u{7}\u{50}\u{2}\u{2}\u{B8D}\u{B8C}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{B8D}\u{B8E}\u{3}\u{2}\u{2}\u{2}\u{B8E}\u{B8F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{B8F}\u{B95}\u{5}\u{1F4}\u{FB}\u{2}\u{B90}\u{B91}" .
		    "\u{7}\u{75}\u{2}\u{2}\u{B91}\u{B92}\u{7}\u{400}\u{2}\u{2}\u{B92}\u{B93}" .
		    "\u{5}\u{22C}\u{117}\u{2}\u{B93}\u{B94}\u{7}\u{401}\u{2}\u{2}\u{B94}" .
		    "\u{B96}\u{3}\u{2}\u{2}\u{2}\u{B95}\u{B90}\u{3}\u{2}\u{2}\u{2}\u{B95}" .
		    "\u{B96}\u{3}\u{2}\u{2}\u{2}\u{B96}\u{BA7}\u{3}\u{2}\u{2}\u{2}\u{B97}" .
		    "\u{B98}\u{7}\u{400}\u{2}\u{2}\u{B98}\u{B99}\u{5}\u{22C}\u{117}\u{2}" .
		    "\u{B99}\u{B9A}\u{7}\u{401}\u{2}\u{2}\u{B9A}\u{B9C}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{B9B}\u{B97}\u{3}\u{2}\u{2}\u{2}\u{B9B}\u{B9C}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{B9C}\u{B9D}\u{3}\u{2}\u{2}\u{2}\u{B9D}\u{BA8}\u{5}\u{B8}\u{5D}" .
		    "\u{2}\u{B9E}\u{B9F}\u{7}\u{8C}\u{2}\u{2}\u{B9F}\u{BA4}\u{5}\u{BA}" .
		    "\u{5E}\u{2}\u{BA0}\u{BA1}\u{7}\u{402}\u{2}\u{2}\u{BA1}\u{BA3}\u{5}" .
		    "\u{BA}\u{5E}\u{2}\u{BA2}\u{BA0}\u{3}\u{2}\u{2}\u{2}\u{BA3}\u{BA6}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BA4}\u{BA2}\u{3}\u{2}\u{2}\u{2}\u{BA4}\u{BA5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BA5}\u{BA8}\u{3}\u{2}\u{2}\u{2}\u{BA6}\u{BA4}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BA7}\u{B9B}\u{3}\u{2}\u{2}\u{2}\u{BA7}\u{B9E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BA8}\u{B3}\u{3}\u{2}\u{2}\u{2}\u{BA9}\u{BAB}" .
		    "\u{5}\u{E4}\u{73}\u{2}\u{BAA}\u{BAC}\u{5}\u{BE}\u{60}\u{2}\u{BAB}" .
		    "\u{BAA}\u{3}\u{2}\u{2}\u{2}\u{BAB}\u{BAC}\u{3}\u{2}\u{2}\u{2}\u{BAC}" .
		    "\u{BE1}\u{3}\u{2}\u{2}\u{2}\u{BAD}\u{BAF}\u{5}\u{E0}\u{71}\u{2}\u{BAE}" .
		    "\u{BB0}\u{5}\u{BE}\u{60}\u{2}\u{BAF}\u{BAE}\u{3}\u{2}\u{2}\u{2}\u{BAF}" .
		    "\u{BB0}\u{3}\u{2}\u{2}\u{2}\u{BB0}\u{BE1}\u{3}\u{2}\u{2}\u{2}\u{BB1}" .
		    "\u{BB3}\u{5}\u{E6}\u{74}\u{2}\u{BB2}\u{BB4}\u{5}\u{EA}\u{76}\u{2}" .
		    "\u{BB3}\u{BB2}\u{3}\u{2}\u{2}\u{2}\u{BB4}\u{BB5}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{BB5}\u{BB3}\u{3}\u{2}\u{2}\u{2}\u{BB5}\u{BB6}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{BB6}\u{BBF}\u{3}\u{2}\u{2}\u{2}\u{BB7}\u{BB9}\u{7}\u{A4}\u{2}\u{2}" .
		    "\u{BB8}\u{BBA}\u{9}\u{27}\u{2}\u{2}\u{BB9}\u{BB8}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{BB9}\u{BBA}\u{3}\u{2}\u{2}\u{2}\u{BBA}\u{BBD}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{BBB}\u{BBE}\u{5}\u{E4}\u{73}\u{2}\u{BBC}\u{BBE}\u{5}\u{E0}\u{71}" .
		    "\u{2}\u{BBD}\u{BBB}\u{3}\u{2}\u{2}\u{2}\u{BBD}\u{BBC}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{BBE}\u{BC0}\u{3}\u{2}\u{2}\u{2}\u{BBF}\u{BB7}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{BBF}\u{BC0}\u{3}\u{2}\u{2}\u{2}\u{BC0}\u{BC2}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{BC1}\u{BC3}\u{5}\u{D0}\u{69}\u{2}\u{BC2}\u{BC1}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{BC2}\u{BC3}\u{3}\u{2}\u{2}\u{2}\u{BC3}\u{BC5}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{BC4}\u{BC6}\u{5}\u{FC}\u{7F}\u{2}\u{BC5}\u{BC4}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{BC5}\u{BC6}\u{3}\u{2}\u{2}\u{2}\u{BC6}\u{BC8}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{BC7}\u{BC9}\u{5}\u{BE}\u{60}\u{2}\u{BC8}\u{BC7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BC8}\u{BC9}\u{3}\u{2}\u{2}\u{2}\u{BC9}\u{BE1}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BCA}\u{BCC}\u{5}\u{E2}\u{72}\u{2}\u{BCB}\u{BCD}" .
		    "\u{5}\u{E8}\u{75}\u{2}\u{BCC}\u{BCB}\u{3}\u{2}\u{2}\u{2}\u{BCD}\u{BCE}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BCE}\u{BCC}\u{3}\u{2}\u{2}\u{2}\u{BCE}\u{BCF}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BCF}\u{BD5}\u{3}\u{2}\u{2}\u{2}\u{BD0}\u{BD2}" .
		    "\u{7}\u{A4}\u{2}\u{2}\u{BD1}\u{BD3}\u{9}\u{27}\u{2}\u{2}\u{BD2}\u{BD1}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BD2}\u{BD3}\u{3}\u{2}\u{2}\u{2}\u{BD3}\u{BD4}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BD4}\u{BD6}\u{5}\u{E0}\u{71}\u{2}\u{BD5}\u{BD0}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BD5}\u{BD6}\u{3}\u{2}\u{2}\u{2}\u{BD6}\u{BD8}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BD7}\u{BD9}\u{5}\u{D0}\u{69}\u{2}\u{BD8}\u{BD7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BD8}\u{BD9}\u{3}\u{2}\u{2}\u{2}\u{BD9}\u{BDB}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BDA}\u{BDC}\u{5}\u{FC}\u{7F}\u{2}\u{BDB}\u{BDA}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BDB}\u{BDC}\u{3}\u{2}\u{2}\u{2}\u{BDC}\u{BDE}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BDD}\u{BDF}\u{5}\u{BE}\u{60}\u{2}\u{BDE}\u{BDD}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BDE}\u{BDF}\u{3}\u{2}\u{2}\u{2}\u{BDF}\u{BE1}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BE0}\u{BA9}\u{3}\u{2}\u{2}\u{2}\u{BE0}\u{BAD}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BE0}\u{BB1}\u{3}\u{2}\u{2}\u{2}\u{BE0}\u{BCA}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BE1}\u{B5}\u{3}\u{2}\u{2}\u{2}\u{BE2}\u{BE5}" .
		    "\u{5}\u{CC}\u{67}\u{2}\u{BE3}\u{BE5}\u{5}\u{CE}\u{68}\u{2}\u{BE4}" .
		    "\u{BE2}\u{3}\u{2}\u{2}\u{2}\u{BE4}\u{BE3}\u{3}\u{2}\u{2}\u{2}\u{BE5}" .
		    "\u{B7}\u{3}\u{2}\u{2}\u{2}\u{BE6}\u{BF9}\u{5}\u{B4}\u{5B}\u{2}\u{BE7}" .
		    "\u{BE8}\u{9}\u{28}\u{2}\u{2}\u{BE8}\u{BEA}\u{7}\u{400}\u{2}\u{2}\u{BE9}" .
		    "\u{BEB}\u{5}\u{236}\u{11C}\u{2}\u{BEA}\u{BE9}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{BEA}\u{BEB}\u{3}\u{2}\u{2}\u{2}\u{BEB}\u{BEC}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{BEC}\u{BF5}\u{7}\u{401}\u{2}\u{2}\u{BED}\u{BEE}\u{7}\u{402}\u{2}" .
		    "\u{2}\u{BEE}\u{BF0}\u{7}\u{400}\u{2}\u{2}\u{BEF}\u{BF1}\u{5}\u{236}" .
		    "\u{11C}\u{2}\u{BF0}\u{BEF}\u{3}\u{2}\u{2}\u{2}\u{BF0}\u{BF1}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{BF1}\u{BF2}\u{3}\u{2}\u{2}\u{2}\u{BF2}\u{BF4}\u{7}" .
		    "\u{401}\u{2}\u{2}\u{BF3}\u{BED}\u{3}\u{2}\u{2}\u{2}\u{BF4}\u{BF7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BF5}\u{BF3}\u{3}\u{2}\u{2}\u{2}\u{BF5}\u{BF6}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BF6}\u{BF9}\u{3}\u{2}\u{2}\u{2}\u{BF7}\u{BF5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BF8}\u{BE6}\u{3}\u{2}\u{2}\u{2}\u{BF8}\u{BE7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{BF9}\u{B9}\u{3}\u{2}\u{2}\u{2}\u{BFA}\u{BFB}" .
		    "\u{5}\u{1F6}\u{FC}\u{2}\u{BFB}\u{BFE}\u{7}\u{3F7}\u{2}\u{2}\u{BFC}" .
		    "\u{BFF}\u{5}\u{25C}\u{12F}\u{2}\u{BFD}\u{BFF}\u{7}\u{28}\u{2}\u{2}" .
		    "\u{BFE}\u{BFC}\u{3}\u{2}\u{2}\u{2}\u{BFE}\u{BFD}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{BFF}\u{BB}\u{3}\u{2}\u{2}\u{2}\u{C00}\u{C03}\u{5}\u{20C}\u{107}" .
		    "\u{2}\u{C01}\u{C03}\u{7}\u{41A}\u{2}\u{2}\u{C02}\u{C00}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{C02}\u{C01}\u{3}\u{2}\u{2}\u{2}\u{C03}\u{BD}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{C04}\u{C05}\u{7}\u{3C}\u{2}\u{2}\u{C05}\u{C0B}\u{7}\u{A8}" .
		    "\u{2}\u{2}\u{C06}\u{C07}\u{7}\u{5F}\u{2}\u{2}\u{C07}\u{C08}\u{7}\u{49}" .
		    "\u{2}\u{2}\u{C08}\u{C09}\u{7}\u{20B}\u{2}\u{2}\u{C09}\u{C0B}\u{7}" .
		    "\u{1B9}\u{2}\u{2}\u{C0A}\u{C04}\u{3}\u{2}\u{2}\u{2}\u{C0A}\u{C06}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C0B}\u{BF}\u{3}\u{2}\u{2}\u{2}\u{C0C}\u{C0E}" .
		    "\u{7}\u{2A}\u{2}\u{2}\u{C0D}\u{C0F}\u{7}\u{61}\u{2}\u{2}\u{C0E}\u{C0D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C0E}\u{C0F}\u{3}\u{2}\u{2}\u{2}\u{C0F}\u{C11}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C10}\u{C12}\u{7}\u{1E7}\u{2}\u{2}\u{C11}\u{C10}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C11}\u{C12}\u{3}\u{2}\u{2}\u{2}\u{C12}\u{C14}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C13}\u{C15}\u{7}\u{48}\u{2}\u{2}\u{C14}\u{C13}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C14}\u{C15}\u{3}\u{2}\u{2}\u{2}\u{C15}\u{C16}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C16}\u{C17}\u{7}\u{3F}\u{2}\u{2}\u{C17}\u{C1D}" .
		    "\u{5}\u{1F4}\u{FB}\u{2}\u{C18}\u{C19}\u{7}\u{75}\u{2}\u{2}\u{C19}" .
		    "\u{C1A}\u{7}\u{400}\u{2}\u{2}\u{C1A}\u{C1B}\u{5}\u{22C}\u{117}\u{2}" .
		    "\u{C1B}\u{C1C}\u{7}\u{401}\u{2}\u{2}\u{C1C}\u{C1E}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{C1D}\u{C18}\u{3}\u{2}\u{2}\u{2}\u{C1D}\u{C1E}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{C1E}\u{C21}\u{3}\u{2}\u{2}\u{2}\u{C1F}\u{C20}\u{7}\u{AE}\u{2}" .
		    "\u{2}\u{C20}\u{C22}\u{5}\u{25C}\u{12F}\u{2}\u{C21}\u{C1F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{C21}\u{C22}\u{3}\u{2}\u{2}\u{2}\u{C22}\u{C24}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{C23}\u{C25}\u{5}\u{D0}\u{69}\u{2}\u{C24}\u{C23}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{C24}\u{C25}\u{3}\u{2}\u{2}\u{2}\u{C25}\u{C28}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{C26}\u{C27}\u{7}\u{5B}\u{2}\u{2}\u{C27}\u{C29}\u{5}" .
		    "\u{FE}\u{80}\u{2}\u{C28}\u{C26}\u{3}\u{2}\u{2}\u{2}\u{C28}\u{C29}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C29}\u{C1}\u{3}\u{2}\u{2}\u{2}\u{C2A}\u{C2C}" .
		    "\u{7}\u{2A}\u{2}\u{2}\u{C2B}\u{C2D}\u{7}\u{61}\u{2}\u{2}\u{C2C}\u{C2B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C2C}\u{C2D}\u{3}\u{2}\u{2}\u{2}\u{C2D}\u{C2F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C2E}\u{C30}\u{7}\u{1E7}\u{2}\u{2}\u{C2F}\u{C2E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C2F}\u{C30}\u{3}\u{2}\u{2}\u{2}\u{C30}\u{C32}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C31}\u{C33}\u{7}\u{48}\u{2}\u{2}\u{C32}\u{C31}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C32}\u{C33}\u{3}\u{2}\u{2}\u{2}\u{C33}\u{C5B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C34}\u{C37}\u{5}\u{1F4}\u{FB}\u{2}\u{C35}\u{C36}" .
		    "\u{7}\u{3FF}\u{2}\u{2}\u{C36}\u{C38}\u{7}\u{3EF}\u{2}\u{2}\u{C37}" .
		    "\u{C35}\u{3}\u{2}\u{2}\u{2}\u{C37}\u{C38}\u{3}\u{2}\u{2}\u{2}\u{C38}" .
		    "\u{C41}\u{3}\u{2}\u{2}\u{2}\u{C39}\u{C3A}\u{7}\u{402}\u{2}\u{2}\u{C3A}" .
		    "\u{C3D}\u{5}\u{1F4}\u{FB}\u{2}\u{C3B}\u{C3C}\u{7}\u{3FF}\u{2}\u{2}" .
		    "\u{C3C}\u{C3E}\u{7}\u{3EF}\u{2}\u{2}\u{C3D}\u{C3B}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{C3D}\u{C3E}\u{3}\u{2}\u{2}\u{2}\u{C3E}\u{C40}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{C3F}\u{C39}\u{3}\u{2}\u{2}\u{2}\u{C40}\u{C43}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{C41}\u{C3F}\u{3}\u{2}\u{2}\u{2}\u{C41}\u{C42}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{C42}\u{C44}\u{3}\u{2}\u{2}\u{2}\u{C43}\u{C41}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{C44}\u{C45}\u{7}\u{3F}\u{2}\u{2}\u{C45}\u{C46}\u{5}\u{D4}" .
		    "\u{6B}\u{2}\u{C46}\u{C5C}\u{3}\u{2}\u{2}\u{2}\u{C47}\u{C48}\u{7}\u{3F}" .
		    "\u{2}\u{2}\u{C48}\u{C4B}\u{5}\u{1F4}\u{FB}\u{2}\u{C49}\u{C4A}\u{7}" .
		    "\u{3FF}\u{2}\u{2}\u{C4A}\u{C4C}\u{7}\u{3EF}\u{2}\u{2}\u{C4B}\u{C49}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C4B}\u{C4C}\u{3}\u{2}\u{2}\u{2}\u{C4C}\u{C55}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C4D}\u{C4E}\u{7}\u{402}\u{2}\u{2}\u{C4E}\u{C51}" .
		    "\u{5}\u{1F4}\u{FB}\u{2}\u{C4F}\u{C50}\u{7}\u{3FF}\u{2}\u{2}\u{C50}" .
		    "\u{C52}\u{7}\u{3EF}\u{2}\u{2}\u{C51}\u{C4F}\u{3}\u{2}\u{2}\u{2}\u{C51}" .
		    "\u{C52}\u{3}\u{2}\u{2}\u{2}\u{C52}\u{C54}\u{3}\u{2}\u{2}\u{2}\u{C53}" .
		    "\u{C4D}\u{3}\u{2}\u{2}\u{2}\u{C54}\u{C57}\u{3}\u{2}\u{2}\u{2}\u{C55}" .
		    "\u{C53}\u{3}\u{2}\u{2}\u{2}\u{C55}\u{C56}\u{3}\u{2}\u{2}\u{2}\u{C56}" .
		    "\u{C58}\u{3}\u{2}\u{2}\u{2}\u{C57}\u{C55}\u{3}\u{2}\u{2}\u{2}\u{C58}" .
		    "\u{C59}\u{7}\u{AB}\u{2}\u{2}\u{C59}\u{C5A}\u{5}\u{D4}\u{6B}\u{2}\u{C5A}" .
		    "\u{C5C}\u{3}\u{2}\u{2}\u{2}\u{C5B}\u{C34}\u{3}\u{2}\u{2}\u{2}\u{C5B}" .
		    "\u{C47}\u{3}\u{2}\u{2}\u{2}\u{C5C}\u{C5F}\u{3}\u{2}\u{2}\u{2}\u{C5D}" .
		    "\u{C5E}\u{7}\u{AE}\u{2}\u{2}\u{C5E}\u{C60}\u{5}\u{25C}\u{12F}\u{2}" .
		    "\u{C5F}\u{C5D}\u{3}\u{2}\u{2}\u{2}\u{C5F}\u{C60}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{C60}\u{C3}\u{3}\u{2}\u{2}\u{2}\u{C61}\u{C62}\u{7}\u{177}\u{2}\u{2}" .
		    "\u{C62}\u{C63}\u{5}\u{1F4}\u{FB}\u{2}\u{C63}\u{C68}\u{7}\u{1CE}\u{2}" .
		    "\u{2}\u{C64}\u{C66}\u{7}\u{D}\u{2}\u{2}\u{C65}\u{C64}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{C65}\u{C66}\u{3}\u{2}\u{2}\u{2}\u{C66}\u{C67}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{C67}\u{C69}\u{5}\u{20C}\u{107}\u{2}\u{C68}\u{C65}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{C68}\u{C69}\u{3}\u{2}\u{2}\u{2}\u{C69}\u{C5}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{C6A}\u{C6B}\u{7}\u{177}\u{2}\u{2}\u{C6B}\u{C6C}\u{5}" .
		    "\u{1F4}\u{FB}\u{2}\u{C6C}\u{C6D}\u{7}\u{7A}\u{2}\u{2}\u{C6D}\u{C74}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{C6E}\u{C6F}\u{5}\u{26A}\u{136}\u{2}\u{C6F}" .
		    "\u{C70}\u{7}\u{400}\u{2}\u{2}\u{C70}\u{C71}\u{5}\u{238}\u{11D}\u{2}" .
		    "\u{C71}\u{C72}\u{7}\u{401}\u{2}\u{2}\u{C72}\u{C75}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{C73}\u{C75}\u{9}\u{29}\u{2}\u{2}\u{C74}\u{C6E}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{C74}\u{C73}\u{3}\u{2}\u{2}\u{2}\u{C75}\u{C78}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{C76}\u{C77}\u{7}\u{AE}\u{2}\u{2}\u{C77}\u{C79}\u{5}\u{25C}" .
		    "\u{12F}\u{2}\u{C78}\u{C76}\u{3}\u{2}\u{2}\u{2}\u{C78}\u{C79}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{C79}\u{C7C}\u{3}\u{2}\u{2}\u{2}\u{C7A}\u{C7B}\u{7}" .
		    "\u{5B}\u{2}\u{2}\u{C7B}\u{C7D}\u{5}\u{FE}\u{80}\u{2}\u{C7C}\u{C7A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C7C}\u{C7D}\u{3}\u{2}\u{2}\u{2}\u{C7D}\u{C7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C7E}\u{C7F}\u{7}\u{177}\u{2}\u{2}\u{C7F}\u{C80}" .
		    "\u{5}\u{1F4}\u{FB}\u{2}\u{C80}\u{C81}\u{7}\u{7A}\u{2}\u{2}\u{C81}" .
		    "\u{C84}\u{9}\u{2A}\u{2}\u{2}\u{C82}\u{C83}\u{7}\u{AE}\u{2}\u{2}\u{C83}" .
		    "\u{C85}\u{5}\u{25C}\u{12F}\u{2}\u{C84}\u{C82}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{C84}\u{C85}\u{3}\u{2}\u{2}\u{2}\u{C85}\u{C88}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{C86}\u{C87}\u{7}\u{5B}\u{2}\u{2}\u{C87}\u{C89}\u{5}\u{FE}\u{80}" .
		    "\u{2}\u{C88}\u{C86}\u{3}\u{2}\u{2}\u{2}\u{C88}\u{C89}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{C89}\u{C9}\u{3}\u{2}\u{2}\u{2}\u{C8A}\u{C8B}\u{7}\u{177}\u{2}" .
		    "\u{2}\u{C8B}\u{C8C}\u{5}\u{1F4}\u{FB}\u{2}\u{C8C}\u{C8D}\u{7}\u{12D}" .
		    "\u{2}\u{2}\u{C8D}\u{CB}\u{3}\u{2}\u{2}\u{2}\u{C8E}\u{C90}\u{7}\u{A8}" .
		    "\u{2}\u{2}\u{C8F}\u{C91}\u{7}\u{61}\u{2}\u{2}\u{C90}\u{C8F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{C90}\u{C91}\u{3}\u{2}\u{2}\u{2}\u{C91}\u{C93}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{C92}\u{C94}\u{7}\u{48}\u{2}\u{2}\u{C93}\u{C92}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{C93}\u{C94}\u{3}\u{2}\u{2}\u{2}\u{C94}\u{C95}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{C95}\u{C9A}\u{5}\u{1F4}\u{FB}\u{2}\u{C96}\u{C98}\u{7}" .
		    "\u{D}\u{2}\u{2}\u{C97}\u{C96}\u{3}\u{2}\u{2}\u{2}\u{C97}\u{C98}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{C98}\u{C99}\u{3}\u{2}\u{2}\u{2}\u{C99}\u{C9B}\u{5}" .
		    "\u{20C}\u{107}\u{2}\u{C9A}\u{C97}\u{3}\u{2}\u{2}\u{2}\u{C9A}\u{C9B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{C9B}\u{C9C}\u{3}\u{2}\u{2}\u{2}\u{C9C}\u{C9D}" .
		    "\u{7}\u{8C}\u{2}\u{2}\u{C9D}\u{CA2}\u{5}\u{BA}\u{5E}\u{2}\u{C9E}\u{C9F}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{C9F}\u{CA1}\u{5}\u{BA}\u{5E}\u{2}\u{CA0}" .
		    "\u{C9E}\u{3}\u{2}\u{2}\u{2}\u{CA1}\u{CA4}\u{3}\u{2}\u{2}\u{2}\u{CA2}" .
		    "\u{CA0}\u{3}\u{2}\u{2}\u{2}\u{CA2}\u{CA3}\u{3}\u{2}\u{2}\u{2}\u{CA3}" .
		    "\u{CA7}\u{3}\u{2}\u{2}\u{2}\u{CA4}\u{CA2}\u{3}\u{2}\u{2}\u{2}\u{CA5}" .
		    "\u{CA6}\u{7}\u{AE}\u{2}\u{2}\u{CA6}\u{CA8}\u{5}\u{260}\u{131}\u{2}" .
		    "\u{CA7}\u{CA5}\u{3}\u{2}\u{2}\u{2}\u{CA7}\u{CA8}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{CA8}\u{CAA}\u{3}\u{2}\u{2}\u{2}\u{CA9}\u{CAB}\u{5}\u{D0}\u{69}" .
		    "\u{2}\u{CAA}\u{CA9}\u{3}\u{2}\u{2}\u{2}\u{CAA}\u{CAB}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{CAB}\u{CAD}\u{3}\u{2}\u{2}\u{2}\u{CAC}\u{CAE}\u{5}\u{FC}\u{7F}" .
		    "\u{2}\u{CAD}\u{CAC}\u{3}\u{2}\u{2}\u{2}\u{CAD}\u{CAE}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{CAE}\u{CD}\u{3}\u{2}\u{2}\u{2}\u{CAF}\u{CB1}\u{7}\u{A8}\u{2}" .
		    "\u{2}\u{CB0}\u{CB2}\u{7}\u{61}\u{2}\u{2}\u{CB1}\u{CB0}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{CB1}\u{CB2}\u{3}\u{2}\u{2}\u{2}\u{CB2}\u{CB4}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{CB3}\u{CB5}\u{7}\u{48}\u{2}\u{2}\u{CB4}\u{CB3}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{CB4}\u{CB5}\u{3}\u{2}\u{2}\u{2}\u{CB5}\u{CB6}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{CB6}\u{CB7}\u{5}\u{D4}\u{6B}\u{2}\u{CB7}\u{CB8}\u{7}\u{8C}" .
		    "\u{2}\u{2}\u{CB8}\u{CBD}\u{5}\u{BA}\u{5E}\u{2}\u{CB9}\u{CBA}\u{7}" .
		    "\u{402}\u{2}\u{2}\u{CBA}\u{CBC}\u{5}\u{BA}\u{5E}\u{2}\u{CBB}\u{CB9}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{CBC}\u{CBF}\u{3}\u{2}\u{2}\u{2}\u{CBD}\u{CBB}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{CBD}\u{CBE}\u{3}\u{2}\u{2}\u{2}\u{CBE}\u{CC2}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{CBF}\u{CBD}\u{3}\u{2}\u{2}\u{2}\u{CC0}\u{CC1}" .
		    "\u{7}\u{AE}\u{2}\u{2}\u{CC1}\u{CC3}\u{5}\u{25C}\u{12F}\u{2}\u{CC2}" .
		    "\u{CC0}\u{3}\u{2}\u{2}\u{2}\u{CC2}\u{CC3}\u{3}\u{2}\u{2}\u{2}\u{CC3}" .
		    "\u{CF}\u{3}\u{2}\u{2}\u{2}\u{CC4}\u{CC5}\u{7}\u{71}\u{2}\u{2}\u{CC5}" .
		    "\u{CC6}\u{7}\u{12}\u{2}\u{2}\u{CC6}\u{CCB}\u{5}\u{D2}\u{6A}\u{2}\u{CC7}" .
		    "\u{CC8}\u{7}\u{402}\u{2}\u{2}\u{CC8}\u{CCA}\u{5}\u{D2}\u{6A}\u{2}" .
		    "\u{CC9}\u{CC7}\u{3}\u{2}\u{2}\u{2}\u{CCA}\u{CCD}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{CCB}\u{CC9}\u{3}\u{2}\u{2}\u{2}\u{CCB}\u{CCC}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{CCC}\u{D1}\u{3}\u{2}\u{2}\u{2}\u{CCD}\u{CCB}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{CCE}\u{CD0}\u{5}\u{25C}\u{12F}\u{2}\u{CCF}\u{CD1}\u{9}\u{2B}\u{2}" .
		    "\u{2}\u{CD0}\u{CCF}\u{3}\u{2}\u{2}\u{2}\u{CD0}\u{CD1}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{CD1}\u{D3}\u{3}\u{2}\u{2}\u{2}\u{CD2}\u{CD7}\u{5}\u{D6}\u{6C}" .
		    "\u{2}\u{CD3}\u{CD4}\u{7}\u{402}\u{2}\u{2}\u{CD4}\u{CD6}\u{5}\u{D6}" .
		    "\u{6C}\u{2}\u{CD5}\u{CD3}\u{3}\u{2}\u{2}\u{2}\u{CD6}\u{CD9}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{CD7}\u{CD5}\u{3}\u{2}\u{2}\u{2}\u{CD7}\u{CD8}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{CD8}\u{D5}\u{3}\u{2}\u{2}\u{2}\u{CD9}\u{CD7}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{CDA}\u{CDE}\u{5}\u{D8}\u{6D}\u{2}\u{CDB}\u{CDD}\u{5}" .
		    "\u{DE}\u{70}\u{2}\u{CDC}\u{CDB}\u{3}\u{2}\u{2}\u{2}\u{CDD}\u{CE0}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{CDE}\u{CDC}\u{3}\u{2}\u{2}\u{2}\u{CDE}\u{CDF}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{CDF}\u{CEC}\u{3}\u{2}\u{2}\u{2}\u{CE0}\u{CDE}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{CE1}\u{CE2}\u{7}\u{400}\u{2}\u{2}\u{CE2}\u{CE6}" .
		    "\u{5}\u{D8}\u{6D}\u{2}\u{CE3}\u{CE5}\u{5}\u{DE}\u{70}\u{2}\u{CE4}" .
		    "\u{CE3}\u{3}\u{2}\u{2}\u{2}\u{CE5}\u{CE8}\u{3}\u{2}\u{2}\u{2}\u{CE6}" .
		    "\u{CE4}\u{3}\u{2}\u{2}\u{2}\u{CE6}\u{CE7}\u{3}\u{2}\u{2}\u{2}\u{CE7}" .
		    "\u{CE9}\u{3}\u{2}\u{2}\u{2}\u{CE8}\u{CE6}\u{3}\u{2}\u{2}\u{2}\u{CE9}" .
		    "\u{CEA}\u{7}\u{401}\u{2}\u{2}\u{CEA}\u{CEC}\u{3}\u{2}\u{2}\u{2}\u{CEB}" .
		    "\u{CDA}\u{3}\u{2}\u{2}\u{2}\u{CEB}\u{CE1}\u{3}\u{2}\u{2}\u{2}\u{CEC}" .
		    "\u{D7}\u{3}\u{2}\u{2}\u{2}\u{CED}\u{CF3}\u{5}\u{1F4}\u{FB}\u{2}\u{CEE}" .
		    "\u{CEF}\u{7}\u{75}\u{2}\u{2}\u{CEF}\u{CF0}\u{7}\u{400}\u{2}\u{2}\u{CF0}" .
		    "\u{CF1}\u{5}\u{22C}\u{117}\u{2}\u{CF1}\u{CF2}\u{7}\u{401}\u{2}\u{2}" .
		    "\u{CF2}\u{CF4}\u{3}\u{2}\u{2}\u{2}\u{CF3}\u{CEE}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{CF3}\u{CF4}\u{3}\u{2}\u{2}\u{2}\u{CF4}\u{CF9}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{CF5}\u{CF7}\u{7}\u{D}\u{2}\u{2}\u{CF6}\u{CF5}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{CF6}\u{CF7}\u{3}\u{2}\u{2}\u{2}\u{CF7}\u{CF8}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{CF8}\u{CFA}\u{5}\u{20C}\u{107}\u{2}\u{CF9}\u{CF6}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{CF9}\u{CFA}\u{3}\u{2}\u{2}\u{2}\u{CFA}\u{D03}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{CFB}\u{D00}\u{5}\u{DA}\u{6E}\u{2}\u{CFC}\u{CFD}\u{7}\u{402}" .
		    "\u{2}\u{2}\u{CFD}\u{CFF}\u{5}\u{DA}\u{6E}\u{2}\u{CFE}\u{CFC}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{CFF}\u{D02}\u{3}\u{2}\u{2}\u{2}\u{D00}\u{CFE}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{D00}\u{D01}\u{3}\u{2}\u{2}\u{2}\u{D01}\u{D04}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{D02}\u{D00}\u{3}\u{2}\u{2}\u{2}\u{D03}\u{CFB}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{D03}\u{D04}\u{3}\u{2}\u{2}\u{2}\u{D04}\u{D16}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{D05}\u{D0B}\u{5}\u{B4}\u{5B}\u{2}\u{D06}\u{D07}" .
		    "\u{7}\u{400}\u{2}\u{2}\u{D07}\u{D08}\u{5}\u{B4}\u{5B}\u{2}\u{D08}" .
		    "\u{D09}\u{7}\u{401}\u{2}\u{2}\u{D09}\u{D0B}\u{3}\u{2}\u{2}\u{2}\u{D0A}" .
		    "\u{D05}\u{3}\u{2}\u{2}\u{2}\u{D0A}\u{D06}\u{3}\u{2}\u{2}\u{2}\u{D0B}" .
		    "\u{D0D}\u{3}\u{2}\u{2}\u{2}\u{D0C}\u{D0E}\u{7}\u{D}\u{2}\u{2}\u{D0D}" .
		    "\u{D0C}\u{3}\u{2}\u{2}\u{2}\u{D0D}\u{D0E}\u{3}\u{2}\u{2}\u{2}\u{D0E}" .
		    "\u{D0F}\u{3}\u{2}\u{2}\u{2}\u{D0F}\u{D10}\u{5}\u{20C}\u{107}\u{2}" .
		    "\u{D10}\u{D16}\u{3}\u{2}\u{2}\u{2}\u{D11}\u{D12}\u{7}\u{400}\u{2}" .
		    "\u{2}\u{D12}\u{D13}\u{5}\u{D4}\u{6B}\u{2}\u{D13}\u{D14}\u{7}\u{401}" .
		    "\u{2}\u{2}\u{D14}\u{D16}\u{3}\u{2}\u{2}\u{2}\u{D15}\u{CED}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{D15}\u{D0A}\u{3}\u{2}\u{2}\u{2}\u{D15}\u{D11}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{D16}\u{D9}\u{3}\u{2}\u{2}\u{2}\u{D17}\u{D18}\u{9}\u{2C}" .
		    "\u{2}\u{2}\u{D18}\u{D1B}\u{9}\u{14}\u{2}\u{2}\u{D19}\u{D1A}\u{7}\u{3C}" .
		    "\u{2}\u{2}\u{D1A}\u{D1C}\u{5}\u{DC}\u{6F}\u{2}\u{D1B}\u{D19}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{D1B}\u{D1C}\u{3}\u{2}\u{2}\u{2}\u{D1C}\u{D1D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{D1D}\u{D1E}\u{7}\u{400}\u{2}\u{2}\u{D1E}\u{D1F}" .
		    "\u{5}\u{22C}\u{117}\u{2}\u{D1F}\u{D20}\u{7}\u{401}\u{2}\u{2}\u{D20}" .
		    "\u{DB}\u{3}\u{2}\u{2}\u{2}\u{D21}\u{D27}\u{7}\u{53}\u{2}\u{2}\u{D22}" .
		    "\u{D23}\u{7}\u{71}\u{2}\u{2}\u{D23}\u{D27}\u{7}\u{12}\u{2}\u{2}\u{D24}" .
		    "\u{D25}\u{7}\u{44}\u{2}\u{2}\u{D25}\u{D27}\u{7}\u{12}\u{2}\u{2}\u{D26}" .
		    "\u{D21}\u{3}\u{2}\u{2}\u{2}\u{D26}\u{D22}\u{3}\u{2}\u{2}\u{2}\u{D26}" .
		    "\u{D24}\u{3}\u{2}\u{2}\u{2}\u{D27}\u{DD}\u{3}\u{2}\u{2}\u{2}\u{D28}" .
		    "\u{D2A}\u{9}\u{2D}\u{2}\u{2}\u{D29}\u{D28}\u{3}\u{2}\u{2}\u{2}\u{D29}" .
		    "\u{D2A}\u{3}\u{2}\u{2}\u{2}\u{D2A}\u{D2B}\u{3}\u{2}\u{2}\u{2}\u{D2B}" .
		    "\u{D2C}\u{7}\u{53}\u{2}\u{2}\u{D2C}\u{D34}\u{5}\u{D8}\u{6D}\u{2}\u{D2D}" .
		    "\u{D2E}\u{7}\u{6C}\u{2}\u{2}\u{D2E}\u{D35}\u{5}\u{25C}\u{12F}\u{2}" .
		    "\u{D2F}\u{D30}\u{7}\u{AB}\u{2}\u{2}\u{D30}\u{D31}\u{7}\u{400}\u{2}" .
		    "\u{2}\u{D31}\u{D32}\u{5}\u{22C}\u{117}\u{2}\u{D32}\u{D33}\u{7}\u{401}" .
		    "\u{2}\u{2}\u{D33}\u{D35}\u{3}\u{2}\u{2}\u{2}\u{D34}\u{D2D}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{D34}\u{D2F}\u{3}\u{2}\u{2}\u{2}\u{D34}\u{D35}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{D35}\u{D55}\u{3}\u{2}\u{2}\u{2}\u{D36}\u{D37}\u{7}\u{9B}" .
		    "\u{2}\u{2}\u{D37}\u{D3A}\u{5}\u{D8}\u{6D}\u{2}\u{D38}\u{D39}\u{7}" .
		    "\u{6C}\u{2}\u{2}\u{D39}\u{D3B}\u{5}\u{25C}\u{12F}\u{2}\u{D3A}\u{D38}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{D3A}\u{D3B}\u{3}\u{2}\u{2}\u{2}\u{D3B}\u{D55}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{D3C}\u{D3E}\u{9}\u{2E}\u{2}\u{2}\u{D3D}\u{D3F}" .
		    "\u{7}\u{73}\u{2}\u{2}\u{D3E}\u{D3D}\u{3}\u{2}\u{2}\u{2}\u{D3E}\u{D3F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{D3F}\u{D40}\u{3}\u{2}\u{2}\u{2}\u{D40}\u{D41}" .
		    "\u{7}\u{53}\u{2}\u{2}\u{D41}\u{D49}\u{5}\u{D8}\u{6D}\u{2}\u{D42}\u{D43}" .
		    "\u{7}\u{6C}\u{2}\u{2}\u{D43}\u{D4A}\u{5}\u{25C}\u{12F}\u{2}\u{D44}" .
		    "\u{D45}\u{7}\u{AB}\u{2}\u{2}\u{D45}\u{D46}\u{7}\u{400}\u{2}\u{2}\u{D46}" .
		    "\u{D47}\u{5}\u{22C}\u{117}\u{2}\u{D47}\u{D48}\u{7}\u{401}\u{2}\u{2}" .
		    "\u{D48}\u{D4A}\u{3}\u{2}\u{2}\u{2}\u{D49}\u{D42}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{D49}\u{D44}\u{3}\u{2}\u{2}\u{2}\u{D4A}\u{D55}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{D4B}\u{D50}\u{7}\u{67}\u{2}\u{2}\u{D4C}\u{D4E}\u{9}\u{2E}\u{2}" .
		    "\u{2}\u{D4D}\u{D4F}\u{7}\u{73}\u{2}\u{2}\u{D4E}\u{D4D}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{D4E}\u{D4F}\u{3}\u{2}\u{2}\u{2}\u{D4F}\u{D51}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{D50}\u{D4C}\u{3}\u{2}\u{2}\u{2}\u{D50}\u{D51}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{D51}\u{D52}\u{3}\u{2}\u{2}\u{2}\u{D52}\u{D53}\u{7}\u{53}\u{2}" .
		    "\u{2}\u{D53}\u{D55}\u{5}\u{D8}\u{6D}\u{2}\u{D54}\u{D29}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{D54}\u{D36}\u{3}\u{2}\u{2}\u{2}\u{D54}\u{D3C}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{D54}\u{D4B}\u{3}\u{2}\u{2}\u{2}\u{D55}\u{DF}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{D56}\u{D57}\u{7}\u{400}\u{2}\u{2}\u{D57}\u{D58}\u{5}" .
		    "\u{E4}\u{73}\u{2}\u{D58}\u{D59}\u{7}\u{401}\u{2}\u{2}\u{D59}\u{D5F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{D5A}\u{D5B}\u{7}\u{400}\u{2}\u{2}\u{D5B}\u{D5C}" .
		    "\u{5}\u{E0}\u{71}\u{2}\u{D5C}\u{D5D}\u{7}\u{401}\u{2}\u{2}\u{D5D}" .
		    "\u{D5F}\u{3}\u{2}\u{2}\u{2}\u{D5E}\u{D56}\u{3}\u{2}\u{2}\u{2}\u{D5E}" .
		    "\u{D5A}\u{3}\u{2}\u{2}\u{2}\u{D5F}\u{E1}\u{3}\u{2}\u{2}\u{2}\u{D60}" .
		    "\u{D61}\u{7}\u{400}\u{2}\u{2}\u{D61}\u{D62}\u{5}\u{E6}\u{74}\u{2}" .
		    "\u{D62}\u{D63}\u{7}\u{401}\u{2}\u{2}\u{D63}\u{D69}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{D64}\u{D65}\u{7}\u{400}\u{2}\u{2}\u{D65}\u{D66}\u{5}\u{E2}" .
		    "\u{72}\u{2}\u{D66}\u{D67}\u{7}\u{401}\u{2}\u{2}\u{D67}\u{D69}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{D68}\u{D60}\u{3}\u{2}\u{2}\u{2}\u{D68}\u{D64}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{D69}\u{E3}\u{3}\u{2}\u{2}\u{2}\u{D6A}\u{D6E}\u{7}" .
		    "\u{8B}\u{2}\u{2}\u{D6B}\u{D6D}\u{5}\u{EC}\u{77}\u{2}\u{D6C}\u{D6B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{D6D}\u{D70}\u{3}\u{2}\u{2}\u{2}\u{D6E}\u{D6C}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{D6E}\u{D6F}\u{3}\u{2}\u{2}\u{2}\u{D6F}\u{D71}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{D70}\u{D6E}\u{3}\u{2}\u{2}\u{2}\u{D71}\u{D73}" .
		    "\u{5}\u{EE}\u{78}\u{2}\u{D72}\u{D74}\u{5}\u{F2}\u{7A}\u{2}\u{D73}" .
		    "\u{D72}\u{3}\u{2}\u{2}\u{2}\u{D73}\u{D74}\u{3}\u{2}\u{2}\u{2}\u{D74}" .
		    "\u{D76}\u{3}\u{2}\u{2}\u{2}\u{D75}\u{D77}\u{5}\u{F8}\u{7D}\u{2}\u{D76}" .
		    "\u{D75}\u{3}\u{2}\u{2}\u{2}\u{D76}\u{D77}\u{3}\u{2}\u{2}\u{2}\u{D77}" .
		    "\u{D79}\u{3}\u{2}\u{2}\u{2}\u{D78}\u{D7A}\u{5}\u{D0}\u{69}\u{2}\u{D79}" .
		    "\u{D78}\u{3}\u{2}\u{2}\u{2}\u{D79}\u{D7A}\u{3}\u{2}\u{2}\u{2}\u{D7A}" .
		    "\u{D7C}\u{3}\u{2}\u{2}\u{2}\u{D7B}\u{D7D}\u{5}\u{FC}\u{7F}\u{2}\u{D7C}" .
		    "\u{D7B}\u{3}\u{2}\u{2}\u{2}\u{D7C}\u{D7D}\u{3}\u{2}\u{2}\u{2}\u{D7D}" .
		    "\u{D93}\u{3}\u{2}\u{2}\u{2}\u{D7E}\u{D82}\u{7}\u{8B}\u{2}\u{2}\u{D7F}" .
		    "\u{D81}\u{5}\u{EC}\u{77}\u{2}\u{D80}\u{D7F}\u{3}\u{2}\u{2}\u{2}\u{D81}" .
		    "\u{D84}\u{3}\u{2}\u{2}\u{2}\u{D82}\u{D80}\u{3}\u{2}\u{2}\u{2}\u{D82}" .
		    "\u{D83}\u{3}\u{2}\u{2}\u{2}\u{D83}\u{D85}\u{3}\u{2}\u{2}\u{2}\u{D84}" .
		    "\u{D82}\u{3}\u{2}\u{2}\u{2}\u{D85}\u{D87}\u{5}\u{EE}\u{78}\u{2}\u{D86}" .
		    "\u{D88}\u{5}\u{F8}\u{7D}\u{2}\u{D87}\u{D86}\u{3}\u{2}\u{2}\u{2}\u{D87}" .
		    "\u{D88}\u{3}\u{2}\u{2}\u{2}\u{D88}\u{D8A}\u{3}\u{2}\u{2}\u{2}\u{D89}" .
		    "\u{D8B}\u{5}\u{D0}\u{69}\u{2}\u{D8A}\u{D89}\u{3}\u{2}\u{2}\u{2}\u{D8A}" .
		    "\u{D8B}\u{3}\u{2}\u{2}\u{2}\u{D8B}\u{D8D}\u{3}\u{2}\u{2}\u{2}\u{D8C}" .
		    "\u{D8E}\u{5}\u{FC}\u{7F}\u{2}\u{D8D}\u{D8C}\u{3}\u{2}\u{2}\u{2}\u{D8D}" .
		    "\u{D8E}\u{3}\u{2}\u{2}\u{2}\u{D8E}\u{D90}\u{3}\u{2}\u{2}\u{2}\u{D8F}" .
		    "\u{D91}\u{5}\u{F2}\u{7A}\u{2}\u{D90}\u{D8F}\u{3}\u{2}\u{2}\u{2}\u{D90}" .
		    "\u{D91}\u{3}\u{2}\u{2}\u{2}\u{D91}\u{D93}\u{3}\u{2}\u{2}\u{2}\u{D92}" .
		    "\u{D6A}\u{3}\u{2}\u{2}\u{2}\u{D92}\u{D7E}\u{3}\u{2}\u{2}\u{2}\u{D93}" .
		    "\u{E5}\u{3}\u{2}\u{2}\u{2}\u{D94}\u{D98}\u{7}\u{8B}\u{2}\u{2}\u{D95}" .
		    "\u{D97}\u{5}\u{EC}\u{77}\u{2}\u{D96}\u{D95}\u{3}\u{2}\u{2}\u{2}\u{D97}" .
		    "\u{D9A}\u{3}\u{2}\u{2}\u{2}\u{D98}\u{D96}\u{3}\u{2}\u{2}\u{2}\u{D98}" .
		    "\u{D99}\u{3}\u{2}\u{2}\u{2}\u{D99}\u{D9B}\u{3}\u{2}\u{2}\u{2}\u{D9A}" .
		    "\u{D98}\u{3}\u{2}\u{2}\u{2}\u{D9B}\u{D9D}\u{5}\u{EE}\u{78}\u{2}\u{D9C}" .
		    "\u{D9E}\u{5}\u{F8}\u{7D}\u{2}\u{D9D}\u{D9C}\u{3}\u{2}\u{2}\u{2}\u{D9D}" .
		    "\u{D9E}\u{3}\u{2}\u{2}\u{2}\u{D9E}\u{DA0}\u{3}\u{2}\u{2}\u{2}\u{D9F}" .
		    "\u{DA1}\u{5}\u{D0}\u{69}\u{2}\u{DA0}\u{D9F}\u{3}\u{2}\u{2}\u{2}\u{DA0}" .
		    "\u{DA1}\u{3}\u{2}\u{2}\u{2}\u{DA1}\u{DA3}\u{3}\u{2}\u{2}\u{2}\u{DA2}" .
		    "\u{DA4}\u{5}\u{FC}\u{7F}\u{2}\u{DA3}\u{DA2}\u{3}\u{2}\u{2}\u{2}\u{DA3}" .
		    "\u{DA4}\u{3}\u{2}\u{2}\u{2}\u{DA4}\u{E7}\u{3}\u{2}\u{2}\u{2}\u{DA5}" .
		    "\u{DA7}\u{7}\u{A4}\u{2}\u{2}\u{DA6}\u{DA8}\u{9}\u{27}\u{2}\u{2}\u{DA7}" .
		    "\u{DA6}\u{3}\u{2}\u{2}\u{2}\u{DA7}\u{DA8}\u{3}\u{2}\u{2}\u{2}\u{DA8}" .
		    "\u{DA9}\u{3}\u{2}\u{2}\u{2}\u{DA9}\u{DAA}\u{5}\u{E2}\u{72}\u{2}\u{DAA}" .
		    "\u{E9}\u{3}\u{2}\u{2}\u{2}\u{DAB}\u{DAD}\u{7}\u{A4}\u{2}\u{2}\u{DAC}" .
		    "\u{DAE}\u{9}\u{27}\u{2}\u{2}\u{DAD}\u{DAC}\u{3}\u{2}\u{2}\u{2}\u{DAD}" .
		    "\u{DAE}\u{3}\u{2}\u{2}\u{2}\u{DAE}\u{DB1}\u{3}\u{2}\u{2}\u{2}\u{DAF}" .
		    "\u{DB2}\u{5}\u{E6}\u{74}\u{2}\u{DB0}\u{DB2}\u{5}\u{E2}\u{72}\u{2}" .
		    "\u{DB1}\u{DAF}\u{3}\u{2}\u{2}\u{2}\u{DB1}\u{DB0}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{DB2}\u{EB}\u{3}\u{2}\u{2}\u{2}\u{DB3}\u{DBC}\u{9}\u{2F}\u{2}\u{2}" .
		    "\u{DB4}\u{DBC}\u{7}\u{46}\u{2}\u{2}\u{DB5}\u{DBC}\u{7}\u{9B}\u{2}" .
		    "\u{2}\u{DB6}\u{DBC}\u{7}\u{97}\u{2}\u{2}\u{DB7}\u{DBC}\u{7}\u{95}" .
		    "\u{2}\u{2}\u{DB8}\u{DBC}\u{7}\u{21A}\u{2}\u{2}\u{DB9}\u{DBC}\u{9}" .
		    "\u{30}\u{2}\u{2}\u{DBA}\u{DBC}\u{7}\u{96}\u{2}\u{2}\u{DBB}\u{DB3}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{DBB}\u{DB4}\u{3}\u{2}\u{2}\u{2}\u{DBB}\u{DB5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{DBB}\u{DB6}\u{3}\u{2}\u{2}\u{2}\u{DBB}\u{DB7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{DBB}\u{DB8}\u{3}\u{2}\u{2}\u{2}\u{DBB}\u{DB9}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{DBB}\u{DBA}\u{3}\u{2}\u{2}\u{2}\u{DBC}\u{ED}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{DBD}\u{DC0}\u{7}\u{3EF}\u{2}\u{2}\u{DBE}\u{DC0}" .
		    "\u{5}\u{F0}\u{79}\u{2}\u{DBF}\u{DBD}\u{3}\u{2}\u{2}\u{2}\u{DBF}\u{DBE}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{DC0}\u{DC5}\u{3}\u{2}\u{2}\u{2}\u{DC1}\u{DC2}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{DC2}\u{DC4}\u{5}\u{F0}\u{79}\u{2}\u{DC3}" .
		    "\u{DC1}\u{3}\u{2}\u{2}\u{2}\u{DC4}\u{DC7}\u{3}\u{2}\u{2}\u{2}\u{DC5}" .
		    "\u{DC3}\u{3}\u{2}\u{2}\u{2}\u{DC5}\u{DC6}\u{3}\u{2}\u{2}\u{2}\u{DC6}" .
		    "\u{EF}\u{3}\u{2}\u{2}\u{2}\u{DC7}\u{DC5}\u{3}\u{2}\u{2}\u{2}\u{DC8}" .
		    "\u{DC9}\u{5}\u{1F2}\u{FA}\u{2}\u{DC9}\u{DCA}\u{7}\u{3FF}\u{2}\u{2}" .
		    "\u{DCA}\u{DCB}\u{7}\u{3EF}\u{2}\u{2}\u{DCB}\u{DE6}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{DCC}\u{DD1}\u{5}\u{1F6}\u{FC}\u{2}\u{DCD}\u{DCF}\u{7}\u{D}" .
		    "\u{2}\u{2}\u{DCE}\u{DCD}\u{3}\u{2}\u{2}\u{2}\u{DCE}\u{DCF}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{DCF}\u{DD0}\u{3}\u{2}\u{2}\u{2}\u{DD0}\u{DD2}\u{5}\u{20C}" .
		    "\u{107}\u{2}\u{DD1}\u{DCE}\u{3}\u{2}\u{2}\u{2}\u{DD1}\u{DD2}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{DD2}\u{DE6}\u{3}\u{2}\u{2}\u{2}\u{DD3}\u{DD8}\u{5}" .
		    "\u{248}\u{125}\u{2}\u{DD4}\u{DD6}\u{7}\u{D}\u{2}\u{2}\u{DD5}\u{DD4}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{DD5}\u{DD6}\u{3}\u{2}\u{2}\u{2}\u{DD6}\u{DD7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{DD7}\u{DD9}\u{5}\u{20C}\u{107}\u{2}\u{DD8}" .
		    "\u{DD5}\u{3}\u{2}\u{2}\u{2}\u{DD8}\u{DD9}\u{3}\u{2}\u{2}\u{2}\u{DD9}" .
		    "\u{DE6}\u{3}\u{2}\u{2}\u{2}\u{DDA}\u{DDB}\u{7}\u{41A}\u{2}\u{2}\u{DDB}" .
		    "\u{DDD}\u{7}\u{3E6}\u{2}\u{2}\u{DDC}\u{DDA}\u{3}\u{2}\u{2}\u{2}\u{DDC}" .
		    "\u{DDD}\u{3}\u{2}\u{2}\u{2}\u{DDD}\u{DDE}\u{3}\u{2}\u{2}\u{2}\u{DDE}" .
		    "\u{DE3}\u{5}\u{25C}\u{12F}\u{2}\u{DDF}\u{DE1}\u{7}\u{D}\u{2}\u{2}" .
		    "\u{DE0}\u{DDF}\u{3}\u{2}\u{2}\u{2}\u{DE0}\u{DE1}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{DE1}\u{DE2}\u{3}\u{2}\u{2}\u{2}\u{DE2}\u{DE4}\u{5}\u{20C}\u{107}" .
		    "\u{2}\u{DE3}\u{DE0}\u{3}\u{2}\u{2}\u{2}\u{DE3}\u{DE4}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{DE4}\u{DE6}\u{3}\u{2}\u{2}\u{2}\u{DE5}\u{DC8}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{DE5}\u{DCC}\u{3}\u{2}\u{2}\u{2}\u{DE5}\u{DD3}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{DE5}\u{DDC}\u{3}\u{2}\u{2}\u{2}\u{DE6}\u{F1}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{DE7}\u{DE8}\u{7}\u{50}\u{2}\u{2}\u{DE8}\u{DED}\u{5}\u{BC}" .
		    "\u{5F}\u{2}\u{DE9}\u{DEA}\u{7}\u{402}\u{2}\u{2}\u{DEA}\u{DEC}\u{5}" .
		    "\u{BC}\u{5F}\u{2}\u{DEB}\u{DE9}\u{3}\u{2}\u{2}\u{2}\u{DEC}\u{DEF}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{DED}\u{DEB}\u{3}\u{2}\u{2}\u{2}\u{DED}\u{DEE}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{DEE}\u{E0C}\u{3}\u{2}\u{2}\u{2}\u{DEF}\u{DED}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{DF0}\u{DF1}\u{7}\u{50}\u{2}\u{2}\u{DF1}\u{DF2}" .
		    "\u{7}\u{151}\u{2}\u{2}\u{DF2}\u{E0C}\u{7}\u{40F}\u{2}\u{2}\u{DF3}" .
		    "\u{DF4}\u{7}\u{50}\u{2}\u{2}\u{DF4}\u{DF5}\u{7}\u{74}\u{2}\u{2}\u{DF5}" .
		    "\u{DF9}\u{7}\u{40F}\u{2}\u{2}\u{DF6}\u{DF7}\u{7}\u{18}\u{2}\u{2}\u{DF7}" .
		    "\u{DF8}\u{7}\u{8C}\u{2}\u{2}\u{DF8}\u{DFA}\u{5}\u{1FE}\u{100}\u{2}" .
		    "\u{DF9}\u{DF6}\u{3}\u{2}\u{2}\u{2}\u{DF9}\u{DFA}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{DFA}\u{E01}\u{3}\u{2}\u{2}\u{2}\u{DFB}\u{DFD}\u{9}\u{24}\u{2}\u{2}" .
		    "\u{DFC}\u{DFE}\u{5}\u{F4}\u{7B}\u{2}\u{DFD}\u{DFC}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{DFE}\u{DFF}\u{3}\u{2}\u{2}\u{2}\u{DFF}\u{DFD}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{DFF}\u{E00}\u{3}\u{2}\u{2}\u{2}\u{E00}\u{E02}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{E01}\u{DFB}\u{3}\u{2}\u{2}\u{2}\u{E01}\u{E02}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{E02}\u{E09}\u{3}\u{2}\u{2}\u{2}\u{E03}\u{E05}\u{7}\u{5D}\u{2}" .
		    "\u{2}\u{E04}\u{E06}\u{5}\u{F6}\u{7C}\u{2}\u{E05}\u{E04}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{E06}\u{E07}\u{3}\u{2}\u{2}\u{2}\u{E07}\u{E05}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{E07}\u{E08}\u{3}\u{2}\u{2}\u{2}\u{E08}\u{E0A}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{E09}\u{E03}\u{3}\u{2}\u{2}\u{2}\u{E09}\u{E0A}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{E0A}\u{E0C}\u{3}\u{2}\u{2}\u{2}\u{E0B}\u{DE7}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{E0B}\u{DF0}\u{3}\u{2}\u{2}\u{2}\u{E0B}\u{DF3}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{E0C}\u{F3}\u{3}\u{2}\u{2}\u{2}\u{E0D}\u{E0E}\u{7}\u{9D}" .
		    "\u{2}\u{2}\u{E0E}\u{E0F}\u{7}\u{12}\u{2}\u{2}\u{E0F}\u{E1A}\u{7}\u{40F}" .
		    "\u{2}\u{2}\u{E10}\u{E12}\u{7}\u{6F}\u{2}\u{2}\u{E11}\u{E10}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{E11}\u{E12}\u{3}\u{2}\u{2}\u{2}\u{E12}\u{E13}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{E13}\u{E14}\u{7}\u{35}\u{2}\u{2}\u{E14}\u{E15}\u{7}\u{12}" .
		    "\u{2}\u{2}\u{E15}\u{E1A}\u{7}\u{40F}\u{2}\u{2}\u{E16}\u{E17}\u{7}" .
		    "\u{36}\u{2}\u{2}\u{E17}\u{E18}\u{7}\u{12}\u{2}\u{2}\u{E18}\u{E1A}" .
		    "\u{7}\u{40F}\u{2}\u{2}\u{E19}\u{E0D}\u{3}\u{2}\u{2}\u{2}\u{E19}\u{E11}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{E19}\u{E16}\u{3}\u{2}\u{2}\u{2}\u{E1A}\u{F5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{E1B}\u{E1C}\u{7}\u{9A}\u{2}\u{2}\u{E1C}\u{E1D}" .
		    "\u{7}\u{12}\u{2}\u{2}\u{E1D}\u{E22}\u{7}\u{40F}\u{2}\u{2}\u{E1E}\u{E1F}" .
		    "\u{7}\u{9D}\u{2}\u{2}\u{E1F}\u{E20}\u{7}\u{12}\u{2}\u{2}\u{E20}\u{E22}" .
		    "\u{7}\u{40F}\u{2}\u{2}\u{E21}\u{E1B}\u{3}\u{2}\u{2}\u{2}\u{E21}\u{E1E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{E22}\u{F7}\u{3}\u{2}\u{2}\u{2}\u{E23}\u{E24}" .
		    "\u{7}\u{3F}\u{2}\u{2}\u{E24}\u{E27}\u{5}\u{D4}\u{6B}\u{2}\u{E25}\u{E26}" .
		    "\u{7}\u{AE}\u{2}\u{2}\u{E26}\u{E28}\u{5}\u{25C}\u{12F}\u{2}\u{E27}" .
		    "\u{E25}\u{3}\u{2}\u{2}\u{2}\u{E27}\u{E28}\u{3}\u{2}\u{2}\u{2}\u{E28}" .
		    "\u{E37}\u{3}\u{2}\u{2}\u{2}\u{E29}\u{E2A}\u{7}\u{44}\u{2}\u{2}\u{E2A}" .
		    "\u{E2B}\u{7}\u{12}\u{2}\u{2}\u{E2B}\u{E30}\u{5}\u{FA}\u{7E}\u{2}\u{E2C}" .
		    "\u{E2D}\u{7}\u{402}\u{2}\u{2}\u{E2D}\u{E2F}\u{5}\u{FA}\u{7E}\u{2}" .
		    "\u{E2E}\u{E2C}\u{3}\u{2}\u{2}\u{2}\u{E2F}\u{E32}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{E30}\u{E2E}\u{3}\u{2}\u{2}\u{2}\u{E30}\u{E31}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{E31}\u{E35}\u{3}\u{2}\u{2}\u{2}\u{E32}\u{E30}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{E33}\u{E34}\u{7}\u{B0}\u{2}\u{2}\u{E34}\u{E36}\u{7}\u{201}\u{2}" .
		    "\u{2}\u{E35}\u{E33}\u{3}\u{2}\u{2}\u{2}\u{E35}\u{E36}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{E36}\u{E38}\u{3}\u{2}\u{2}\u{2}\u{E37}\u{E29}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{E37}\u{E38}\u{3}\u{2}\u{2}\u{2}\u{E38}\u{E3B}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{E39}\u{E3A}\u{7}\u{45}\u{2}\u{2}\u{E3A}\u{E3C}\u{5}\u{25C}" .
		    "\u{12F}\u{2}\u{E3B}\u{E39}\u{3}\u{2}\u{2}\u{2}\u{E3B}\u{E3C}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{E3C}\u{F9}\u{3}\u{2}\u{2}\u{2}\u{E3D}\u{E3F}\u{5}" .
		    "\u{25C}\u{12F}\u{2}\u{E3E}\u{E40}\u{9}\u{2B}\u{2}\u{2}\u{E3F}\u{E3E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{E3F}\u{E40}\u{3}\u{2}\u{2}\u{2}\u{E40}\u{FB}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{E41}\u{E4C}\u{7}\u{5B}\u{2}\u{2}\u{E42}\u{E43}" .
		    "\u{5}\u{FE}\u{80}\u{2}\u{E43}\u{E44}\u{7}\u{402}\u{2}\u{2}\u{E44}" .
		    "\u{E46}\u{3}\u{2}\u{2}\u{2}\u{E45}\u{E42}\u{3}\u{2}\u{2}\u{2}\u{E45}" .
		    "\u{E46}\u{3}\u{2}\u{2}\u{2}\u{E46}\u{E47}\u{3}\u{2}\u{2}\u{2}\u{E47}" .
		    "\u{E4D}\u{5}\u{FE}\u{80}\u{2}\u{E48}\u{E49}\u{5}\u{FE}\u{80}\u{2}" .
		    "\u{E49}\u{E4A}\u{7}\u{1C7}\u{2}\u{2}\u{E4A}\u{E4B}\u{5}\u{FE}\u{80}" .
		    "\u{2}\u{E4B}\u{E4D}\u{3}\u{2}\u{2}\u{2}\u{E4C}\u{E45}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{E4C}\u{E48}\u{3}\u{2}\u{2}\u{2}\u{E4D}\u{FD}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{E4E}\u{E51}\u{5}\u{212}\u{10A}\u{2}\u{E4F}\u{E51}\u{5}\u{1FC}" .
		    "\u{FF}\u{2}\u{E50}\u{E4E}\u{3}\u{2}\u{2}\u{2}\u{E50}\u{E4F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{E51}\u{FF}\u{3}\u{2}\u{2}\u{2}\u{E52}\u{E53}\u{7}\u{21E}" .
		    "\u{2}\u{2}\u{E53}\u{E5C}\u{7}\u{235}\u{2}\u{2}\u{E54}\u{E59}\u{5}" .
		    "\u{116}\u{8C}\u{2}\u{E55}\u{E56}\u{7}\u{402}\u{2}\u{2}\u{E56}\u{E58}" .
		    "\u{5}\u{116}\u{8C}\u{2}\u{E57}\u{E55}\u{3}\u{2}\u{2}\u{2}\u{E58}\u{E5B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{E59}\u{E57}\u{3}\u{2}\u{2}\u{2}\u{E59}\u{E5A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{E5A}\u{E5D}\u{3}\u{2}\u{2}\u{2}\u{E5B}\u{E59}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{E5C}\u{E54}\u{3}\u{2}\u{2}\u{2}\u{E5C}\u{E5D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{E5D}\u{101}\u{3}\u{2}\u{2}\u{2}\u{E5E}\u{E60}" .
		    "\u{7}\u{11C}\u{2}\u{2}\u{E5F}\u{E61}\u{7}\u{24C}\u{2}\u{2}\u{E60}" .
		    "\u{E5F}\u{3}\u{2}\u{2}\u{2}\u{E60}\u{E61}\u{3}\u{2}\u{2}\u{2}\u{E61}" .
		    "\u{103}\u{3}\u{2}\u{2}\u{2}\u{E62}\u{E64}\u{7}\u{134}\u{2}\u{2}\u{E63}" .
		    "\u{E65}\u{7}\u{24C}\u{2}\u{2}\u{E64}\u{E63}\u{3}\u{2}\u{2}\u{2}\u{E64}" .
		    "\u{E65}\u{3}\u{2}\u{2}\u{2}\u{E65}\u{E6B}\u{3}\u{2}\u{2}\u{2}\u{E66}" .
		    "\u{E68}\u{7}\u{C}\u{2}\u{2}\u{E67}\u{E69}\u{7}\u{1C3}\u{2}\u{2}\u{E68}" .
		    "\u{E67}\u{3}\u{2}\u{2}\u{2}\u{E68}\u{E69}\u{3}\u{2}\u{2}\u{2}\u{E69}" .
		    "\u{E6A}\u{3}\u{2}\u{2}\u{2}\u{E6A}\u{E6C}\u{7}\u{125}\u{2}\u{2}\u{E6B}" .
		    "\u{E66}\u{3}\u{2}\u{2}\u{2}\u{E6B}\u{E6C}\u{3}\u{2}\u{2}\u{2}\u{E6C}" .
		    "\u{E71}\u{3}\u{2}\u{2}\u{2}\u{E6D}\u{E6F}\u{7}\u{1C3}\u{2}\u{2}\u{E6E}" .
		    "\u{E6D}\u{3}\u{2}\u{2}\u{2}\u{E6E}\u{E6F}\u{3}\u{2}\u{2}\u{2}\u{E6F}" .
		    "\u{E70}\u{3}\u{2}\u{2}\u{2}\u{E70}\u{E72}\u{7}\u{7E}\u{2}\u{2}\u{E71}" .
		    "\u{E6E}\u{3}\u{2}\u{2}\u{2}\u{E71}\u{E72}\u{3}\u{2}\u{2}\u{2}\u{E72}" .
		    "\u{105}\u{3}\u{2}\u{2}\u{2}\u{E73}\u{E75}\u{7}\u{200}\u{2}\u{2}\u{E74}" .
		    "\u{E76}\u{7}\u{24C}\u{2}\u{2}\u{E75}\u{E74}\u{3}\u{2}\u{2}\u{2}\u{E75}" .
		    "\u{E76}\u{3}\u{2}\u{2}\u{2}\u{E76}\u{E7C}\u{3}\u{2}\u{2}\u{2}\u{E77}" .
		    "\u{E79}\u{7}\u{C}\u{2}\u{2}\u{E78}\u{E7A}\u{7}\u{1C3}\u{2}\u{2}\u{E79}" .
		    "\u{E78}\u{3}\u{2}\u{2}\u{2}\u{E79}\u{E7A}\u{3}\u{2}\u{2}\u{2}\u{E7A}" .
		    "\u{E7B}\u{3}\u{2}\u{2}\u{2}\u{E7B}\u{E7D}\u{7}\u{125}\u{2}\u{2}\u{E7C}" .
		    "\u{E77}\u{3}\u{2}\u{2}\u{2}\u{E7C}\u{E7D}\u{3}\u{2}\u{2}\u{2}\u{E7D}" .
		    "\u{E82}\u{3}\u{2}\u{2}\u{2}\u{E7E}\u{E80}\u{7}\u{1C3}\u{2}\u{2}\u{E7F}" .
		    "\u{E7E}\u{3}\u{2}\u{2}\u{2}\u{E7F}\u{E80}\u{3}\u{2}\u{2}\u{2}\u{E80}" .
		    "\u{E81}\u{3}\u{2}\u{2}\u{2}\u{E81}\u{E83}\u{7}\u{7E}\u{2}\u{2}\u{E82}" .
		    "\u{E7F}\u{3}\u{2}\u{2}\u{2}\u{E82}\u{E83}\u{3}\u{2}\u{2}\u{2}\u{E83}" .
		    "\u{107}\u{3}\u{2}\u{2}\u{2}\u{E84}\u{E85}\u{7}\u{206}\u{2}\u{2}\u{E85}" .
		    "\u{E86}\u{5}\u{20C}\u{107}\u{2}\u{E86}\u{109}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{E87}\u{E89}\u{7}\u{200}\u{2}\u{2}\u{E88}\u{E8A}\u{7}\u{24C}\u{2}" .
		    "\u{2}\u{E89}\u{E88}\u{3}\u{2}\u{2}\u{2}\u{E89}\u{E8A}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{E8A}\u{E8B}\u{3}\u{2}\u{2}\u{2}\u{E8B}\u{E8D}\u{7}\u{9F}\u{2}" .
		    "\u{2}\u{E8C}\u{E8E}\u{7}\u{206}\u{2}\u{2}\u{E8D}\u{E8C}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{E8D}\u{E8E}\u{3}\u{2}\u{2}\u{2}\u{E8E}\u{E8F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{E8F}\u{E90}\u{5}\u{20C}\u{107}\u{2}\u{E90}\u{10B}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{E91}\u{E92}\u{7}\u{7E}\u{2}\u{2}\u{E92}\u{E93}\u{7}" .
		    "\u{206}\u{2}\u{2}\u{E93}\u{E94}\u{5}\u{20C}\u{107}\u{2}\u{E94}\u{10D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{E95}\u{E96}\u{7}\u{5F}\u{2}\u{2}\u{E96}\u{E97}" .
		    "\u{7}\u{25E}\u{2}\u{2}\u{E97}\u{E9C}\u{5}\u{118}\u{8D}\u{2}\u{E98}" .
		    "\u{E99}\u{7}\u{402}\u{2}\u{2}\u{E99}\u{E9B}\u{5}\u{118}\u{8D}\u{2}" .
		    "\u{E9A}\u{E98}\u{3}\u{2}\u{2}\u{2}\u{E9B}\u{E9E}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{E9C}\u{E9A}\u{3}\u{2}\u{2}\u{2}\u{E9C}\u{E9D}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{E9D}\u{10F}\u{3}\u{2}\u{2}\u{2}\u{E9E}\u{E9C}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{E9F}\u{EA0}\u{7}\u{A6}\u{2}\u{2}\u{EA0}\u{EA1}\u{7}\u{25E}\u{2}" .
		    "\u{2}\u{EA1}\u{111}\u{3}\u{2}\u{2}\u{2}\u{EA2}\u{EA3}\u{7}\u{8C}\u{2}" .
		    "\u{2}\u{EA3}\u{EA4}\u{7}\u{118}\u{2}\u{2}\u{EA4}\u{EA5}\u{7}\u{3F7}" .
		    "\u{2}\u{2}\u{EA5}\u{EA6}\u{9}\u{18}\u{2}\u{2}\u{EA6}\u{113}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{EA7}\u{EA9}\u{7}\u{8C}\u{2}\u{2}\u{EA8}\u{EAA}\u{9}\u{31}" .
		    "\u{2}\u{2}\u{EA9}\u{EA8}\u{3}\u{2}\u{2}\u{2}\u{EA9}\u{EAA}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{EAA}\u{EAB}\u{3}\u{2}\u{2}\u{2}\u{EAB}\u{EAC}\u{7}\u{235}" .
		    "\u{2}\u{2}\u{EAC}\u{EB1}\u{5}\u{11C}\u{8F}\u{2}\u{EAD}\u{EAE}\u{7}" .
		    "\u{402}\u{2}\u{2}\u{EAE}\u{EB0}\u{5}\u{11C}\u{8F}\u{2}\u{EAF}\u{EAD}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{EB0}\u{EB3}\u{3}\u{2}\u{2}\u{2}\u{EB1}\u{EAF}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{EB1}\u{EB2}\u{3}\u{2}\u{2}\u{2}\u{EB2}\u{115}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{EB3}\u{EB1}\u{3}\u{2}\u{2}\u{2}\u{EB4}\u{EB5}" .
		    "\u{7}\u{B0}\u{2}\u{2}\u{EB5}\u{EB6}\u{7}\u{13B}\u{2}\u{2}\u{EB6}\u{EBC}" .
		    "\u{7}\u{211}\u{2}\u{2}\u{EB7}\u{EB8}\u{7}\u{7A}\u{2}\u{2}\u{EB8}\u{EBC}" .
		    "\u{7}\u{B1}\u{2}\u{2}\u{EB9}\u{EBA}\u{7}\u{7A}\u{2}\u{2}\u{EBA}\u{EBC}" .
		    "\u{7}\u{1CD}\u{2}\u{2}\u{EBB}\u{EB4}\u{3}\u{2}\u{2}\u{2}\u{EBB}\u{EB7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{EBB}\u{EB9}\u{3}\u{2}\u{2}\u{2}\u{EBC}\u{117}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{EBD}\u{EC2}\u{5}\u{1F4}\u{FB}\u{2}\u{EBE}\u{EC0}" .
		    "\u{7}\u{D}\u{2}\u{2}\u{EBF}\u{EBE}\u{3}\u{2}\u{2}\u{2}\u{EBF}\u{EC0}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{EC0}\u{EC1}\u{3}\u{2}\u{2}\u{2}\u{EC1}\u{EC3}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{EC2}\u{EBF}\u{3}\u{2}\u{2}\u{2}\u{EC2}" .
		    "\u{EC3}\u{3}\u{2}\u{2}\u{2}\u{EC3}\u{EC4}\u{3}\u{2}\u{2}\u{2}\u{EC4}" .
		    "\u{EC5}\u{5}\u{11A}\u{8E}\u{2}\u{EC5}\u{119}\u{3}\u{2}\u{2}\u{2}\u{EC6}" .
		    "\u{EC8}\u{7}\u{7A}\u{2}\u{2}\u{EC7}\u{EC9}\u{7}\u{194}\u{2}\u{2}\u{EC8}" .
		    "\u{EC7}\u{3}\u{2}\u{2}\u{2}\u{EC8}\u{EC9}\u{3}\u{2}\u{2}\u{2}\u{EC9}" .
		    "\u{ECF}\u{3}\u{2}\u{2}\u{2}\u{ECA}\u{ECC}\u{7}\u{61}\u{2}\u{2}\u{ECB}" .
		    "\u{ECA}\u{3}\u{2}\u{2}\u{2}\u{ECB}\u{ECC}\u{3}\u{2}\u{2}\u{2}\u{ECC}" .
		    "\u{ECD}\u{3}\u{2}\u{2}\u{2}\u{ECD}\u{ECF}\u{7}\u{B1}\u{2}\u{2}\u{ECE}" .
		    "\u{EC6}\u{3}\u{2}\u{2}\u{2}\u{ECE}\u{ECB}\u{3}\u{2}\u{2}\u{2}\u{ECF}" .
		    "\u{11B}\u{3}\u{2}\u{2}\u{2}\u{ED0}\u{ED1}\u{7}\u{18A}\u{2}\u{2}\u{ED1}" .
		    "\u{ED2}\u{7}\u{192}\u{2}\u{2}\u{ED2}\u{ED8}\u{5}\u{11E}\u{90}\u{2}" .
		    "\u{ED3}\u{ED4}\u{7}\u{7A}\u{2}\u{2}\u{ED4}\u{ED8}\u{7}\u{B1}\u{2}" .
		    "\u{2}\u{ED5}\u{ED6}\u{7}\u{7A}\u{2}\u{2}\u{ED6}\u{ED8}\u{7}\u{1CD}" .
		    "\u{2}\u{2}\u{ED7}\u{ED0}\u{3}\u{2}\u{2}\u{2}\u{ED7}\u{ED3}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{ED7}\u{ED5}\u{3}\u{2}\u{2}\u{2}\u{ED8}\u{11D}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{ED9}\u{EDA}\u{7}\u{2B5}\u{2}\u{2}\u{EDA}\u{EE1}\u{7}" .
		    "\u{7A}\u{2}\u{2}\u{EDB}\u{EDC}\u{7}\u{7A}\u{2}\u{2}\u{EDC}\u{EE1}" .
		    "\u{7}\u{2B6}\u{2}\u{2}\u{EDD}\u{EDE}\u{7}\u{7A}\u{2}\u{2}\u{EDE}\u{EE1}" .
		    "\u{7}\u{2B7}\u{2}\u{2}\u{EDF}\u{EE1}\u{7}\u{2B8}\u{2}\u{2}\u{EE0}" .
		    "\u{ED9}\u{3}\u{2}\u{2}\u{2}\u{EE0}\u{EDB}\u{3}\u{2}\u{2}\u{2}\u{EE0}" .
		    "\u{EDD}\u{3}\u{2}\u{2}\u{2}\u{EE0}\u{EDF}\u{3}\u{2}\u{2}\u{2}\u{EE1}" .
		    "\u{11F}\u{3}\u{2}\u{2}\u{2}\u{EE2}\u{EE3}\u{7}\u{17}\u{2}\u{2}\u{EE3}" .
		    "\u{EE4}\u{7}\u{197}\u{2}\u{2}\u{EE4}\u{EE5}\u{7}\u{9F}\u{2}\u{2}\u{EE5}" .
		    "\u{EEA}\u{5}\u{132}\u{9A}\u{2}\u{EE6}\u{EE7}\u{7}\u{402}\u{2}\u{2}" .
		    "\u{EE7}\u{EE9}\u{5}\u{132}\u{9A}\u{2}\u{EE8}\u{EE6}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{EE9}\u{EEC}\u{3}\u{2}\u{2}\u{2}\u{EEA}\u{EE8}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{EEA}\u{EEB}\u{3}\u{2}\u{2}\u{2}\u{EEB}\u{EEE}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{EEC}\u{EEA}\u{3}\u{2}\u{2}\u{2}\u{EED}\u{EEF}\u{5}\u{13A}" .
		    "\u{9E}\u{2}\u{EEE}\u{EED}\u{3}\u{2}\u{2}\u{2}\u{EEE}\u{EEF}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{EEF}\u{121}\u{3}\u{2}\u{2}\u{2}\u{EF0}\u{EF1}\u{7}\u{17}" .
		    "\u{2}\u{2}\u{EF1}\u{EF2}\u{7}\u{1FA}\u{2}\u{2}\u{EF2}\u{EF3}\u{7}" .
		    "\u{16B}\u{2}\u{2}\u{EF3}\u{EF8}\u{5}\u{13C}\u{9F}\u{2}\u{EF4}\u{EF5}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{EF5}\u{EF7}\u{5}\u{13C}\u{9F}\u{2}\u{EF6}" .
		    "\u{EF4}\u{3}\u{2}\u{2}\u{2}\u{EF7}\u{EFA}\u{3}\u{2}\u{2}\u{2}\u{EF8}" .
		    "\u{EF6}\u{3}\u{2}\u{2}\u{2}\u{EF8}\u{EF9}\u{3}\u{2}\u{2}\u{2}\u{EF9}" .
		    "\u{123}\u{3}\u{2}\u{2}\u{2}\u{EFA}\u{EF8}\u{3}\u{2}\u{2}\u{2}\u{EFB}" .
		    "\u{EFC}\u{7}\u{78}\u{2}\u{2}\u{EFC}\u{EFD}\u{9}\u{32}\u{2}\u{2}\u{EFD}" .
		    "\u{F02}\u{7}\u{196}\u{2}\u{2}\u{EFE}\u{EFF}\u{7}\u{9F}\u{2}\u{2}\u{EFF}" .
		    "\u{F03}\u{7}\u{40F}\u{2}\u{2}\u{F00}\u{F01}\u{7}\u{F}\u{2}\u{2}\u{F01}" .
		    "\u{F03}\u{7}\u{40F}\u{2}\u{2}\u{F02}\u{EFE}\u{3}\u{2}\u{2}\u{2}\u{F02}" .
		    "\u{F00}\u{3}\u{2}\u{2}\u{2}\u{F03}\u{125}\u{3}\u{2}\u{2}\u{2}\u{F04}" .
		    "\u{F05}\u{7}\u{1FB}\u{2}\u{2}\u{F05}\u{F06}\u{7}\u{197}\u{2}\u{2}" .
		    "\u{F06}\u{127}\u{3}\u{2}\u{2}\u{2}\u{F07}\u{F08}\u{7}\u{1FB}\u{2}" .
		    "\u{2}\u{F08}\u{F0A}\u{7}\u{20F}\u{2}\u{2}\u{F09}\u{F0B}\u{7}\u{8}" .
		    "\u{2}\u{2}\u{F0A}\u{F09}\u{3}\u{2}\u{2}\u{2}\u{F0A}\u{F0B}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{F0B}\u{F0D}\u{3}\u{2}\u{2}\u{2}\u{F0C}\u{F0E}\u{5}\u{13A}" .
		    "\u{9E}\u{2}\u{F0D}\u{F0C}\u{3}\u{2}\u{2}\u{2}\u{F0D}\u{F0E}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{F0E}\u{129}\u{3}\u{2}\u{2}\u{2}\u{F0F}\u{F10}\u{7}\u{21E}" .
		    "\u{2}\u{2}\u{F10}\u{F19}\u{7}\u{20F}\u{2}\u{2}\u{F11}\u{F16}\u{5}" .
		    "\u{140}\u{A1}\u{2}\u{F12}\u{F13}\u{7}\u{402}\u{2}\u{2}\u{F13}\u{F15}" .
		    "\u{5}\u{140}\u{A1}\u{2}\u{F14}\u{F12}\u{3}\u{2}\u{2}\u{2}\u{F15}\u{F18}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{F16}\u{F14}\u{3}\u{2}\u{2}\u{2}\u{F16}\u{F17}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{F17}\u{F1A}\u{3}\u{2}\u{2}\u{2}\u{F18}\u{F16}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{F19}\u{F11}\u{3}\u{2}\u{2}\u{2}\u{F19}\u{F1A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{F1A}\u{F1D}\u{3}\u{2}\u{2}\u{2}\u{F1B}\u{F1C}" .
		    "\u{7}\u{23E}\u{2}\u{2}\u{F1C}\u{F1E}\u{5}\u{142}\u{A2}\u{2}\u{F1D}" .
		    "\u{F1B}\u{3}\u{2}\u{2}\u{2}\u{F1D}\u{F1E}\u{3}\u{2}\u{2}\u{2}\u{F1E}" .
		    "\u{F22}\u{3}\u{2}\u{2}\u{2}\u{F1F}\u{F21}\u{5}\u{144}\u{A3}\u{2}\u{F20}" .
		    "\u{F1F}\u{3}\u{2}\u{2}\u{2}\u{F21}\u{F24}\u{3}\u{2}\u{2}\u{2}\u{F22}" .
		    "\u{F20}\u{3}\u{2}\u{2}\u{2}\u{F22}\u{F23}\u{3}\u{2}\u{2}\u{2}\u{F23}" .
		    "\u{F26}\u{3}\u{2}\u{2}\u{2}\u{F24}\u{F22}\u{3}\u{2}\u{2}\u{2}\u{F25}" .
		    "\u{F27}\u{5}\u{13A}\u{9E}\u{2}\u{F26}\u{F25}\u{3}\u{2}\u{2}\u{2}\u{F26}" .
		    "\u{F27}\u{3}\u{2}\u{2}\u{2}\u{F27}\u{12B}\u{3}\u{2}\u{2}\u{2}\u{F28}" .
		    "\u{F29}\u{7}\u{224}\u{2}\u{2}\u{F29}\u{F32}\u{7}\u{20F}\u{2}\u{2}" .
		    "\u{F2A}\u{F2F}\u{5}\u{140}\u{A1}\u{2}\u{F2B}\u{F2C}\u{7}\u{402}\u{2}" .
		    "\u{2}\u{F2C}\u{F2E}\u{5}\u{140}\u{A1}\u{2}\u{F2D}\u{F2B}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{F2E}\u{F31}\u{3}\u{2}\u{2}\u{2}\u{F2F}\u{F2D}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{F2F}\u{F30}\u{3}\u{2}\u{2}\u{2}\u{F30}\u{F33}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{F31}\u{F2F}\u{3}\u{2}\u{2}\u{2}\u{F32}\u{F2A}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{F32}\u{F33}\u{3}\u{2}\u{2}\u{2}\u{F33}\u{12D}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{F34}\u{F35}\u{7}\u{21E}\u{2}\u{2}\u{F35}\u{F36}\u{7}" .
		    "\u{176}\u{2}\u{2}\u{F36}\u{12F}\u{3}\u{2}\u{2}\u{2}\u{F37}\u{F38}" .
		    "\u{7}\u{224}\u{2}\u{2}\u{F38}\u{F39}\u{7}\u{176}\u{2}\u{2}\u{F39}" .
		    "\u{131}\u{3}\u{2}\u{2}\u{2}\u{F3A}\u{F3B}\u{5}\u{134}\u{9B}\u{2}\u{F3B}" .
		    "\u{F3C}\u{7}\u{3F7}\u{2}\u{2}\u{F3C}\u{F3D}\u{7}\u{40F}\u{2}\u{2}" .
		    "\u{F3D}\u{F58}\u{3}\u{2}\u{2}\u{2}\u{F3E}\u{F3F}\u{5}\u{136}\u{9C}" .
		    "\u{2}\u{F3F}\u{F40}\u{7}\u{3F7}\u{2}\u{2}\u{F40}\u{F41}\u{5}\u{212}" .
		    "\u{10A}\u{2}\u{F41}\u{F58}\u{3}\u{2}\u{2}\u{2}\u{F42}\u{F43}\u{5}" .
		    "\u{138}\u{9D}\u{2}\u{F43}\u{F44}\u{7}\u{3F7}\u{2}\u{2}\u{F44}\u{F45}" .
		    "\u{9}\u{18}\u{2}\u{2}\u{F45}\u{F58}\u{3}\u{2}\u{2}\u{2}\u{F46}\u{F47}" .
		    "\u{7}\u{19B}\u{2}\u{2}\u{F47}\u{F48}\u{7}\u{3F7}\u{2}\u{2}\u{F48}" .
		    "\u{F58}\u{7}\u{412}\u{2}\u{2}\u{F49}\u{F4A}\u{7}\u{17D}\u{2}\u{2}" .
		    "\u{F4A}\u{F4B}\u{7}\u{3F7}\u{2}\u{2}\u{F4B}\u{F54}\u{7}\u{400}\u{2}" .
		    "\u{2}\u{F4C}\u{F51}\u{5}\u{20C}\u{107}\u{2}\u{F4D}\u{F4E}\u{7}\u{402}" .
		    "\u{2}\u{2}\u{F4E}\u{F50}\u{5}\u{20C}\u{107}\u{2}\u{F4F}\u{F4D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{F50}\u{F53}\u{3}\u{2}\u{2}\u{2}\u{F51}\u{F4F}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{F51}\u{F52}\u{3}\u{2}\u{2}\u{2}\u{F52}\u{F55}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{F53}\u{F51}\u{3}\u{2}\u{2}\u{2}\u{F54}\u{F4C}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{F54}\u{F55}\u{3}\u{2}\u{2}\u{2}\u{F55}\u{F56}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{F56}\u{F58}\u{7}\u{401}\u{2}\u{2}\u{F57}\u{F3A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{F57}\u{F3E}\u{3}\u{2}\u{2}\u{2}\u{F57}\u{F42}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{F57}\u{F46}\u{3}\u{2}\u{2}\u{2}\u{F57}\u{F49}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{F58}\u{133}\u{3}\u{2}\u{2}\u{2}\u{F59}\u{F5A}" .
		    "\u{9}\u{33}\u{2}\u{2}\u{F5A}\u{135}\u{3}\u{2}\u{2}\u{2}\u{F5B}\u{F5C}" .
		    "\u{9}\u{34}\u{2}\u{2}\u{F5C}\u{137}\u{3}\u{2}\u{2}\u{2}\u{F5D}\u{F5E}" .
		    "\u{9}\u{35}\u{2}\u{2}\u{F5E}\u{139}\u{3}\u{2}\u{2}\u{2}\u{F5F}\u{F60}" .
		    "\u{7}\u{3C}\u{2}\u{2}\u{F60}\u{F61}\u{7}\u{127}\u{2}\u{2}\u{F61}\u{F62}" .
		    "\u{7}\u{40F}\u{2}\u{2}\u{F62}\u{13B}\u{3}\u{2}\u{2}\u{2}\u{F63}\u{F64}" .
		    "\u{7}\u{1F3}\u{2}\u{2}\u{F64}\u{F65}\u{7}\u{3F7}\u{2}\u{2}\u{F65}" .
		    "\u{F66}\u{7}\u{400}\u{2}\u{2}\u{F66}\u{F67}\u{5}\u{22C}\u{117}\u{2}" .
		    "\u{F67}\u{F68}\u{7}\u{401}\u{2}\u{2}\u{F68}\u{F95}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{F69}\u{F6A}\u{7}\u{1F5}\u{2}\u{2}\u{F6A}\u{F6B}\u{7}\u{3F7}" .
		    "\u{2}\u{2}\u{F6B}\u{F6C}\u{7}\u{400}\u{2}\u{2}\u{F6C}\u{F6D}\u{5}" .
		    "\u{22C}\u{117}\u{2}\u{F6D}\u{F6E}\u{7}\u{401}\u{2}\u{2}\u{F6E}\u{F95}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{F6F}\u{F70}\u{7}\u{1F4}\u{2}\u{2}\u{F70}\u{F71}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{F71}\u{F72}\u{7}\u{400}\u{2}\u{2}\u{F72}" .
		    "\u{F73}\u{5}\u{22E}\u{118}\u{2}\u{F73}\u{F74}\u{7}\u{401}\u{2}\u{2}" .
		    "\u{F74}\u{F95}\u{3}\u{2}\u{2}\u{2}\u{F75}\u{F76}\u{7}\u{1F6}\u{2}" .
		    "\u{2}\u{F76}\u{F77}\u{7}\u{3F7}\u{2}\u{2}\u{F77}\u{F78}\u{7}\u{400}" .
		    "\u{2}\u{2}\u{F78}\u{F79}\u{5}\u{22E}\u{118}\u{2}\u{F79}\u{F7A}\u{7}" .
		    "\u{401}\u{2}\u{2}\u{F7A}\u{F95}\u{3}\u{2}\u{2}\u{2}\u{F7B}\u{F7C}" .
		    "\u{7}\u{1F8}\u{2}\u{2}\u{F7C}\u{F7D}\u{7}\u{3F7}\u{2}\u{2}\u{F7D}" .
		    "\u{F7E}\u{7}\u{400}\u{2}\u{2}\u{F7E}\u{F7F}\u{5}\u{23A}\u{11E}\u{2}" .
		    "\u{F7F}\u{F80}\u{7}\u{401}\u{2}\u{2}\u{F80}\u{F95}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{F81}\u{F82}\u{7}\u{1F9}\u{2}\u{2}\u{F82}\u{F83}\u{7}\u{3F7}" .
		    "\u{2}\u{2}\u{F83}\u{F84}\u{7}\u{400}\u{2}\u{2}\u{F84}\u{F85}\u{5}" .
		    "\u{23A}\u{11E}\u{2}\u{F85}\u{F86}\u{7}\u{401}\u{2}\u{2}\u{F86}\u{F95}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{F87}\u{F88}\u{7}\u{1F7}\u{2}\u{2}\u{F88}\u{F89}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{F89}\u{F8A}\u{7}\u{400}\u{2}\u{2}\u{F8A}" .
		    "\u{F8F}\u{5}\u{13E}\u{A0}\u{2}\u{F8B}\u{F8C}\u{7}\u{402}\u{2}\u{2}" .
		    "\u{F8C}\u{F8E}\u{5}\u{13E}\u{A0}\u{2}\u{F8D}\u{F8B}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{F8E}\u{F91}\u{3}\u{2}\u{2}\u{2}\u{F8F}\u{F8D}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{F8F}\u{F90}\u{3}\u{2}\u{2}\u{2}\u{F90}\u{F92}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{F91}\u{F8F}\u{3}\u{2}\u{2}\u{2}\u{F92}\u{F93}\u{7}\u{401}" .
		    "\u{2}\u{2}\u{F93}\u{F95}\u{3}\u{2}\u{2}\u{2}\u{F94}\u{F63}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{F94}\u{F69}\u{3}\u{2}\u{2}\u{2}\u{F94}\u{F6F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{F94}\u{F75}\u{3}\u{2}\u{2}\u{2}\u{F94}\u{F7B}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{F94}\u{F81}\u{3}\u{2}\u{2}\u{2}\u{F94}\u{F87}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{F95}\u{13D}\u{3}\u{2}\u{2}\u{2}\u{F96}\u{F97}\u{7}\u{400}" .
		    "\u{2}\u{2}\u{F97}\u{F98}\u{5}\u{1F4}\u{FB}\u{2}\u{F98}\u{F99}\u{7}" .
		    "\u{402}\u{2}\u{2}\u{F99}\u{F9A}\u{5}\u{1F4}\u{FB}\u{2}\u{F9A}\u{F9B}" .
		    "\u{7}\u{401}\u{2}\u{2}\u{F9B}\u{13F}\u{3}\u{2}\u{2}\u{2}\u{F9C}\u{F9D}" .
		    "\u{9}\u{36}\u{2}\u{2}\u{F9D}\u{141}\u{3}\u{2}\u{2}\u{2}\u{F9E}\u{F9F}" .
		    "\u{9}\u{37}\u{2}\u{2}\u{F9F}\u{FA0}\u{7}\u{3F7}\u{2}\u{2}\u{FA0}\u{FB1}" .
		    "\u{5}\u{146}\u{A4}\u{2}\u{FA1}\u{FA2}\u{7}\u{19D}\u{2}\u{2}\u{FA2}" .
		    "\u{FA3}\u{7}\u{3F7}\u{2}\u{2}\u{FA3}\u{FA4}\u{7}\u{40F}\u{2}\u{2}" .
		    "\u{FA4}\u{FA5}\u{7}\u{402}\u{2}\u{2}\u{FA5}\u{FA6}\u{7}\u{19E}\u{2}" .
		    "\u{2}\u{FA6}\u{FA7}\u{7}\u{3F7}\u{2}\u{2}\u{FA7}\u{FB1}\u{5}\u{212}" .
		    "\u{10A}\u{2}\u{FA8}\u{FA9}\u{7}\u{1ED}\u{2}\u{2}\u{FA9}\u{FAA}\u{7}" .
		    "\u{3F7}\u{2}\u{2}\u{FAA}\u{FAB}\u{7}\u{40F}\u{2}\u{2}\u{FAB}\u{FAC}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{FAC}\u{FAD}\u{7}\u{1EE}\u{2}\u{2}\u{FAD}" .
		    "\u{FAE}\u{7}\u{3F7}\u{2}\u{2}\u{FAE}\u{FB1}\u{5}\u{212}\u{10A}\u{2}" .
		    "\u{FAF}\u{FB1}\u{7}\u{218}\u{2}\u{2}\u{FB0}\u{F9E}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{FB0}\u{FA1}\u{3}\u{2}\u{2}\u{2}\u{FB0}\u{FA8}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{FB0}\u{FAF}\u{3}\u{2}\u{2}\u{2}\u{FB1}\u{143}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{FB2}\u{FB3}\u{7}\u{240}\u{2}\u{2}\u{FB3}\u{FB4}\u{7}\u{3F7}" .
		    "\u{2}\u{2}\u{FB4}\u{FBF}\u{7}\u{40F}\u{2}\u{2}\u{FB5}\u{FB6}\u{7}" .
		    "\u{1D8}\u{2}\u{2}\u{FB6}\u{FB7}\u{7}\u{3F7}\u{2}\u{2}\u{FB7}\u{FBF}" .
		    "\u{7}\u{40F}\u{2}\u{2}\u{FB8}\u{FB9}\u{7}\u{148}\u{2}\u{2}\u{FB9}" .
		    "\u{FBA}\u{7}\u{3F7}\u{2}\u{2}\u{FBA}\u{FBF}\u{7}\u{40F}\u{2}\u{2}" .
		    "\u{FBB}\u{FBC}\u{7}\u{1DB}\u{2}\u{2}\u{FBC}\u{FBD}\u{7}\u{3F7}\u{2}" .
		    "\u{2}\u{FBD}\u{FBF}\u{7}\u{40F}\u{2}\u{2}\u{FBE}\u{FB2}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{FBE}\u{FB5}\u{3}\u{2}\u{2}\u{2}\u{FBE}\u{FB8}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{FBE}\u{FBB}\u{3}\u{2}\u{2}\u{2}\u{FBF}\u{145}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{FC0}\u{FC5}\u{5}\u{204}\u{103}\u{2}\u{FC1}\u{FC2}\u{7}" .
		    "\u{402}\u{2}\u{2}\u{FC2}\u{FC4}\u{5}\u{204}\u{103}\u{2}\u{FC3}\u{FC1}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{FC4}\u{FC7}\u{3}\u{2}\u{2}\u{2}\u{FC5}\u{FC3}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{FC5}\u{FC6}\u{3}\u{2}\u{2}\u{2}\u{FC6}\u{FCA}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{FC7}\u{FC5}\u{3}\u{2}\u{2}\u{2}\u{FC8}\u{FCA}" .
		    "\u{7}\u{40F}\u{2}\u{2}\u{FC9}\u{FC0}\u{3}\u{2}\u{2}\u{2}\u{FC9}\u{FC8}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{FCA}\u{147}\u{3}\u{2}\u{2}\u{2}\u{FCB}\u{FCC}" .
		    "\u{7}\u{24F}\u{2}\u{2}\u{FCC}\u{FCD}\u{9}\u{38}\u{2}\u{2}\u{FCD}\u{FCF}" .
		    "\u{5}\u{206}\u{104}\u{2}\u{FCE}\u{FD0}\u{9}\u{39}\u{2}\u{2}\u{FCF}" .
		    "\u{FCE}\u{3}\u{2}\u{2}\u{2}\u{FCF}\u{FD0}\u{3}\u{2}\u{2}\u{2}\u{FD0}" .
		    "\u{149}\u{3}\u{2}\u{2}\u{2}\u{FD1}\u{FD2}\u{7}\u{24F}\u{2}\u{2}\u{FD2}" .
		    "\u{FD3}\u{7}\u{156}\u{2}\u{2}\u{FD3}\u{FD9}\u{5}\u{206}\u{104}\u{2}" .
		    "\u{FD4}\u{FD7}\u{7}\u{22C}\u{2}\u{2}\u{FD5}\u{FD6}\u{7}\u{3C}\u{2}" .
		    "\u{2}\u{FD6}\u{FD8}\u{7}\u{1B7}\u{2}\u{2}\u{FD7}\u{FD5}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{FD7}\u{FD8}\u{3}\u{2}\u{2}\u{2}\u{FD8}\u{FDA}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{FD9}\u{FD4}\u{3}\u{2}\u{2}\u{2}\u{FD9}\u{FDA}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{FDA}\u{14B}\u{3}\u{2}\u{2}\u{2}\u{FDB}\u{FDC}\u{7}\u{24F}" .
		    "\u{2}\u{2}\u{FDC}\u{FDD}\u{7}\u{1DF}\u{2}\u{2}\u{FDD}\u{FDE}\u{5}" .
		    "\u{206}\u{104}\u{2}\u{FDE}\u{14D}\u{3}\u{2}\u{2}\u{2}\u{FDF}\u{FE0}" .
		    "\u{7}\u{24F}\u{2}\u{2}\u{FE0}\u{FE1}\u{7}\u{134}\u{2}\u{2}\u{FE1}" .
		    "\u{FE4}\u{5}\u{206}\u{104}\u{2}\u{FE2}\u{FE3}\u{7}\u{1CB}\u{2}\u{2}" .
		    "\u{FE3}\u{FE5}\u{7}\u{1D9}\u{2}\u{2}\u{FE4}\u{FE2}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{FE4}\u{FE5}\u{3}\u{2}\u{2}\u{2}\u{FE5}\u{14F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{FE6}\u{FE7}\u{7}\u{24F}\u{2}\u{2}\u{FE7}\u{FE8}\u{7}\u{200}" .
		    "\u{2}\u{2}\u{FE8}\u{FE9}\u{5}\u{206}\u{104}\u{2}\u{FE9}\u{151}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{FEA}\u{FEB}\u{7}\u{24F}\u{2}\u{2}\u{FEB}\u{FEE}" .
		    "\u{7}\u{1E9}\u{2}\u{2}\u{FEC}\u{FED}\u{7}\u{1F}\u{2}\u{2}\u{FED}\u{FEF}" .
		    "\u{5}\u{206}\u{104}\u{2}\u{FEE}\u{FEC}\u{3}\u{2}\u{2}\u{2}\u{FEE}" .
		    "\u{FEF}\u{3}\u{2}\u{2}\u{2}\u{FEF}\u{153}\u{3}\u{2}\u{2}\u{2}\u{FF0}" .
		    "\u{FF1}\u{7}\u{1DF}\u{2}\u{2}\u{FF1}\u{FF2}\u{5}\u{20C}\u{107}\u{2}" .
		    "\u{FF2}\u{FF5}\u{7}\u{3F}\u{2}\u{2}\u{FF3}\u{FF6}\u{7}\u{40F}\u{2}" .
		    "\u{2}\u{FF4}\u{FF6}\u{7}\u{41A}\u{2}\u{2}\u{FF5}\u{FF3}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{FF5}\u{FF4}\u{3}\u{2}\u{2}\u{2}\u{FF6}\u{155}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{FF7}\u{FF8}\u{7}\u{260}\u{2}\u{2}\u{FF8}\u{FFB}\u{5}" .
		    "\u{20C}\u{107}\u{2}\u{FF9}\u{FFA}\u{7}\u{AB}\u{2}\u{2}\u{FFA}\u{FFC}" .
		    "\u{5}\u{23C}\u{11F}\u{2}\u{FFB}\u{FF9}\u{3}\u{2}\u{2}\u{2}\u{FFB}" .
		    "\u{FFC}\u{3}\u{2}\u{2}\u{2}\u{FFC}\u{157}\u{3}\u{2}\u{2}\u{2}\u{FFD}" .
		    "\u{FFE}\u{9}\u{3A}\u{2}\u{2}\u{FFE}\u{FFF}\u{7}\u{1DF}\u{2}\u{2}\u{FFF}" .
		    "\u{1000}\u{5}\u{20C}\u{107}\u{2}\u{1000}\u{159}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1001}\u{1004}\u{5}\u{15C}\u{AF}\u{2}\u{1002}\u{1004}\u{5}\u{6}" .
		    "\u{4}\u{2}\u{1003}\u{1001}\u{3}\u{2}\u{2}\u{2}\u{1003}\u{1002}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1004}\u{15B}\u{3}\u{2}\u{2}\u{2}\u{1005}\u{1006}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{1006}\u{1007}\u{7}\u{40B}\u{2}\u{2}\u{1007}" .
		    "\u{1009}\u{3}\u{2}\u{2}\u{2}\u{1008}\u{1005}\u{3}\u{2}\u{2}\u{2}\u{1008}" .
		    "\u{1009}\u{3}\u{2}\u{2}\u{2}\u{1009}\u{100A}\u{3}\u{2}\u{2}\u{2}\u{100A}" .
		    "\u{1031}\u{7}\u{11C}\u{2}\u{2}\u{100B}\u{100C}\u{5}\u{170}\u{B9}\u{2}" .
		    "\u{100C}\u{100D}\u{7}\u{403}\u{2}\u{2}\u{100D}\u{100F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{100E}\u{100B}\u{3}\u{2}\u{2}\u{2}\u{100F}\u{1012}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1010}\u{100E}\u{3}\u{2}\u{2}\u{2}\u{1010}\u{1011}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1011}\u{1018}\u{3}\u{2}\u{2}\u{2}\u{1012}\u{1010}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1013}\u{1014}\u{5}\u{172}\u{BA}\u{2}\u{1014}" .
		    "\u{1015}\u{7}\u{403}\u{2}\u{2}\u{1015}\u{1017}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1016}\u{1013}\u{3}\u{2}\u{2}\u{2}\u{1017}\u{101A}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1018}\u{1016}\u{3}\u{2}\u{2}\u{2}\u{1018}\u{1019}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1019}\u{1020}\u{3}\u{2}\u{2}\u{2}\u{101A}\u{1018}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{101B}\u{101C}\u{5}\u{174}\u{BB}\u{2}\u{101C}\u{101D}" .
		    "\u{7}\u{403}\u{2}\u{2}\u{101D}\u{101F}\u{3}\u{2}\u{2}\u{2}\u{101E}" .
		    "\u{101B}\u{3}\u{2}\u{2}\u{2}\u{101F}\u{1022}\u{3}\u{2}\u{2}\u{2}\u{1020}" .
		    "\u{101E}\u{3}\u{2}\u{2}\u{2}\u{1020}\u{1021}\u{3}\u{2}\u{2}\u{2}\u{1021}" .
		    "\u{1028}\u{3}\u{2}\u{2}\u{2}\u{1022}\u{1020}\u{3}\u{2}\u{2}\u{2}\u{1023}" .
		    "\u{1024}\u{5}\u{176}\u{BC}\u{2}\u{1024}\u{1025}\u{7}\u{403}\u{2}\u{2}" .
		    "\u{1025}\u{1027}\u{3}\u{2}\u{2}\u{2}\u{1026}\u{1023}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1027}\u{102A}\u{3}\u{2}\u{2}\u{2}\u{1028}\u{1026}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1028}\u{1029}\u{3}\u{2}\u{2}\u{2}\u{1029}\u{102E}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{102A}\u{1028}\u{3}\u{2}\u{2}\u{2}\u{102B}\u{102D}" .
		    "\u{5}\u{17A}\u{BE}\u{2}\u{102C}\u{102B}\u{3}\u{2}\u{2}\u{2}\u{102D}" .
		    "\u{1030}\u{3}\u{2}\u{2}\u{2}\u{102E}\u{102C}\u{3}\u{2}\u{2}\u{2}\u{102E}" .
		    "\u{102F}\u{3}\u{2}\u{2}\u{2}\u{102F}\u{1032}\u{3}\u{2}\u{2}\u{2}\u{1030}" .
		    "\u{102E}\u{3}\u{2}\u{2}\u{2}\u{1031}\u{1010}\u{3}\u{2}\u{2}\u{2}\u{1031}" .
		    "\u{1032}\u{3}\u{2}\u{2}\u{2}\u{1032}\u{1033}\u{3}\u{2}\u{2}\u{2}\u{1033}" .
		    "\u{1035}\u{7}\u{156}\u{2}\u{2}\u{1034}\u{1036}\u{5}\u{20C}\u{107}" .
		    "\u{2}\u{1035}\u{1034}\u{3}\u{2}\u{2}\u{2}\u{1035}\u{1036}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1036}\u{15D}\u{3}\u{2}\u{2}\u{2}\u{1037}\u{103A}\u{7}" .
		    "\u{15}\u{2}\u{2}\u{1038}\u{103B}\u{5}\u{20C}\u{107}\u{2}\u{1039}\u{103B}" .
		    "\u{5}\u{25C}\u{12F}\u{2}\u{103A}\u{1038}\u{3}\u{2}\u{2}\u{2}\u{103A}" .
		    "\u{1039}\u{3}\u{2}\u{2}\u{2}\u{103A}\u{103B}\u{3}\u{2}\u{2}\u{2}\u{103B}" .
		    "\u{103D}\u{3}\u{2}\u{2}\u{2}\u{103C}\u{103E}\u{5}\u{17C}\u{BF}\u{2}" .
		    "\u{103D}\u{103C}\u{3}\u{2}\u{2}\u{2}\u{103E}\u{103F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{103F}\u{103D}\u{3}\u{2}\u{2}\u{2}\u{103F}\u{1040}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1040}\u{1047}\u{3}\u{2}\u{2}\u{2}\u{1041}\u{1043}\u{7}" .
		    "\u{33}\u{2}\u{2}\u{1042}\u{1044}\u{5}\u{17A}\u{BE}\u{2}\u{1043}\u{1042}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1044}\u{1045}\u{3}\u{2}\u{2}\u{2}\u{1045}\u{1043}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1045}\u{1046}\u{3}\u{2}\u{2}\u{2}\u{1046}\u{1048}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1047}\u{1041}\u{3}\u{2}\u{2}\u{2}\u{1047}\u{1048}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1048}\u{1049}\u{3}\u{2}\u{2}\u{2}\u{1049}\u{104A}" .
		    "\u{7}\u{156}\u{2}\u{2}\u{104A}\u{104B}\u{7}\u{15}\u{2}\u{2}\u{104B}" .
		    "\u{15F}\u{3}\u{2}\u{2}\u{2}\u{104C}\u{104D}\u{7}\u{47}\u{2}\u{2}\u{104D}" .
		    "\u{104E}\u{5}\u{25C}\u{12F}\u{2}\u{104E}\u{1050}\u{7}\u{9E}\u{2}\u{2}" .
		    "\u{104F}\u{1051}\u{5}\u{17A}\u{BE}\u{2}\u{1050}\u{104F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1051}\u{1052}\u{3}\u{2}\u{2}\u{2}\u{1052}\u{1050}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1052}\u{1053}\u{3}\u{2}\u{2}\u{2}\u{1053}\u{1057}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1054}\u{1056}\u{5}\u{17E}\u{C0}\u{2}\u{1055}" .
		    "\u{1054}\u{3}\u{2}\u{2}\u{2}\u{1056}\u{1059}\u{3}\u{2}\u{2}\u{2}\u{1057}" .
		    "\u{1055}\u{3}\u{2}\u{2}\u{2}\u{1057}\u{1058}\u{3}\u{2}\u{2}\u{2}\u{1058}" .
		    "\u{1060}\u{3}\u{2}\u{2}\u{2}\u{1059}\u{1057}\u{3}\u{2}\u{2}\u{2}\u{105A}" .
		    "\u{105C}\u{7}\u{33}\u{2}\u{2}\u{105B}\u{105D}\u{5}\u{17A}\u{BE}\u{2}" .
		    "\u{105C}\u{105B}\u{3}\u{2}\u{2}\u{2}\u{105D}\u{105E}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{105E}\u{105C}\u{3}\u{2}\u{2}\u{2}\u{105E}\u{105F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{105F}\u{1061}\u{3}\u{2}\u{2}\u{2}\u{1060}\u{105A}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1060}\u{1061}\u{3}\u{2}\u{2}\u{2}\u{1061}\u{1062}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1062}\u{1063}\u{7}\u{156}\u{2}\u{2}\u{1063}" .
		    "\u{1064}\u{7}\u{47}\u{2}\u{2}\u{1064}\u{161}\u{3}\u{2}\u{2}\u{2}\u{1065}" .
		    "\u{1066}\u{7}\u{52}\u{2}\u{2}\u{1066}\u{1067}\u{5}\u{20C}\u{107}\u{2}" .
		    "\u{1067}\u{163}\u{3}\u{2}\u{2}\u{2}\u{1068}\u{1069}\u{7}\u{58}\u{2}" .
		    "\u{2}\u{1069}\u{106A}\u{5}\u{20C}\u{107}\u{2}\u{106A}\u{165}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{106B}\u{106C}\u{5}\u{20C}\u{107}\u{2}\u{106C}\u{106D}" .
		    "\u{7}\u{40B}\u{2}\u{2}\u{106D}\u{106F}\u{3}\u{2}\u{2}\u{2}\u{106E}" .
		    "\u{106B}\u{3}\u{2}\u{2}\u{2}\u{106E}\u{106F}\u{3}\u{2}\u{2}\u{2}\u{106F}" .
		    "\u{1070}\u{3}\u{2}\u{2}\u{2}\u{1070}\u{1072}\u{7}\u{60}\u{2}\u{2}" .
		    "\u{1071}\u{1073}\u{5}\u{17A}\u{BE}\u{2}\u{1072}\u{1071}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1073}\u{1074}\u{3}\u{2}\u{2}\u{2}\u{1074}\u{1072}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1074}\u{1075}\u{3}\u{2}\u{2}\u{2}\u{1075}\u{1076}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1076}\u{1077}\u{7}\u{156}\u{2}\u{2}\u{1077}" .
		    "\u{1079}\u{7}\u{60}\u{2}\u{2}\u{1078}\u{107A}\u{5}\u{20C}\u{107}\u{2}" .
		    "\u{1079}\u{1078}\u{3}\u{2}\u{2}\u{2}\u{1079}\u{107A}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{107A}\u{167}\u{3}\u{2}\u{2}\u{2}\u{107B}\u{107C}\u{5}\u{20C}" .
		    "\u{107}\u{2}\u{107C}\u{107D}\u{7}\u{40B}\u{2}\u{2}\u{107D}\u{107F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{107E}\u{107B}\u{3}\u{2}\u{2}\u{2}\u{107E}\u{107F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{107F}\u{1080}\u{3}\u{2}\u{2}\u{2}\u{1080}\u{1082}" .
		    "\u{7}\u{80}\u{2}\u{2}\u{1081}\u{1083}\u{5}\u{17A}\u{BE}\u{2}\u{1082}" .
		    "\u{1081}\u{3}\u{2}\u{2}\u{2}\u{1083}\u{1084}\u{3}\u{2}\u{2}\u{2}\u{1084}" .
		    "\u{1082}\u{3}\u{2}\u{2}\u{2}\u{1084}\u{1085}\u{3}\u{2}\u{2}\u{2}\u{1085}" .
		    "\u{1086}\u{3}\u{2}\u{2}\u{2}\u{1086}\u{1087}\u{7}\u{23E}\u{2}\u{2}" .
		    "\u{1087}\u{1088}\u{5}\u{25C}\u{12F}\u{2}\u{1088}\u{1089}\u{7}\u{156}" .
		    "\u{2}\u{2}\u{1089}\u{108B}\u{7}\u{80}\u{2}\u{2}\u{108A}\u{108C}\u{5}" .
		    "\u{20C}\u{107}\u{2}\u{108B}\u{108A}\u{3}\u{2}\u{2}\u{2}\u{108B}\u{108C}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{108C}\u{169}\u{3}\u{2}\u{2}\u{2}\u{108D}\u{108E}" .
		    "\u{7}\u{85}\u{2}\u{2}\u{108E}\u{108F}\u{5}\u{25C}\u{12F}\u{2}\u{108F}" .
		    "\u{16B}\u{3}\u{2}\u{2}\u{2}\u{1090}\u{1091}\u{5}\u{20C}\u{107}\u{2}" .
		    "\u{1091}\u{1092}\u{7}\u{40B}\u{2}\u{2}\u{1092}\u{1094}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1093}\u{1090}\u{3}\u{2}\u{2}\u{2}\u{1093}\u{1094}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1094}\u{1095}\u{3}\u{2}\u{2}\u{2}\u{1095}\u{1096}\u{7}" .
		    "\u{AF}\u{2}\u{2}\u{1096}\u{1097}\u{5}\u{25C}\u{12F}\u{2}\u{1097}\u{1099}" .
		    "\u{7}\u{150}\u{2}\u{2}\u{1098}\u{109A}\u{5}\u{17A}\u{BE}\u{2}\u{1099}" .
		    "\u{1098}\u{3}\u{2}\u{2}\u{2}\u{109A}\u{109B}\u{3}\u{2}\u{2}\u{2}\u{109B}" .
		    "\u{1099}\u{3}\u{2}\u{2}\u{2}\u{109B}\u{109C}\u{3}\u{2}\u{2}\u{2}\u{109C}" .
		    "\u{109D}\u{3}\u{2}\u{2}\u{2}\u{109D}\u{109E}\u{7}\u{156}\u{2}\u{2}" .
		    "\u{109E}\u{10A0}\u{7}\u{AF}\u{2}\u{2}\u{109F}\u{10A1}\u{5}\u{20C}" .
		    "\u{107}\u{2}\u{10A0}\u{109F}\u{3}\u{2}\u{2}\u{2}\u{10A0}\u{10A1}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{10A1}\u{16D}\u{3}\u{2}\u{2}\u{2}\u{10A2}\u{10A3}" .
		    "\u{7}\u{12D}\u{2}\u{2}\u{10A3}\u{10B2}\u{5}\u{20C}\u{107}\u{2}\u{10A4}" .
		    "\u{10A9}\u{7}\u{3B}\u{2}\u{2}\u{10A5}\u{10A7}\u{7}\u{1C2}\u{2}\u{2}" .
		    "\u{10A6}\u{10A5}\u{3}\u{2}\u{2}\u{2}\u{10A6}\u{10A7}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{10A7}\u{10A8}\u{3}\u{2}\u{2}\u{2}\u{10A8}\u{10AA}\u{7}\u{3F}" .
		    "\u{2}\u{2}\u{10A9}\u{10A6}\u{3}\u{2}\u{2}\u{2}\u{10A9}\u{10AA}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{10AA}\u{10AB}\u{3}\u{2}\u{2}\u{2}\u{10AB}\u{10AC}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{10AC}\u{10AD}\u{7}\u{50}\u{2}\u{2}\u{10AD}" .
		    "\u{10AE}\u{5}\u{22C}\u{117}\u{2}\u{10AE}\u{10B2}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{10AF}\u{10B0}\u{7}\u{1CE}\u{2}\u{2}\u{10B0}\u{10B2}\u{5}\u{20C}" .
		    "\u{107}\u{2}\u{10B1}\u{10A2}\u{3}\u{2}\u{2}\u{2}\u{10B1}\u{10A4}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{10B1}\u{10AF}\u{3}\u{2}\u{2}\u{2}\u{10B2}\u{16F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{10B3}\u{10B4}\u{7}\u{27}\u{2}\u{2}\u{10B4}" .
		    "\u{10B5}\u{5}\u{22C}\u{117}\u{2}\u{10B5}\u{10B8}\u{5}\u{220}\u{111}" .
		    "\u{2}\u{10B6}\u{10B7}\u{7}\u{28}\u{2}\u{2}\u{10B7}\u{10B9}\u{5}\u{23E}" .
		    "\u{120}\u{2}\u{10B8}\u{10B6}\u{3}\u{2}\u{2}\u{2}\u{10B8}\u{10B9}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{10B9}\u{171}\u{3}\u{2}\u{2}\u{2}\u{10BA}\u{10BB}" .
		    "\u{7}\u{27}\u{2}\u{2}\u{10BB}\u{10BC}\u{5}\u{20C}\u{107}\u{2}\u{10BC}" .
		    "\u{10BD}\u{7}\u{1C}\u{2}\u{2}\u{10BD}\u{10C4}\u{7}\u{3C}\u{2}\u{2}" .
		    "\u{10BE}\u{10C5}\u{5}\u{212}\u{10A}\u{2}\u{10BF}\u{10C1}\u{7}\u{93}" .
		    "\u{2}\u{2}\u{10C0}\u{10C2}\u{7}\u{244}\u{2}\u{2}\u{10C1}\u{10C0}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{10C1}\u{10C2}\u{3}\u{2}\u{2}\u{2}\u{10C2}\u{10C3}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{10C3}\u{10C5}\u{7}\u{40F}\u{2}\u{2}\u{10C4}" .
		    "\u{10BE}\u{3}\u{2}\u{2}\u{2}\u{10C4}\u{10BF}\u{3}\u{2}\u{2}\u{2}\u{10C5}" .
		    "\u{173}\u{3}\u{2}\u{2}\u{2}\u{10C6}\u{10C7}\u{7}\u{27}\u{2}\u{2}\u{10C7}" .
		    "\u{10C8}\u{5}\u{20C}\u{107}\u{2}\u{10C8}\u{10C9}\u{7}\u{24}\u{2}\u{2}" .
		    "\u{10C9}\u{10CA}\u{7}\u{3C}\u{2}\u{2}\u{10CA}\u{10CB}\u{5}\u{B4}\u{5B}" .
		    "\u{2}\u{10CB}\u{175}\u{3}\u{2}\u{2}\u{2}\u{10CC}\u{10CD}\u{7}\u{27}" .
		    "\u{2}\u{2}\u{10CD}\u{10CE}\u{9}\u{3B}\u{2}\u{2}\u{10CE}\u{10CF}\u{7}" .
		    "\u{177}\u{2}\u{2}\u{10CF}\u{10D0}\u{7}\u{3C}\u{2}\u{2}\u{10D0}\u{10D5}" .
		    "\u{5}\u{178}\u{BD}\u{2}\u{10D1}\u{10D2}\u{7}\u{402}\u{2}\u{2}\u{10D2}" .
		    "\u{10D4}\u{5}\u{178}\u{BD}\u{2}\u{10D3}\u{10D1}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{10D4}\u{10D7}\u{3}\u{2}\u{2}\u{2}\u{10D5}\u{10D3}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{10D5}\u{10D6}\u{3}\u{2}\u{2}\u{2}\u{10D6}\u{10D8}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{10D7}\u{10D5}\u{3}\u{2}\u{2}\u{2}\u{10D8}\u{10D9}\u{5}" .
		    "\u{15A}\u{AE}\u{2}\u{10D9}\u{177}\u{3}\u{2}\u{2}\u{2}\u{10DA}\u{10E6}" .
		    "\u{5}\u{212}\u{10A}\u{2}\u{10DB}\u{10DD}\u{7}\u{93}\u{2}\u{2}\u{10DC}" .
		    "\u{10DE}\u{7}\u{244}\u{2}\u{2}\u{10DD}\u{10DC}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{10DD}\u{10DE}\u{3}\u{2}\u{2}\u{2}\u{10DE}\u{10DF}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{10DF}\u{10E6}\u{7}\u{40F}\u{2}\u{2}\u{10E0}\u{10E6}\u{5}\u{20C}" .
		    "\u{107}\u{2}\u{10E1}\u{10E6}\u{7}\u{94}\u{2}\u{2}\u{10E2}\u{10E3}" .
		    "\u{7}\u{68}\u{2}\u{2}\u{10E3}\u{10E6}\u{7}\u{170}\u{2}\u{2}\u{10E4}" .
		    "\u{10E6}\u{7}\u{92}\u{2}\u{2}\u{10E5}\u{10DA}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{10E5}\u{10DB}\u{3}\u{2}\u{2}\u{2}\u{10E5}\u{10E0}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{10E5}\u{10E1}\u{3}\u{2}\u{2}\u{2}\u{10E5}\u{10E2}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{10E5}\u{10E4}\u{3}\u{2}\u{2}\u{2}\u{10E6}\u{179}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{10E7}\u{10EA}\u{5}\u{14}\u{B}\u{2}\u{10E8}\u{10EA}" .
		    "\u{5}\u{6}\u{4}\u{2}\u{10E9}\u{10E7}\u{3}\u{2}\u{2}\u{2}\u{10E9}\u{10E8}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{10EA}\u{10EB}\u{3}\u{2}\u{2}\u{2}\u{10EB}\u{10EC}" .
		    "\u{7}\u{403}\u{2}\u{2}\u{10EC}\u{17B}\u{3}\u{2}\u{2}\u{2}\u{10ED}" .
		    "\u{10F0}\u{7}\u{AD}\u{2}\u{2}\u{10EE}\u{10F1}\u{5}\u{21E}\u{110}\u{2}" .
		    "\u{10EF}\u{10F1}\u{5}\u{25C}\u{12F}\u{2}\u{10F0}\u{10EE}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{10F0}\u{10EF}\u{3}\u{2}\u{2}\u{2}\u{10F1}\u{10F2}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{10F2}\u{10F4}\u{7}\u{9E}\u{2}\u{2}\u{10F3}\u{10F5}" .
		    "\u{5}\u{17A}\u{BE}\u{2}\u{10F4}\u{10F3}\u{3}\u{2}\u{2}\u{2}\u{10F5}" .
		    "\u{10F6}\u{3}\u{2}\u{2}\u{2}\u{10F6}\u{10F4}\u{3}\u{2}\u{2}\u{2}\u{10F6}" .
		    "\u{10F7}\u{3}\u{2}\u{2}\u{2}\u{10F7}\u{17D}\u{3}\u{2}\u{2}\u{2}\u{10F8}" .
		    "\u{10F9}\u{7}\u{34}\u{2}\u{2}\u{10F9}\u{10FA}\u{5}\u{25C}\u{12F}\u{2}" .
		    "\u{10FA}\u{10FC}\u{7}\u{9E}\u{2}\u{2}\u{10FB}\u{10FD}\u{5}\u{17A}" .
		    "\u{BE}\u{2}\u{10FC}\u{10FB}\u{3}\u{2}\u{2}\u{2}\u{10FD}\u{10FE}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{10FE}\u{10FC}\u{3}\u{2}\u{2}\u{2}\u{10FE}\u{10FF}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{10FF}\u{17F}\u{3}\u{2}\u{2}\u{2}\u{1100}\u{1101}" .
		    "\u{7}\u{9}\u{2}\u{2}\u{1101}\u{1102}\u{7}\u{240}\u{2}\u{2}\u{1102}" .
		    "\u{1107}\u{5}\u{192}\u{CA}\u{2}\u{1103}\u{1104}\u{7}\u{402}\u{2}\u{2}" .
		    "\u{1104}\u{1106}\u{5}\u{192}\u{CA}\u{2}\u{1105}\u{1103}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1106}\u{1109}\u{3}\u{2}\u{2}\u{2}\u{1107}\u{1105}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1107}\u{1108}\u{3}\u{2}\u{2}\u{2}\u{1108}\u{1137}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1109}\u{1107}\u{3}\u{2}\u{2}\u{2}\u{110A}\u{110B}" .
		    "\u{7}\u{9}\u{2}\u{2}\u{110B}\u{110D}\u{7}\u{240}\u{2}\u{2}\u{110C}" .
		    "\u{110E}\u{5}\u{244}\u{123}\u{2}\u{110D}\u{110C}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{110D}\u{110E}\u{3}\u{2}\u{2}\u{2}\u{110E}\u{110F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{110F}\u{1114}\u{5}\u{194}\u{CB}\u{2}\u{1110}\u{1111}\u{7}" .
		    "\u{402}\u{2}\u{2}\u{1111}\u{1113}\u{5}\u{194}\u{CB}\u{2}\u{1112}\u{1110}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1113}\u{1116}\u{3}\u{2}\u{2}\u{2}\u{1114}\u{1112}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1114}\u{1115}\u{3}\u{2}\u{2}\u{2}\u{1115}\u{1125}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1116}\u{1114}\u{3}\u{2}\u{2}\u{2}\u{1117}\u{1123}" .
		    "\u{7}\u{82}\u{2}\u{2}\u{1118}\u{1124}\u{7}\u{1C5}\u{2}\u{2}\u{1119}" .
		    "\u{1120}\u{5}\u{196}\u{CC}\u{2}\u{111A}\u{111C}\u{7}\u{C}\u{2}\u{2}" .
		    "\u{111B}\u{111A}\u{3}\u{2}\u{2}\u{2}\u{111B}\u{111C}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{111C}\u{111D}\u{3}\u{2}\u{2}\u{2}\u{111D}\u{111F}\u{5}\u{196}" .
		    "\u{CC}\u{2}\u{111E}\u{111B}\u{3}\u{2}\u{2}\u{2}\u{111F}\u{1122}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1120}\u{111E}\u{3}\u{2}\u{2}\u{2}\u{1120}\u{1121}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1121}\u{1124}\u{3}\u{2}\u{2}\u{2}\u{1122}\u{1120}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1123}\u{1118}\u{3}\u{2}\u{2}\u{2}\u{1123}\u{1119}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1124}\u{1126}\u{3}\u{2}\u{2}\u{2}\u{1125}\u{1117}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1125}\u{1126}\u{3}\u{2}\u{2}\u{2}\u{1126}\u{112D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1127}\u{1129}\u{7}\u{B0}\u{2}\u{2}\u{1128}" .
		    "\u{112A}\u{5}\u{198}\u{CD}\u{2}\u{1129}\u{1128}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{112A}\u{112B}\u{3}\u{2}\u{2}\u{2}\u{112B}\u{1129}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{112B}\u{112C}\u{3}\u{2}\u{2}\u{2}\u{112C}\u{112E}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{112D}\u{1127}\u{3}\u{2}\u{2}\u{2}\u{112D}\u{112E}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{112E}\u{1133}\u{3}\u{2}\u{2}\u{2}\u{112F}\u{1132}" .
		    "\u{5}\u{19A}\u{CE}\u{2}\u{1130}\u{1132}\u{5}\u{19C}\u{CF}\u{2}\u{1131}" .
		    "\u{112F}\u{3}\u{2}\u{2}\u{2}\u{1131}\u{1130}\u{3}\u{2}\u{2}\u{2}\u{1132}" .
		    "\u{1135}\u{3}\u{2}\u{2}\u{2}\u{1133}\u{1131}\u{3}\u{2}\u{2}\u{2}\u{1133}" .
		    "\u{1134}\u{3}\u{2}\u{2}\u{2}\u{1134}\u{1137}\u{3}\u{2}\u{2}\u{2}\u{1135}" .
		    "\u{1133}\u{3}\u{2}\u{2}\u{2}\u{1136}\u{1100}\u{3}\u{2}\u{2}\u{2}\u{1136}" .
		    "\u{110A}\u{3}\u{2}\u{2}\u{2}\u{1137}\u{181}\u{3}\u{2}\u{2}\u{2}\u{1138}" .
		    "\u{1139}\u{7}\u{20}\u{2}\u{2}\u{1139}\u{113A}\u{7}\u{240}\u{2}\u{2}" .
		    "\u{113A}\u{113F}\u{5}\u{194}\u{CB}\u{2}\u{113B}\u{113C}\u{7}\u{402}" .
		    "\u{2}\u{2}\u{113C}\u{113E}\u{5}\u{194}\u{CB}\u{2}\u{113D}\u{113B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{113E}\u{1141}\u{3}\u{2}\u{2}\u{2}\u{113F}\u{113D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{113F}\u{1140}\u{3}\u{2}\u{2}\u{2}\u{1140}\u{116F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1141}\u{113F}\u{3}\u{2}\u{2}\u{2}\u{1142}\u{1143}" .
		    "\u{7}\u{20}\u{2}\u{2}\u{1143}\u{1145}\u{7}\u{240}\u{2}\u{2}\u{1144}" .
		    "\u{1146}\u{5}\u{246}\u{124}\u{2}\u{1145}\u{1144}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1145}\u{1146}\u{3}\u{2}\u{2}\u{2}\u{1146}\u{1147}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1147}\u{114C}\u{5}\u{194}\u{CB}\u{2}\u{1148}\u{1149}\u{7}" .
		    "\u{402}\u{2}\u{2}\u{1149}\u{114B}\u{5}\u{194}\u{CB}\u{2}\u{114A}\u{1148}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{114B}\u{114E}\u{3}\u{2}\u{2}\u{2}\u{114C}\u{114A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{114C}\u{114D}\u{3}\u{2}\u{2}\u{2}\u{114D}\u{115D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{114E}\u{114C}\u{3}\u{2}\u{2}\u{2}\u{114F}\u{115B}" .
		    "\u{7}\u{82}\u{2}\u{2}\u{1150}\u{115C}\u{7}\u{1C5}\u{2}\u{2}\u{1151}" .
		    "\u{1158}\u{5}\u{196}\u{CC}\u{2}\u{1152}\u{1154}\u{7}\u{C}\u{2}\u{2}" .
		    "\u{1153}\u{1152}\u{3}\u{2}\u{2}\u{2}\u{1153}\u{1154}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1154}\u{1155}\u{3}\u{2}\u{2}\u{2}\u{1155}\u{1157}\u{5}\u{196}" .
		    "\u{CC}\u{2}\u{1156}\u{1153}\u{3}\u{2}\u{2}\u{2}\u{1157}\u{115A}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1158}\u{1156}\u{3}\u{2}\u{2}\u{2}\u{1158}\u{1159}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1159}\u{115C}\u{3}\u{2}\u{2}\u{2}\u{115A}\u{1158}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{115B}\u{1150}\u{3}\u{2}\u{2}\u{2}\u{115B}\u{1151}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{115C}\u{115E}\u{3}\u{2}\u{2}\u{2}\u{115D}\u{114F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{115D}\u{115E}\u{3}\u{2}\u{2}\u{2}\u{115E}\u{1165}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{115F}\u{1161}\u{7}\u{B0}\u{2}\u{2}\u{1160}" .
		    "\u{1162}\u{5}\u{198}\u{CD}\u{2}\u{1161}\u{1160}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1162}\u{1163}\u{3}\u{2}\u{2}\u{2}\u{1163}\u{1161}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1163}\u{1164}\u{3}\u{2}\u{2}\u{2}\u{1164}\u{1166}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1165}\u{115F}\u{3}\u{2}\u{2}\u{2}\u{1165}\u{1166}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1166}\u{116B}\u{3}\u{2}\u{2}\u{2}\u{1167}\u{116A}" .
		    "\u{5}\u{19A}\u{CE}\u{2}\u{1168}\u{116A}\u{5}\u{19C}\u{CF}\u{2}\u{1169}" .
		    "\u{1167}\u{3}\u{2}\u{2}\u{2}\u{1169}\u{1168}\u{3}\u{2}\u{2}\u{2}\u{116A}" .
		    "\u{116D}\u{3}\u{2}\u{2}\u{2}\u{116B}\u{1169}\u{3}\u{2}\u{2}\u{2}\u{116B}" .
		    "\u{116C}\u{3}\u{2}\u{2}\u{2}\u{116C}\u{116F}\u{3}\u{2}\u{2}\u{2}\u{116D}" .
		    "\u{116B}\u{3}\u{2}\u{2}\u{2}\u{116E}\u{1138}\u{3}\u{2}\u{2}\u{2}\u{116E}" .
		    "\u{1142}\u{3}\u{2}\u{2}\u{2}\u{116F}\u{183}\u{3}\u{2}\u{2}\u{2}\u{1170}" .
		    "\u{1171}\u{7}\u{31}\u{2}\u{2}\u{1171}\u{1173}\u{7}\u{240}\u{2}\u{2}" .
		    "\u{1172}\u{1174}\u{5}\u{244}\u{123}\u{2}\u{1173}\u{1172}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1173}\u{1174}\u{3}\u{2}\u{2}\u{2}\u{1174}\u{1175}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1175}\u{117A}\u{5}\u{1FA}\u{FE}\u{2}\u{1176}\u{1177}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{1177}\u{1179}\u{5}\u{1FA}\u{FE}\u{2}\u{1178}" .
		    "\u{1176}\u{3}\u{2}\u{2}\u{2}\u{1179}\u{117C}\u{3}\u{2}\u{2}\u{2}\u{117A}" .
		    "\u{1178}\u{3}\u{2}\u{2}\u{2}\u{117A}\u{117B}\u{3}\u{2}\u{2}\u{2}\u{117B}" .
		    "\u{185}\u{3}\u{2}\u{2}\u{2}\u{117C}\u{117A}\u{3}\u{2}\u{2}\u{2}\u{117D}" .
		    "\u{117E}\u{7}\u{43}\u{2}\u{2}\u{117E}\u{1183}\u{5}\u{19E}\u{D0}\u{2}" .
		    "\u{117F}\u{1180}\u{7}\u{402}\u{2}\u{2}\u{1180}\u{1182}\u{5}\u{19E}" .
		    "\u{D0}\u{2}\u{1181}\u{117F}\u{3}\u{2}\u{2}\u{2}\u{1182}\u{1185}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1183}\u{1181}\u{3}\u{2}\u{2}\u{2}\u{1183}\u{1184}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1184}\u{1186}\u{3}\u{2}\u{2}\u{2}\u{1185}\u{1183}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1186}\u{1188}\u{7}\u{6C}\u{2}\u{2}\u{1187}" .
		    "\u{1189}\u{9}\u{3C}\u{2}\u{2}\u{1188}\u{1187}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1188}\u{1189}\u{3}\u{2}\u{2}\u{2}\u{1189}\u{118A}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{118A}\u{118B}\u{5}\u{1A2}\u{D2}\u{2}\u{118B}\u{118C}\u{7}" .
		    "\u{9F}\u{2}\u{2}\u{118C}\u{1191}\u{5}\u{194}\u{CB}\u{2}\u{118D}\u{118E}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{118E}\u{1190}\u{5}\u{194}\u{CB}\u{2}\u{118F}" .
		    "\u{118D}\u{3}\u{2}\u{2}\u{2}\u{1190}\u{1193}\u{3}\u{2}\u{2}\u{2}\u{1191}" .
		    "\u{118F}\u{3}\u{2}\u{2}\u{2}\u{1191}\u{1192}\u{3}\u{2}\u{2}\u{2}\u{1192}" .
		    "\u{11A2}\u{3}\u{2}\u{2}\u{2}\u{1193}\u{1191}\u{3}\u{2}\u{2}\u{2}\u{1194}" .
		    "\u{11A0}\u{7}\u{82}\u{2}\u{2}\u{1195}\u{11A1}\u{7}\u{1C5}\u{2}\u{2}" .
		    "\u{1196}\u{119D}\u{5}\u{196}\u{CC}\u{2}\u{1197}\u{1199}\u{7}\u{C}" .
		    "\u{2}\u{2}\u{1198}\u{1197}\u{3}\u{2}\u{2}\u{2}\u{1198}\u{1199}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1199}\u{119A}\u{3}\u{2}\u{2}\u{2}\u{119A}\u{119C}" .
		    "\u{5}\u{196}\u{CC}\u{2}\u{119B}\u{1198}\u{3}\u{2}\u{2}\u{2}\u{119C}" .
		    "\u{119F}\u{3}\u{2}\u{2}\u{2}\u{119D}\u{119B}\u{3}\u{2}\u{2}\u{2}\u{119D}" .
		    "\u{119E}\u{3}\u{2}\u{2}\u{2}\u{119E}\u{11A1}\u{3}\u{2}\u{2}\u{2}\u{119F}" .
		    "\u{119D}\u{3}\u{2}\u{2}\u{2}\u{11A0}\u{1195}\u{3}\u{2}\u{2}\u{2}\u{11A0}" .
		    "\u{1196}\u{3}\u{2}\u{2}\u{2}\u{11A1}\u{11A3}\u{3}\u{2}\u{2}\u{2}\u{11A2}" .
		    "\u{1194}\u{3}\u{2}\u{2}\u{2}\u{11A2}\u{11A3}\u{3}\u{2}\u{2}\u{2}\u{11A3}" .
		    "\u{11AD}\u{3}\u{2}\u{2}\u{2}\u{11A4}\u{11AA}\u{7}\u{B0}\u{2}\u{2}" .
		    "\u{11A5}\u{11A6}\u{7}\u{43}\u{2}\u{2}\u{11A6}\u{11A9}\u{7}\u{6E}\u{2}" .
		    "\u{2}\u{11A7}\u{11A9}\u{5}\u{198}\u{CD}\u{2}\u{11A8}\u{11A5}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{11A8}\u{11A7}\u{3}\u{2}\u{2}\u{2}\u{11A9}\u{11AC}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{11AA}\u{11A8}\u{3}\u{2}\u{2}\u{2}\u{11AA}\u{11AB}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{11AB}\u{11AE}\u{3}\u{2}\u{2}\u{2}\u{11AC}\u{11AA}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{11AD}\u{11A4}\u{3}\u{2}\u{2}\u{2}\u{11AD}\u{11AE}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{11AE}\u{187}\u{3}\u{2}\u{2}\u{2}\u{11AF}\u{11B0}" .
		    "\u{7}\u{43}\u{2}\u{2}\u{11B0}\u{11B1}\u{7}\u{1E5}\u{2}\u{2}\u{11B1}" .
		    "\u{11B2}\u{7}\u{6C}\u{2}\u{2}\u{11B2}\u{11B3}\u{5}\u{1FA}\u{FE}\u{2}" .
		    "\u{11B3}\u{11B4}\u{7}\u{9F}\u{2}\u{2}\u{11B4}\u{11B9}\u{5}\u{1FA}" .
		    "\u{FE}\u{2}\u{11B5}\u{11B6}\u{7}\u{402}\u{2}\u{2}\u{11B6}\u{11B8}" .
		    "\u{5}\u{1FA}\u{FE}\u{2}\u{11B7}\u{11B5}\u{3}\u{2}\u{2}\u{2}\u{11B8}" .
		    "\u{11BB}\u{3}\u{2}\u{2}\u{2}\u{11B9}\u{11B7}\u{3}\u{2}\u{2}\u{2}\u{11B9}" .
		    "\u{11BA}\u{3}\u{2}\u{2}\u{2}\u{11BA}\u{11BF}\u{3}\u{2}\u{2}\u{2}\u{11BB}" .
		    "\u{11B9}\u{3}\u{2}\u{2}\u{2}\u{11BC}\u{11BD}\u{7}\u{B0}\u{2}\u{2}" .
		    "\u{11BD}\u{11BE}\u{7}\u{43}\u{2}\u{2}\u{11BE}\u{11C0}\u{7}\u{6E}\u{2}" .
		    "\u{2}\u{11BF}\u{11BC}\u{3}\u{2}\u{2}\u{2}\u{11BF}\u{11C0}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{11C0}\u{189}\u{3}\u{2}\u{2}\u{2}\u{11C1}\u{11C2}\u{7}" .
		    "\u{7F}\u{2}\u{2}\u{11C2}\u{11C3}\u{7}\u{240}\u{2}\u{2}\u{11C3}\u{11C8}" .
		    "\u{5}\u{1A4}\u{D3}\u{2}\u{11C4}\u{11C5}\u{7}\u{402}\u{2}\u{2}\u{11C5}" .
		    "\u{11C7}\u{5}\u{1A4}\u{D3}\u{2}\u{11C6}\u{11C4}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{11C7}\u{11CA}\u{3}\u{2}\u{2}\u{2}\u{11C8}\u{11C6}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{11C8}\u{11C9}\u{3}\u{2}\u{2}\u{2}\u{11C9}\u{18B}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{11CA}\u{11C8}\u{3}\u{2}\u{2}\u{2}\u{11CB}\u{11CC}\u{7}" .
		    "\u{86}\u{2}\u{2}\u{11CC}\u{11D1}\u{5}\u{19E}\u{D0}\u{2}\u{11CD}\u{11CE}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{11CE}\u{11D0}\u{5}\u{19E}\u{D0}\u{2}\u{11CF}" .
		    "\u{11CD}\u{3}\u{2}\u{2}\u{2}\u{11D0}\u{11D3}\u{3}\u{2}\u{2}\u{2}\u{11D1}" .
		    "\u{11CF}\u{3}\u{2}\u{2}\u{2}\u{11D1}\u{11D2}\u{3}\u{2}\u{2}\u{2}\u{11D2}" .
		    "\u{11D4}\u{3}\u{2}\u{2}\u{2}\u{11D3}\u{11D1}\u{3}\u{2}\u{2}\u{2}\u{11D4}" .
		    "\u{11D6}\u{7}\u{6C}\u{2}\u{2}\u{11D5}\u{11D7}\u{9}\u{3C}\u{2}\u{2}" .
		    "\u{11D6}\u{11D5}\u{3}\u{2}\u{2}\u{2}\u{11D6}\u{11D7}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{11D7}\u{11D8}\u{3}\u{2}\u{2}\u{2}\u{11D8}\u{11D9}\u{5}\u{1A2}" .
		    "\u{D2}\u{2}\u{11D9}\u{11DA}\u{7}\u{3F}\u{2}\u{2}\u{11DA}\u{11DF}\u{5}" .
		    "\u{1FA}\u{FE}\u{2}\u{11DB}\u{11DC}\u{7}\u{402}\u{2}\u{2}\u{11DC}\u{11DE}" .
		    "\u{5}\u{1FA}\u{FE}\u{2}\u{11DD}\u{11DB}\u{3}\u{2}\u{2}\u{2}\u{11DE}" .
		    "\u{11E1}\u{3}\u{2}\u{2}\u{2}\u{11DF}\u{11DD}\u{3}\u{2}\u{2}\u{2}\u{11DF}" .
		    "\u{11E0}\u{3}\u{2}\u{2}\u{2}\u{11E0}\u{11F4}\u{3}\u{2}\u{2}\u{2}\u{11E1}" .
		    "\u{11DF}\u{3}\u{2}\u{2}\u{2}\u{11E2}\u{11E3}\u{7}\u{86}\u{2}\u{2}" .
		    "\u{11E3}\u{11E5}\u{7}\u{8}\u{2}\u{2}\u{11E4}\u{11E6}\u{7}\u{266}\u{2}" .
		    "\u{2}\u{11E5}\u{11E4}\u{3}\u{2}\u{2}\u{2}\u{11E5}\u{11E6}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{11E6}\u{11E7}\u{3}\u{2}\u{2}\u{2}\u{11E7}\u{11E8}\u{7}" .
		    "\u{402}\u{2}\u{2}\u{11E8}\u{11E9}\u{7}\u{43}\u{2}\u{2}\u{11E9}\u{11EA}" .
		    "\u{7}\u{6E}\u{2}\u{2}\u{11EA}\u{11EB}\u{7}\u{3F}\u{2}\u{2}\u{11EB}" .
		    "\u{11F0}\u{5}\u{1FA}\u{FE}\u{2}\u{11EC}\u{11ED}\u{7}\u{402}\u{2}\u{2}" .
		    "\u{11ED}\u{11EF}\u{5}\u{1FA}\u{FE}\u{2}\u{11EE}\u{11EC}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{11EF}\u{11F2}\u{3}\u{2}\u{2}\u{2}\u{11F0}\u{11EE}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{11F0}\u{11F1}\u{3}\u{2}\u{2}\u{2}\u{11F1}\u{11F4}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{11F2}\u{11F0}\u{3}\u{2}\u{2}\u{2}\u{11F3}\u{11CB}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{11F3}\u{11E2}\u{3}\u{2}\u{2}\u{2}\u{11F4}\u{18D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{11F5}\u{11F6}\u{7}\u{86}\u{2}\u{2}\u{11F6}" .
		    "\u{11F7}\u{7}\u{1E5}\u{2}\u{2}\u{11F7}\u{11F8}\u{7}\u{6C}\u{2}\u{2}" .
		    "\u{11F8}\u{11F9}\u{5}\u{1FA}\u{FE}\u{2}\u{11F9}\u{11FA}\u{7}\u{3F}" .
		    "\u{2}\u{2}\u{11FA}\u{11FF}\u{5}\u{1FA}\u{FE}\u{2}\u{11FB}\u{11FC}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{11FC}\u{11FE}\u{5}\u{1FA}\u{FE}\u{2}\u{11FD}" .
		    "\u{11FB}\u{3}\u{2}\u{2}\u{2}\u{11FE}\u{1201}\u{3}\u{2}\u{2}\u{2}\u{11FF}" .
		    "\u{11FD}\u{3}\u{2}\u{2}\u{2}\u{11FF}\u{1200}\u{3}\u{2}\u{2}\u{2}\u{1200}" .
		    "\u{18F}\u{3}\u{2}\u{2}\u{2}\u{1201}\u{11FF}\u{3}\u{2}\u{2}\u{2}\u{1202}" .
		    "\u{1203}\u{7}\u{8C}\u{2}\u{2}\u{1203}\u{1206}\u{7}\u{1D8}\u{2}\u{2}" .
		    "\u{1204}\u{1205}\u{7}\u{3C}\u{2}\u{2}\u{1205}\u{1207}\u{5}\u{1FA}" .
		    "\u{FE}\u{2}\u{1206}\u{1204}\u{3}\u{2}\u{2}\u{2}\u{1206}\u{1207}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1207}\u{1208}\u{3}\u{2}\u{2}\u{2}\u{1208}\u{120B}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{1209}\u{120C}\u{5}\u{256}\u{12C}\u{2}\u{120A}" .
		    "\u{120C}\u{7}\u{40F}\u{2}\u{2}\u{120B}\u{1209}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{120B}\u{120A}\u{3}\u{2}\u{2}\u{2}\u{120C}\u{191}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{120D}\u{120E}\u{5}\u{1FA}\u{FE}\u{2}\u{120E}\u{120F}\u{5}" .
		    "\u{19A}\u{CE}\u{2}\u{120F}\u{193}\u{3}\u{2}\u{2}\u{2}\u{1210}\u{1211}" .
		    "\u{5}\u{1FA}\u{FE}\u{2}\u{1211}\u{1212}\u{7}\u{17C}\u{2}\u{2}\u{1212}" .
		    "\u{1213}\u{7}\u{12}\u{2}\u{2}\u{1213}\u{1214}\u{7}\u{1D8}\u{2}\u{2}" .
		    "\u{1214}\u{1215}\u{7}\u{40F}\u{2}\u{2}\u{1215}\u{1229}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1216}\u{1217}\u{5}\u{1FA}\u{FE}\u{2}\u{1217}\u{121A}\u{7}" .
		    "\u{17C}\u{2}\u{2}\u{1218}\u{1219}\u{7}\u{B0}\u{2}\u{2}\u{1219}\u{121B}" .
		    "\u{5}\u{20A}\u{106}\u{2}\u{121A}\u{1218}\u{3}\u{2}\u{2}\u{2}\u{121A}" .
		    "\u{121B}\u{3}\u{2}\u{2}\u{2}\u{121B}\u{121C}\u{3}\u{2}\u{2}\u{2}\u{121C}" .
		    "\u{121D}\u{7}\u{12}\u{2}\u{2}\u{121D}\u{121E}\u{7}\u{40F}\u{2}\u{2}" .
		    "\u{121E}\u{1229}\u{3}\u{2}\u{2}\u{2}\u{121F}\u{1220}\u{5}\u{1FA}\u{FE}" .
		    "\u{2}\u{1220}\u{1221}\u{7}\u{17C}\u{2}\u{2}\u{1221}\u{1222}\u{7}\u{B0}" .
		    "\u{2}\u{2}\u{1222}\u{1225}\u{5}\u{20A}\u{106}\u{2}\u{1223}\u{1224}" .
		    "\u{7}\u{D}\u{2}\u{2}\u{1224}\u{1226}\u{7}\u{40F}\u{2}\u{2}\u{1225}" .
		    "\u{1223}\u{3}\u{2}\u{2}\u{2}\u{1225}\u{1226}\u{3}\u{2}\u{2}\u{2}\u{1226}" .
		    "\u{1229}\u{3}\u{2}\u{2}\u{2}\u{1227}\u{1229}\u{5}\u{1FA}\u{FE}\u{2}" .
		    "\u{1228}\u{1210}\u{3}\u{2}\u{2}\u{2}\u{1228}\u{1216}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1228}\u{121F}\u{3}\u{2}\u{2}\u{2}\u{1228}\u{1227}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1229}\u{195}\u{3}\u{2}\u{2}\u{2}\u{122A}\u{1233}\u{7}" .
		    "\u{98}\u{2}\u{2}\u{122B}\u{1233}\u{7}\u{24E}\u{2}\u{2}\u{122C}\u{122D}" .
		    "\u{7}\u{12A}\u{2}\u{2}\u{122D}\u{1233}\u{7}\u{40F}\u{2}\u{2}\u{122E}" .
		    "\u{122F}\u{7}\u{18B}\u{2}\u{2}\u{122F}\u{1233}\u{7}\u{40F}\u{2}\u{2}" .
		    "\u{1230}\u{1231}\u{7}\u{229}\u{2}\u{2}\u{1231}\u{1233}\u{7}\u{40F}" .
		    "\u{2}\u{2}\u{1232}\u{122A}\u{3}\u{2}\u{2}\u{2}\u{1232}\u{122B}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1232}\u{122C}\u{3}\u{2}\u{2}\u{2}\u{1232}\u{122E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1232}\u{1230}\u{3}\u{2}\u{2}\u{2}\u{1233}\u{197}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1234}\u{1235}\u{7}\u{1AD}\u{2}\u{2}\u{1235}" .
		    "\u{123D}\u{5}\u{212}\u{10A}\u{2}\u{1236}\u{1237}\u{7}\u{1B0}\u{2}" .
		    "\u{2}\u{1237}\u{123D}\u{5}\u{212}\u{10A}\u{2}\u{1238}\u{1239}\u{7}" .
		    "\u{1AC}\u{2}\u{2}\u{1239}\u{123D}\u{5}\u{212}\u{10A}\u{2}\u{123A}" .
		    "\u{123B}\u{7}\u{1B1}\u{2}\u{2}\u{123B}\u{123D}\u{5}\u{212}\u{10A}" .
		    "\u{2}\u{123C}\u{1234}\u{3}\u{2}\u{2}\u{2}\u{123C}\u{1236}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{123C}\u{1238}\u{3}\u{2}\u{2}\u{2}\u{123C}\u{123A}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{123D}\u{199}\u{3}\u{2}\u{2}\u{2}\u{123E}\u{123F}" .
		    "\u{7}\u{1D8}\u{2}\u{2}\u{123F}\u{1246}\u{7}\u{163}\u{2}\u{2}\u{1240}" .
		    "\u{1247}\u{7}\u{28}\u{2}\u{2}\u{1241}\u{1247}\u{7}\u{1C1}\u{2}\u{2}" .
		    "\u{1242}\u{1243}\u{7}\u{4F}\u{2}\u{2}\u{1243}\u{1244}\u{5}\u{212}" .
		    "\u{10A}\u{2}\u{1244}\u{1245}\u{7}\u{258}\u{2}\u{2}\u{1245}\u{1247}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1246}\u{1240}\u{3}\u{2}\u{2}\u{2}\u{1246}\u{1241}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1246}\u{1242}\u{3}\u{2}\u{2}\u{2}\u{1246}\u{1247}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1247}\u{19B}\u{3}\u{2}\u{2}\u{2}\u{1248}\u{1249}" .
		    "\u{7}\u{110}\u{2}\u{2}\u{1249}\u{124A}\u{9}\u{3D}\u{2}\u{2}\u{124A}" .
		    "\u{19D}\u{3}\u{2}\u{2}\u{2}\u{124B}\u{1250}\u{5}\u{1A0}\u{D1}\u{2}" .
		    "\u{124C}\u{124D}\u{7}\u{400}\u{2}\u{2}\u{124D}\u{124E}\u{5}\u{22C}" .
		    "\u{117}\u{2}\u{124E}\u{124F}\u{7}\u{401}\u{2}\u{2}\u{124F}\u{1251}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1250}\u{124C}\u{3}\u{2}\u{2}\u{2}\u{1250}\u{1251}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1251}\u{19F}\u{3}\u{2}\u{2}\u{2}\u{1252}\u{1254}" .
		    "\u{7}\u{8}\u{2}\u{2}\u{1253}\u{1255}\u{7}\u{266}\u{2}\u{2}\u{1254}" .
		    "\u{1253}\u{3}\u{2}\u{2}\u{2}\u{1254}\u{1255}\u{3}\u{2}\u{2}\u{2}\u{1255}" .
		    "\u{127E}\u{3}\u{2}\u{2}\u{2}\u{1256}\u{1258}\u{7}\u{9}\u{2}\u{2}\u{1257}" .
		    "\u{1259}\u{7}\u{25F}\u{2}\u{2}\u{1258}\u{1257}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1258}\u{1259}\u{3}\u{2}\u{2}\u{2}\u{1259}\u{127E}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{125A}\u{1261}\u{7}\u{20}\u{2}\u{2}\u{125B}\u{125C}\u{7}\u{231}" .
		    "\u{2}\u{2}\u{125C}\u{1262}\u{7}\u{25E}\u{2}\u{2}\u{125D}\u{1262}\u{7}" .
		    "\u{25F}\u{2}\u{2}\u{125E}\u{1262}\u{7}\u{246}\u{2}\u{2}\u{125F}\u{1262}" .
		    "\u{7}\u{240}\u{2}\u{2}\u{1260}\u{1262}\u{7}\u{230}\u{2}\u{2}\u{1261}" .
		    "\u{125B}\u{3}\u{2}\u{2}\u{2}\u{1261}\u{125D}\u{3}\u{2}\u{2}\u{2}\u{1261}" .
		    "\u{125E}\u{3}\u{2}\u{2}\u{2}\u{1261}\u{125F}\u{3}\u{2}\u{2}\u{2}\u{1261}" .
		    "\u{1260}\u{3}\u{2}\u{2}\u{2}\u{1261}\u{1262}\u{3}\u{2}\u{2}\u{2}\u{1262}" .
		    "\u{127E}\u{3}\u{2}\u{2}\u{2}\u{1263}\u{127E}\u{7}\u{2A}\u{2}\u{2}" .
		    "\u{1264}\u{127E}\u{7}\u{31}\u{2}\u{2}\u{1265}\u{127E}\u{7}\u{15E}" .
		    "\u{2}\u{2}\u{1266}\u{127E}\u{7}\u{260}\u{2}\u{2}\u{1267}\u{127E}\u{7}" .
		    "\u{261}\u{2}\u{2}\u{1268}\u{1269}\u{7}\u{43}\u{2}\u{2}\u{1269}\u{127E}" .
		    "\u{7}\u{6E}\u{2}\u{2}\u{126A}\u{127E}\u{7}\u{4A}\u{2}\u{2}\u{126B}" .
		    "\u{127E}\u{7}\u{4E}\u{2}\u{2}\u{126C}\u{126D}\u{7}\u{5F}\u{2}\u{2}" .
		    "\u{126D}\u{127E}\u{7}\u{25E}\u{2}\u{2}\u{126E}\u{127E}\u{7}\u{262}" .
		    "\u{2}\u{2}\u{126F}\u{127E}\u{7}\u{1E5}\u{2}\u{2}\u{1270}\u{127E}\u{7}" .
		    "\u{7C}\u{2}\u{2}\u{1271}\u{127E}\u{7}\u{263}\u{2}\u{2}\u{1272}\u{1273}" .
		    "\u{7}\u{1FA}\u{2}\u{2}\u{1273}\u{127E}\u{9}\u{3E}\u{2}\u{2}\u{1274}" .
		    "\u{127E}\u{7}\u{8B}\u{2}\u{2}\u{1275}\u{1276}\u{7}\u{8E}\u{2}\u{2}" .
		    "\u{1276}\u{127E}\u{9}\u{3F}\u{2}\u{2}\u{1277}\u{127E}\u{7}\u{264}" .
		    "\u{2}\u{2}\u{1278}\u{127E}\u{7}\u{265}\u{2}\u{2}\u{1279}\u{127E}\u{7}" .
		    "\u{A1}\u{2}\u{2}\u{127A}\u{127E}\u{7}\u{A8}\u{2}\u{2}\u{127B}\u{127E}" .
		    "\u{7}\u{A9}\u{2}\u{2}\u{127C}\u{127E}\u{7}\u{27A}\u{2}\u{2}\u{127D}" .
		    "\u{1252}\u{3}\u{2}\u{2}\u{2}\u{127D}\u{1256}\u{3}\u{2}\u{2}\u{2}\u{127D}" .
		    "\u{125A}\u{3}\u{2}\u{2}\u{2}\u{127D}\u{1263}\u{3}\u{2}\u{2}\u{2}\u{127D}" .
		    "\u{1264}\u{3}\u{2}\u{2}\u{2}\u{127D}\u{1265}\u{3}\u{2}\u{2}\u{2}\u{127D}" .
		    "\u{1266}\u{3}\u{2}\u{2}\u{2}\u{127D}\u{1267}\u{3}\u{2}\u{2}\u{2}\u{127D}" .
		    "\u{1268}\u{3}\u{2}\u{2}\u{2}\u{127D}\u{126A}\u{3}\u{2}\u{2}\u{2}\u{127D}" .
		    "\u{126B}\u{3}\u{2}\u{2}\u{2}\u{127D}\u{126C}\u{3}\u{2}\u{2}\u{2}\u{127D}" .
		    "\u{126E}\u{3}\u{2}\u{2}\u{2}\u{127D}\u{126F}\u{3}\u{2}\u{2}\u{2}\u{127D}" .
		    "\u{1270}\u{3}\u{2}\u{2}\u{2}\u{127D}\u{1271}\u{3}\u{2}\u{2}\u{2}\u{127D}" .
		    "\u{1272}\u{3}\u{2}\u{2}\u{2}\u{127D}\u{1274}\u{3}\u{2}\u{2}\u{2}\u{127D}" .
		    "\u{1275}\u{3}\u{2}\u{2}\u{2}\u{127D}\u{1277}\u{3}\u{2}\u{2}\u{2}\u{127D}" .
		    "\u{1278}\u{3}\u{2}\u{2}\u{2}\u{127D}\u{1279}\u{3}\u{2}\u{2}\u{2}\u{127D}" .
		    "\u{127A}\u{3}\u{2}\u{2}\u{2}\u{127D}\u{127B}\u{3}\u{2}\u{2}\u{2}\u{127D}" .
		    "\u{127C}\u{3}\u{2}\u{2}\u{2}\u{127E}\u{1A1}\u{3}\u{2}\u{2}\u{2}\u{127F}" .
		    "\u{1290}\u{7}\u{3EF}\u{2}\u{2}\u{1280}\u{1281}\u{7}\u{3EF}\u{2}\u{2}" .
		    "\u{1281}\u{1282}\u{7}\u{3FF}\u{2}\u{2}\u{1282}\u{1290}\u{7}\u{3EF}" .
		    "\u{2}\u{2}\u{1283}\u{1284}\u{5}\u{20C}\u{107}\u{2}\u{1284}\u{1285}" .
		    "\u{7}\u{3FF}\u{2}\u{2}\u{1285}\u{1286}\u{7}\u{3EF}\u{2}\u{2}\u{1286}" .
		    "\u{1290}\u{3}\u{2}\u{2}\u{2}\u{1287}\u{1288}\u{5}\u{20C}\u{107}\u{2}" .
		    "\u{1288}\u{1289}\u{7}\u{3FF}\u{2}\u{2}\u{1289}\u{128A}\u{5}\u{20C}" .
		    "\u{107}\u{2}\u{128A}\u{1290}\u{3}\u{2}\u{2}\u{2}\u{128B}\u{128C}\u{5}" .
		    "\u{20C}\u{107}\u{2}\u{128C}\u{128D}\u{5}\u{210}\u{109}\u{2}\u{128D}" .
		    "\u{1290}\u{3}\u{2}\u{2}\u{2}\u{128E}\u{1290}\u{5}\u{20C}\u{107}\u{2}" .
		    "\u{128F}\u{127F}\u{3}\u{2}\u{2}\u{2}\u{128F}\u{1280}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{128F}\u{1283}\u{3}\u{2}\u{2}\u{2}\u{128F}\u{1287}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{128F}\u{128B}\u{3}\u{2}\u{2}\u{2}\u{128F}\u{128E}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1290}\u{1A3}\u{3}\u{2}\u{2}\u{2}\u{1291}\u{1292}" .
		    "\u{5}\u{1FA}\u{FE}\u{2}\u{1292}\u{1293}\u{7}\u{9F}\u{2}\u{2}\u{1293}" .
		    "\u{1294}\u{5}\u{1FA}\u{FE}\u{2}\u{1294}\u{1A5}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1295}\u{1297}\u{7}\u{B}\u{2}\u{2}\u{1296}\u{1298}\u{9}\u{40}\u{2}" .
		    "\u{2}\u{1297}\u{1296}\u{3}\u{2}\u{2}\u{2}\u{1297}\u{1298}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1298}\u{1299}\u{3}\u{2}\u{2}\u{2}\u{1299}\u{129A}\u{7}" .
		    "\u{9C}\u{2}\u{2}\u{129A}\u{129B}\u{5}\u{22E}\u{118}\u{2}\u{129B}\u{1A7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{129C}\u{129D}\u{7}\u{19}\u{2}\u{2}\u{129D}" .
		    "\u{129E}\u{7}\u{9C}\u{2}\u{2}\u{129E}\u{12A2}\u{5}\u{22E}\u{118}\u{2}" .
		    "\u{129F}\u{12A1}\u{5}\u{1B0}\u{D9}\u{2}\u{12A0}\u{129F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{12A1}\u{12A4}\u{3}\u{2}\u{2}\u{2}\u{12A2}\u{12A0}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{12A2}\u{12A3}\u{3}\u{2}\u{2}\u{2}\u{12A3}\u{1A9}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{12A4}\u{12A2}\u{3}\u{2}\u{2}\u{2}\u{12A5}\u{12A6}" .
		    "\u{7}\u{128}\u{2}\u{2}\u{12A6}\u{12A7}\u{7}\u{9C}\u{2}\u{2}\u{12A7}" .
		    "\u{12A9}\u{5}\u{22E}\u{118}\u{2}\u{12A8}\u{12AA}\u{9}\u{41}\u{2}\u{2}" .
		    "\u{12A9}\u{12A8}\u{3}\u{2}\u{2}\u{2}\u{12A9}\u{12AA}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{12AA}\u{1AB}\u{3}\u{2}\u{2}\u{2}\u{12AB}\u{12AD}\u{7}\u{6D}" .
		    "\u{2}\u{2}\u{12AC}\u{12AE}\u{9}\u{40}\u{2}\u{2}\u{12AD}\u{12AC}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{12AD}\u{12AE}\u{3}\u{2}\u{2}\u{2}\u{12AE}\u{12AF}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{12AF}\u{12B0}\u{7}\u{9C}\u{2}\u{2}\u{12B0}" .
		    "\u{12B1}\u{5}\u{22E}\u{118}\u{2}\u{12B1}\u{1AD}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{12B2}\u{12B4}\u{7}\u{1F2}\u{2}\u{2}\u{12B3}\u{12B5}\u{9}\u{40}" .
		    "\u{2}\u{2}\u{12B4}\u{12B3}\u{3}\u{2}\u{2}\u{2}\u{12B4}\u{12B5}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{12B5}\u{12B6}\u{3}\u{2}\u{2}\u{2}\u{12B6}\u{12B7}" .
		    "\u{7}\u{9C}\u{2}\u{2}\u{12B7}\u{12B9}\u{5}\u{22E}\u{118}\u{2}\u{12B8}" .
		    "\u{12BA}\u{7}\u{1E7}\u{2}\u{2}\u{12B9}\u{12B8}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{12B9}\u{12BA}\u{3}\u{2}\u{2}\u{2}\u{12BA}\u{12BC}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{12BB}\u{12BD}\u{7}\u{165}\u{2}\u{2}\u{12BC}\u{12BB}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{12BC}\u{12BD}\u{3}\u{2}\u{2}\u{2}\u{12BD}\u{12BF}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{12BE}\u{12C0}\u{7}\u{241}\u{2}\u{2}\u{12BF}\u{12BE}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{12BF}\u{12C0}\u{3}\u{2}\u{2}\u{2}\u{12C0}\u{1AF}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{12C1}\u{12C2}\u{7}\u{3C}\u{2}\u{2}\u{12C2}" .
		    "\u{12C9}\u{7}\u{23F}\u{2}\u{2}\u{12C3}\u{12C9}\u{7}\u{1E7}\u{2}\u{2}" .
		    "\u{12C4}\u{12C9}\u{7}\u{167}\u{2}\u{2}\u{12C5}\u{12C9}\u{7}\u{1B2}" .
		    "\u{2}\u{2}\u{12C6}\u{12C9}\u{7}\u{165}\u{2}\u{2}\u{12C7}\u{12C9}\u{7}" .
		    "\u{126}\u{2}\u{2}\u{12C8}\u{12C1}\u{3}\u{2}\u{2}\u{2}\u{12C8}\u{12C3}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{12C8}\u{12C4}\u{3}\u{2}\u{2}\u{2}\u{12C8}\u{12C5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{12C8}\u{12C6}\u{3}\u{2}\u{2}\u{2}\u{12C8}\u{12C7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{12C9}\u{1B1}\u{3}\u{2}\u{2}\u{2}\u{12CA}\u{12CC}" .
		    "\u{7}\u{20}\u{2}\u{2}\u{12CB}\u{12CD}\u{7}\u{113}\u{2}\u{2}\u{12CC}" .
		    "\u{12CB}\u{3}\u{2}\u{2}\u{2}\u{12CC}\u{12CD}\u{3}\u{2}\u{2}\u{2}\u{12CD}" .
		    "\u{12CE}\u{3}\u{2}\u{2}\u{2}\u{12CE}\u{12CF}\u{7}\u{172}\u{2}\u{2}" .
		    "\u{12CF}\u{12D0}\u{5}\u{20C}\u{107}\u{2}\u{12D0}\u{12D1}\u{7}\u{1FE}" .
		    "\u{2}\u{2}\u{12D1}\u{12D2}\u{9}\u{42}\u{2}\u{2}\u{12D2}\u{12D3}\u{7}" .
		    "\u{214}\u{2}\u{2}\u{12D3}\u{12D4}\u{7}\u{40F}\u{2}\u{2}\u{12D4}\u{1B3}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{12D5}\u{12D6}\u{7}\u{183}\u{2}\u{2}\u{12D6}" .
		    "\u{12D7}\u{7}\u{1DA}\u{2}\u{2}\u{12D7}\u{12D8}\u{5}\u{20C}\u{107}" .
		    "\u{2}\u{12D8}\u{12D9}\u{7}\u{214}\u{2}\u{2}\u{12D9}\u{12DA}\u{7}\u{40F}" .
		    "\u{2}\u{2}\u{12DA}\u{1B5}\u{3}\u{2}\u{2}\u{2}\u{12DB}\u{12DC}\u{7}" .
		    "\u{23C}\u{2}\u{2}\u{12DC}\u{12DD}\u{7}\u{1DA}\u{2}\u{2}\u{12DD}\u{12DE}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{12DE}\u{1B7}\u{3}\u{2}\u{2}\u{2}\u{12DF}" .
		    "\u{12E0}\u{7}\u{8C}\u{2}\u{2}\u{12E0}\u{12E1}\u{5}\u{1BC}\u{DF}\u{2}" .
		    "\u{12E1}\u{12E2}\u{9}\u{43}\u{2}\u{2}\u{12E2}\u{12EA}\u{5}\u{25C}" .
		    "\u{12F}\u{2}\u{12E3}\u{12E4}\u{7}\u{402}\u{2}\u{2}\u{12E4}\u{12E5}" .
		    "\u{5}\u{1BC}\u{DF}\u{2}\u{12E5}\u{12E6}\u{9}\u{43}\u{2}\u{2}\u{12E6}" .
		    "\u{12E7}\u{5}\u{25C}\u{12F}\u{2}\u{12E7}\u{12E9}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{12E8}\u{12E3}\u{3}\u{2}\u{2}\u{2}\u{12E9}\u{12EC}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{12EA}\u{12E8}\u{3}\u{2}\u{2}\u{2}\u{12EA}\u{12EB}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{12EB}\u{1313}\u{3}\u{2}\u{2}\u{2}\u{12EC}\u{12EA}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{12ED}\u{12F1}\u{7}\u{8C}\u{2}\u{2}\u{12EE}\u{12EF}" .
		    "\u{7}\u{18}\u{2}\u{2}\u{12EF}\u{12F2}\u{7}\u{8C}\u{2}\u{2}\u{12F0}" .
		    "\u{12F2}\u{7}\u{2DF}\u{2}\u{2}\u{12F1}\u{12EE}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{12F1}\u{12F0}\u{3}\u{2}\u{2}\u{2}\u{12F2}\u{12F5}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{12F3}\u{12F6}\u{5}\u{1FE}\u{100}\u{2}\u{12F4}\u{12F6}\u{7}" .
		    "\u{28}\u{2}\u{2}\u{12F5}\u{12F3}\u{3}\u{2}\u{2}\u{2}\u{12F5}\u{12F4}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{12F6}\u{1313}\u{3}\u{2}\u{2}\u{2}\u{12F7}\u{12F8}" .
		    "\u{7}\u{8C}\u{2}\u{2}\u{12F8}\u{12FF}\u{7}\u{1BF}\u{2}\u{2}\u{12F9}" .
		    "\u{12FC}\u{5}\u{1FE}\u{100}\u{2}\u{12FA}\u{12FB}\u{7}\u{1A}\u{2}\u{2}" .
		    "\u{12FB}\u{12FD}\u{5}\u{200}\u{101}\u{2}\u{12FC}\u{12FA}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{12FC}\u{12FD}\u{3}\u{2}\u{2}\u{2}\u{12FD}\u{1300}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{12FE}\u{1300}\u{7}\u{28}\u{2}\u{2}\u{12FF}\u{12F9}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{12FF}\u{12FE}\u{3}\u{2}\u{2}\u{2}\u{1300}\u{1313}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1301}\u{1313}\u{5}\u{190}\u{C9}\u{2}\u{1302}" .
		    "\u{1313}\u{5}\u{114}\u{8B}\u{2}\u{1303}\u{1313}\u{5}\u{112}\u{8A}" .
		    "\u{2}\u{1304}\u{1305}\u{7}\u{8C}\u{2}\u{2}\u{1305}\u{1306}\u{5}\u{1F2}" .
		    "\u{FA}\u{2}\u{1306}\u{1307}\u{9}\u{43}\u{2}\u{2}\u{1307}\u{130F}\u{5}" .
		    "\u{25C}\u{12F}\u{2}\u{1308}\u{1309}\u{7}\u{402}\u{2}\u{2}\u{1309}" .
		    "\u{130A}\u{5}\u{1F2}\u{FA}\u{2}\u{130A}\u{130B}\u{9}\u{43}\u{2}\u{2}" .
		    "\u{130B}\u{130C}\u{5}\u{25C}\u{12F}\u{2}\u{130C}\u{130E}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{130D}\u{1308}\u{3}\u{2}\u{2}\u{2}\u{130E}\u{1311}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{130F}\u{130D}\u{3}\u{2}\u{2}\u{2}\u{130F}\u{1310}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1310}\u{1313}\u{3}\u{2}\u{2}\u{2}\u{1311}\u{130F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1312}\u{12DF}\u{3}\u{2}\u{2}\u{2}\u{1312}\u{12ED}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1312}\u{12F7}\u{3}\u{2}\u{2}\u{2}\u{1312}\u{1301}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1312}\u{1302}\u{3}\u{2}\u{2}\u{2}\u{1312}\u{1303}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1312}\u{1304}\u{3}\u{2}\u{2}\u{2}\u{1313}\u{1B9}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1314}\u{1315}\u{7}\u{8E}\u{2}\u{2}\u{1315}" .
		    "\u{1316}\u{9}\u{32}\u{2}\u{2}\u{1316}\u{13AC}\u{7}\u{196}\u{2}\u{2}" .
		    "\u{1317}\u{1318}\u{7}\u{8E}\u{2}\u{2}\u{1318}\u{1319}\u{9}\u{44}\u{2}" .
		    "\u{2}\u{1319}\u{131C}\u{7}\u{15F}\u{2}\u{2}\u{131A}\u{131B}\u{7}\u{49}" .
		    "\u{2}\u{2}\u{131B}\u{131D}\u{7}\u{40F}\u{2}\u{2}\u{131C}\u{131A}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{131C}\u{131D}\u{3}\u{2}\u{2}\u{2}\u{131D}\u{1320}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{131E}\u{131F}\u{7}\u{3F}\u{2}\u{2}\u{131F}" .
		    "\u{1321}\u{5}\u{212}\u{10A}\u{2}\u{1320}\u{131E}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1320}\u{1321}\u{3}\u{2}\u{2}\u{2}\u{1321}\u{1329}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1322}\u{1326}\u{7}\u{5B}\u{2}\u{2}\u{1323}\u{1324}\u{5}\u{212}" .
		    "\u{10A}\u{2}\u{1324}\u{1325}\u{7}\u{402}\u{2}\u{2}\u{1325}\u{1327}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1326}\u{1323}\u{3}\u{2}\u{2}\u{2}\u{1326}\u{1327}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1327}\u{1328}\u{3}\u{2}\u{2}\u{2}\u{1328}\u{132A}" .
		    "\u{5}\u{212}\u{10A}\u{2}\u{1329}\u{1322}\u{3}\u{2}\u{2}\u{2}\u{1329}" .
		    "\u{132A}\u{3}\u{2}\u{2}\u{2}\u{132A}\u{13AC}\u{3}\u{2}\u{2}\u{2}\u{132B}" .
		    "\u{132C}\u{7}\u{8E}\u{2}\u{2}\u{132C}\u{132E}\u{5}\u{1BE}\u{E0}\u{2}" .
		    "\u{132D}\u{132F}\u{5}\u{1C0}\u{E1}\u{2}\u{132E}\u{132D}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{132E}\u{132F}\u{3}\u{2}\u{2}\u{2}\u{132F}\u{13AC}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1330}\u{1332}\u{7}\u{8E}\u{2}\u{2}\u{1331}\u{1333}" .
		    "\u{7}\u{171}\u{2}\u{2}\u{1332}\u{1331}\u{3}\u{2}\u{2}\u{2}\u{1332}" .
		    "\u{1333}\u{3}\u{2}\u{2}\u{2}\u{1333}\u{1334}\u{3}\u{2}\u{2}\u{2}\u{1334}" .
		    "\u{1335}\u{9}\u{24}\u{2}\u{2}\u{1335}\u{1336}\u{9}\u{45}\u{2}\u{2}" .
		    "\u{1336}\u{1339}\u{5}\u{1F4}\u{FB}\u{2}\u{1337}\u{1338}\u{9}\u{45}" .
		    "\u{2}\u{2}\u{1338}\u{133A}\u{5}\u{20C}\u{107}\u{2}\u{1339}\u{1337}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1339}\u{133A}\u{3}\u{2}\u{2}\u{2}\u{133A}\u{133C}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{133B}\u{133D}\u{5}\u{1C0}\u{E1}\u{2}\u{133C}" .
		    "\u{133B}\u{3}\u{2}\u{2}\u{2}\u{133C}\u{133D}\u{3}\u{2}\u{2}\u{2}\u{133D}" .
		    "\u{13AC}\u{3}\u{2}\u{2}\u{2}\u{133E}\u{133F}\u{7}\u{8E}\u{2}\u{2}" .
		    "\u{133F}\u{1340}\u{7}\u{20}\u{2}\u{2}\u{1340}\u{1342}\u{9}\u{2}\u{2}" .
		    "\u{2}\u{1341}\u{1343}\u{5}\u{246}\u{124}\u{2}\u{1342}\u{1341}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1342}\u{1343}\u{3}\u{2}\u{2}\u{2}\u{1343}\u{1344}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1344}\u{13AC}\u{5}\u{20C}\u{107}\u{2}\u{1345}" .
		    "\u{1346}\u{7}\u{8E}\u{2}\u{2}\u{1346}\u{1347}\u{7}\u{20}\u{2}\u{2}" .
		    "\u{1347}\u{1348}\u{9}\u{46}\u{2}\u{2}\u{1348}\u{13AC}\u{5}\u{1F2}" .
		    "\u{FA}\u{2}\u{1349}\u{134A}\u{7}\u{8E}\u{2}\u{2}\u{134A}\u{134B}\u{7}" .
		    "\u{20}\u{2}\u{2}\u{134B}\u{134C}\u{7}\u{240}\u{2}\u{2}\u{134C}\u{13AC}" .
		    "\u{5}\u{1FA}\u{FE}\u{2}\u{134D}\u{134E}\u{7}\u{8E}\u{2}\u{2}\u{134E}" .
		    "\u{134F}\u{7}\u{158}\u{2}\u{2}\u{134F}\u{1350}\u{5}\u{202}\u{102}" .
		    "\u{2}\u{1350}\u{1351}\u{9}\u{47}\u{2}\u{2}\u{1351}\u{13AC}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1352}\u{1353}\u{7}\u{8E}\u{2}\u{2}\u{1353}\u{13AC}\u{5}" .
		    "\u{1C2}\u{E2}\u{2}\u{1354}\u{1355}\u{7}\u{8E}\u{2}\u{2}\u{1355}\u{1356}" .
		    "\u{9}\u{48}\u{2}\u{2}\u{1356}\u{135A}\u{7}\u{5B}\u{2}\u{2}\u{1357}" .
		    "\u{1358}\u{5}\u{212}\u{10A}\u{2}\u{1358}\u{1359}\u{7}\u{402}\u{2}" .
		    "\u{2}\u{1359}\u{135B}\u{3}\u{2}\u{2}\u{2}\u{135A}\u{1357}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{135A}\u{135B}\u{3}\u{2}\u{2}\u{2}\u{135B}\u{135C}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{135C}\u{13AC}\u{5}\u{212}\u{10A}\u{2}\u{135D}\u{135E}" .
		    "\u{7}\u{8E}\u{2}\u{2}\u{135E}\u{135F}\u{7}\u{F1}\u{2}\u{2}\u{135F}" .
		    "\u{1360}\u{7}\u{400}\u{2}\u{2}\u{1360}\u{1361}\u{7}\u{3EF}\u{2}\u{2}" .
		    "\u{1361}\u{1362}\u{7}\u{401}\u{2}\u{2}\u{1362}\u{13AC}\u{9}\u{48}" .
		    "\u{2}\u{2}\u{1363}\u{1364}\u{7}\u{8E}\u{2}\u{2}\u{1364}\u{1367}\u{5}" .
		    "\u{1C4}\u{E3}\u{2}\u{1365}\u{1366}\u{9}\u{45}\u{2}\u{2}\u{1366}\u{1368}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{1367}\u{1365}\u{3}\u{2}\u{2}\u{2}\u{1367}" .
		    "\u{1368}\u{3}\u{2}\u{2}\u{2}\u{1368}\u{136A}\u{3}\u{2}\u{2}\u{2}\u{1369}" .
		    "\u{136B}\u{5}\u{1C0}\u{E1}\u{2}\u{136A}\u{1369}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{136A}\u{136B}\u{3}\u{2}\u{2}\u{2}\u{136B}\u{13AC}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{136C}\u{136D}\u{7}\u{8E}\u{2}\u{2}\u{136D}\u{136E}\u{9}\u{49}" .
		    "\u{2}\u{2}\u{136E}\u{136F}\u{7}\u{12F}\u{2}\u{2}\u{136F}\u{13AC}\u{5}" .
		    "\u{1F2}\u{FA}\u{2}\u{1370}\u{1371}\u{7}\u{8E}\u{2}\u{2}\u{1371}\u{1374}" .
		    "\u{7}\u{175}\u{2}\u{2}\u{1372}\u{1373}\u{7}\u{3C}\u{2}\u{2}\u{1373}" .
		    "\u{1375}\u{5}\u{1FA}\u{FE}\u{2}\u{1374}\u{1372}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1374}\u{1375}\u{3}\u{2}\u{2}\u{2}\u{1375}\u{13AC}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1376}\u{1377}\u{7}\u{8E}\u{2}\u{2}\u{1377}\u{1378}\u{9}\u{4A}" .
		    "\u{2}\u{2}\u{1378}\u{1379}\u{9}\u{45}\u{2}\u{2}\u{1379}\u{137C}\u{5}" .
		    "\u{1F4}\u{FB}\u{2}\u{137A}\u{137B}\u{9}\u{45}\u{2}\u{2}\u{137B}\u{137D}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{137C}\u{137A}\u{3}\u{2}\u{2}\u{2}\u{137C}" .
		    "\u{137D}\u{3}\u{2}\u{2}\u{2}\u{137D}\u{1380}\u{3}\u{2}\u{2}\u{2}\u{137E}" .
		    "\u{137F}\u{7}\u{AE}\u{2}\u{2}\u{137F}\u{1381}\u{5}\u{25C}\u{12F}\u{2}" .
		    "\u{1380}\u{137E}\u{3}\u{2}\u{2}\u{2}\u{1380}\u{1381}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1381}\u{13AC}\u{3}\u{2}\u{2}\u{2}\u{1382}\u{1383}\u{7}\u{8E}" .
		    "\u{2}\u{2}\u{1383}\u{1384}\u{7}\u{1CE}\u{2}\u{2}\u{1384}\u{1387}\u{7}" .
		    "\u{25E}\u{2}\u{2}\u{1385}\u{1386}\u{9}\u{45}\u{2}\u{2}\u{1386}\u{1388}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{1387}\u{1385}\u{3}\u{2}\u{2}\u{2}\u{1387}" .
		    "\u{1388}\u{3}\u{2}\u{2}\u{2}\u{1388}\u{138A}\u{3}\u{2}\u{2}\u{2}\u{1389}" .
		    "\u{138B}\u{5}\u{1C0}\u{E1}\u{2}\u{138A}\u{1389}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{138A}\u{138B}\u{3}\u{2}\u{2}\u{2}\u{138B}\u{13AC}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{138C}\u{138D}\u{7}\u{8E}\u{2}\u{2}\u{138D}\u{138E}\u{7}\u{1E3}" .
		    "\u{2}\u{2}\u{138E}\u{1393}\u{5}\u{1C6}\u{E4}\u{2}\u{138F}\u{1390}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{1390}\u{1392}\u{5}\u{1C6}\u{E4}\u{2}\u{1391}" .
		    "\u{138F}\u{3}\u{2}\u{2}\u{2}\u{1392}\u{1395}\u{3}\u{2}\u{2}\u{2}\u{1393}" .
		    "\u{1391}\u{3}\u{2}\u{2}\u{2}\u{1393}\u{1394}\u{3}\u{2}\u{2}\u{2}\u{1394}" .
		    "\u{1399}\u{3}\u{2}\u{2}\u{2}\u{1395}\u{1393}\u{3}\u{2}\u{2}\u{2}\u{1396}" .
		    "\u{1397}\u{7}\u{3C}\u{2}\u{2}\u{1397}\u{1398}\u{7}\u{1E6}\u{2}\u{2}" .
		    "\u{1398}\u{139A}\u{5}\u{212}\u{10A}\u{2}\u{1399}\u{1396}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1399}\u{139A}\u{3}\u{2}\u{2}\u{2}\u{139A}\u{139B}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{139B}\u{139F}\u{7}\u{5B}\u{2}\u{2}\u{139C}\u{139D}" .
		    "\u{5}\u{212}\u{10A}\u{2}\u{139D}\u{139E}\u{7}\u{402}\u{2}\u{2}\u{139E}" .
		    "\u{13A0}\u{3}\u{2}\u{2}\u{2}\u{139F}\u{139C}\u{3}\u{2}\u{2}\u{2}\u{139F}" .
		    "\u{13A0}\u{3}\u{2}\u{2}\u{2}\u{13A0}\u{13A1}\u{3}\u{2}\u{2}\u{2}\u{13A1}" .
		    "\u{13A2}\u{5}\u{212}\u{10A}\u{2}\u{13A2}\u{13AC}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{13A3}\u{13A4}\u{7}\u{8E}\u{2}\u{2}\u{13A4}\u{13A5}\u{7}\u{20F}" .
		    "\u{2}\u{2}\u{13A5}\u{13A9}\u{7}\u{223}\u{2}\u{2}\u{13A6}\u{13A7}\u{7}" .
		    "\u{3C}\u{2}\u{2}\u{13A7}\u{13A8}\u{7}\u{127}\u{2}\u{2}\u{13A8}\u{13AA}" .
		    "\u{7}\u{40F}\u{2}\u{2}\u{13A9}\u{13A6}\u{3}\u{2}\u{2}\u{2}\u{13A9}" .
		    "\u{13AA}\u{3}\u{2}\u{2}\u{2}\u{13AA}\u{13AC}\u{3}\u{2}\u{2}\u{2}\u{13AB}" .
		    "\u{1314}\u{3}\u{2}\u{2}\u{2}\u{13AB}\u{1317}\u{3}\u{2}\u{2}\u{2}\u{13AB}" .
		    "\u{132B}\u{3}\u{2}\u{2}\u{2}\u{13AB}\u{1330}\u{3}\u{2}\u{2}\u{2}\u{13AB}" .
		    "\u{133E}\u{3}\u{2}\u{2}\u{2}\u{13AB}\u{1345}\u{3}\u{2}\u{2}\u{2}\u{13AB}" .
		    "\u{1349}\u{3}\u{2}\u{2}\u{2}\u{13AB}\u{134D}\u{3}\u{2}\u{2}\u{2}\u{13AB}" .
		    "\u{1352}\u{3}\u{2}\u{2}\u{2}\u{13AB}\u{1354}\u{3}\u{2}\u{2}\u{2}\u{13AB}" .
		    "\u{135D}\u{3}\u{2}\u{2}\u{2}\u{13AB}\u{1363}\u{3}\u{2}\u{2}\u{2}\u{13AB}" .
		    "\u{136C}\u{3}\u{2}\u{2}\u{2}\u{13AB}\u{1370}\u{3}\u{2}\u{2}\u{2}\u{13AB}" .
		    "\u{1376}\u{3}\u{2}\u{2}\u{2}\u{13AB}\u{1382}\u{3}\u{2}\u{2}\u{2}\u{13AB}" .
		    "\u{138C}\u{3}\u{2}\u{2}\u{2}\u{13AB}\u{13A3}\u{3}\u{2}\u{2}\u{2}\u{13AC}" .
		    "\u{1BB}\u{3}\u{2}\u{2}\u{2}\u{13AD}\u{13B8}\u{7}\u{41A}\u{2}\u{2}" .
		    "\u{13AE}\u{13B8}\u{7}\u{41B}\u{2}\u{2}\u{13AF}\u{13B0}\u{7}\u{404}" .
		    "\u{2}\u{2}\u{13B0}\u{13B2}\u{7}\u{404}\u{2}\u{2}\u{13B1}\u{13AF}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{13B1}\u{13B2}\u{3}\u{2}\u{2}\u{2}\u{13B2}\u{13B3}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{13B3}\u{13B5}\u{9}\u{4B}\u{2}\u{2}\u{13B4}" .
		    "\u{13B1}\u{3}\u{2}\u{2}\u{2}\u{13B4}\u{13B5}\u{3}\u{2}\u{2}\u{2}\u{13B5}" .
		    "\u{13B6}\u{3}\u{2}\u{2}\u{2}\u{13B6}\u{13B8}\u{5}\u{20C}\u{107}\u{2}" .
		    "\u{13B7}\u{13AD}\u{3}\u{2}\u{2}\u{2}\u{13B7}\u{13AE}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{13B7}\u{13B4}\u{3}\u{2}\u{2}\u{2}\u{13B8}\u{1BD}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{13B9}\u{13BA}\u{7}\u{18}\u{2}\u{2}\u{13BA}\u{13C7}\u{7}" .
		    "\u{8C}\u{2}\u{2}\u{13BB}\u{13C7}\u{7}\u{2E2}\u{2}\u{2}\u{13BC}\u{13C7}" .
		    "\u{7}\u{26}\u{2}\u{2}\u{13BD}\u{13C7}\u{7}\u{8A}\u{2}\u{2}\u{13BE}" .
		    "\u{13BF}\u{7}\u{172}\u{2}\u{2}\u{13BF}\u{13C7}\u{7}\u{223}\u{2}\u{2}" .
		    "\u{13C0}\u{13C1}\u{7}\u{77}\u{2}\u{2}\u{13C1}\u{13C7}\u{7}\u{223}" .
		    "\u{2}\u{2}\u{13C2}\u{13C4}\u{9}\u{31}\u{2}\u{2}\u{13C3}\u{13C2}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{13C3}\u{13C4}\u{3}\u{2}\u{2}\u{2}\u{13C4}\u{13C5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{13C5}\u{13C7}\u{9}\u{4C}\u{2}\u{2}\u{13C6}" .
		    "\u{13B9}\u{3}\u{2}\u{2}\u{2}\u{13C6}\u{13BB}\u{3}\u{2}\u{2}\u{2}\u{13C6}" .
		    "\u{13BC}\u{3}\u{2}\u{2}\u{2}\u{13C6}\u{13BD}\u{3}\u{2}\u{2}\u{2}\u{13C6}" .
		    "\u{13BE}\u{3}\u{2}\u{2}\u{2}\u{13C6}\u{13C0}\u{3}\u{2}\u{2}\u{2}\u{13C6}" .
		    "\u{13C3}\u{3}\u{2}\u{2}\u{2}\u{13C7}\u{1BF}\u{3}\u{2}\u{2}\u{2}\u{13C8}" .
		    "\u{13C9}\u{7}\u{5A}\u{2}\u{2}\u{13C9}\u{13CD}\u{7}\u{40F}\u{2}\u{2}" .
		    "\u{13CA}\u{13CB}\u{7}\u{AE}\u{2}\u{2}\u{13CB}\u{13CD}\u{5}\u{25C}" .
		    "\u{12F}\u{2}\u{13CC}\u{13C8}\u{3}\u{2}\u{2}\u{2}\u{13CC}\u{13CA}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{13CD}\u{1C1}\u{3}\u{2}\u{2}\u{2}\u{13CE}\u{13D0}" .
		    "\u{7}\u{225}\u{2}\u{2}\u{13CF}\u{13CE}\u{3}\u{2}\u{2}\u{2}\u{13CF}" .
		    "\u{13D0}\u{3}\u{2}\u{2}\u{2}\u{13D0}\u{13D1}\u{3}\u{2}\u{2}\u{2}\u{13D1}" .
		    "\u{13E0}\u{7}\u{159}\u{2}\u{2}\u{13D2}\u{13D3}\u{7}\u{197}\u{2}\u{2}" .
		    "\u{13D3}\u{13E0}\u{7}\u{223}\u{2}\u{2}\u{13D4}\u{13E0}\u{7}\u{1DC}" .
		    "\u{2}\u{2}\u{13D5}\u{13E0}\u{7}\u{266}\u{2}\u{2}\u{13D6}\u{13D8}\u{7}" .
		    "\u{171}\u{2}\u{2}\u{13D7}\u{13D6}\u{3}\u{2}\u{2}\u{2}\u{13D7}\u{13D8}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{13D8}\u{13D9}\u{3}\u{2}\u{2}\u{2}\u{13D9}\u{13E0}" .
		    "\u{7}\u{1E2}\u{2}\u{2}\u{13DA}\u{13E0}\u{7}\u{1E4}\u{2}\u{2}\u{13DB}" .
		    "\u{13DC}\u{7}\u{20F}\u{2}\u{2}\u{13DC}\u{13E0}\u{7}\u{17B}\u{2}\u{2}" .
		    "\u{13DD}\u{13E0}\u{7}\u{117}\u{2}\u{2}\u{13DE}\u{13E0}\u{7}\u{141}" .
		    "\u{2}\u{2}\u{13DF}\u{13CF}\u{3}\u{2}\u{2}\u{2}\u{13DF}\u{13D2}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{13DF}\u{13D4}\u{3}\u{2}\u{2}\u{2}\u{13DF}\u{13D5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{13DF}\u{13D7}\u{3}\u{2}\u{2}\u{2}\u{13DF}\u{13DA}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{13DF}\u{13DB}\u{3}\u{2}\u{2}\u{2}\u{13DF}\u{13DD}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{13DF}\u{13DE}\u{3}\u{2}\u{2}\u{2}\u{13E0}\u{1C3}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{13E1}\u{13EA}\u{7}\u{15F}\u{2}\u{2}\u{13E2}" .
		    "\u{13E3}\u{7}\u{9C}\u{2}\u{2}\u{13E3}\u{13EA}\u{7}\u{223}\u{2}\u{2}" .
		    "\u{13E4}\u{13E6}\u{7}\u{171}\u{2}\u{2}\u{13E5}\u{13E4}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{13E5}\u{13E6}\u{3}\u{2}\u{2}\u{2}\u{13E6}\u{13E7}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{13E7}\u{13EA}\u{7}\u{25E}\u{2}\u{2}\u{13E8}\u{13EA}\u{7}" .
		    "\u{237}\u{2}\u{2}\u{13E9}\u{13E1}\u{3}\u{2}\u{2}\u{2}\u{13E9}\u{13E2}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{13E9}\u{13E5}\u{3}\u{2}\u{2}\u{2}\u{13E9}\u{13E8}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{13EA}\u{1C5}\u{3}\u{2}\u{2}\u{2}\u{13EB}\u{13F8}" .
		    "\u{7}\u{8}\u{2}\u{2}\u{13EC}\u{13ED}\u{7}\u{11F}\u{2}\u{2}\u{13ED}" .
		    "\u{13F8}\u{7}\u{187}\u{2}\u{2}\u{13EE}\u{13EF}\u{7}\u{140}\u{2}\u{2}" .
		    "\u{13EF}\u{13F8}\u{7}\u{22E}\u{2}\u{2}\u{13F0}\u{13F8}\u{7}\u{143}" .
		    "\u{2}\u{2}\u{13F1}\u{13F8}\u{7}\u{189}\u{2}\u{2}\u{13F2}\u{13F8}\u{7}" .
		    "\u{2AE}\u{2}\u{2}\u{13F3}\u{13F4}\u{7}\u{1D3}\u{2}\u{2}\u{13F4}\u{13F8}" .
		    "\u{7}\u{168}\u{2}\u{2}\u{13F5}\u{13F8}\u{7}\u{216}\u{2}\u{2}\u{13F6}" .
		    "\u{13F8}\u{7}\u{22D}\u{2}\u{2}\u{13F7}\u{13EB}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{13F7}\u{13EC}\u{3}\u{2}\u{2}\u{2}\u{13F7}\u{13EE}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{13F7}\u{13F0}\u{3}\u{2}\u{2}\u{2}\u{13F7}\u{13F1}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{13F7}\u{13F2}\u{3}\u{2}\u{2}\u{2}\u{13F7}\u{13F3}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{13F7}\u{13F5}\u{3}\u{2}\u{2}\u{2}\u{13F7}\u{13F6}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{13F8}\u{1C7}\u{3}\u{2}\u{2}\u{2}\u{13F9}\u{13FA}" .
		    "\u{7}\u{11D}\u{2}\u{2}\u{13FA}\u{13FB}\u{7}\u{40F}\u{2}\u{2}\u{13FB}" .
		    "\u{1C9}\u{3}\u{2}\u{2}\u{2}\u{13FC}\u{13FD}\u{7}\u{123}\u{2}\u{2}" .
		    "\u{13FD}\u{13FE}\u{7}\u{4A}\u{2}\u{2}\u{13FE}\u{1403}\u{5}\u{1D6}" .
		    "\u{EC}\u{2}\u{13FF}\u{1400}\u{7}\u{402}\u{2}\u{2}\u{1400}\u{1402}" .
		    "\u{5}\u{1D6}\u{EC}\u{2}\u{1401}\u{13FF}\u{3}\u{2}\u{2}\u{2}\u{1402}" .
		    "\u{1405}\u{3}\u{2}\u{2}\u{2}\u{1403}\u{1401}\u{3}\u{2}\u{2}\u{2}\u{1403}" .
		    "\u{1404}\u{3}\u{2}\u{2}\u{2}\u{1404}\u{140D}\u{3}\u{2}\u{2}\u{2}\u{1405}" .
		    "\u{1403}\u{3}\u{2}\u{2}\u{2}\u{1406}\u{1407}\u{7}\u{75}\u{2}\u{2}" .
		    "\u{1407}\u{140A}\u{7}\u{400}\u{2}\u{2}\u{1408}\u{140B}\u{5}\u{22C}" .
		    "\u{117}\u{2}\u{1409}\u{140B}\u{7}\u{8}\u{2}\u{2}\u{140A}\u{1408}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{140A}\u{1409}\u{3}\u{2}\u{2}\u{2}\u{140B}\u{140C}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{140C}\u{140E}\u{7}\u{401}\u{2}\u{2}\u{140D}" .
		    "\u{1406}\u{3}\u{2}\u{2}\u{2}\u{140D}\u{140E}\u{3}\u{2}\u{2}\u{2}\u{140E}" .
		    "\u{140F}\u{3}\u{2}\u{2}\u{2}\u{140F}\u{1410}\u{7}\u{49}\u{2}\u{2}" .
		    "\u{1410}\u{1411}\u{5}\u{20C}\u{107}\u{2}\u{1411}\u{1CB}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1412}\u{1414}\u{7}\u{16E}\u{2}\u{2}\u{1413}\u{1415}\u{9}" .
		    "\u{40}\u{2}\u{2}\u{1414}\u{1413}\u{3}\u{2}\u{2}\u{2}\u{1414}\u{1415}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1415}\u{1416}\u{3}\u{2}\u{2}\u{2}\u{1416}\u{141B}" .
		    "\u{5}\u{1D8}\u{ED}\u{2}\u{1417}\u{1418}\u{7}\u{402}\u{2}\u{2}\u{1418}" .
		    "\u{141A}\u{5}\u{1D8}\u{ED}\u{2}\u{1419}\u{1417}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{141A}\u{141D}\u{3}\u{2}\u{2}\u{2}\u{141B}\u{1419}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{141B}\u{141C}\u{3}\u{2}\u{2}\u{2}\u{141C}\u{1CD}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{141D}\u{141B}\u{3}\u{2}\u{2}\u{2}\u{141E}\u{1420}\u{7}" .
		    "\u{56}\u{2}\u{2}\u{141F}\u{1421}\u{9}\u{4D}\u{2}\u{2}\u{1420}\u{141F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1420}\u{1421}\u{3}\u{2}\u{2}\u{2}\u{1421}\u{1423}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1422}\u{1424}\u{5}\u{212}\u{10A}\u{2}\u{1423}" .
		    "\u{1422}\u{3}\u{2}\u{2}\u{2}\u{1424}\u{1425}\u{3}\u{2}\u{2}\u{2}\u{1425}" .
		    "\u{1423}\u{3}\u{2}\u{2}\u{2}\u{1425}\u{1426}\u{3}\u{2}\u{2}\u{2}\u{1426}" .
		    "\u{1CF}\u{3}\u{2}\u{2}\u{2}\u{1427}\u{1428}\u{7}\u{5E}\u{2}\u{2}\u{1428}" .
		    "\u{1429}\u{7}\u{4A}\u{2}\u{2}\u{1429}\u{142A}\u{7}\u{50}\u{2}\u{2}" .
		    "\u{142A}\u{142B}\u{7}\u{123}\u{2}\u{2}\u{142B}\u{1430}\u{5}\u{1DC}" .
		    "\u{EF}\u{2}\u{142C}\u{142D}\u{7}\u{402}\u{2}\u{2}\u{142D}\u{142F}" .
		    "\u{5}\u{1DC}\u{EF}\u{2}\u{142E}\u{142C}\u{3}\u{2}\u{2}\u{2}\u{142F}" .
		    "\u{1432}\u{3}\u{2}\u{2}\u{2}\u{1430}\u{142E}\u{3}\u{2}\u{2}\u{2}\u{1430}" .
		    "\u{1431}\u{3}\u{2}\u{2}\u{2}\u{1431}\u{1D1}\u{3}\u{2}\u{2}\u{2}\u{1432}" .
		    "\u{1430}\u{3}\u{2}\u{2}\u{2}\u{1433}\u{1434}\u{7}\u{1FB}\u{2}\u{2}" .
		    "\u{1434}\u{1435}\u{7}\u{1E6}\u{2}\u{2}\u{1435}\u{1436}\u{7}\u{123}" .
		    "\u{2}\u{2}\u{1436}\u{1D3}\u{3}\u{2}\u{2}\u{2}\u{1437}\u{1438}\u{7}" .
		    "\u{264}\u{2}\u{2}\u{1438}\u{1D5}\u{3}\u{2}\u{2}\u{2}\u{1439}\u{1441}" .
		    "\u{5}\u{1F4}\u{FB}\u{2}\u{143A}\u{143C}\u{9}\u{14}\u{2}\u{2}\u{143B}" .
		    "\u{143A}\u{3}\u{2}\u{2}\u{2}\u{143B}\u{143C}\u{3}\u{2}\u{2}\u{2}\u{143C}" .
		    "\u{143D}\u{3}\u{2}\u{2}\u{2}\u{143D}\u{143E}\u{7}\u{400}\u{2}\u{2}" .
		    "\u{143E}\u{143F}\u{5}\u{22C}\u{117}\u{2}\u{143F}\u{1440}\u{7}\u{401}" .
		    "\u{2}\u{2}\u{1440}\u{1442}\u{3}\u{2}\u{2}\u{2}\u{1441}\u{143B}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1441}\u{1442}\u{3}\u{2}\u{2}\u{2}\u{1442}\u{1D7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1443}\u{1456}\u{7}\u{14B}\u{2}\u{2}\u{1444}" .
		    "\u{1456}\u{7}\u{17B}\u{2}\u{2}\u{1445}\u{1447}\u{9}\u{4E}\u{2}\u{2}" .
		    "\u{1446}\u{1445}\u{3}\u{2}\u{2}\u{2}\u{1446}\u{1447}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1447}\u{1448}\u{3}\u{2}\u{2}\u{2}\u{1448}\u{1456}\u{7}\u{196}" .
		    "\u{2}\u{2}\u{1449}\u{1456}\u{7}\u{1CF}\u{2}\u{2}\u{144A}\u{1456}\u{7}" .
		    "\u{266}\u{2}\u{2}\u{144B}\u{144C}\u{7}\u{1E6}\u{2}\u{2}\u{144C}\u{1456}" .
		    "\u{7}\u{123}\u{2}\u{2}\u{144D}\u{1456}\u{7}\u{223}\u{2}\u{2}\u{144E}" .
		    "\u{1456}\u{7}\u{242}\u{2}\u{2}\u{144F}\u{1453}\u{7}\u{25E}\u{2}\u{2}" .
		    "\u{1450}\u{1451}\u{7}\u{B0}\u{2}\u{2}\u{1451}\u{1452}\u{7}\u{7A}\u{2}" .
		    "\u{2}\u{1452}\u{1454}\u{7}\u{5F}\u{2}\u{2}\u{1453}\u{1450}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1453}\u{1454}\u{3}\u{2}\u{2}\u{2}\u{1454}\u{1456}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1455}\u{1443}\u{3}\u{2}\u{2}\u{2}\u{1455}\u{1444}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1455}\u{1446}\u{3}\u{2}\u{2}\u{2}\u{1455}\u{1449}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1455}\u{144A}\u{3}\u{2}\u{2}\u{2}\u{1455}\u{144B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1455}\u{144D}\u{3}\u{2}\u{2}\u{2}\u{1455}\u{144E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1455}\u{144F}\u{3}\u{2}\u{2}\u{2}\u{1456}\u{1462}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1457}\u{1458}\u{7}\u{1EC}\u{2}\u{2}\u{1458}" .
		    "\u{145A}\u{7}\u{196}\u{2}\u{2}\u{1459}\u{145B}\u{5}\u{13A}\u{9E}\u{2}" .
		    "\u{145A}\u{1459}\u{3}\u{2}\u{2}\u{2}\u{145A}\u{145B}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{145B}\u{1462}\u{3}\u{2}\u{2}\u{2}\u{145C}\u{145D}\u{7}\u{25E}" .
		    "\u{2}\u{2}\u{145D}\u{145F}\u{5}\u{22E}\u{118}\u{2}\u{145E}\u{1460}" .
		    "\u{5}\u{1DA}\u{EE}\u{2}\u{145F}\u{145E}\u{3}\u{2}\u{2}\u{2}\u{145F}" .
		    "\u{1460}\u{3}\u{2}\u{2}\u{2}\u{1460}\u{1462}\u{3}\u{2}\u{2}\u{2}\u{1461}" .
		    "\u{1455}\u{3}\u{2}\u{2}\u{2}\u{1461}\u{1457}\u{3}\u{2}\u{2}\u{2}\u{1461}" .
		    "\u{145C}\u{3}\u{2}\u{2}\u{2}\u{1462}\u{1D9}\u{3}\u{2}\u{2}\u{2}\u{1463}" .
		    "\u{1464}\u{7}\u{B0}\u{2}\u{2}\u{1464}\u{1465}\u{7}\u{7A}\u{2}\u{2}" .
		    "\u{1465}\u{1469}\u{7}\u{5F}\u{2}\u{2}\u{1466}\u{1467}\u{7}\u{3C}\u{2}" .
		    "\u{2}\u{1467}\u{1469}\u{7}\u{164}\u{2}\u{2}\u{1468}\u{1463}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1468}\u{1466}\u{3}\u{2}\u{2}\u{2}\u{1469}\u{1DB}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{146A}\u{1472}\u{5}\u{1F4}\u{FB}\u{2}\u{146B}\u{146C}" .
		    "\u{7}\u{75}\u{2}\u{2}\u{146C}\u{146F}\u{7}\u{400}\u{2}\u{2}\u{146D}" .
		    "\u{1470}\u{5}\u{22C}\u{117}\u{2}\u{146E}\u{1470}\u{7}\u{8}\u{2}\u{2}" .
		    "\u{146F}\u{146D}\u{3}\u{2}\u{2}\u{2}\u{146F}\u{146E}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1470}\u{1471}\u{3}\u{2}\u{2}\u{2}\u{1471}\u{1473}\u{7}\u{401}" .
		    "\u{2}\u{2}\u{1472}\u{146B}\u{3}\u{2}\u{2}\u{2}\u{1472}\u{1473}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1473}\u{147B}\u{3}\u{2}\u{2}\u{2}\u{1474}\u{1476}" .
		    "\u{9}\u{14}\u{2}\u{2}\u{1475}\u{1474}\u{3}\u{2}\u{2}\u{2}\u{1475}" .
		    "\u{1476}\u{3}\u{2}\u{2}\u{2}\u{1476}\u{1477}\u{3}\u{2}\u{2}\u{2}\u{1477}" .
		    "\u{1478}\u{7}\u{400}\u{2}\u{2}\u{1478}\u{1479}\u{5}\u{22C}\u{117}" .
		    "\u{2}\u{1479}\u{147A}\u{7}\u{401}\u{2}\u{2}\u{147A}\u{147C}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{147B}\u{1475}\u{3}\u{2}\u{2}\u{2}\u{147B}\u{147C}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{147C}\u{147F}\u{3}\u{2}\u{2}\u{2}\u{147D}\u{147E}" .
		    "\u{7}\u{48}\u{2}\u{2}\u{147E}\u{1480}\u{7}\u{190}\u{2}\u{2}\u{147F}" .
		    "\u{147D}\u{3}\u{2}\u{2}\u{2}\u{147F}\u{1480}\u{3}\u{2}\u{2}\u{2}\u{1480}" .
		    "\u{1DD}\u{3}\u{2}\u{2}\u{2}\u{1481}\u{1482}\u{9}\u{4F}\u{2}\u{2}\u{1482}" .
		    "\u{1485}\u{5}\u{1F4}\u{FB}\u{2}\u{1483}\u{1486}\u{5}\u{20C}\u{107}" .
		    "\u{2}\u{1484}\u{1486}\u{7}\u{40F}\u{2}\u{2}\u{1485}\u{1483}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1485}\u{1484}\u{3}\u{2}\u{2}\u{2}\u{1485}\u{1486}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1486}\u{1DF}\u{3}\u{2}\u{2}\u{2}\u{1487}\u{148B}" .
		    "\u{9}\u{4F}\u{2}\u{2}\u{1488}\u{1489}\u{9}\u{50}\u{2}\u{2}\u{1489}" .
		    "\u{148A}\u{7}\u{3F7}\u{2}\u{2}\u{148A}\u{148C}\u{9}\u{51}\u{2}\u{2}" .
		    "\u{148B}\u{1488}\u{3}\u{2}\u{2}\u{2}\u{148B}\u{148C}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{148C}\u{148D}\u{3}\u{2}\u{2}\u{2}\u{148D}\u{148E}\u{5}\u{1F0}" .
		    "\u{F9}\u{2}\u{148E}\u{1E1}\u{3}\u{2}\u{2}\u{2}\u{148F}\u{1490}\u{7}" .
		    "\u{179}\u{2}\u{2}\u{1490}\u{1491}\u{7}\u{40F}\u{2}\u{2}\u{1491}\u{1E3}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1492}\u{1493}\u{7}\u{AA}\u{2}\u{2}\u{1493}" .
		    "\u{1494}\u{5}\u{20C}\u{107}\u{2}\u{1494}\u{1E5}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1495}\u{149D}\u{7}\u{8F}\u{2}\u{2}\u{1496}\u{1498}\u{7}\u{93}\u{2}" .
		    "\u{2}\u{1497}\u{1499}\u{7}\u{244}\u{2}\u{2}\u{1498}\u{1497}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1498}\u{1499}\u{3}\u{2}\u{2}\u{2}\u{1499}\u{149A}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{149A}\u{149E}\u{5}\u{216}\u{10C}\u{2}\u{149B}\u{149E}" .
		    "\u{7}\u{417}\u{2}\u{2}\u{149C}\u{149E}\u{7}\u{418}\u{2}\u{2}\u{149D}" .
		    "\u{1496}\u{3}\u{2}\u{2}\u{2}\u{149D}\u{149B}\u{3}\u{2}\u{2}\u{2}\u{149D}" .
		    "\u{149C}\u{3}\u{2}\u{2}\u{2}\u{149E}\u{14A8}\u{3}\u{2}\u{2}\u{2}\u{149F}" .
		    "\u{14A0}\u{7}\u{8C}\u{2}\u{2}\u{14A0}\u{14A5}\u{5}\u{1EA}\u{F6}\u{2}" .
		    "\u{14A1}\u{14A2}\u{7}\u{402}\u{2}\u{2}\u{14A2}\u{14A4}\u{5}\u{1EA}" .
		    "\u{F6}\u{2}\u{14A3}\u{14A1}\u{3}\u{2}\u{2}\u{2}\u{14A4}\u{14A7}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{14A5}\u{14A3}\u{3}\u{2}\u{2}\u{2}\u{14A5}\u{14A6}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{14A6}\u{14A9}\u{3}\u{2}\u{2}\u{2}\u{14A7}\u{14A5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{14A8}\u{149F}\u{3}\u{2}\u{2}\u{2}\u{14A8}\u{14A9}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{14A9}\u{1E7}\u{3}\u{2}\u{2}\u{2}\u{14AA}\u{14B2}" .
		    "\u{7}\u{83}\u{2}\u{2}\u{14AB}\u{14AD}\u{7}\u{93}\u{2}\u{2}\u{14AC}" .
		    "\u{14AE}\u{7}\u{244}\u{2}\u{2}\u{14AD}\u{14AC}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{14AD}\u{14AE}\u{3}\u{2}\u{2}\u{2}\u{14AE}\u{14AF}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{14AF}\u{14B3}\u{5}\u{216}\u{10C}\u{2}\u{14B0}\u{14B3}\u{7}" .
		    "\u{417}\u{2}\u{2}\u{14B1}\u{14B3}\u{7}\u{418}\u{2}\u{2}\u{14B2}\u{14AB}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{14B2}\u{14B0}\u{3}\u{2}\u{2}\u{2}\u{14B2}\u{14B1}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{14B2}\u{14B3}\u{3}\u{2}\u{2}\u{2}\u{14B3}\u{14BD}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{14B4}\u{14B5}\u{7}\u{8C}\u{2}\u{2}\u{14B5}" .
		    "\u{14BA}\u{5}\u{1EA}\u{F6}\u{2}\u{14B6}\u{14B7}\u{7}\u{402}\u{2}\u{2}" .
		    "\u{14B7}\u{14B9}\u{5}\u{1EA}\u{F6}\u{2}\u{14B8}\u{14B6}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{14B9}\u{14BC}\u{3}\u{2}\u{2}\u{2}\u{14BA}\u{14B8}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{14BA}\u{14BB}\u{3}\u{2}\u{2}\u{2}\u{14BB}\u{14BE}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{14BC}\u{14BA}\u{3}\u{2}\u{2}\u{2}\u{14BD}\u{14B4}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{14BD}\u{14BE}\u{3}\u{2}\u{2}\u{2}\u{14BE}\u{1E9}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{14BF}\u{14C0}\u{9}\u{52}\u{2}\u{2}\u{14C0}" .
		    "\u{14C3}\u{7}\u{3F7}\u{2}\u{2}\u{14C1}\u{14C4}\u{5}\u{216}\u{10C}" .
		    "\u{2}\u{14C2}\u{14C4}\u{7}\u{410}\u{2}\u{2}\u{14C3}\u{14C1}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{14C3}\u{14C2}\u{3}\u{2}\u{2}\u{2}\u{14C4}\u{1EB}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{14C5}\u{14C7}\u{7}\u{42}\u{2}\u{2}\u{14C6}\u{14C8}" .
		    "\u{9}\u{53}\u{2}\u{2}\u{14C7}\u{14C6}\u{3}\u{2}\u{2}\u{2}\u{14C7}" .
		    "\u{14C8}\u{3}\u{2}\u{2}\u{2}\u{14C8}\u{14C9}\u{3}\u{2}\u{2}\u{2}\u{14C9}" .
		    "\u{14E9}\u{7}\u{2E}\u{2}\u{2}\u{14CA}\u{14CB}\u{5}\u{1BC}\u{DF}\u{2}" .
		    "\u{14CB}\u{14CC}\u{7}\u{3F7}\u{2}\u{2}\u{14CC}\u{14D4}\u{9}\u{54}" .
		    "\u{2}\u{2}\u{14CD}\u{14CE}\u{7}\u{402}\u{2}\u{2}\u{14CE}\u{14CF}\u{5}" .
		    "\u{1BC}\u{DF}\u{2}\u{14CF}\u{14D0}\u{7}\u{3F7}\u{2}\u{2}\u{14D0}\u{14D1}" .
		    "\u{9}\u{54}\u{2}\u{2}\u{14D1}\u{14D3}\u{3}\u{2}\u{2}\u{2}\u{14D2}" .
		    "\u{14CD}\u{3}\u{2}\u{2}\u{2}\u{14D3}\u{14D6}\u{3}\u{2}\u{2}\u{2}\u{14D4}" .
		    "\u{14D2}\u{3}\u{2}\u{2}\u{2}\u{14D4}\u{14D5}\u{3}\u{2}\u{2}\u{2}\u{14D5}" .
		    "\u{14EA}\u{3}\u{2}\u{2}\u{2}\u{14D6}\u{14D4}\u{3}\u{2}\u{2}\u{2}\u{14D7}" .
		    "\u{14DA}\u{7}\u{1C}\u{2}\u{2}\u{14D8}\u{14DB}\u{5}\u{212}\u{10A}\u{2}" .
		    "\u{14D9}\u{14DB}\u{5}\u{1BC}\u{DF}\u{2}\u{14DA}\u{14D8}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{14DA}\u{14D9}\u{3}\u{2}\u{2}\u{2}\u{14DB}\u{14DC}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{14DC}\u{14DD}\u{5}\u{1BC}\u{DF}\u{2}\u{14DD}\u{14DE}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{14DE}\u{14E6}\u{5}\u{1EE}\u{F8}\u{2}\u{14DF}" .
		    "\u{14E0}\u{7}\u{402}\u{2}\u{2}\u{14E0}\u{14E1}\u{5}\u{1BC}\u{DF}\u{2}" .
		    "\u{14E1}\u{14E2}\u{7}\u{3F7}\u{2}\u{2}\u{14E2}\u{14E3}\u{5}\u{1EE}" .
		    "\u{F8}\u{2}\u{14E3}\u{14E5}\u{3}\u{2}\u{2}\u{2}\u{14E4}\u{14DF}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{14E5}\u{14E8}\u{3}\u{2}\u{2}\u{2}\u{14E6}\u{14E4}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{14E6}\u{14E7}\u{3}\u{2}\u{2}\u{2}\u{14E7}\u{14EA}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{14E8}\u{14E6}\u{3}\u{2}\u{2}\u{2}\u{14E9}\u{14CA}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{14E9}\u{14D7}\u{3}\u{2}\u{2}\u{2}\u{14EA}\u{1ED}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{14EB}\u{14EC}\u{9}\u{55}\u{2}\u{2}\u{14EC}" .
		    "\u{1EF}\u{3}\u{2}\u{2}\u{2}\u{14ED}\u{14F3}\u{5}\u{B4}\u{5B}\u{2}" .
		    "\u{14EE}\u{14F3}\u{5}\u{A6}\u{54}\u{2}\u{14EF}\u{14F3}\u{5}\u{AC}" .
		    "\u{57}\u{2}\u{14F0}\u{14F3}\u{5}\u{B2}\u{5A}\u{2}\u{14F1}\u{14F3}" .
		    "\u{5}\u{B6}\u{5C}\u{2}\u{14F2}\u{14ED}\u{3}\u{2}\u{2}\u{2}\u{14F2}" .
		    "\u{14EE}\u{3}\u{2}\u{2}\u{2}\u{14F2}\u{14EF}\u{3}\u{2}\u{2}\u{2}\u{14F2}" .
		    "\u{14F0}\u{3}\u{2}\u{2}\u{2}\u{14F2}\u{14F1}\u{3}\u{2}\u{2}\u{2}\u{14F3}" .
		    "\u{14F8}\u{3}\u{2}\u{2}\u{2}\u{14F4}\u{14F5}\u{7}\u{3C}\u{2}\u{2}" .
		    "\u{14F5}\u{14F6}\u{7}\u{13A}\u{2}\u{2}\u{14F6}\u{14F8}\u{5}\u{20C}" .
		    "\u{107}\u{2}\u{14F7}\u{14F2}\u{3}\u{2}\u{2}\u{2}\u{14F7}\u{14F4}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{14F8}\u{1F1}\u{3}\u{2}\u{2}\u{2}\u{14F9}\u{14FD}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{14FA}\u{14FE}\u{7}\u{416}\u{2}\u{2}\u{14FB}" .
		    "\u{14FC}\u{7}\u{3FF}\u{2}\u{2}\u{14FC}\u{14FE}\u{5}\u{20C}\u{107}" .
		    "\u{2}\u{14FD}\u{14FA}\u{3}\u{2}\u{2}\u{2}\u{14FD}\u{14FB}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{14FD}\u{14FE}\u{3}\u{2}\u{2}\u{2}\u{14FE}\u{1F3}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{14FF}\u{1500}\u{5}\u{1F2}\u{FA}\u{2}\u{1500}\u{1F5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1501}\u{1506}\u{5}\u{20C}\u{107}\u{2}\u{1502}" .
		    "\u{1504}\u{5}\u{210}\u{109}\u{2}\u{1503}\u{1505}\u{5}\u{210}\u{109}" .
		    "\u{2}\u{1504}\u{1503}\u{3}\u{2}\u{2}\u{2}\u{1504}\u{1505}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1505}\u{1507}\u{3}\u{2}\u{2}\u{2}\u{1506}\u{1502}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1506}\u{1507}\u{3}\u{2}\u{2}\u{2}\u{1507}\u{1F7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1508}\u{150B}\u{5}\u{20C}\u{107}\u{2}\u{1509}" .
		    "\u{150B}\u{7}\u{40F}\u{2}\u{2}\u{150A}\u{1508}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{150A}\u{1509}\u{3}\u{2}\u{2}\u{2}\u{150B}\u{1510}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{150C}\u{150D}\u{7}\u{400}\u{2}\u{2}\u{150D}\u{150E}\u{5}\u{212}" .
		    "\u{10A}\u{2}\u{150E}\u{150F}\u{7}\u{401}\u{2}\u{2}\u{150F}\u{1511}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1510}\u{150C}\u{3}\u{2}\u{2}\u{2}\u{1510}\u{1511}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1511}\u{1513}\u{3}\u{2}\u{2}\u{2}\u{1512}\u{1514}" .
		    "\u{9}\u{2B}\u{2}\u{2}\u{1513}\u{1512}\u{3}\u{2}\u{2}\u{2}\u{1513}" .
		    "\u{1514}\u{3}\u{2}\u{2}\u{2}\u{1514}\u{1F9}\u{3}\u{2}\u{2}\u{2}\u{1515}" .
		    "\u{1516}\u{9}\u{56}\u{2}\u{2}\u{1516}\u{1FB}\u{3}\u{2}\u{2}\u{2}\u{1517}" .
		    "\u{1518}\u{9}\u{57}\u{2}\u{2}\u{1518}\u{1FD}\u{3}\u{2}\u{2}\u{2}\u{1519}" .
		    "\u{151E}\u{7}\u{D2}\u{2}\u{2}\u{151A}\u{151E}\u{5}\u{272}\u{13A}\u{2}" .
		    "\u{151B}\u{151E}\u{7}\u{40F}\u{2}\u{2}\u{151C}\u{151E}\u{7}\u{40C}" .
		    "\u{2}\u{2}\u{151D}\u{1519}\u{3}\u{2}\u{2}\u{2}\u{151D}\u{151A}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{151D}\u{151B}\u{3}\u{2}\u{2}\u{2}\u{151D}\u{151C}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{151E}\u{1FF}\u{3}\u{2}\u{2}\u{2}\u{151F}\u{1522}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{1520}\u{1522}\u{7}\u{40F}\u{2}\u{2}\u{1521}" .
		    "\u{151F}\u{3}\u{2}\u{2}\u{2}\u{1521}\u{1520}\u{3}\u{2}\u{2}\u{2}\u{1522}" .
		    "\u{201}\u{3}\u{2}\u{2}\u{2}\u{1523}\u{1524}\u{9}\u{58}\u{2}\u{2}\u{1524}" .
		    "\u{203}\u{3}\u{2}\u{2}\u{2}\u{1525}\u{1526}\u{5}\u{212}\u{10A}\u{2}" .
		    "\u{1526}\u{1527}\u{7}\u{3F4}\u{2}\u{2}\u{1527}\u{1528}\u{5}\u{212}" .
		    "\u{10A}\u{2}\u{1528}\u{1529}\u{7}\u{3F4}\u{2}\u{2}\u{1529}\u{152A}" .
		    "\u{5}\u{212}\u{10A}\u{2}\u{152A}\u{152B}\u{7}\u{3F4}\u{2}\u{2}\u{152B}" .
		    "\u{152C}\u{5}\u{212}\u{10A}\u{2}\u{152C}\u{152D}\u{7}\u{3F4}\u{2}" .
		    "\u{2}\u{152D}\u{1533}\u{5}\u{212}\u{10A}\u{2}\u{152E}\u{152F}\u{7}" .
		    "\u{40B}\u{2}\u{2}\u{152F}\u{1530}\u{5}\u{212}\u{10A}\u{2}\u{1530}" .
		    "\u{1531}\u{7}\u{3F4}\u{2}\u{2}\u{1531}\u{1532}\u{5}\u{212}\u{10A}" .
		    "\u{2}\u{1532}\u{1534}\u{3}\u{2}\u{2}\u{2}\u{1533}\u{152E}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1534}\u{1535}\u{3}\u{2}\u{2}\u{2}\u{1535}\u{1533}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1535}\u{1536}\u{3}\u{2}\u{2}\u{2}\u{1536}\u{205}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1537}\u{153E}\u{5}\u{208}\u{105}\u{2}\u{1538}" .
		    "\u{1539}\u{7}\u{402}\u{2}\u{2}\u{1539}\u{153C}\u{5}\u{208}\u{105}" .
		    "\u{2}\u{153A}\u{153B}\u{7}\u{402}\u{2}\u{2}\u{153B}\u{153D}\u{5}\u{212}" .
		    "\u{10A}\u{2}\u{153C}\u{153A}\u{3}\u{2}\u{2}\u{2}\u{153C}\u{153D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{153D}\u{153F}\u{3}\u{2}\u{2}\u{2}\u{153E}\u{1538}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{153E}\u{153F}\u{3}\u{2}\u{2}\u{2}\u{153F}\u{207}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1540}\u{1548}\u{7}\u{40F}\u{2}\u{2}\u{1541}" .
		    "\u{1548}\u{7}\u{414}\u{2}\u{2}\u{1542}\u{1544}\u{7}\u{411}\u{2}\u{2}" .
		    "\u{1543}\u{1542}\u{3}\u{2}\u{2}\u{2}\u{1544}\u{1545}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1545}\u{1543}\u{3}\u{2}\u{2}\u{2}\u{1545}\u{1546}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1546}\u{1548}\u{3}\u{2}\u{2}\u{2}\u{1547}\u{1540}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1547}\u{1541}\u{3}\u{2}\u{2}\u{2}\u{1547}\u{1543}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1548}\u{209}\u{3}\u{2}\u{2}\u{2}\u{1549}\u{154C}" .
		    "\u{5}\u{20C}\u{107}\u{2}\u{154A}\u{154C}\u{7}\u{40F}\u{2}\u{2}\u{154B}" .
		    "\u{1549}\u{3}\u{2}\u{2}\u{2}\u{154B}\u{154A}\u{3}\u{2}\u{2}\u{2}\u{154C}" .
		    "\u{20B}\u{3}\u{2}\u{2}\u{2}\u{154D}\u{1551}\u{5}\u{20E}\u{108}\u{2}" .
		    "\u{154E}\u{1551}\u{7}\u{418}\u{2}\u{2}\u{154F}\u{1551}\u{7}\u{40C}" .
		    "\u{2}\u{2}\u{1550}\u{154D}\u{3}\u{2}\u{2}\u{2}\u{1550}\u{154E}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1550}\u{154F}\u{3}\u{2}\u{2}\u{2}\u{1551}\u{20D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1552}\u{155C}\u{7}\u{417}\u{2}\u{2}\u{1553}" .
		    "\u{155C}\u{5}\u{272}\u{13A}\u{2}\u{1554}\u{155C}\u{5}\u{274}\u{13B}" .
		    "\u{2}\u{1555}\u{155C}\u{5}\u{202}\u{102}\u{2}\u{1556}\u{155C}\u{5}" .
		    "\u{276}\u{13C}\u{2}\u{1557}\u{155C}\u{5}\u{278}\u{13D}\u{2}\u{1558}" .
		    "\u{155C}\u{5}\u{27A}\u{13E}\u{2}\u{1559}\u{155C}\u{5}\u{27C}\u{13F}" .
		    "\u{2}\u{155A}\u{155C}\u{5}\u{27E}\u{140}\u{2}\u{155B}\u{1552}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{155B}\u{1553}\u{3}\u{2}\u{2}\u{2}\u{155B}\u{1554}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{155B}\u{1555}\u{3}\u{2}\u{2}\u{2}\u{155B}\u{1556}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{155B}\u{1557}\u{3}\u{2}\u{2}\u{2}\u{155B}\u{1558}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{155B}\u{1559}\u{3}\u{2}\u{2}\u{2}\u{155B}\u{155A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{155C}\u{20F}\u{3}\u{2}\u{2}\u{2}\u{155D}\u{1561}" .
		    "\u{7}\u{416}\u{2}\u{2}\u{155E}\u{155F}\u{7}\u{3FF}\u{2}\u{2}\u{155F}" .
		    "\u{1561}\u{5}\u{20C}\u{107}\u{2}\u{1560}\u{155D}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1560}\u{155E}\u{3}\u{2}\u{2}\u{2}\u{1561}\u{211}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1562}\u{1563}\u{9}\u{59}\u{2}\u{2}\u{1563}\u{213}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1564}\u{1567}\u{7}\u{40D}\u{2}\u{2}\u{1565}\u{1567}\u{5}" .
		    "\u{212}\u{10A}\u{2}\u{1566}\u{1564}\u{3}\u{2}\u{2}\u{2}\u{1566}\u{1565}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1567}\u{215}\u{3}\u{2}\u{2}\u{2}\u{1568}\u{156A}" .
		    "\u{7}\u{415}\u{2}\u{2}\u{1569}\u{1568}\u{3}\u{2}\u{2}\u{2}\u{1569}" .
		    "\u{156A}\u{3}\u{2}\u{2}\u{2}\u{156A}\u{156B}\u{3}\u{2}\u{2}\u{2}\u{156B}" .
		    "\u{156E}\u{7}\u{40F}\u{2}\u{2}\u{156C}\u{156E}\u{7}\u{40E}\u{2}\u{2}" .
		    "\u{156D}\u{1569}\u{3}\u{2}\u{2}\u{2}\u{156D}\u{156C}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{156E}\u{1570}\u{3}\u{2}\u{2}\u{2}\u{156F}\u{1571}\u{7}\u{40F}" .
		    "\u{2}\u{2}\u{1570}\u{156F}\u{3}\u{2}\u{2}\u{2}\u{1571}\u{1572}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1572}\u{1570}\u{3}\u{2}\u{2}\u{2}\u{1572}\u{1573}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1573}\u{1580}\u{3}\u{2}\u{2}\u{2}\u{1574}\u{1576}" .
		    "\u{7}\u{415}\u{2}\u{2}\u{1575}\u{1574}\u{3}\u{2}\u{2}\u{2}\u{1575}" .
		    "\u{1576}\u{3}\u{2}\u{2}\u{2}\u{1576}\u{1577}\u{3}\u{2}\u{2}\u{2}\u{1577}" .
		    "\u{157A}\u{7}\u{40F}\u{2}\u{2}\u{1578}\u{157A}\u{7}\u{40E}\u{2}\u{2}" .
		    "\u{1579}\u{1575}\u{3}\u{2}\u{2}\u{2}\u{1579}\u{1578}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{157A}\u{157D}\u{3}\u{2}\u{2}\u{2}\u{157B}\u{157C}\u{7}\u{1A}" .
		    "\u{2}\u{2}\u{157C}\u{157E}\u{5}\u{200}\u{101}\u{2}\u{157D}\u{157B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{157D}\u{157E}\u{3}\u{2}\u{2}\u{2}\u{157E}\u{1580}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{157F}\u{156D}\u{3}\u{2}\u{2}\u{2}\u{157F}\u{1579}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1580}\u{217}\u{3}\u{2}\u{2}\u{2}\u{1581}\u{1582}" .
		    "\u{9}\u{5A}\u{2}\u{2}\u{1582}\u{219}\u{3}\u{2}\u{2}\u{2}\u{1583}\u{1585}" .
		    "\u{7}\u{415}\u{2}\u{2}\u{1584}\u{1583}\u{3}\u{2}\u{2}\u{2}\u{1584}" .
		    "\u{1585}\u{3}\u{2}\u{2}\u{2}\u{1585}\u{1586}\u{3}\u{2}\u{2}\u{2}\u{1586}" .
		    "\u{1587}\u{7}\u{411}\u{2}\u{2}\u{1587}\u{21B}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1588}\u{158A}\u{7}\u{68}\u{2}\u{2}\u{1589}\u{1588}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1589}\u{158A}\u{3}\u{2}\u{2}\u{2}\u{158A}\u{158B}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{158B}\u{158C}\u{9}\u{5B}\u{2}\u{2}\u{158C}\u{21D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{158D}\u{159A}\u{5}\u{216}\u{10C}\u{2}\u{158E}\u{159A}" .
		    "\u{5}\u{212}\u{10A}\u{2}\u{158F}\u{1590}\u{7}\u{3F4}\u{2}\u{2}\u{1590}" .
		    "\u{159A}\u{5}\u{212}\u{10A}\u{2}\u{1591}\u{159A}\u{5}\u{21A}\u{10E}" .
		    "\u{2}\u{1592}\u{159A}\u{5}\u{218}\u{10D}\u{2}\u{1593}\u{159A}\u{7}" .
		    "\u{412}\u{2}\u{2}\u{1594}\u{159A}\u{7}\u{414}\u{2}\u{2}\u{1595}\u{1597}" .
		    "\u{7}\u{68}\u{2}\u{2}\u{1596}\u{1595}\u{3}\u{2}\u{2}\u{2}\u{1596}" .
		    "\u{1597}\u{3}\u{2}\u{2}\u{2}\u{1597}\u{1598}\u{3}\u{2}\u{2}\u{2}\u{1598}" .
		    "\u{159A}\u{9}\u{5B}\u{2}\u{2}\u{1599}\u{158D}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1599}\u{158E}\u{3}\u{2}\u{2}\u{2}\u{1599}\u{158F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1599}\u{1591}\u{3}\u{2}\u{2}\u{2}\u{1599}\u{1592}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1599}\u{1593}\u{3}\u{2}\u{2}\u{2}\u{1599}\u{1594}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1599}\u{1596}\u{3}\u{2}\u{2}\u{2}\u{159A}\u{21F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{159B}\u{159D}\u{9}\u{5C}\u{2}\u{2}\u{159C}" .
		    "\u{159E}\u{5}\u{226}\u{114}\u{2}\u{159D}\u{159C}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{159D}\u{159E}\u{3}\u{2}\u{2}\u{2}\u{159E}\u{15A0}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{159F}\u{15A1}\u{7}\u{D2}\u{2}\u{2}\u{15A0}\u{159F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{15A0}\u{15A1}\u{3}\u{2}\u{2}\u{2}\u{15A1}\u{15A8}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{15A2}\u{15A3}\u{7}\u{18}\u{2}\u{2}\u{15A3}\u{15A6}" .
		    "\u{7}\u{8C}\u{2}\u{2}\u{15A4}\u{15A6}\u{7}\u{2DF}\u{2}\u{2}\u{15A5}" .
		    "\u{15A2}\u{3}\u{2}\u{2}\u{2}\u{15A5}\u{15A4}\u{3}\u{2}\u{2}\u{2}\u{15A6}" .
		    "\u{15A7}\u{3}\u{2}\u{2}\u{2}\u{15A7}\u{15A9}\u{5}\u{1FE}\u{100}\u{2}" .
		    "\u{15A8}\u{15A5}\u{3}\u{2}\u{2}\u{2}\u{15A8}\u{15A9}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{15A9}\u{15AC}\u{3}\u{2}\u{2}\u{2}\u{15AA}\u{15AB}\u{7}\u{1A}" .
		    "\u{2}\u{2}\u{15AB}\u{15AD}\u{5}\u{200}\u{101}\u{2}\u{15AC}\u{15AA}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{15AC}\u{15AD}\u{3}\u{2}\u{2}\u{2}\u{15AD}\u{1606}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{15AE}\u{15AF}\u{7}\u{D1}\u{2}\u{2}\u{15AF}" .
		    "\u{15B1}\u{9}\u{5D}\u{2}\u{2}\u{15B0}\u{15B2}\u{5}\u{226}\u{114}\u{2}" .
		    "\u{15B1}\u{15B0}\u{3}\u{2}\u{2}\u{2}\u{15B1}\u{15B2}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{15B2}\u{15B4}\u{3}\u{2}\u{2}\u{2}\u{15B3}\u{15B5}\u{7}\u{D2}" .
		    "\u{2}\u{2}\u{15B4}\u{15B3}\u{3}\u{2}\u{2}\u{2}\u{15B4}\u{15B5}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{15B5}\u{1606}\u{3}\u{2}\u{2}\u{2}\u{15B6}\u{15B7}" .
		    "\u{7}\u{1C0}\u{2}\u{2}\u{15B7}\u{15B9}\u{7}\u{CF}\u{2}\u{2}\u{15B8}" .
		    "\u{15BA}\u{5}\u{226}\u{114}\u{2}\u{15B9}\u{15B8}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{15B9}\u{15BA}\u{3}\u{2}\u{2}\u{2}\u{15BA}\u{15BC}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{15BB}\u{15BD}\u{7}\u{D2}\u{2}\u{2}\u{15BC}\u{15BB}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{15BC}\u{15BD}\u{3}\u{2}\u{2}\u{2}\u{15BD}\u{1606}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{15BE}\u{15BF}\u{7}\u{D1}\u{2}\u{2}\u{15BF}\u{15C0}" .
		    "\u{9}\u{5E}\u{2}\u{2}\u{15C0}\u{15C2}\u{7}\u{DE}\u{2}\u{2}\u{15C1}" .
		    "\u{15C3}\u{5}\u{226}\u{114}\u{2}\u{15C2}\u{15C1}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{15C2}\u{15C3}\u{3}\u{2}\u{2}\u{2}\u{15C3}\u{15C5}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{15C4}\u{15C6}\u{7}\u{D2}\u{2}\u{2}\u{15C5}\u{15C4}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{15C5}\u{15C6}\u{3}\u{2}\u{2}\u{2}\u{15C6}\u{1606}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{15C7}\u{15C9}\u{9}\u{5F}\u{2}\u{2}\u{15C8}\u{15CA}" .
		    "\u{5}\u{226}\u{114}\u{2}\u{15C9}\u{15C8}\u{3}\u{2}\u{2}\u{2}\u{15C9}" .
		    "\u{15CA}\u{3}\u{2}\u{2}\u{2}\u{15CA}\u{15CC}\u{3}\u{2}\u{2}\u{2}\u{15CB}" .
		    "\u{15CD}\u{9}\u{60}\u{2}\u{2}\u{15CC}\u{15CB}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{15CC}\u{15CD}\u{3}\u{2}\u{2}\u{2}\u{15CD}\u{15CF}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{15CE}\u{15D0}\u{7}\u{B3}\u{2}\u{2}\u{15CF}\u{15CE}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{15CF}\u{15D0}\u{3}\u{2}\u{2}\u{2}\u{15D0}\u{1606}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{15D1}\u{15D3}\u{7}\u{C0}\u{2}\u{2}\u{15D2}\u{15D4}" .
		    "\u{5}\u{228}\u{115}\u{2}\u{15D3}\u{15D2}\u{3}\u{2}\u{2}\u{2}\u{15D3}" .
		    "\u{15D4}\u{3}\u{2}\u{2}\u{2}\u{15D4}\u{15D6}\u{3}\u{2}\u{2}\u{2}\u{15D5}" .
		    "\u{15D7}\u{9}\u{60}\u{2}\u{2}\u{15D6}\u{15D5}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{15D6}\u{15D7}\u{3}\u{2}\u{2}\u{2}\u{15D7}\u{15D9}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{15D8}\u{15DA}\u{7}\u{B3}\u{2}\u{2}\u{15D9}\u{15D8}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{15D9}\u{15DA}\u{3}\u{2}\u{2}\u{2}\u{15DA}\u{1606}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{15DB}\u{15DD}\u{7}\u{C1}\u{2}\u{2}\u{15DC}\u{15DE}" .
		    "\u{7}\u{C2}\u{2}\u{2}\u{15DD}\u{15DC}\u{3}\u{2}\u{2}\u{2}\u{15DD}" .
		    "\u{15DE}\u{3}\u{2}\u{2}\u{2}\u{15DE}\u{15E0}\u{3}\u{2}\u{2}\u{2}\u{15DF}" .
		    "\u{15E1}\u{5}\u{228}\u{115}\u{2}\u{15E0}\u{15DF}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{15E0}\u{15E1}\u{3}\u{2}\u{2}\u{2}\u{15E1}\u{15E3}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{15E2}\u{15E4}\u{9}\u{60}\u{2}\u{2}\u{15E3}\u{15E2}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{15E3}\u{15E4}\u{3}\u{2}\u{2}\u{2}\u{15E4}\u{15E6}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{15E5}\u{15E7}\u{7}\u{B3}\u{2}\u{2}\u{15E6}\u{15E5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{15E6}\u{15E7}\u{3}\u{2}\u{2}\u{2}\u{15E7}\u{1606}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{15E8}\u{15EA}\u{9}\u{61}\u{2}\u{2}\u{15E9}" .
		    "\u{15EB}\u{5}\u{22A}\u{116}\u{2}\u{15EA}\u{15E9}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{15EA}\u{15EB}\u{3}\u{2}\u{2}\u{2}\u{15EB}\u{15ED}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{15EC}\u{15EE}\u{9}\u{60}\u{2}\u{2}\u{15ED}\u{15EC}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{15ED}\u{15EE}\u{3}\u{2}\u{2}\u{2}\u{15EE}\u{15F0}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{15EF}\u{15F1}\u{7}\u{B3}\u{2}\u{2}\u{15F0}\u{15EF}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{15F0}\u{15F1}\u{3}\u{2}\u{2}\u{2}\u{15F1}\u{1606}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{15F2}\u{1606}\u{9}\u{62}\u{2}\u{2}\u{15F3}" .
		    "\u{15F5}\u{9}\u{63}\u{2}\u{2}\u{15F4}\u{15F6}\u{5}\u{226}\u{114}\u{2}" .
		    "\u{15F5}\u{15F4}\u{3}\u{2}\u{2}\u{2}\u{15F5}\u{15F6}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{15F6}\u{1606}\u{3}\u{2}\u{2}\u{2}\u{15F7}\u{15F8}\u{9}\u{64}" .
		    "\u{2}\u{2}\u{15F8}\u{15FA}\u{5}\u{222}\u{112}\u{2}\u{15F9}\u{15FB}" .
		    "\u{7}\u{D2}\u{2}\u{2}\u{15FA}\u{15F9}\u{3}\u{2}\u{2}\u{2}\u{15FA}" .
		    "\u{15FB}\u{3}\u{2}\u{2}\u{2}\u{15FB}\u{1602}\u{3}\u{2}\u{2}\u{2}\u{15FC}" .
		    "\u{15FD}\u{7}\u{18}\u{2}\u{2}\u{15FD}\u{1600}\u{7}\u{8C}\u{2}\u{2}" .
		    "\u{15FE}\u{1600}\u{7}\u{2DF}\u{2}\u{2}\u{15FF}\u{15FC}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{15FF}\u{15FE}\u{3}\u{2}\u{2}\u{2}\u{1600}\u{1601}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1601}\u{1603}\u{5}\u{1FE}\u{100}\u{2}\u{1602}\u{15FF}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1602}\u{1603}\u{3}\u{2}\u{2}\u{2}\u{1603}\u{1606}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1604}\u{1606}\u{9}\u{65}\u{2}\u{2}\u{1605}" .
		    "\u{159B}\u{3}\u{2}\u{2}\u{2}\u{1605}\u{15AE}\u{3}\u{2}\u{2}\u{2}\u{1605}" .
		    "\u{15B6}\u{3}\u{2}\u{2}\u{2}\u{1605}\u{15BE}\u{3}\u{2}\u{2}\u{2}\u{1605}" .
		    "\u{15C7}\u{3}\u{2}\u{2}\u{2}\u{1605}\u{15D1}\u{3}\u{2}\u{2}\u{2}\u{1605}" .
		    "\u{15DB}\u{3}\u{2}\u{2}\u{2}\u{1605}\u{15E8}\u{3}\u{2}\u{2}\u{2}\u{1605}" .
		    "\u{15F2}\u{3}\u{2}\u{2}\u{2}\u{1605}\u{15F3}\u{3}\u{2}\u{2}\u{2}\u{1605}" .
		    "\u{15F7}\u{3}\u{2}\u{2}\u{2}\u{1605}\u{1604}\u{3}\u{2}\u{2}\u{2}\u{1606}" .
		    "\u{221}\u{3}\u{2}\u{2}\u{2}\u{1607}\u{1608}\u{7}\u{400}\u{2}\u{2}" .
		    "\u{1608}\u{160D}\u{7}\u{40F}\u{2}\u{2}\u{1609}\u{160A}\u{7}\u{402}" .
		    "\u{2}\u{2}\u{160A}\u{160C}\u{7}\u{40F}\u{2}\u{2}\u{160B}\u{1609}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{160C}\u{160F}\u{3}\u{2}\u{2}\u{2}\u{160D}\u{160B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{160D}\u{160E}\u{3}\u{2}\u{2}\u{2}\u{160E}\u{1610}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{160F}\u{160D}\u{3}\u{2}\u{2}\u{2}\u{1610}\u{1611}" .
		    "\u{7}\u{401}\u{2}\u{2}\u{1611}\u{223}\u{3}\u{2}\u{2}\u{2}\u{1612}" .
		    "\u{1614}\u{9}\u{66}\u{2}\u{2}\u{1613}\u{1615}\u{5}\u{226}\u{114}\u{2}" .
		    "\u{1614}\u{1613}\u{3}\u{2}\u{2}\u{2}\u{1614}\u{1615}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1615}\u{162C}\u{3}\u{2}\u{2}\u{2}\u{1616}\u{1618}\u{7}\u{CE}" .
		    "\u{2}\u{2}\u{1617}\u{1619}\u{5}\u{226}\u{114}\u{2}\u{1618}\u{1617}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1618}\u{1619}\u{3}\u{2}\u{2}\u{2}\u{1619}\u{1620}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{161A}\u{161B}\u{7}\u{18}\u{2}\u{2}\u{161B}" .
		    "\u{161E}\u{7}\u{8C}\u{2}\u{2}\u{161C}\u{161E}\u{7}\u{2DF}\u{2}\u{2}" .
		    "\u{161D}\u{161A}\u{3}\u{2}\u{2}\u{2}\u{161D}\u{161C}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{161E}\u{161F}\u{3}\u{2}\u{2}\u{2}\u{161F}\u{1621}\u{5}\u{1FE}" .
		    "\u{100}\u{2}\u{1620}\u{161D}\u{3}\u{2}\u{2}\u{2}\u{1620}\u{1621}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1621}\u{162C}\u{3}\u{2}\u{2}\u{2}\u{1622}\u{162C}" .
		    "\u{9}\u{67}\u{2}\u{2}\u{1623}\u{1625}\u{7}\u{C6}\u{2}\u{2}\u{1624}" .
		    "\u{1626}\u{5}\u{228}\u{115}\u{2}\u{1625}\u{1624}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1625}\u{1626}\u{3}\u{2}\u{2}\u{2}\u{1626}\u{162C}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1627}\u{1629}\u{9}\u{60}\u{2}\u{2}\u{1628}\u{162A}\u{7}\u{BE}" .
		    "\u{2}\u{2}\u{1629}\u{1628}\u{3}\u{2}\u{2}\u{2}\u{1629}\u{162A}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{162A}\u{162C}\u{3}\u{2}\u{2}\u{2}\u{162B}\u{1612}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{162B}\u{1616}\u{3}\u{2}\u{2}\u{2}\u{162B}\u{1622}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{162B}\u{1623}\u{3}\u{2}\u{2}\u{2}\u{162B}\u{1627}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{162C}\u{225}\u{3}\u{2}\u{2}\u{2}\u{162D}\u{162E}" .
		    "\u{7}\u{400}\u{2}\u{2}\u{162E}\u{162F}\u{5}\u{212}\u{10A}\u{2}\u{162F}" .
		    "\u{1630}\u{7}\u{401}\u{2}\u{2}\u{1630}\u{227}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1631}\u{1632}\u{7}\u{400}\u{2}\u{2}\u{1632}\u{1633}\u{5}\u{212}" .
		    "\u{10A}\u{2}\u{1633}\u{1634}\u{7}\u{402}\u{2}\u{2}\u{1634}\u{1635}" .
		    "\u{5}\u{212}\u{10A}\u{2}\u{1635}\u{1636}\u{7}\u{401}\u{2}\u{2}\u{1636}" .
		    "\u{229}\u{3}\u{2}\u{2}\u{2}\u{1637}\u{1638}\u{7}\u{400}\u{2}\u{2}" .
		    "\u{1638}\u{163B}\u{5}\u{212}\u{10A}\u{2}\u{1639}\u{163A}\u{7}\u{402}" .
		    "\u{2}\u{2}\u{163A}\u{163C}\u{5}\u{212}\u{10A}\u{2}\u{163B}\u{1639}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{163B}\u{163C}\u{3}\u{2}\u{2}\u{2}\u{163C}\u{163D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{163D}\u{163E}\u{7}\u{401}\u{2}\u{2}\u{163E}" .
		    "\u{22B}\u{3}\u{2}\u{2}\u{2}\u{163F}\u{1644}\u{5}\u{20C}\u{107}\u{2}" .
		    "\u{1640}\u{1641}\u{7}\u{402}\u{2}\u{2}\u{1641}\u{1643}\u{5}\u{20C}" .
		    "\u{107}\u{2}\u{1642}\u{1640}\u{3}\u{2}\u{2}\u{2}\u{1643}\u{1646}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1644}\u{1642}\u{3}\u{2}\u{2}\u{2}\u{1644}\u{1645}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1645}\u{22D}\u{3}\u{2}\u{2}\u{2}\u{1646}\u{1644}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1647}\u{164C}\u{5}\u{1F4}\u{FB}\u{2}\u{1648}" .
		    "\u{1649}\u{7}\u{402}\u{2}\u{2}\u{1649}\u{164B}\u{5}\u{1F4}\u{FB}\u{2}" .
		    "\u{164A}\u{1648}\u{3}\u{2}\u{2}\u{2}\u{164B}\u{164E}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{164C}\u{164A}\u{3}\u{2}\u{2}\u{2}\u{164C}\u{164D}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{164D}\u{22F}\u{3}\u{2}\u{2}\u{2}\u{164E}\u{164C}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{164F}\u{1650}\u{7}\u{400}\u{2}\u{2}\u{1650}\u{1655}" .
		    "\u{5}\u{1F8}\u{FD}\u{2}\u{1651}\u{1652}\u{7}\u{402}\u{2}\u{2}\u{1652}" .
		    "\u{1654}\u{5}\u{1F8}\u{FD}\u{2}\u{1653}\u{1651}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1654}\u{1657}\u{3}\u{2}\u{2}\u{2}\u{1655}\u{1653}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1655}\u{1656}\u{3}\u{2}\u{2}\u{2}\u{1656}\u{1658}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1657}\u{1655}\u{3}\u{2}\u{2}\u{2}\u{1658}\u{1659}\u{7}" .
		    "\u{401}\u{2}\u{2}\u{1659}\u{231}\u{3}\u{2}\u{2}\u{2}\u{165A}\u{165F}" .
		    "\u{5}\u{25C}\u{12F}\u{2}\u{165B}\u{165C}\u{7}\u{402}\u{2}\u{2}\u{165C}" .
		    "\u{165E}\u{5}\u{25C}\u{12F}\u{2}\u{165D}\u{165B}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{165E}\u{1661}\u{3}\u{2}\u{2}\u{2}\u{165F}\u{165D}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{165F}\u{1660}\u{3}\u{2}\u{2}\u{2}\u{1660}\u{233}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1661}\u{165F}\u{3}\u{2}\u{2}\u{2}\u{1662}\u{1667}\u{5}" .
		    "\u{260}\u{131}\u{2}\u{1663}\u{1664}\u{7}\u{402}\u{2}\u{2}\u{1664}" .
		    "\u{1666}\u{5}\u{260}\u{131}\u{2}\u{1665}\u{1663}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1666}\u{1669}\u{3}\u{2}\u{2}\u{2}\u{1667}\u{1665}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1667}\u{1668}\u{3}\u{2}\u{2}\u{2}\u{1668}\u{235}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1669}\u{1667}\u{3}\u{2}\u{2}\u{2}\u{166A}\u{166F}\u{5}" .
		    "\u{242}\u{122}\u{2}\u{166B}\u{166C}\u{7}\u{402}\u{2}\u{2}\u{166C}" .
		    "\u{166E}\u{5}\u{242}\u{122}\u{2}\u{166D}\u{166B}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{166E}\u{1671}\u{3}\u{2}\u{2}\u{2}\u{166F}\u{166D}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{166F}\u{1670}\u{3}\u{2}\u{2}\u{2}\u{1670}\u{237}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1671}\u{166F}\u{3}\u{2}\u{2}\u{2}\u{1672}\u{1677}\u{5}" .
		    "\u{21E}\u{110}\u{2}\u{1673}\u{1674}\u{7}\u{402}\u{2}\u{2}\u{1674}" .
		    "\u{1676}\u{5}\u{21E}\u{110}\u{2}\u{1675}\u{1673}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1676}\u{1679}\u{3}\u{2}\u{2}\u{2}\u{1677}\u{1675}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1677}\u{1678}\u{3}\u{2}\u{2}\u{2}\u{1678}\u{239}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1679}\u{1677}\u{3}\u{2}\u{2}\u{2}\u{167A}\u{167F}\u{7}" .
		    "\u{40F}\u{2}\u{2}\u{167B}\u{167C}\u{7}\u{402}\u{2}\u{2}\u{167C}\u{167E}" .
		    "\u{7}\u{40F}\u{2}\u{2}\u{167D}\u{167B}\u{3}\u{2}\u{2}\u{2}\u{167E}" .
		    "\u{1681}\u{3}\u{2}\u{2}\u{2}\u{167F}\u{167D}\u{3}\u{2}\u{2}\u{2}\u{167F}" .
		    "\u{1680}\u{3}\u{2}\u{2}\u{2}\u{1680}\u{23B}\u{3}\u{2}\u{2}\u{2}\u{1681}" .
		    "\u{167F}\u{3}\u{2}\u{2}\u{2}\u{1682}\u{1687}\u{7}\u{41A}\u{2}\u{2}" .
		    "\u{1683}\u{1684}\u{7}\u{402}\u{2}\u{2}\u{1684}\u{1686}\u{7}\u{41A}" .
		    "\u{2}\u{2}\u{1685}\u{1683}\u{3}\u{2}\u{2}\u{2}\u{1686}\u{1689}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1687}\u{1685}\u{3}\u{2}\u{2}\u{2}\u{1687}\u{1688}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1688}\u{23D}\u{3}\u{2}\u{2}\u{2}\u{1689}\u{1687}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{168A}\u{1696}\u{7}\u{6A}\u{2}\u{2}\u{168B}" .
		    "\u{168D}\u{5}\u{268}\u{135}\u{2}\u{168C}\u{168B}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{168C}\u{168D}\u{3}\u{2}\u{2}\u{2}\u{168D}\u{168E}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{168E}\u{1696}\u{5}\u{21E}\u{110}\u{2}\u{168F}\u{1693}\u{5}" .
		    "\u{240}\u{121}\u{2}\u{1690}\u{1691}\u{7}\u{6C}\u{2}\u{2}\u{1691}\u{1692}" .
		    "\u{7}\u{A8}\u{2}\u{2}\u{1692}\u{1694}\u{5}\u{240}\u{121}\u{2}\u{1693}" .
		    "\u{1690}\u{3}\u{2}\u{2}\u{2}\u{1693}\u{1694}\u{3}\u{2}\u{2}\u{2}\u{1694}" .
		    "\u{1696}\u{3}\u{2}\u{2}\u{2}\u{1695}\u{168A}\u{3}\u{2}\u{2}\u{2}\u{1695}" .
		    "\u{168C}\u{3}\u{2}\u{2}\u{2}\u{1695}\u{168F}\u{3}\u{2}\u{2}\u{2}\u{1696}" .
		    "\u{23F}\u{3}\u{2}\u{2}\u{2}\u{1697}\u{169D}\u{9}\u{68}\u{2}\u{2}\u{1698}" .
		    "\u{169A}\u{7}\u{400}\u{2}\u{2}\u{1699}\u{169B}\u{5}\u{212}\u{10A}" .
		    "\u{2}\u{169A}\u{1699}\u{3}\u{2}\u{2}\u{2}\u{169A}\u{169B}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{169B}\u{169C}\u{3}\u{2}\u{2}\u{2}\u{169C}\u{169E}\u{7}" .
		    "\u{401}\u{2}\u{2}\u{169D}\u{1698}\u{3}\u{2}\u{2}\u{2}\u{169D}\u{169E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{169E}\u{16A6}\u{3}\u{2}\u{2}\u{2}\u{169F}\u{16A0}" .
		    "\u{7}\u{107}\u{2}\u{2}\u{16A0}\u{16A2}\u{7}\u{400}\u{2}\u{2}\u{16A1}" .
		    "\u{16A3}\u{5}\u{212}\u{10A}\u{2}\u{16A2}\u{16A1}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{16A2}\u{16A3}\u{3}\u{2}\u{2}\u{2}\u{16A3}\u{16A4}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{16A4}\u{16A6}\u{7}\u{401}\u{2}\u{2}\u{16A5}\u{1697}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{16A5}\u{169F}\u{3}\u{2}\u{2}\u{2}\u{16A6}\u{241}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{16A7}\u{16AA}\u{5}\u{25C}\u{12F}\u{2}\u{16A8}\u{16AA}" .
		    "\u{7}\u{28}\u{2}\u{2}\u{16A9}\u{16A7}\u{3}\u{2}\u{2}\u{2}\u{16A9}" .
		    "\u{16A8}\u{3}\u{2}\u{2}\u{2}\u{16AA}\u{243}\u{3}\u{2}\u{2}\u{2}\u{16AB}" .
		    "\u{16AC}\u{7}\u{47}\u{2}\u{2}\u{16AC}\u{16AD}\u{7}\u{37}\u{2}\u{2}" .
		    "\u{16AD}\u{245}\u{3}\u{2}\u{2}\u{2}\u{16AE}\u{16AF}\u{7}\u{47}\u{2}" .
		    "\u{2}\u{16AF}\u{16B0}\u{7}\u{68}\u{2}\u{2}\u{16B0}\u{16B1}\u{7}\u{37}" .
		    "\u{2}\u{2}\u{16B1}\u{247}\u{3}\u{2}\u{2}\u{2}\u{16B2}\u{16C4}\u{5}" .
		    "\u{24A}\u{126}\u{2}\u{16B3}\u{16C4}\u{5}\u{252}\u{12A}\u{2}\u{16B4}" .
		    "\u{16B5}\u{5}\u{254}\u{12B}\u{2}\u{16B5}\u{16B7}\u{7}\u{400}\u{2}" .
		    "\u{2}\u{16B6}\u{16B8}\u{5}\u{258}\u{12D}\u{2}\u{16B7}\u{16B6}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{16B7}\u{16B8}\u{3}\u{2}\u{2}\u{2}\u{16B8}\u{16B9}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{16B9}\u{16BA}\u{7}\u{401}\u{2}\u{2}\u{16BA}" .
		    "\u{16C4}\u{3}\u{2}\u{2}\u{2}\u{16BB}\u{16BC}\u{5}\u{1F2}\u{FA}\u{2}" .
		    "\u{16BC}\u{16BE}\u{7}\u{400}\u{2}\u{2}\u{16BD}\u{16BF}\u{5}\u{258}" .
		    "\u{12D}\u{2}\u{16BE}\u{16BD}\u{3}\u{2}\u{2}\u{2}\u{16BE}\u{16BF}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{16BF}\u{16C0}\u{3}\u{2}\u{2}\u{2}\u{16C0}\u{16C1}" .
		    "\u{7}\u{401}\u{2}\u{2}\u{16C1}\u{16C4}\u{3}\u{2}\u{2}\u{2}\u{16C2}" .
		    "\u{16C4}\u{5}\u{256}\u{12C}\u{2}\u{16C3}\u{16B2}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{16C3}\u{16B3}\u{3}\u{2}\u{2}\u{2}\u{16C3}\u{16B4}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{16C3}\u{16BB}\u{3}\u{2}\u{2}\u{2}\u{16C3}\u{16C2}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{16C4}\u{249}\u{3}\u{2}\u{2}\u{2}\u{16C5}\u{1763}\u{9}" .
		    "\u{69}\u{2}\u{2}\u{16C6}\u{16C7}\u{7}\u{1F}\u{2}\u{2}\u{16C7}\u{16C8}" .
		    "\u{7}\u{400}\u{2}\u{2}\u{16C8}\u{16C9}\u{5}\u{25C}\u{12F}\u{2}\u{16C9}" .
		    "\u{16CA}\u{7}\u{402}\u{2}\u{2}\u{16CA}\u{16CB}\u{5}\u{224}\u{113}" .
		    "\u{2}\u{16CB}\u{16CC}\u{7}\u{401}\u{2}\u{2}\u{16CC}\u{1763}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{16CD}\u{16CE}\u{7}\u{1F}\u{2}\u{2}\u{16CE}\u{16CF}\u{7}" .
		    "\u{400}\u{2}\u{2}\u{16CF}\u{16D0}\u{5}\u{25C}\u{12F}\u{2}\u{16D0}" .
		    "\u{16D1}\u{7}\u{AB}\u{2}\u{2}\u{16D1}\u{16D2}\u{5}\u{1FE}\u{100}\u{2}" .
		    "\u{16D2}\u{16D3}\u{7}\u{401}\u{2}\u{2}\u{16D3}\u{1763}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{16D4}\u{16D5}\u{7}\u{16}\u{2}\u{2}\u{16D5}\u{16D6}\u{7}\u{400}" .
		    "\u{2}\u{2}\u{16D6}\u{16D7}\u{5}\u{25C}\u{12F}\u{2}\u{16D7}\u{16D8}" .
		    "\u{7}\u{D}\u{2}\u{2}\u{16D8}\u{16D9}\u{5}\u{224}\u{113}\u{2}\u{16D9}" .
		    "\u{16DA}\u{7}\u{401}\u{2}\u{2}\u{16DA}\u{1763}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{16DB}\u{16DC}\u{7}\u{AC}\u{2}\u{2}\u{16DC}\u{16DD}\u{7}\u{400}" .
		    "\u{2}\u{2}\u{16DD}\u{16DE}\u{5}\u{1F6}\u{FC}\u{2}\u{16DE}\u{16DF}" .
		    "\u{7}\u{401}\u{2}\u{2}\u{16DF}\u{1763}\u{3}\u{2}\u{2}\u{2}\u{16E0}" .
		    "\u{16E1}\u{7}\u{15}\u{2}\u{2}\u{16E1}\u{16E3}\u{5}\u{25C}\u{12F}\u{2}" .
		    "\u{16E2}\u{16E4}\u{5}\u{24C}\u{127}\u{2}\u{16E3}\u{16E2}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{16E4}\u{16E5}\u{3}\u{2}\u{2}\u{2}\u{16E5}\u{16E3}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{16E5}\u{16E6}\u{3}\u{2}\u{2}\u{2}\u{16E6}\u{16E9}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{16E7}\u{16E8}\u{7}\u{33}\u{2}\u{2}\u{16E8}" .
		    "\u{16EA}\u{5}\u{25A}\u{12E}\u{2}\u{16E9}\u{16E7}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{16E9}\u{16EA}\u{3}\u{2}\u{2}\u{2}\u{16EA}\u{16EB}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{16EB}\u{16EC}\u{7}\u{156}\u{2}\u{2}\u{16EC}\u{1763}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{16ED}\u{16EF}\u{7}\u{15}\u{2}\u{2}\u{16EE}\u{16F0}\u{5}" .
		    "\u{24C}\u{127}\u{2}\u{16EF}\u{16EE}\u{3}\u{2}\u{2}\u{2}\u{16F0}\u{16F1}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{16F1}\u{16EF}\u{3}\u{2}\u{2}\u{2}\u{16F1}\u{16F2}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{16F2}\u{16F5}\u{3}\u{2}\u{2}\u{2}\u{16F3}\u{16F4}" .
		    "\u{7}\u{33}\u{2}\u{2}\u{16F4}\u{16F6}\u{5}\u{25A}\u{12E}\u{2}\u{16F5}" .
		    "\u{16F3}\u{3}\u{2}\u{2}\u{2}\u{16F5}\u{16F6}\u{3}\u{2}\u{2}\u{2}\u{16F6}" .
		    "\u{16F7}\u{3}\u{2}\u{2}\u{2}\u{16F7}\u{16F8}\u{7}\u{156}\u{2}\u{2}" .
		    "\u{16F8}\u{1763}\u{3}\u{2}\u{2}\u{2}\u{16F9}\u{16FA}\u{7}\u{CE}\u{2}" .
		    "\u{2}\u{16FA}\u{16FB}\u{7}\u{400}\u{2}\u{2}\u{16FB}\u{16FE}\u{5}\u{258}" .
		    "\u{12D}\u{2}\u{16FC}\u{16FD}\u{7}\u{AB}\u{2}\u{2}\u{16FD}\u{16FF}" .
		    "\u{5}\u{1FE}\u{100}\u{2}\u{16FE}\u{16FC}\u{3}\u{2}\u{2}\u{2}\u{16FE}" .
		    "\u{16FF}\u{3}\u{2}\u{2}\u{2}\u{16FF}\u{1700}\u{3}\u{2}\u{2}\u{2}\u{1700}" .
		    "\u{1701}\u{7}\u{401}\u{2}\u{2}\u{1701}\u{1763}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1702}\u{1703}\u{7}\u{108}\u{2}\u{2}\u{1703}\u{1706}\u{7}\u{400}" .
		    "\u{2}\u{2}\u{1704}\u{1707}\u{5}\u{216}\u{10C}\u{2}\u{1705}\u{1707}" .
		    "\u{5}\u{25C}\u{12F}\u{2}\u{1706}\u{1704}\u{3}\u{2}\u{2}\u{2}\u{1706}" .
		    "\u{1705}\u{3}\u{2}\u{2}\u{2}\u{1707}\u{1708}\u{3}\u{2}\u{2}\u{2}\u{1708}" .
		    "\u{170B}\u{7}\u{49}\u{2}\u{2}\u{1709}\u{170C}\u{5}\u{216}\u{10C}\u{2}" .
		    "\u{170A}\u{170C}\u{5}\u{25C}\u{12F}\u{2}\u{170B}\u{1709}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{170B}\u{170A}\u{3}\u{2}\u{2}\u{2}\u{170C}\u{170D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{170D}\u{170E}\u{7}\u{401}\u{2}\u{2}\u{170E}\u{1763}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{170F}\u{1710}\u{9}\u{6A}\u{2}\u{2}\u{1710}" .
		    "\u{1713}\u{7}\u{400}\u{2}\u{2}\u{1711}\u{1714}\u{5}\u{216}\u{10C}" .
		    "\u{2}\u{1712}\u{1714}\u{5}\u{25C}\u{12F}\u{2}\u{1713}\u{1711}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1713}\u{1712}\u{3}\u{2}\u{2}\u{2}\u{1714}\u{1715}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1715}\u{1718}\u{7}\u{3F}\u{2}\u{2}\u{1716}" .
		    "\u{1719}\u{5}\u{212}\u{10A}\u{2}\u{1717}\u{1719}\u{5}\u{25C}\u{12F}" .
		    "\u{2}\u{1718}\u{1716}\u{3}\u{2}\u{2}\u{2}\u{1718}\u{1717}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1719}\u{171F}\u{3}\u{2}\u{2}\u{2}\u{171A}\u{171D}\u{7}" .
		    "\u{3C}\u{2}\u{2}\u{171B}\u{171E}\u{5}\u{212}\u{10A}\u{2}\u{171C}\u{171E}" .
		    "\u{5}\u{25C}\u{12F}\u{2}\u{171D}\u{171B}\u{3}\u{2}\u{2}\u{2}\u{171D}" .
		    "\u{171C}\u{3}\u{2}\u{2}\u{2}\u{171E}\u{1720}\u{3}\u{2}\u{2}\u{2}\u{171F}" .
		    "\u{171A}\u{3}\u{2}\u{2}\u{2}\u{171F}\u{1720}\u{3}\u{2}\u{2}\u{2}\u{1720}" .
		    "\u{1721}\u{3}\u{2}\u{2}\u{2}\u{1721}\u{1722}\u{7}\u{401}\u{2}\u{2}" .
		    "\u{1722}\u{1763}\u{3}\u{2}\u{2}\u{2}\u{1723}\u{1724}\u{7}\u{10C}\u{2}" .
		    "\u{2}\u{1724}\u{1725}\u{7}\u{400}\u{2}\u{2}\u{1725}\u{1728}\u{9}\u{6B}" .
		    "\u{2}\u{2}\u{1726}\u{1729}\u{5}\u{216}\u{10C}\u{2}\u{1727}\u{1729}" .
		    "\u{5}\u{25C}\u{12F}\u{2}\u{1728}\u{1726}\u{3}\u{2}\u{2}\u{2}\u{1728}" .
		    "\u{1727}\u{3}\u{2}\u{2}\u{2}\u{1728}\u{1729}\u{3}\u{2}\u{2}\u{2}\u{1729}" .
		    "\u{172A}\u{3}\u{2}\u{2}\u{2}\u{172A}\u{172D}\u{7}\u{3F}\u{2}\u{2}" .
		    "\u{172B}\u{172E}\u{5}\u{216}\u{10C}\u{2}\u{172C}\u{172E}\u{5}\u{25C}" .
		    "\u{12F}\u{2}\u{172D}\u{172B}\u{3}\u{2}\u{2}\u{2}\u{172D}\u{172C}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{172E}\u{172F}\u{3}\u{2}\u{2}\u{2}\u{172F}\u{1730}" .
		    "\u{7}\u{401}\u{2}\u{2}\u{1730}\u{1763}\u{3}\u{2}\u{2}\u{2}\u{1731}" .
		    "\u{1732}\u{7}\u{10C}\u{2}\u{2}\u{1732}\u{1735}\u{7}\u{400}\u{2}\u{2}" .
		    "\u{1733}\u{1736}\u{5}\u{216}\u{10C}\u{2}\u{1734}\u{1736}\u{5}\u{25C}" .
		    "\u{12F}\u{2}\u{1735}\u{1733}\u{3}\u{2}\u{2}\u{2}\u{1735}\u{1734}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1736}\u{1737}\u{3}\u{2}\u{2}\u{2}\u{1737}\u{173A}" .
		    "\u{7}\u{3F}\u{2}\u{2}\u{1738}\u{173B}\u{5}\u{216}\u{10C}\u{2}\u{1739}" .
		    "\u{173B}\u{5}\u{25C}\u{12F}\u{2}\u{173A}\u{1738}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{173A}\u{1739}\u{3}\u{2}\u{2}\u{2}\u{173B}\u{173C}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{173C}\u{173D}\u{7}\u{401}\u{2}\u{2}\u{173D}\u{1763}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{173E}\u{173F}\u{7}\u{3E1}\u{2}\u{2}\u{173F}\u{1742}\u{7}" .
		    "\u{400}\u{2}\u{2}\u{1740}\u{1743}\u{5}\u{216}\u{10C}\u{2}\u{1741}" .
		    "\u{1743}\u{5}\u{25C}\u{12F}\u{2}\u{1742}\u{1740}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1742}\u{1741}\u{3}\u{2}\u{2}\u{2}\u{1743}\u{174A}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1744}\u{1745}\u{7}\u{D}\u{2}\u{2}\u{1745}\u{1746}\u{9}\u{6C}" .
		    "\u{2}\u{2}\u{1746}\u{1747}\u{7}\u{400}\u{2}\u{2}\u{1747}\u{1748}\u{5}" .
		    "\u{212}\u{10A}\u{2}\u{1748}\u{1749}\u{7}\u{401}\u{2}\u{2}\u{1749}" .
		    "\u{174B}\u{3}\u{2}\u{2}\u{2}\u{174A}\u{1744}\u{3}\u{2}\u{2}\u{2}\u{174A}" .
		    "\u{174B}\u{3}\u{2}\u{2}\u{2}\u{174B}\u{174D}\u{3}\u{2}\u{2}\u{2}\u{174C}" .
		    "\u{174E}\u{5}\u{24E}\u{128}\u{2}\u{174D}\u{174C}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{174D}\u{174E}\u{3}\u{2}\u{2}\u{2}\u{174E}\u{174F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{174F}\u{1750}\u{7}\u{401}\u{2}\u{2}\u{1750}\u{1763}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1751}\u{1752}\u{7}\u{105}\u{2}\u{2}\u{1752}\u{1753}\u{7}" .
		    "\u{400}\u{2}\u{2}\u{1753}\u{1754}\u{5}\u{3C}\u{1F}\u{2}\u{1754}\u{1757}" .
		    "\u{7}\u{3F}\u{2}\u{2}\u{1755}\u{1758}\u{5}\u{216}\u{10C}\u{2}\u{1756}" .
		    "\u{1758}\u{5}\u{25C}\u{12F}\u{2}\u{1757}\u{1755}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1757}\u{1756}\u{3}\u{2}\u{2}\u{2}\u{1758}\u{1759}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1759}\u{175A}\u{7}\u{401}\u{2}\u{2}\u{175A}\u{1763}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{175B}\u{175C}\u{7}\u{319}\u{2}\u{2}\u{175C}\u{175D}\u{7}" .
		    "\u{400}\u{2}\u{2}\u{175D}\u{175E}\u{9}\u{6D}\u{2}\u{2}\u{175E}\u{175F}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{175F}\u{1760}\u{5}\u{216}\u{10C}\u{2}\u{1760}" .
		    "\u{1761}\u{7}\u{401}\u{2}\u{2}\u{1761}\u{1763}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1762}\u{16C5}\u{3}\u{2}\u{2}\u{2}\u{1762}\u{16C6}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1762}\u{16CD}\u{3}\u{2}\u{2}\u{2}\u{1762}\u{16D4}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1762}\u{16DB}\u{3}\u{2}\u{2}\u{2}\u{1762}\u{16E0}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1762}\u{16ED}\u{3}\u{2}\u{2}\u{2}\u{1762}\u{16F9}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1762}\u{1702}\u{3}\u{2}\u{2}\u{2}\u{1762}\u{170F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1762}\u{1723}\u{3}\u{2}\u{2}\u{2}\u{1762}\u{1731}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1762}\u{173E}\u{3}\u{2}\u{2}\u{2}\u{1762}\u{1751}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1762}\u{175B}\u{3}\u{2}\u{2}\u{2}\u{1763}\u{24B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1764}\u{1765}\u{7}\u{AD}\u{2}\u{2}\u{1765}" .
		    "\u{1766}\u{5}\u{25A}\u{12E}\u{2}\u{1766}\u{1767}\u{7}\u{9E}\u{2}\u{2}" .
		    "\u{1767}\u{1768}\u{5}\u{25A}\u{12E}\u{2}\u{1768}\u{24D}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1769}\u{176A}\u{7}\u{192}\u{2}\u{2}\u{176A}\u{176F}\u{5}" .
		    "\u{250}\u{129}\u{2}\u{176B}\u{176C}\u{7}\u{402}\u{2}\u{2}\u{176C}" .
		    "\u{176E}\u{5}\u{250}\u{129}\u{2}\u{176D}\u{176B}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{176E}\u{1771}\u{3}\u{2}\u{2}\u{2}\u{176F}\u{176D}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{176F}\u{1770}\u{3}\u{2}\u{2}\u{2}\u{1770}\u{1778}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1771}\u{176F}\u{3}\u{2}\u{2}\u{2}\u{1772}\u{1773}\u{7}" .
		    "\u{192}\u{2}\u{2}\u{1773}\u{1774}\u{5}\u{212}\u{10A}\u{2}\u{1774}" .
		    "\u{1775}\u{7}\u{3F4}\u{2}\u{2}\u{1775}\u{1776}\u{5}\u{212}\u{10A}" .
		    "\u{2}\u{1776}\u{1778}\u{3}\u{2}\u{2}\u{2}\u{1777}\u{1769}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1777}\u{1772}\u{3}\u{2}\u{2}\u{2}\u{1778}\u{24F}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1779}\u{177B}\u{5}\u{212}\u{10A}\u{2}\u{177A}\u{177C}" .
		    "\u{9}\u{6E}\u{2}\u{2}\u{177B}\u{177A}\u{3}\u{2}\u{2}\u{2}\u{177B}" .
		    "\u{177C}\u{3}\u{2}\u{2}\u{2}\u{177C}\u{251}\u{3}\u{2}\u{2}\u{2}\u{177D}" .
		    "\u{177E}\u{9}\u{6F}\u{2}\u{2}\u{177E}\u{1780}\u{7}\u{400}\u{2}\u{2}" .
		    "\u{177F}\u{1781}\u{9}\u{27}\u{2}\u{2}\u{1780}\u{177F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1780}\u{1781}\u{3}\u{2}\u{2}\u{2}\u{1781}\u{1782}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1782}\u{1783}\u{5}\u{25A}\u{12E}\u{2}\u{1783}\u{1784}" .
		    "\u{7}\u{401}\u{2}\u{2}\u{1784}\u{17B6}\u{3}\u{2}\u{2}\u{2}\u{1785}" .
		    "\u{1786}\u{7}\u{F1}\u{2}\u{2}\u{1786}\u{178C}\u{7}\u{400}\u{2}\u{2}" .
		    "\u{1787}\u{178D}\u{7}\u{3EF}\u{2}\u{2}\u{1788}\u{178A}\u{7}\u{8}\u{2}" .
		    "\u{2}\u{1789}\u{1788}\u{3}\u{2}\u{2}\u{2}\u{1789}\u{178A}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{178A}\u{178B}\u{3}\u{2}\u{2}\u{2}\u{178B}\u{178D}\u{5}" .
		    "\u{25A}\u{12E}\u{2}\u{178C}\u{1787}\u{3}\u{2}\u{2}\u{2}\u{178C}\u{1789}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{178D}\u{178E}\u{3}\u{2}\u{2}\u{2}\u{178E}\u{17B6}" .
		    "\u{7}\u{401}\u{2}\u{2}\u{178F}\u{1790}\u{7}\u{F1}\u{2}\u{2}\u{1790}" .
		    "\u{1791}\u{7}\u{400}\u{2}\u{2}\u{1791}\u{1792}\u{7}\u{2F}\u{2}\u{2}" .
		    "\u{1792}\u{1793}\u{5}\u{258}\u{12D}\u{2}\u{1793}\u{1794}\u{7}\u{401}" .
		    "\u{2}\u{2}\u{1794}\u{17B6}\u{3}\u{2}\u{2}\u{2}\u{1795}\u{1796}\u{9}" .
		    "\u{70}\u{2}\u{2}\u{1796}\u{1798}\u{7}\u{400}\u{2}\u{2}\u{1797}\u{1799}" .
		    "\u{7}\u{8}\u{2}\u{2}\u{1798}\u{1797}\u{3}\u{2}\u{2}\u{2}\u{1798}\u{1799}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1799}\u{179A}\u{3}\u{2}\u{2}\u{2}\u{179A}\u{179B}" .
		    "\u{5}\u{25A}\u{12E}\u{2}\u{179B}\u{179C}\u{7}\u{401}\u{2}\u{2}\u{179C}" .
		    "\u{17B6}\u{3}\u{2}\u{2}\u{2}\u{179D}\u{179E}\u{7}\u{F2}\u{2}\u{2}" .
		    "\u{179E}\u{17A0}\u{7}\u{400}\u{2}\u{2}\u{179F}\u{17A1}\u{7}\u{2F}" .
		    "\u{2}\u{2}\u{17A0}\u{179F}\u{3}\u{2}\u{2}\u{2}\u{17A0}\u{17A1}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{17A1}\u{17A2}\u{3}\u{2}\u{2}\u{2}\u{17A2}\u{17AD}" .
		    "\u{5}\u{258}\u{12D}\u{2}\u{17A3}\u{17A4}\u{7}\u{71}\u{2}\u{2}\u{17A4}" .
		    "\u{17A5}\u{7}\u{12}\u{2}\u{2}\u{17A5}\u{17AA}\u{5}\u{D2}\u{6A}\u{2}" .
		    "\u{17A6}\u{17A7}\u{7}\u{402}\u{2}\u{2}\u{17A7}\u{17A9}\u{5}\u{D2}" .
		    "\u{6A}\u{2}\u{17A8}\u{17A6}\u{3}\u{2}\u{2}\u{2}\u{17A9}\u{17AC}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{17AA}\u{17A8}\u{3}\u{2}\u{2}\u{2}\u{17AA}\u{17AB}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{17AB}\u{17AE}\u{3}\u{2}\u{2}\u{2}\u{17AC}\u{17AA}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{17AD}\u{17A3}\u{3}\u{2}\u{2}\u{2}\u{17AD}\u{17AE}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{17AE}\u{17B1}\u{3}\u{2}\u{2}\u{2}\u{17AF}\u{17B0}" .
		    "\u{7}\u{8D}\u{2}\u{2}\u{17B0}\u{17B2}\u{7}\u{40F}\u{2}\u{2}\u{17B1}" .
		    "\u{17AF}\u{3}\u{2}\u{2}\u{2}\u{17B1}\u{17B2}\u{3}\u{2}\u{2}\u{2}\u{17B2}" .
		    "\u{17B3}\u{3}\u{2}\u{2}\u{2}\u{17B3}\u{17B4}\u{7}\u{401}\u{2}\u{2}" .
		    "\u{17B4}\u{17B6}\u{3}\u{2}\u{2}\u{2}\u{17B5}\u{177D}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{17B5}\u{1785}\u{3}\u{2}\u{2}\u{2}\u{17B5}\u{178F}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{17B5}\u{1795}\u{3}\u{2}\u{2}\u{2}\u{17B5}\u{179D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{17B6}\u{253}\u{3}\u{2}\u{2}\u{2}\u{17B7}\u{17CF}" .
		    "\u{5}\u{27E}\u{140}\u{2}\u{17B8}\u{17CF}\u{7}\u{282}\u{2}\u{2}\u{17B9}" .
		    "\u{17CF}\u{7}\u{101}\u{2}\u{2}\u{17BA}\u{17CF}\u{7}\u{FD}\u{2}\u{2}" .
		    "\u{17BB}\u{17CF}\u{7}\u{FE}\u{2}\u{2}\u{17BC}\u{17CF}\u{7}\u{FF}\u{2}" .
		    "\u{2}\u{17BD}\u{17CF}\u{7}\u{102}\u{2}\u{2}\u{17BE}\u{17CF}\u{7}\u{103}" .
		    "\u{2}\u{2}\u{17BF}\u{17CF}\u{7}\u{104}\u{2}\u{2}\u{17C0}\u{17CF}\u{7}" .
		    "\u{47}\u{2}\u{2}\u{17C1}\u{17CF}\u{7}\u{4E}\u{2}\u{2}\u{17C2}\u{17CF}" .
		    "\u{7}\u{100}\u{2}\u{2}\u{17C3}\u{17CF}\u{7}\u{106}\u{2}\u{2}\u{17C4}" .
		    "\u{17CF}\u{7}\u{1B6}\u{2}\u{2}\u{17C5}\u{17CF}\u{7}\u{107}\u{2}\u{2}" .
		    "\u{17C6}\u{17CF}\u{7}\u{81}\u{2}\u{2}\u{17C7}\u{17CF}\u{7}\u{109}" .
		    "\u{2}\u{2}\u{17C8}\u{17CF}\u{7}\u{10A}\u{2}\u{2}\u{17C9}\u{17CF}\u{7}" .
		    "\u{10B}\u{2}\u{2}\u{17CA}\u{17CF}\u{7}\u{10C}\u{2}\u{2}\u{17CB}\u{17CF}" .
		    "\u{7}\u{10D}\u{2}\u{2}\u{17CC}\u{17CF}\u{7}\u{10E}\u{2}\u{2}\u{17CD}" .
		    "\u{17CF}\u{7}\u{10F}\u{2}\u{2}\u{17CE}\u{17B7}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{17CE}\u{17B8}\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17B9}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{17CE}\u{17BA}\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17BB}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{17CE}\u{17BC}\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17BD}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{17CE}\u{17BE}\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17BF}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17C0}\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17C1}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17C2}\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17C3}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17C4}\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17C5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17C6}\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17C7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17C8}\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17C9}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17CA}\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17CB}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17CC}\u{3}\u{2}\u{2}\u{2}\u{17CE}\u{17CD}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{17CF}\u{255}\u{3}\u{2}\u{2}\u{2}\u{17D0}\u{17D1}" .
		    "\u{9}\u{71}\u{2}\u{2}\u{17D1}\u{17D2}\u{7}\u{400}\u{2}\u{2}\u{17D2}" .
		    "\u{17D3}\u{5}\u{25A}\u{12E}\u{2}\u{17D3}\u{17D4}\u{7}\u{401}\u{2}" .
		    "\u{2}\u{17D4}\u{257}\u{3}\u{2}\u{2}\u{2}\u{17D5}\u{17DA}\u{5}\u{21E}" .
		    "\u{110}\u{2}\u{17D6}\u{17DA}\u{5}\u{1F6}\u{FC}\u{2}\u{17D7}\u{17DA}" .
		    "\u{5}\u{248}\u{125}\u{2}\u{17D8}\u{17DA}\u{5}\u{25C}\u{12F}\u{2}\u{17D9}" .
		    "\u{17D5}\u{3}\u{2}\u{2}\u{2}\u{17D9}\u{17D6}\u{3}\u{2}\u{2}\u{2}\u{17D9}" .
		    "\u{17D7}\u{3}\u{2}\u{2}\u{2}\u{17D9}\u{17D8}\u{3}\u{2}\u{2}\u{2}\u{17DA}" .
		    "\u{17E4}\u{3}\u{2}\u{2}\u{2}\u{17DB}\u{17E0}\u{7}\u{402}\u{2}\u{2}" .
		    "\u{17DC}\u{17E1}\u{5}\u{21E}\u{110}\u{2}\u{17DD}\u{17E1}\u{5}\u{1F6}" .
		    "\u{FC}\u{2}\u{17DE}\u{17E1}\u{5}\u{248}\u{125}\u{2}\u{17DF}\u{17E1}" .
		    "\u{5}\u{25C}\u{12F}\u{2}\u{17E0}\u{17DC}\u{3}\u{2}\u{2}\u{2}\u{17E0}" .
		    "\u{17DD}\u{3}\u{2}\u{2}\u{2}\u{17E0}\u{17DE}\u{3}\u{2}\u{2}\u{2}\u{17E0}" .
		    "\u{17DF}\u{3}\u{2}\u{2}\u{2}\u{17E1}\u{17E3}\u{3}\u{2}\u{2}\u{2}\u{17E2}" .
		    "\u{17DB}\u{3}\u{2}\u{2}\u{2}\u{17E3}\u{17E6}\u{3}\u{2}\u{2}\u{2}\u{17E4}" .
		    "\u{17E2}\u{3}\u{2}\u{2}\u{2}\u{17E4}\u{17E5}\u{3}\u{2}\u{2}\u{2}\u{17E5}" .
		    "\u{259}\u{3}\u{2}\u{2}\u{2}\u{17E6}\u{17E4}\u{3}\u{2}\u{2}\u{2}\u{17E7}" .
		    "\u{17EC}\u{5}\u{21E}\u{110}\u{2}\u{17E8}\u{17EC}\u{5}\u{1F6}\u{FC}" .
		    "\u{2}\u{17E9}\u{17EC}\u{5}\u{248}\u{125}\u{2}\u{17EA}\u{17EC}\u{5}" .
		    "\u{25C}\u{12F}\u{2}\u{17EB}\u{17E7}\u{3}\u{2}\u{2}\u{2}\u{17EB}\u{17E8}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{17EB}\u{17E9}\u{3}\u{2}\u{2}\u{2}\u{17EB}\u{17EA}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{17EC}\u{25B}\u{3}\u{2}\u{2}\u{2}\u{17ED}\u{17EE}" .
		    "\u{8}\u{12F}\u{1}\u{2}\u{17EE}\u{17EF}\u{9}\u{72}\u{2}\u{2}\u{17EF}" .
		    "\u{17F9}\u{5}\u{25C}\u{12F}\u{6}\u{17F0}\u{17F1}\u{5}\u{25E}\u{130}" .
		    "\u{2}\u{17F1}\u{17F3}\u{7}\u{51}\u{2}\u{2}\u{17F2}\u{17F4}\u{7}\u{68}" .
		    "\u{2}\u{2}\u{17F3}\u{17F2}\u{3}\u{2}\u{2}\u{2}\u{17F3}\u{17F4}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{17F4}\u{17F5}\u{3}\u{2}\u{2}\u{2}\u{17F5}\u{17F6}" .
		    "\u{9}\u{73}\u{2}\u{2}\u{17F6}\u{17F9}\u{3}\u{2}\u{2}\u{2}\u{17F7}" .
		    "\u{17F9}\u{5}\u{25E}\u{130}\u{2}\u{17F8}\u{17ED}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{17F8}\u{17F0}\u{3}\u{2}\u{2}\u{2}\u{17F8}\u{17F7}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{17F9}\u{1800}\u{3}\u{2}\u{2}\u{2}\u{17FA}\u{17FB}\u{C}\u{5}" .
		    "\u{2}\u{2}\u{17FB}\u{17FC}\u{5}\u{26C}\u{137}\u{2}\u{17FC}\u{17FD}" .
		    "\u{5}\u{25C}\u{12F}\u{6}\u{17FD}\u{17FF}\u{3}\u{2}\u{2}\u{2}\u{17FE}" .
		    "\u{17FA}\u{3}\u{2}\u{2}\u{2}\u{17FF}\u{1802}\u{3}\u{2}\u{2}\u{2}\u{1800}" .
		    "\u{17FE}\u{3}\u{2}\u{2}\u{2}\u{1800}\u{1801}\u{3}\u{2}\u{2}\u{2}\u{1801}" .
		    "\u{25D}\u{3}\u{2}\u{2}\u{2}\u{1802}\u{1800}\u{3}\u{2}\u{2}\u{2}\u{1803}" .
		    "\u{1806}\u{8}\u{130}\u{1}\u{2}\u{1804}\u{1805}\u{7}\u{41A}\u{2}\u{2}" .
		    "\u{1805}\u{1807}\u{7}\u{3E6}\u{2}\u{2}\u{1806}\u{1804}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1806}\u{1807}\u{3}\u{2}\u{2}\u{2}\u{1807}\u{1808}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1808}\u{1809}\u{5}\u{266}\u{134}\u{2}\u{1809}\u{1843}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{180A}\u{180B}\u{C}\u{9}\u{2}\u{2}\u{180B}\u{180C}" .
		    "\u{5}\u{26A}\u{136}\u{2}\u{180C}\u{180D}\u{5}\u{25E}\u{130}\u{A}\u{180D}" .
		    "\u{1842}\u{3}\u{2}\u{2}\u{2}\u{180E}\u{1810}\u{C}\u{7}\u{2}\u{2}\u{180F}" .
		    "\u{1811}\u{7}\u{68}\u{2}\u{2}\u{1810}\u{180F}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1810}\u{1811}\u{3}\u{2}\u{2}\u{2}\u{1811}\u{1812}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1812}\u{1813}\u{7}\u{10}\u{2}\u{2}\u{1813}\u{1814}\u{5}\u{25E}" .
		    "\u{130}\u{2}\u{1814}\u{1815}\u{7}\u{C}\u{2}\u{2}\u{1815}\u{1816}\u{5}" .
		    "\u{25E}\u{130}\u{8}\u{1816}\u{1842}\u{3}\u{2}\u{2}\u{2}\u{1817}\u{1818}" .
		    "\u{C}\u{6}\u{2}\u{2}\u{1818}\u{1819}\u{7}\u{215}\u{2}\u{2}\u{1819}" .
		    "\u{181A}\u{7}\u{5A}\u{2}\u{2}\u{181A}\u{1842}\u{5}\u{25E}\u{130}\u{7}" .
		    "\u{181B}\u{181D}\u{C}\u{4}\u{2}\u{2}\u{181C}\u{181E}\u{7}\u{68}\u{2}" .
		    "\u{2}\u{181D}\u{181C}\u{3}\u{2}\u{2}\u{2}\u{181D}\u{181E}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{181E}\u{181F}\u{3}\u{2}\u{2}\u{2}\u{181F}\u{1820}\u{9}" .
		    "\u{74}\u{2}\u{2}\u{1820}\u{1842}\u{5}\u{25E}\u{130}\u{5}\u{1821}\u{1823}" .
		    "\u{C}\u{B}\u{2}\u{2}\u{1822}\u{1824}\u{7}\u{68}\u{2}\u{2}\u{1823}" .
		    "\u{1822}\u{3}\u{2}\u{2}\u{2}\u{1823}\u{1824}\u{3}\u{2}\u{2}\u{2}\u{1824}" .
		    "\u{1825}\u{3}\u{2}\u{2}\u{2}\u{1825}\u{1826}\u{7}\u{49}\u{2}\u{2}" .
		    "\u{1826}\u{1829}\u{7}\u{400}\u{2}\u{2}\u{1827}\u{182A}\u{5}\u{B4}" .
		    "\u{5B}\u{2}\u{1828}\u{182A}\u{5}\u{232}\u{11A}\u{2}\u{1829}\u{1827}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1829}\u{1828}\u{3}\u{2}\u{2}\u{2}\u{182A}\u{182B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{182B}\u{182C}\u{7}\u{401}\u{2}\u{2}\u{182C}" .
		    "\u{1842}\u{3}\u{2}\u{2}\u{2}\u{182D}\u{182E}\u{C}\u{A}\u{2}\u{2}\u{182E}" .
		    "\u{182F}\u{7}\u{51}\u{2}\u{2}\u{182F}\u{1842}\u{5}\u{21C}\u{10F}\u{2}" .
		    "\u{1830}\u{1831}\u{C}\u{8}\u{2}\u{2}\u{1831}\u{1832}\u{5}\u{26A}\u{136}" .
		    "\u{2}\u{1832}\u{1833}\u{9}\u{75}\u{2}\u{2}\u{1833}\u{1834}\u{7}\u{400}" .
		    "\u{2}\u{2}\u{1834}\u{1835}\u{5}\u{B4}\u{5B}\u{2}\u{1835}\u{1836}\u{7}" .
		    "\u{401}\u{2}\u{2}\u{1836}\u{1842}\u{3}\u{2}\u{2}\u{2}\u{1837}\u{1839}" .
		    "\u{C}\u{5}\u{2}\u{2}\u{1838}\u{183A}\u{7}\u{68}\u{2}\u{2}\u{1839}" .
		    "\u{1838}\u{3}\u{2}\u{2}\u{2}\u{1839}\u{183A}\u{3}\u{2}\u{2}\u{2}\u{183A}" .
		    "\u{183B}\u{3}\u{2}\u{2}\u{2}\u{183B}\u{183C}\u{7}\u{5A}\u{2}\u{2}" .
		    "\u{183C}\u{183F}\u{5}\u{25E}\u{130}\u{2}\u{183D}\u{183E}\u{7}\u{15C}" .
		    "\u{2}\u{2}\u{183E}\u{1840}\u{7}\u{40F}\u{2}\u{2}\u{183F}\u{183D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{183F}\u{1840}\u{3}\u{2}\u{2}\u{2}\u{1840}\u{1842}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1841}\u{180A}\u{3}\u{2}\u{2}\u{2}\u{1841}\u{180E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1841}\u{1817}\u{3}\u{2}\u{2}\u{2}\u{1841}\u{181B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1841}\u{1821}\u{3}\u{2}\u{2}\u{2}\u{1841}\u{182D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1841}\u{1830}\u{3}\u{2}\u{2}\u{2}\u{1841}\u{1837}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1842}\u{1845}\u{3}\u{2}\u{2}\u{2}\u{1843}\u{1841}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1843}\u{1844}\u{3}\u{2}\u{2}\u{2}\u{1844}\u{25F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1845}\u{1843}\u{3}\u{2}\u{2}\u{2}\u{1846}\u{1847}" .
		    "\u{8}\u{131}\u{1}\u{2}\u{1847}\u{1848}\u{9}\u{72}\u{2}\u{2}\u{1848}" .
		    "\u{184B}\u{5}\u{260}\u{131}\u{6}\u{1849}\u{184B}\u{5}\u{262}\u{132}" .
		    "\u{2}\u{184A}\u{1846}\u{3}\u{2}\u{2}\u{2}\u{184A}\u{1849}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{184B}\u{1858}\u{3}\u{2}\u{2}\u{2}\u{184C}\u{184D}\u{C}" .
		    "\u{5}\u{2}\u{2}\u{184D}\u{184E}\u{5}\u{26C}\u{137}\u{2}\u{184E}\u{184F}" .
		    "\u{5}\u{260}\u{131}\u{6}\u{184F}\u{1857}\u{3}\u{2}\u{2}\u{2}\u{1850}" .
		    "\u{1851}\u{C}\u{4}\u{2}\u{2}\u{1851}\u{1853}\u{7}\u{51}\u{2}\u{2}" .
		    "\u{1852}\u{1854}\u{7}\u{68}\u{2}\u{2}\u{1853}\u{1852}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1853}\u{1854}\u{3}\u{2}\u{2}\u{2}\u{1854}\u{1855}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1855}\u{1857}\u{9}\u{73}\u{2}\u{2}\u{1856}\u{184C}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1856}\u{1850}\u{3}\u{2}\u{2}\u{2}\u{1857}\u{185A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1858}\u{1856}\u{3}\u{2}\u{2}\u{2}\u{1858}\u{1859}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1859}\u{261}\u{3}\u{2}\u{2}\u{2}\u{185A}\u{1858}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{185B}\u{185E}\u{8}\u{132}\u{1}\u{2}\u{185C}" .
		    "\u{185D}\u{7}\u{41A}\u{2}\u{2}\u{185D}\u{185F}\u{7}\u{3E6}\u{2}\u{2}" .
		    "\u{185E}\u{185C}\u{3}\u{2}\u{2}\u{2}\u{185E}\u{185F}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{185F}\u{1860}\u{3}\u{2}\u{2}\u{2}\u{1860}\u{1861}\u{5}\u{264}" .
		    "\u{133}\u{2}\u{1861}\u{189B}\u{3}\u{2}\u{2}\u{2}\u{1862}\u{1863}\u{C}" .
		    "\u{9}\u{2}\u{2}\u{1863}\u{1864}\u{5}\u{26A}\u{136}\u{2}\u{1864}\u{1865}" .
		    "\u{5}\u{262}\u{132}\u{A}\u{1865}\u{189A}\u{3}\u{2}\u{2}\u{2}\u{1866}" .
		    "\u{1868}\u{C}\u{7}\u{2}\u{2}\u{1867}\u{1869}\u{7}\u{68}\u{2}\u{2}" .
		    "\u{1868}\u{1867}\u{3}\u{2}\u{2}\u{2}\u{1868}\u{1869}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1869}\u{186A}\u{3}\u{2}\u{2}\u{2}\u{186A}\u{186B}\u{7}\u{10}" .
		    "\u{2}\u{2}\u{186B}\u{186C}\u{5}\u{262}\u{132}\u{2}\u{186C}\u{186D}" .
		    "\u{7}\u{C}\u{2}\u{2}\u{186D}\u{186E}\u{5}\u{262}\u{132}\u{8}\u{186E}" .
		    "\u{189A}\u{3}\u{2}\u{2}\u{2}\u{186F}\u{1870}\u{C}\u{6}\u{2}\u{2}\u{1870}" .
		    "\u{1871}\u{7}\u{215}\u{2}\u{2}\u{1871}\u{1872}\u{7}\u{5A}\u{2}\u{2}" .
		    "\u{1872}\u{189A}\u{5}\u{262}\u{132}\u{7}\u{1873}\u{1875}\u{C}\u{B}" .
		    "\u{2}\u{2}\u{1874}\u{1876}\u{7}\u{68}\u{2}\u{2}\u{1875}\u{1874}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1875}\u{1876}\u{3}\u{2}\u{2}\u{2}\u{1876}\u{1877}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1877}\u{1878}\u{7}\u{49}\u{2}\u{2}\u{1878}" .
		    "\u{187B}\u{7}\u{400}\u{2}\u{2}\u{1879}\u{187C}\u{5}\u{B4}\u{5B}\u{2}" .
		    "\u{187A}\u{187C}\u{5}\u{234}\u{11B}\u{2}\u{187B}\u{1879}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{187B}\u{187A}\u{3}\u{2}\u{2}\u{2}\u{187C}\u{187D}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{187D}\u{187E}\u{7}\u{401}\u{2}\u{2}\u{187E}\u{189A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{187F}\u{1880}\u{C}\u{A}\u{2}\u{2}\u{1880}\u{1881}" .
		    "\u{7}\u{51}\u{2}\u{2}\u{1881}\u{189A}\u{5}\u{21C}\u{10F}\u{2}\u{1882}" .
		    "\u{1883}\u{C}\u{8}\u{2}\u{2}\u{1883}\u{1884}\u{5}\u{26A}\u{136}\u{2}" .
		    "\u{1884}\u{1885}\u{9}\u{75}\u{2}\u{2}\u{1885}\u{1886}\u{7}\u{400}" .
		    "\u{2}\u{2}\u{1886}\u{1887}\u{5}\u{B4}\u{5B}\u{2}\u{1887}\u{1888}\u{7}" .
		    "\u{401}\u{2}\u{2}\u{1888}\u{189A}\u{3}\u{2}\u{2}\u{2}\u{1889}\u{188B}" .
		    "\u{C}\u{5}\u{2}\u{2}\u{188A}\u{188C}\u{7}\u{68}\u{2}\u{2}\u{188B}" .
		    "\u{188A}\u{3}\u{2}\u{2}\u{2}\u{188B}\u{188C}\u{3}\u{2}\u{2}\u{2}\u{188C}" .
		    "\u{188D}\u{3}\u{2}\u{2}\u{2}\u{188D}\u{188E}\u{7}\u{5A}\u{2}\u{2}" .
		    "\u{188E}\u{1891}\u{5}\u{262}\u{132}\u{2}\u{188F}\u{1890}\u{7}\u{15C}" .
		    "\u{2}\u{2}\u{1890}\u{1892}\u{7}\u{40F}\u{2}\u{2}\u{1891}\u{188F}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1891}\u{1892}\u{3}\u{2}\u{2}\u{2}\u{1892}\u{189A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1893}\u{1895}\u{C}\u{4}\u{2}\u{2}\u{1894}\u{1896}" .
		    "\u{7}\u{68}\u{2}\u{2}\u{1895}\u{1894}\u{3}\u{2}\u{2}\u{2}\u{1895}" .
		    "\u{1896}\u{3}\u{2}\u{2}\u{2}\u{1896}\u{1897}\u{3}\u{2}\u{2}\u{2}\u{1897}" .
		    "\u{1898}\u{9}\u{74}\u{2}\u{2}\u{1898}\u{189A}\u{5}\u{25E}\u{130}\u{2}" .
		    "\u{1899}\u{1862}\u{3}\u{2}\u{2}\u{2}\u{1899}\u{1866}\u{3}\u{2}\u{2}" .
		    "\u{2}\u{1899}\u{186F}\u{3}\u{2}\u{2}\u{2}\u{1899}\u{1873}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{1899}\u{187F}\u{3}\u{2}\u{2}\u{2}\u{1899}\u{1882}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1899}\u{1889}\u{3}\u{2}\u{2}\u{2}\u{1899}\u{1893}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{189A}\u{189D}\u{3}\u{2}\u{2}\u{2}\u{189B}\u{1899}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{189B}\u{189C}\u{3}\u{2}\u{2}\u{2}\u{189C}\u{263}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{189D}\u{189B}\u{3}\u{2}\u{2}\u{2}\u{189E}\u{189F}" .
		    "\u{8}\u{133}\u{1}\u{2}\u{189F}\u{18CC}\u{5}\u{21E}\u{110}\u{2}\u{18A0}" .
		    "\u{18CC}\u{5}\u{1F6}\u{FC}\u{2}\u{18A1}\u{18CC}\u{5}\u{248}\u{125}" .
		    "\u{2}\u{18A2}\u{18CC}\u{5}\u{1FC}\u{FF}\u{2}\u{18A3}\u{18A4}\u{5}" .
		    "\u{268}\u{135}\u{2}\u{18A4}\u{18A5}\u{5}\u{264}\u{133}\u{B}\u{18A5}" .
		    "\u{18CC}\u{3}\u{2}\u{2}\u{2}\u{18A6}\u{18A7}\u{7}\u{D2}\u{2}\u{2}" .
		    "\u{18A7}\u{18CC}\u{5}\u{264}\u{133}\u{A}\u{18A8}\u{18A9}\u{7}\u{400}" .
		    "\u{2}\u{2}\u{18A9}\u{18AE}\u{5}\u{260}\u{131}\u{2}\u{18AA}\u{18AB}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{18AB}\u{18AD}\u{5}\u{260}\u{131}\u{2}\u{18AC}" .
		    "\u{18AA}\u{3}\u{2}\u{2}\u{2}\u{18AD}\u{18B0}\u{3}\u{2}\u{2}\u{2}\u{18AE}" .
		    "\u{18AC}\u{3}\u{2}\u{2}\u{2}\u{18AE}\u{18AF}\u{3}\u{2}\u{2}\u{2}\u{18AF}" .
		    "\u{18B1}\u{3}\u{2}\u{2}\u{2}\u{18B0}\u{18AE}\u{3}\u{2}\u{2}\u{2}\u{18B1}" .
		    "\u{18B2}\u{7}\u{401}\u{2}\u{2}\u{18B2}\u{18CC}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{18B3}\u{18B4}\u{7}\u{203}\u{2}\u{2}\u{18B4}\u{18B5}\u{7}\u{400}" .
		    "\u{2}\u{2}\u{18B5}\u{18B8}\u{5}\u{260}\u{131}\u{2}\u{18B6}\u{18B7}" .
		    "\u{7}\u{402}\u{2}\u{2}\u{18B7}\u{18B9}\u{5}\u{260}\u{131}\u{2}\u{18B8}" .
		    "\u{18B6}\u{3}\u{2}\u{2}\u{2}\u{18B9}\u{18BA}\u{3}\u{2}\u{2}\u{2}\u{18BA}" .
		    "\u{18B8}\u{3}\u{2}\u{2}\u{2}\u{18BA}\u{18BB}\u{3}\u{2}\u{2}\u{2}\u{18BB}" .
		    "\u{18BC}\u{3}\u{2}\u{2}\u{2}\u{18BC}\u{18BD}\u{7}\u{401}\u{2}\u{2}" .
		    "\u{18BD}\u{18CC}\u{3}\u{2}\u{2}\u{2}\u{18BE}\u{18BF}\u{7}\u{37}\u{2}" .
		    "\u{2}\u{18BF}\u{18C0}\u{7}\u{400}\u{2}\u{2}\u{18C0}\u{18C1}\u{5}\u{B4}" .
		    "\u{5B}\u{2}\u{18C1}\u{18C2}\u{7}\u{401}\u{2}\u{2}\u{18C2}\u{18CC}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{18C3}\u{18C4}\u{7}\u{400}\u{2}\u{2}\u{18C4}" .
		    "\u{18C5}\u{5}\u{B4}\u{5B}\u{2}\u{18C5}\u{18C6}\u{7}\u{401}\u{2}\u{2}" .
		    "\u{18C6}\u{18CC}\u{3}\u{2}\u{2}\u{2}\u{18C7}\u{18C8}\u{7}\u{4F}\u{2}" .
		    "\u{2}\u{18C8}\u{18C9}\u{5}\u{260}\u{131}\u{2}\u{18C9}\u{18CA}\u{5}" .
		    "\u{3C}\u{1F}\u{2}\u{18CA}\u{18CC}\u{3}\u{2}\u{2}\u{2}\u{18CB}\u{189E}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{18CB}\u{18A0}\u{3}\u{2}\u{2}\u{2}\u{18CB}\u{18A1}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{18CB}\u{18A2}\u{3}\u{2}\u{2}\u{2}\u{18CB}\u{18A3}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{18CB}\u{18A6}\u{3}\u{2}\u{2}\u{2}\u{18CB}\u{18A8}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{18CB}\u{18B3}\u{3}\u{2}\u{2}\u{2}\u{18CB}\u{18BE}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{18CB}\u{18C3}\u{3}\u{2}\u{2}\u{2}\u{18CB}\u{18C7}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{18CC}\u{18DA}\u{3}\u{2}\u{2}\u{2}\u{18CD}\u{18CE}" .
		    "\u{C}\u{4}\u{2}\u{2}\u{18CE}\u{18CF}\u{5}\u{26E}\u{138}\u{2}\u{18CF}" .
		    "\u{18D0}\u{5}\u{264}\u{133}\u{5}\u{18D0}\u{18D9}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{18D1}\u{18D2}\u{C}\u{3}\u{2}\u{2}\u{18D2}\u{18D3}\u{5}\u{270}\u{139}" .
		    "\u{2}\u{18D3}\u{18D4}\u{5}\u{264}\u{133}\u{4}\u{18D4}\u{18D9}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{18D5}\u{18D6}\u{C}\u{D}\u{2}\u{2}\u{18D6}\u{18D7}" .
		    "\u{7}\u{1A}\u{2}\u{2}\u{18D7}\u{18D9}\u{5}\u{200}\u{101}\u{2}\u{18D8}" .
		    "\u{18CD}\u{3}\u{2}\u{2}\u{2}\u{18D8}\u{18D1}\u{3}\u{2}\u{2}\u{2}\u{18D8}" .
		    "\u{18D5}\u{3}\u{2}\u{2}\u{2}\u{18D9}\u{18DC}\u{3}\u{2}\u{2}\u{2}\u{18DA}" .
		    "\u{18D8}\u{3}\u{2}\u{2}\u{2}\u{18DA}\u{18DB}\u{3}\u{2}\u{2}\u{2}\u{18DB}" .
		    "\u{265}\u{3}\u{2}\u{2}\u{2}\u{18DC}\u{18DA}\u{3}\u{2}\u{2}\u{2}\u{18DD}" .
		    "\u{18DE}\u{8}\u{134}\u{1}\u{2}\u{18DE}\u{190B}\u{5}\u{21E}\u{110}" .
		    "\u{2}\u{18DF}\u{190B}\u{5}\u{1F6}\u{FC}\u{2}\u{18E0}\u{190B}\u{5}" .
		    "\u{248}\u{125}\u{2}\u{18E1}\u{190B}\u{5}\u{1FC}\u{FF}\u{2}\u{18E2}" .
		    "\u{18E3}\u{5}\u{268}\u{135}\u{2}\u{18E3}\u{18E4}\u{5}\u{266}\u{134}" .
		    "\u{B}\u{18E4}\u{190B}\u{3}\u{2}\u{2}\u{2}\u{18E5}\u{18E6}\u{7}\u{D2}" .
		    "\u{2}\u{2}\u{18E6}\u{190B}\u{5}\u{266}\u{134}\u{A}\u{18E7}\u{18E8}" .
		    "\u{7}\u{400}\u{2}\u{2}\u{18E8}\u{18ED}\u{5}\u{25C}\u{12F}\u{2}\u{18E9}" .
		    "\u{18EA}\u{7}\u{402}\u{2}\u{2}\u{18EA}\u{18EC}\u{5}\u{25C}\u{12F}" .
		    "\u{2}\u{18EB}\u{18E9}\u{3}\u{2}\u{2}\u{2}\u{18EC}\u{18EF}\u{3}\u{2}" .
		    "\u{2}\u{2}\u{18ED}\u{18EB}\u{3}\u{2}\u{2}\u{2}\u{18ED}\u{18EE}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{18EE}\u{18F0}\u{3}\u{2}\u{2}\u{2}\u{18EF}\u{18ED}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{18F0}\u{18F1}\u{7}\u{401}\u{2}\u{2}\u{18F1}" .
		    "\u{190B}\u{3}\u{2}\u{2}\u{2}\u{18F2}\u{18F3}\u{7}\u{203}\u{2}\u{2}" .
		    "\u{18F3}\u{18F4}\u{7}\u{400}\u{2}\u{2}\u{18F4}\u{18F7}\u{5}\u{25C}" .
		    "\u{12F}\u{2}\u{18F5}\u{18F6}\u{7}\u{402}\u{2}\u{2}\u{18F6}\u{18F8}" .
		    "\u{5}\u{25C}\u{12F}\u{2}\u{18F7}\u{18F5}\u{3}\u{2}\u{2}\u{2}\u{18F8}" .
		    "\u{18F9}\u{3}\u{2}\u{2}\u{2}\u{18F9}\u{18F7}\u{3}\u{2}\u{2}\u{2}\u{18F9}" .
		    "\u{18FA}\u{3}\u{2}\u{2}\u{2}\u{18FA}\u{18FB}\u{3}\u{2}\u{2}\u{2}\u{18FB}" .
		    "\u{18FC}\u{7}\u{401}\u{2}\u{2}\u{18FC}\u{190B}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{18FD}\u{18FE}\u{7}\u{37}\u{2}\u{2}\u{18FE}\u{18FF}\u{7}\u{400}" .
		    "\u{2}\u{2}\u{18FF}\u{1900}\u{5}\u{B4}\u{5B}\u{2}\u{1900}\u{1901}\u{7}" .
		    "\u{401}\u{2}\u{2}\u{1901}\u{190B}\u{3}\u{2}\u{2}\u{2}\u{1902}\u{1903}" .
		    "\u{7}\u{400}\u{2}\u{2}\u{1903}\u{1904}\u{5}\u{B4}\u{5B}\u{2}\u{1904}" .
		    "\u{1905}\u{7}\u{401}\u{2}\u{2}\u{1905}\u{190B}\u{3}\u{2}\u{2}\u{2}" .
		    "\u{1906}\u{1907}\u{7}\u{4F}\u{2}\u{2}\u{1907}\u{1908}\u{5}\u{25C}" .
		    "\u{12F}\u{2}\u{1908}\u{1909}\u{5}\u{3C}\u{1F}\u{2}\u{1909}\u{190B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{190A}\u{18DD}\u{3}\u{2}\u{2}\u{2}\u{190A}\u{18DF}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{190A}\u{18E0}\u{3}\u{2}\u{2}\u{2}\u{190A}\u{18E1}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{190A}\u{18E2}\u{3}\u{2}\u{2}\u{2}\u{190A}\u{18E5}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{190A}\u{18E7}\u{3}\u{2}\u{2}\u{2}\u{190A}\u{18F2}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{190A}\u{18FD}\u{3}\u{2}\u{2}\u{2}\u{190A}\u{1902}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{190A}\u{1906}\u{3}\u{2}\u{2}\u{2}\u{190B}\u{1919}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{190C}\u{190D}\u{C}\u{4}\u{2}\u{2}\u{190D}\u{190E}" .
		    "\u{5}\u{26E}\u{138}\u{2}\u{190E}\u{190F}\u{5}\u{266}\u{134}\u{5}\u{190F}" .
		    "\u{1918}\u{3}\u{2}\u{2}\u{2}\u{1910}\u{1911}\u{C}\u{3}\u{2}\u{2}\u{1911}" .
		    "\u{1912}\u{5}\u{270}\u{139}\u{2}\u{1912}\u{1913}\u{5}\u{266}\u{134}" .
		    "\u{4}\u{1913}\u{1918}\u{3}\u{2}\u{2}\u{2}\u{1914}\u{1915}\u{C}\u{D}" .
		    "\u{2}\u{2}\u{1915}\u{1916}\u{7}\u{1A}\u{2}\u{2}\u{1916}\u{1918}\u{5}" .
		    "\u{200}\u{101}\u{2}\u{1917}\u{190C}\u{3}\u{2}\u{2}\u{2}\u{1917}\u{1910}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1917}\u{1914}\u{3}\u{2}\u{2}\u{2}\u{1918}\u{191B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1919}\u{1917}\u{3}\u{2}\u{2}\u{2}\u{1919}\u{191A}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{191A}\u{267}\u{3}\u{2}\u{2}\u{2}\u{191B}\u{1919}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{191C}\u{191D}\u{9}\u{76}\u{2}\u{2}\u{191D}" .
		    "\u{269}\u{3}\u{2}\u{2}\u{2}\u{191E}\u{192D}\u{7}\u{3F7}\u{2}\u{2}" .
		    "\u{191F}\u{192D}\u{7}\u{3F8}\u{2}\u{2}\u{1920}\u{192D}\u{7}\u{3F9}" .
		    "\u{2}\u{2}\u{1921}\u{1922}\u{7}\u{3F9}\u{2}\u{2}\u{1922}\u{192D}\u{7}" .
		    "\u{3F7}\u{2}\u{2}\u{1923}\u{1924}\u{7}\u{3F8}\u{2}\u{2}\u{1924}\u{192D}" .
		    "\u{7}\u{3F7}\u{2}\u{2}\u{1925}\u{1926}\u{7}\u{3F9}\u{2}\u{2}\u{1926}" .
		    "\u{192D}\u{7}\u{3F8}\u{2}\u{2}\u{1927}\u{1928}\u{7}\u{3FA}\u{2}\u{2}" .
		    "\u{1928}\u{192D}\u{7}\u{3F7}\u{2}\u{2}\u{1929}\u{192A}\u{7}\u{3F9}" .
		    "\u{2}\u{2}\u{192A}\u{192B}\u{7}\u{3F7}\u{2}\u{2}\u{192B}\u{192D}\u{7}" .
		    "\u{3F8}\u{2}\u{2}\u{192C}\u{191E}\u{3}\u{2}\u{2}\u{2}\u{192C}\u{191F}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{192C}\u{1920}\u{3}\u{2}\u{2}\u{2}\u{192C}\u{1921}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{192C}\u{1923}\u{3}\u{2}\u{2}\u{2}\u{192C}\u{1925}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{192C}\u{1927}\u{3}\u{2}\u{2}\u{2}\u{192C}\u{1929}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{192D}\u{26B}\u{3}\u{2}\u{2}\u{2}\u{192E}\u{1936}" .
		    "\u{7}\u{C}\u{2}\u{2}\u{192F}\u{1930}\u{7}\u{3FD}\u{2}\u{2}\u{1930}" .
		    "\u{1936}\u{7}\u{3FD}\u{2}\u{2}\u{1931}\u{1936}\u{7}\u{B2}\u{2}\u{2}" .
		    "\u{1932}\u{1936}\u{7}\u{70}\u{2}\u{2}\u{1933}\u{1934}\u{7}\u{3FC}" .
		    "\u{2}\u{2}\u{1934}\u{1936}\u{7}\u{3FC}\u{2}\u{2}\u{1935}\u{192E}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{1935}\u{192F}\u{3}\u{2}\u{2}\u{2}\u{1935}\u{1931}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1935}\u{1932}\u{3}\u{2}\u{2}\u{2}\u{1935}\u{1933}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{1936}\u{26D}\u{3}\u{2}\u{2}\u{2}\u{1937}\u{1938}" .
		    "\u{7}\u{3F9}\u{2}\u{2}\u{1938}\u{193F}\u{7}\u{3F9}\u{2}\u{2}\u{1939}" .
		    "\u{193A}\u{7}\u{3F8}\u{2}\u{2}\u{193A}\u{193F}\u{7}\u{3F8}\u{2}\u{2}" .
		    "\u{193B}\u{193F}\u{7}\u{3FD}\u{2}\u{2}\u{193C}\u{193F}\u{7}\u{3FE}" .
		    "\u{2}\u{2}\u{193D}\u{193F}\u{7}\u{3FC}\u{2}\u{2}\u{193E}\u{1937}\u{3}" .
		    "\u{2}\u{2}\u{2}\u{193E}\u{1939}\u{3}\u{2}\u{2}\u{2}\u{193E}\u{193B}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{193E}\u{193C}\u{3}\u{2}\u{2}\u{2}\u{193E}\u{193D}" .
		    "\u{3}\u{2}\u{2}\u{2}\u{193F}\u{26F}\u{3}\u{2}\u{2}\u{2}\u{1940}\u{1941}" .
		    "\u{9}\u{77}\u{2}\u{2}\u{1941}\u{271}\u{3}\u{2}\u{2}\u{2}\u{1942}\u{1943}" .
		    "\u{9}\u{78}\u{2}\u{2}\u{1943}\u{273}\u{3}\u{2}\u{2}\u{2}\u{1944}\u{1945}" .
		    "\u{9}\u{79}\u{2}\u{2}\u{1945}\u{275}\u{3}\u{2}\u{2}\u{2}\u{1946}\u{1947}" .
		    "\u{9}\u{7A}\u{2}\u{2}\u{1947}\u{277}\u{3}\u{2}\u{2}\u{2}\u{1948}\u{1949}" .
		    "\u{9}\u{7B}\u{2}\u{2}\u{1949}\u{279}\u{3}\u{2}\u{2}\u{2}\u{194A}\u{194B}" .
		    "\u{9}\u{7C}\u{2}\u{2}\u{194B}\u{27B}\u{3}\u{2}\u{2}\u{2}\u{194C}\u{194D}" .
		    "\u{9}\u{7D}\u{2}\u{2}\u{194D}\u{27D}\u{3}\u{2}\u{2}\u{2}\u{194E}\u{194F}" .
		    "\u{9}\u{7E}\u{2}\u{2}\u{194F}\u{27F}\u{3}\u{2}\u{2}\u{2}\u{3AD}\u{281}" .
		    "\u{284}\u{28A}\u{28D}\u{290}\u{292}\u{297}\u{29A}\u{29D}\u{2A6}\u{2CD}" .
		    "\u{2D9}\u{2E4}\u{2F5}\u{2FA}\u{306}\u{321}\u{32A}\u{32F}\u{335}\u{33A}" .
		    "\u{33E}\u{347}\u{34A}\u{34D}\u{351}\u{358}\u{35B}\u{360}\u{368}\u{36D}" .
		    "\u{372}\u{375}\u{377}\u{383}\u{386}\u{38A}\u{38D}\u{391}\u{394}\u{398}" .
		    "\u{39B}\u{39E}\u{3A2}\u{3A5}\u{3A9}\u{3AF}\u{3B5}\u{3BB}\u{3C2}\u{3C9}" .
		    "\u{3CF}\u{3D5}\u{3DE}\u{3E3}\u{3F3}\u{3FA}\u{3FE}\u{408}\u{40C}\u{410}" .
		    "\u{414}\u{418}\u{41D}\u{420}\u{423}\u{426}\u{429}\u{42F}\u{433}\u{439}" .
		    "\u{43E}\u{441}\u{444}\u{446}\u{451}\u{455}\u{458}\u{466}\u{469}\u{46D}" .
		    "\u{470}\u{474}\u{477}\u{47B}\u{47E}\u{482}\u{485}\u{488}\u{48C}\u{48F}" .
		    "\u{493}\u{499}\u{4A6}\u{4AD}\u{4B2}\u{4B5}\u{4BA}\u{4C2}\u{4C8}\u{4CC}" .
		    "\u{4CF}\u{4D4}\u{4D7}\u{4DB}\u{4DE}\u{4E2}\u{4E5}\u{4ED}\u{4EF}\u{4F6}" .
		    "\u{4FC}\u{504}\u{507}\u{50E}\u{511}\u{513}\u{519}\u{51F}\u{530}\u{537}" .
		    "\u{53E}\u{549}\u{54C}\u{559}\u{566}\u{56B}\u{57B}\u{583}\u{58D}\u{593}" .
		    "\u{59D}\u{5A0}\u{5A5}\u{5B2}\u{5B9}\u{5BE}\u{5C2}\u{5C4}\u{5C9}\u{5CC}" .
		    "\u{5D2}\u{5D7}\u{5D9}\u{5DD}\u{5E0}\u{5E3}\u{5E9}\u{5EE}\u{5F0}\u{5F5}" .
		    "\u{5FC}\u{5FE}\u{605}\u{60A}\u{60E}\u{611}\u{619}\u{621}\u{623}\u{62B}" .
		    "\u{62F}\u{632}\u{638}\u{63D}\u{640}\u{646}\u{649}\u{64D}\u{652}\u{657}" .
		    "\u{65B}\u{660}\u{663}\u{667}\u{66B}\u{66F}\u{673}\u{678}\u{67D}\u{682}" .
		    "\u{688}\u{68D}\u{692}\u{698}\u{69D}\u{6A2}\u{6A7}\u{6AC}\u{6B1}\u{6B6}" .
		    "\u{6BB}\u{6C0}\u{6C5}\u{6CA}\u{6D0}\u{6D5}\u{6DB}\u{6E5}\u{6EC}\u{6EE}" .
		    "\u{6F6}\u{6FB}\u{6FE}\u{706}\u{70C}\u{71C}\u{728}\u{72A}\u{72D}\u{735}" .
		    "\u{73B}\u{741}\u{74E}\u{755}\u{75D}\u{760}\u{76B}\u{773}\u{776}\u{782}" .
		    "\u{789}\u{791}\u{794}\u{7A0}\u{7A7}\u{7AF}\u{7B2}\u{7B9}\u{7C1}\u{7C4}" .
		    "\u{7C6}\u{7CB}\u{7D3}\u{7DC}\u{7E0}\u{7E4}\u{7E9}\u{7EF}\u{7F5}\u{7FA}" .
		    "\u{7FF}\u{804}\u{809}\u{80C}\u{811}\u{816}\u{820}\u{824}\u{82B}\u{830}" .
		    "\u{833}\u{838}\u{83B}\u{83F}\u{843}\u{84B}\u{85E}\u{861}\u{864}\u{868}" .
		    "\u{872}\u{87F}\u{886}\u{889}\u{892}\u{895}\u{898}\u{8A3}\u{8A6}\u{8AA}" .
		    "\u{8B2}\u{8B5}\u{8BA}\u{8C2}\u{8C8}\u{8CC}\u{8D0}\u{8D5}\u{8DA}\u{8E1}" .
		    "\u{8E5}\u{8F0}\u{8F8}\u{8FB}\u{901}\u{907}\u{909}\u{90E}\u{911}\u{917}" .
		    "\u{91D}\u{91F}\u{923}\u{926}\u{929}\u{92F}\u{935}\u{938}\u{93E}\u{944}" .
		    "\u{946}\u{94B}\u{953}\u{955}\u{95E}\u{963}\u{96B}\u{96F}\u{977}\u{981}" .
		    "\u{986}\u{98D}\u{991}\u{995}\u{9AD}\u{9B1}\u{9BD}\u{9C0}\u{9C9}\u{9DA}" .
		    "\u{9E6}\u{9ED}\u{9F4}\u{A03}\u{A10}\u{A16}\u{A1C}\u{A22}\u{A28}\u{A2E}" .
		    "\u{A34}\u{A39}\u{A40}\u{A47}\u{A4E}\u{A53}\u{A56}\u{A58}\u{A66}\u{A6D}" .
		    "\u{A74}\u{A7A}\u{A7E}\u{A82}\u{A89}\u{A8C}\u{A91}\u{A98}\u{A9F}\u{AA3}" .
		    "\u{AAC}\u{AB5}\u{ABE}\u{AC1}\u{AC5}\u{ACE}\u{AD2}\u{AD5}\u{AD8}\u{ADE}" .
		    "\u{AE1}\u{AE7}\u{AF0}\u{AF3}\u{AFE}\u{B01}\u{B06}\u{B09}\u{B0E}\u{B18}" .
		    "\u{B1D}\u{B23}\u{B25}\u{B2B}\u{B2D}\u{B33}\u{B3B}\u{B40}\u{B48}\u{B4B}" .
		    "\u{B50}\u{B53}\u{B58}\u{B60}\u{B68}\u{B6E}\u{B76}\u{B7B}\u{B83}\u{B86}" .
		    "\u{B8A}\u{B8D}\u{B95}\u{B9B}\u{BA4}\u{BA7}\u{BAB}\u{BAF}\u{BB5}\u{BB9}" .
		    "\u{BBD}\u{BBF}\u{BC2}\u{BC5}\u{BC8}\u{BCE}\u{BD2}\u{BD5}\u{BD8}\u{BDB}" .
		    "\u{BDE}\u{BE0}\u{BE4}\u{BEA}\u{BF0}\u{BF5}\u{BF8}\u{BFE}\u{C02}\u{C0A}" .
		    "\u{C0E}\u{C11}\u{C14}\u{C1D}\u{C21}\u{C24}\u{C28}\u{C2C}\u{C2F}\u{C32}" .
		    "\u{C37}\u{C3D}\u{C41}\u{C4B}\u{C51}\u{C55}\u{C5B}\u{C5F}\u{C65}\u{C68}" .
		    "\u{C74}\u{C78}\u{C7C}\u{C84}\u{C88}\u{C90}\u{C93}\u{C97}\u{C9A}\u{CA2}" .
		    "\u{CA7}\u{CAA}\u{CAD}\u{CB1}\u{CB4}\u{CBD}\u{CC2}\u{CCB}\u{CD0}\u{CD7}" .
		    "\u{CDE}\u{CE6}\u{CEB}\u{CF3}\u{CF6}\u{CF9}\u{D00}\u{D03}\u{D0A}\u{D0D}" .
		    "\u{D15}\u{D1B}\u{D26}\u{D29}\u{D34}\u{D3A}\u{D3E}\u{D49}\u{D4E}\u{D50}" .
		    "\u{D54}\u{D5E}\u{D68}\u{D6E}\u{D73}\u{D76}\u{D79}\u{D7C}\u{D82}\u{D87}" .
		    "\u{D8A}\u{D8D}\u{D90}\u{D92}\u{D98}\u{D9D}\u{DA0}\u{DA3}\u{DA7}\u{DAD}" .
		    "\u{DB1}\u{DBB}\u{DBF}\u{DC5}\u{DCE}\u{DD1}\u{DD5}\u{DD8}\u{DDC}\u{DE0}" .
		    "\u{DE3}\u{DE5}\u{DED}\u{DF9}\u{DFF}\u{E01}\u{E07}\u{E09}\u{E0B}\u{E11}" .
		    "\u{E19}\u{E21}\u{E27}\u{E30}\u{E35}\u{E37}\u{E3B}\u{E3F}\u{E45}\u{E4C}" .
		    "\u{E50}\u{E59}\u{E5C}\u{E60}\u{E64}\u{E68}\u{E6B}\u{E6E}\u{E71}\u{E75}" .
		    "\u{E79}\u{E7C}\u{E7F}\u{E82}\u{E89}\u{E8D}\u{E9C}\u{EA9}\u{EB1}\u{EBB}" .
		    "\u{EBF}\u{EC2}\u{EC8}\u{ECB}\u{ECE}\u{ED7}\u{EE0}\u{EEA}\u{EEE}\u{EF8}" .
		    "\u{F02}\u{F0A}\u{F0D}\u{F16}\u{F19}\u{F1D}\u{F22}\u{F26}\u{F2F}\u{F32}" .
		    "\u{F51}\u{F54}\u{F57}\u{F8F}\u{F94}\u{FB0}\u{FBE}\u{FC5}\u{FC9}\u{FCF}" .
		    "\u{FD7}\u{FD9}\u{FE4}\u{FEE}\u{FF5}\u{FFB}\u{1003}\u{1008}\u{1010}" .
		    "\u{1018}\u{1020}\u{1028}\u{102E}\u{1031}\u{1035}\u{103A}\u{103F}\u{1045}" .
		    "\u{1047}\u{1052}\u{1057}\u{105E}\u{1060}\u{106E}\u{1074}\u{1079}\u{107E}" .
		    "\u{1084}\u{108B}\u{1093}\u{109B}\u{10A0}\u{10A6}\u{10A9}\u{10B1}\u{10B8}" .
		    "\u{10C1}\u{10C4}\u{10D5}\u{10DD}\u{10E5}\u{10E9}\u{10F0}\u{10F6}\u{10FE}" .
		    "\u{1107}\u{110D}\u{1114}\u{111B}\u{1120}\u{1123}\u{1125}\u{112B}\u{112D}" .
		    "\u{1131}\u{1133}\u{1136}\u{113F}\u{1145}\u{114C}\u{1153}\u{1158}\u{115B}" .
		    "\u{115D}\u{1163}\u{1165}\u{1169}\u{116B}\u{116E}\u{1173}\u{117A}\u{1183}" .
		    "\u{1188}\u{1191}\u{1198}\u{119D}\u{11A0}\u{11A2}\u{11A8}\u{11AA}\u{11AD}" .
		    "\u{11B9}\u{11BF}\u{11C8}\u{11D1}\u{11D6}\u{11DF}\u{11E5}\u{11F0}\u{11F3}" .
		    "\u{11FF}\u{1206}\u{120B}\u{121A}\u{1225}\u{1228}\u{1232}\u{123C}\u{1246}" .
		    "\u{1250}\u{1254}\u{1258}\u{1261}\u{127D}\u{128F}\u{1297}\u{12A2}\u{12A9}" .
		    "\u{12AD}\u{12B4}\u{12B9}\u{12BC}\u{12BF}\u{12C8}\u{12CC}\u{12EA}\u{12F1}" .
		    "\u{12F5}\u{12FC}\u{12FF}\u{130F}\u{1312}\u{131C}\u{1320}\u{1326}\u{1329}" .
		    "\u{132E}\u{1332}\u{1339}\u{133C}\u{1342}\u{135A}\u{1367}\u{136A}\u{1374}" .
		    "\u{137C}\u{1380}\u{1387}\u{138A}\u{1393}\u{1399}\u{139F}\u{13A9}\u{13AB}" .
		    "\u{13B1}\u{13B4}\u{13B7}\u{13C3}\u{13C6}\u{13CC}\u{13CF}\u{13D7}\u{13DF}" .
		    "\u{13E5}\u{13E9}\u{13F7}\u{1403}\u{140A}\u{140D}\u{1414}\u{141B}\u{1420}" .
		    "\u{1425}\u{1430}\u{143B}\u{1441}\u{1446}\u{1453}\u{1455}\u{145A}\u{145F}" .
		    "\u{1461}\u{1468}\u{146F}\u{1472}\u{1475}\u{147B}\u{147F}\u{1485}\u{148B}" .
		    "\u{1498}\u{149D}\u{14A5}\u{14A8}\u{14AD}\u{14B2}\u{14BA}\u{14BD}\u{14C3}" .
		    "\u{14C7}\u{14D4}\u{14DA}\u{14E6}\u{14E9}\u{14F2}\u{14F7}\u{14FD}\u{1504}" .
		    "\u{1506}\u{150A}\u{1510}\u{1513}\u{151D}\u{1521}\u{1535}\u{153C}\u{153E}" .
		    "\u{1545}\u{1547}\u{154B}\u{1550}\u{155B}\u{1560}\u{1566}\u{1569}\u{156D}" .
		    "\u{1572}\u{1575}\u{1579}\u{157D}\u{157F}\u{1584}\u{1589}\u{1596}\u{1599}" .
		    "\u{159D}\u{15A0}\u{15A5}\u{15A8}\u{15AC}\u{15B1}\u{15B4}\u{15B9}\u{15BC}" .
		    "\u{15C2}\u{15C5}\u{15C9}\u{15CC}\u{15CF}\u{15D3}\u{15D6}\u{15D9}\u{15DD}" .
		    "\u{15E0}\u{15E3}\u{15E6}\u{15EA}\u{15ED}\u{15F0}\u{15F5}\u{15FA}\u{15FF}" .
		    "\u{1602}\u{1605}\u{160D}\u{1614}\u{1618}\u{161D}\u{1620}\u{1625}\u{1629}" .
		    "\u{162B}\u{163B}\u{1644}\u{164C}\u{1655}\u{165F}\u{1667}\u{166F}\u{1677}" .
		    "\u{167F}\u{1687}\u{168C}\u{1693}\u{1695}\u{169A}\u{169D}\u{16A2}\u{16A5}" .
		    "\u{16A9}\u{16B7}\u{16BE}\u{16C3}\u{16E5}\u{16E9}\u{16F1}\u{16F5}\u{16FE}" .
		    "\u{1706}\u{170B}\u{1713}\u{1718}\u{171D}\u{171F}\u{1728}\u{172D}\u{1735}" .
		    "\u{173A}\u{1742}\u{174A}\u{174D}\u{1757}\u{1762}\u{176F}\u{1777}\u{177B}" .
		    "\u{1780}\u{1789}\u{178C}\u{1798}\u{17A0}\u{17AA}\u{17AD}\u{17B1}\u{17B5}" .
		    "\u{17CE}\u{17D9}\u{17E0}\u{17E4}\u{17EB}\u{17F3}\u{17F8}\u{1800}\u{1806}" .
		    "\u{1810}\u{181D}\u{1823}\u{1829}\u{1839}\u{183F}\u{1841}\u{1843}\u{184A}" .
		    "\u{1853}\u{1856}\u{1858}\u{185E}\u{1868}\u{1875}\u{187B}\u{188B}\u{1891}" .
		    "\u{1895}\u{1899}\u{189B}\u{18AE}\u{18BA}\u{18CB}\u{18D8}\u{18DA}\u{18ED}" .
		    "\u{18F9}\u{190A}\u{1917}\u{1919}\u{192C}\u{1935}\u{193E}";

		protected static $atn;
		protected static $decisionToDFA;
		protected static $sharedContextCache;

		public function __construct(TokenStream $input)
		{
			parent::__construct($input);

			self::initialize();

			$this->interp = new ParserATNSimulator($this, self::$atn, self::$decisionToDFA, self::$sharedContextCache);
		}

		private static function initialize() : void
		{
			if (self::$atn !== null) {
				return;
			}

			RuntimeMetaData::checkVersion('4.9.2', RuntimeMetaData::VERSION);

			$atn = (new ATNDeserializer())->deserialize(self::SERIALIZED_ATN);

			$decisionToDFA = [];
			for ($i = 0, $count = $atn->getNumberOfDecisions(); $i < $count; $i++) {
				$decisionToDFA[] = new DFA($atn->getDecisionState($i), $i);
			}

			self::$atn = $atn;
			self::$decisionToDFA = $decisionToDFA;
			self::$sharedContextCache = new PredictionContextCache();
		}

		public function getGrammarFileName() : string
		{
			return "MySqlParser.g4";
		}

		public function getRuleNames() : array
		{
			return self::RULE_NAMES;
		}

		public function getSerializedATN() : string
		{
			return self::SERIALIZED_ATN;
		}

		public function getATN() : ATN
		{
			return self::$atn;
		}

		public function getVocabulary() : Vocabulary
        {
            static $vocabulary;

			return $vocabulary = $vocabulary ?? new VocabularyImpl(self::LITERAL_NAMES, self::SYMBOLIC_NAMES);
        }

		/**
		 * @throws RecognitionException
		 */
		public function root() : Context\RootContext
		{
		    $localContext = new Context\RootContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 0, self::RULE_root);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(639);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::ALTER) | (1 << self::ANALYZE) | (1 << self::CALL) | (1 << self::CHANGE) | (1 << self::CHECK) | (1 << self::CREATE) | (1 << self::DELETE) | (1 << self::DESC) | (1 << self::DESCRIBE) | (1 << self::DROP) | (1 << self::EXPLAIN))) !== 0) || (((($_la - 64)) & ~0x3f) === 0 && ((1 << ($_la - 64)) & ((1 << (self::GET - 64)) | (1 << (self::GRANT - 64)) | (1 << (self::INSERT - 64)) | (1 << (self::KILL - 64)) | (1 << (self::LOAD - 64)) | (1 << (self::LOCK - 64)) | (1 << (self::OPTIMIZE - 64)) | (1 << (self::PURGE - 64)) | (1 << (self::RELEASE - 64)) | (1 << (self::RENAME - 64)) | (1 << (self::REPLACE - 64)))) !== 0) || (((($_la - 129)) & ~0x3f) === 0 && ((1 << ($_la - 129)) & ((1 << (self::RESIGNAL - 129)) | (1 << (self::REVOKE - 129)) | (1 << (self::SELECT - 129)) | (1 << (self::SET - 129)) | (1 << (self::SHOW - 129)) | (1 << (self::SIGNAL - 129)) | (1 << (self::UNLOCK - 129)) | (1 << (self::UPDATE - 129)) | (1 << (self::USE - 129)))) !== 0) || (((($_la - 282)) & ~0x3f) === 0 && ((1 << ($_la - 282)) & ((1 << (self::BEGIN - 282)) | (1 << (self::BINLOG - 282)) | (1 << (self::CACHE - 282)) | (1 << (self::CHECKSUM - 282)) | (1 << (self::COMMIT - 282)) | (1 << (self::DEALLOCATE - 282)) | (1 << (self::DO - 282)))) !== 0) || (((($_la - 364)) & ~0x3f) === 0 && ((1 << ($_la - 364)) & ((1 << (self::FLUSH - 364)) | (1 << (self::HANDLER - 364)) | (1 << (self::HELP - 364)) | (1 << (self::INSTALL - 364)))) !== 0) || (((($_la - 477)) & ~0x3f) === 0 && ((1 << ($_la - 477)) & ((1 << (self::PREPARE - 477)) | (1 << (self::REPAIR - 477)) | (1 << (self::RESET - 477)) | (1 << (self::ROLLBACK - 477)) | (1 << (self::SAVEPOINT - 477)) | (1 << (self::START - 477)))) !== 0) || (((($_la - 546)) & ~0x3f) === 0 && ((1 << ($_la - 546)) & ((1 << (self::STOP - 546)) | (1 << (self::TRUNCATE - 546)) | (1 << (self::UNINSTALL - 546)) | (1 << (self::XA - 546)) | (1 << (self::EXECUTE - 546)))) !== 0) || $_la === self::SHUTDOWN || $_la === self::LR_BRACKET || $_la === self::SEMI) {
		        	$this->setState(638);
		        	$this->sqlStatements();
		        }
		        $this->setState(642);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::MINUSMINUS) {
		        	$this->setState(641);
		        	$this->match(self::MINUSMINUS);
		        }
		        $this->setState(644);
		        $this->match(self::EOF);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function sqlStatements() : Context\SqlStatementsContext
		{
		    $localContext = new Context\SqlStatementsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 2, self::RULE_sqlStatements);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(656);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 5, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(654);
		        		$this->errorHandler->sync($this);

		        		switch ($this->input->LA(1)) {
		        		    case self::ALTER:
		        		    case self::ANALYZE:
		        		    case self::CALL:
		        		    case self::CHANGE:
		        		    case self::CHECK:
		        		    case self::CREATE:
		        		    case self::DELETE:
		        		    case self::DESC:
		        		    case self::DESCRIBE:
		        		    case self::DROP:
		        		    case self::EXPLAIN:
		        		    case self::GET:
		        		    case self::GRANT:
		        		    case self::INSERT:
		        		    case self::KILL:
		        		    case self::LOAD:
		        		    case self::LOCK:
		        		    case self::OPTIMIZE:
		        		    case self::PURGE:
		        		    case self::RELEASE:
		        		    case self::RENAME:
		        		    case self::REPLACE:
		        		    case self::RESIGNAL:
		        		    case self::REVOKE:
		        		    case self::SELECT:
		        		    case self::SET:
		        		    case self::SHOW:
		        		    case self::SIGNAL:
		        		    case self::UNLOCK:
		        		    case self::UPDATE:
		        		    case self::USE:
		        		    case self::BEGIN:
		        		    case self::BINLOG:
		        		    case self::CACHE:
		        		    case self::CHECKSUM:
		        		    case self::COMMIT:
		        		    case self::DEALLOCATE:
		        		    case self::DO:
		        		    case self::FLUSH:
		        		    case self::HANDLER:
		        		    case self::HELP:
		        		    case self::INSTALL:
		        		    case self::PREPARE:
		        		    case self::REPAIR:
		        		    case self::RESET:
		        		    case self::ROLLBACK:
		        		    case self::SAVEPOINT:
		        		    case self::START:
		        		    case self::STOP:
		        		    case self::TRUNCATE:
		        		    case self::UNINSTALL:
		        		    case self::XA:
		        		    case self::EXECUTE:
		        		    case self::SHUTDOWN:
		        		    case self::LR_BRACKET:
		        		    	$this->setState(646);
		        		    	$this->sqlStatement();
		        		    	$this->setState(648);
		        		    	$this->errorHandler->sync($this);
		        		    	$_la = $this->input->LA(1);

		        		    	if ($_la === self::MINUSMINUS) {
		        		    		$this->setState(647);
		        		    		$this->match(self::MINUSMINUS);
		        		    	}
		        		    	$this->setState(651);
		        		    	$this->errorHandler->sync($this);

		        		    	switch ($this->getInterpreter()->adaptivePredict($this->input, 3, $this->ctx)) {
		        		    	    case 1:
		        		    		    $this->setState(650);
		        		    		    $this->match(self::SEMI);
		        		    		break;
		        		    	}
		        		    	break;

		        		    case self::SEMI:
		        		    	$this->setState(653);
		        		    	$this->emptyStatement();
		        		    	break;

		        		default:
		        			throw new NoViableAltException($this);
		        		} 
		        	}

		        	$this->setState(658);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 5, $this->ctx);
		        }
		        $this->setState(667);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ALTER:
		            case self::ANALYZE:
		            case self::CALL:
		            case self::CHANGE:
		            case self::CHECK:
		            case self::CREATE:
		            case self::DELETE:
		            case self::DESC:
		            case self::DESCRIBE:
		            case self::DROP:
		            case self::EXPLAIN:
		            case self::GET:
		            case self::GRANT:
		            case self::INSERT:
		            case self::KILL:
		            case self::LOAD:
		            case self::LOCK:
		            case self::OPTIMIZE:
		            case self::PURGE:
		            case self::RELEASE:
		            case self::RENAME:
		            case self::REPLACE:
		            case self::RESIGNAL:
		            case self::REVOKE:
		            case self::SELECT:
		            case self::SET:
		            case self::SHOW:
		            case self::SIGNAL:
		            case self::UNLOCK:
		            case self::UPDATE:
		            case self::USE:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::CACHE:
		            case self::CHECKSUM:
		            case self::COMMIT:
		            case self::DEALLOCATE:
		            case self::DO:
		            case self::FLUSH:
		            case self::HANDLER:
		            case self::HELP:
		            case self::INSTALL:
		            case self::PREPARE:
		            case self::REPAIR:
		            case self::RESET:
		            case self::ROLLBACK:
		            case self::SAVEPOINT:
		            case self::START:
		            case self::STOP:
		            case self::TRUNCATE:
		            case self::UNINSTALL:
		            case self::XA:
		            case self::EXECUTE:
		            case self::SHUTDOWN:
		            case self::LR_BRACKET:
		            	$this->setState(659);
		            	$this->sqlStatement();
		            	$this->setState(664);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 7, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(661);
		            		    $this->errorHandler->sync($this);
		            		    $_la = $this->input->LA(1);

		            		    if ($_la === self::MINUSMINUS) {
		            		    	$this->setState(660);
		            		    	$this->match(self::MINUSMINUS);
		            		    }
		            		    $this->setState(663);
		            		    $this->match(self::SEMI);
		            		break;
		            	}
		            	break;

		            case self::SEMI:
		            	$this->setState(666);
		            	$this->emptyStatement();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function sqlStatement() : Context\SqlStatementContext
		{
		    $localContext = new Context\SqlStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 4, self::RULE_sqlStatement);

		    try {
		        $this->setState(676);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 9, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(669);
		        	    $this->ddlStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(670);
		        	    $this->dmlStatement();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(671);
		        	    $this->transactionStatement();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(672);
		        	    $this->replicationStatement();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(673);
		        	    $this->preparedStatement();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(674);
		        	    $this->administrationStatement();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(675);
		        	    $this->utilityStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function emptyStatement() : Context\EmptyStatementContext
		{
		    $localContext = new Context\EmptyStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 6, self::RULE_emptyStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(678);
		        $this->match(self::SEMI);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function ddlStatement() : Context\DdlStatementContext
		{
		    $localContext = new Context\DdlStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 8, self::RULE_ddlStatement);

		    try {
		        $this->setState(715);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 10, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(680);
		        	    $this->createDatabase();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(681);
		        	    $this->createEvent();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(682);
		        	    $this->createIndex();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(683);
		        	    $this->createLogfileGroup();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(684);
		        	    $this->createProcedure();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(685);
		        	    $this->createFunction();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(686);
		        	    $this->createServer();
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(687);
		        	    $this->createTable();
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(688);
		        	    $this->createTablespaceInnodb();
		        	break;

		        	case 10:
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(689);
		        	    $this->createTablespaceNdb();
		        	break;

		        	case 11:
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(690);
		        	    $this->createTrigger();
		        	break;

		        	case 12:
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(691);
		        	    $this->createView();
		        	break;

		        	case 13:
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(692);
		        	    $this->alterDatabase();
		        	break;

		        	case 14:
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(693);
		        	    $this->alterEvent();
		        	break;

		        	case 15:
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(694);
		        	    $this->alterFunction();
		        	break;

		        	case 16:
		        	    $this->enterOuterAlt($localContext, 16);
		        	    $this->setState(695);
		        	    $this->alterInstance();
		        	break;

		        	case 17:
		        	    $this->enterOuterAlt($localContext, 17);
		        	    $this->setState(696);
		        	    $this->alterLogfileGroup();
		        	break;

		        	case 18:
		        	    $this->enterOuterAlt($localContext, 18);
		        	    $this->setState(697);
		        	    $this->alterProcedure();
		        	break;

		        	case 19:
		        	    $this->enterOuterAlt($localContext, 19);
		        	    $this->setState(698);
		        	    $this->alterServer();
		        	break;

		        	case 20:
		        	    $this->enterOuterAlt($localContext, 20);
		        	    $this->setState(699);
		        	    $this->alterTable();
		        	break;

		        	case 21:
		        	    $this->enterOuterAlt($localContext, 21);
		        	    $this->setState(700);
		        	    $this->alterTablespace();
		        	break;

		        	case 22:
		        	    $this->enterOuterAlt($localContext, 22);
		        	    $this->setState(701);
		        	    $this->alterView();
		        	break;

		        	case 23:
		        	    $this->enterOuterAlt($localContext, 23);
		        	    $this->setState(702);
		        	    $this->dropDatabase();
		        	break;

		        	case 24:
		        	    $this->enterOuterAlt($localContext, 24);
		        	    $this->setState(703);
		        	    $this->dropEvent();
		        	break;

		        	case 25:
		        	    $this->enterOuterAlt($localContext, 25);
		        	    $this->setState(704);
		        	    $this->dropIndex();
		        	break;

		        	case 26:
		        	    $this->enterOuterAlt($localContext, 26);
		        	    $this->setState(705);
		        	    $this->dropLogfileGroup();
		        	break;

		        	case 27:
		        	    $this->enterOuterAlt($localContext, 27);
		        	    $this->setState(706);
		        	    $this->dropProcedure();
		        	break;

		        	case 28:
		        	    $this->enterOuterAlt($localContext, 28);
		        	    $this->setState(707);
		        	    $this->dropFunction();
		        	break;

		        	case 29:
		        	    $this->enterOuterAlt($localContext, 29);
		        	    $this->setState(708);
		        	    $this->dropServer();
		        	break;

		        	case 30:
		        	    $this->enterOuterAlt($localContext, 30);
		        	    $this->setState(709);
		        	    $this->dropTable();
		        	break;

		        	case 31:
		        	    $this->enterOuterAlt($localContext, 31);
		        	    $this->setState(710);
		        	    $this->dropTablespace();
		        	break;

		        	case 32:
		        	    $this->enterOuterAlt($localContext, 32);
		        	    $this->setState(711);
		        	    $this->dropTrigger();
		        	break;

		        	case 33:
		        	    $this->enterOuterAlt($localContext, 33);
		        	    $this->setState(712);
		        	    $this->dropView();
		        	break;

		        	case 34:
		        	    $this->enterOuterAlt($localContext, 34);
		        	    $this->setState(713);
		        	    $this->renameTable();
		        	break;

		        	case 35:
		        	    $this->enterOuterAlt($localContext, 35);
		        	    $this->setState(714);
		        	    $this->truncateTable();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dmlStatement() : Context\DmlStatementContext
		{
		    $localContext = new Context\DmlStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 10, self::RULE_dmlStatement);

		    try {
		        $this->setState(727);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 11, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(717);
		        	    $this->selectStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(718);
		        	    $this->insertStatement();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(719);
		        	    $this->updateStatement();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(720);
		        	    $this->deleteStatement();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(721);
		        	    $this->replaceStatement();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(722);
		        	    $this->callStatement();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(723);
		        	    $this->loadDataStatement();
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(724);
		        	    $this->loadXmlStatement();
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(725);
		        	    $this->doStatement();
		        	break;

		        	case 10:
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(726);
		        	    $this->handlerStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function transactionStatement() : Context\TransactionStatementContext
		{
		    $localContext = new Context\TransactionStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 12, self::RULE_transactionStatement);

		    try {
		        $this->setState(738);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 12, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(729);
		        	    $this->startTransaction();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(730);
		        	    $this->beginWork();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(731);
		        	    $this->commitWork();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(732);
		        	    $this->rollbackWork();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(733);
		        	    $this->savepointStatement();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(734);
		        	    $this->rollbackStatement();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(735);
		        	    $this->releaseStatement();
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(736);
		        	    $this->lockTables();
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(737);
		        	    $this->unlockTables();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function replicationStatement() : Context\ReplicationStatementContext
		{
		    $localContext = new Context\ReplicationStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 14, self::RULE_replicationStatement);

		    try {
		        $this->setState(755);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 13, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(740);
		        	    $this->changeMaster();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(741);
		        	    $this->changeReplicationFilter();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(742);
		        	    $this->purgeBinaryLogs();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(743);
		        	    $this->resetMaster();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(744);
		        	    $this->resetSlave();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(745);
		        	    $this->startSlave();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(746);
		        	    $this->stopSlave();
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(747);
		        	    $this->startGroupReplication();
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(748);
		        	    $this->stopGroupReplication();
		        	break;

		        	case 10:
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(749);
		        	    $this->xaStartTransaction();
		        	break;

		        	case 11:
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(750);
		        	    $this->xaEndTransaction();
		        	break;

		        	case 12:
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(751);
		        	    $this->xaPrepareStatement();
		        	break;

		        	case 13:
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(752);
		        	    $this->xaCommitWork();
		        	break;

		        	case 14:
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(753);
		        	    $this->xaRollbackWork();
		        	break;

		        	case 15:
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(754);
		        	    $this->xaRecoverWork();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function preparedStatement() : Context\PreparedStatementContext
		{
		    $localContext = new Context\PreparedStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 16, self::RULE_preparedStatement);

		    try {
		        $this->setState(760);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::PREPARE:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(757);
		            	$this->prepareStatement();
		            	break;

		            case self::EXECUTE:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(758);
		            	$this->executeStatement();
		            	break;

		            case self::DROP:
		            case self::DEALLOCATE:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(759);
		            	$this->deallocatePrepare();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function compoundStatement() : Context\CompoundStatementContext
		{
		    $localContext = new Context\CompoundStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 18, self::RULE_compoundStatement);

		    try {
		        $this->setState(772);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 15, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(762);
		        	    $this->blockStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(763);
		        	    $this->caseStatement();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(764);
		        	    $this->ifStatement();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(765);
		        	    $this->leaveStatement();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(766);
		        	    $this->loopStatement();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(767);
		        	    $this->repeatStatement();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(768);
		        	    $this->whileStatement();
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(769);
		        	    $this->iterateStatement();
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(770);
		        	    $this->returnStatement();
		        	break;

		        	case 10:
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(771);
		        	    $this->cursorStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function administrationStatement() : Context\AdministrationStatementContext
		{
		    $localContext = new Context\AdministrationStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 20, self::RULE_administrationStatement);

		    try {
		        $this->setState(799);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 16, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(774);
		        	    $this->alterUser();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(775);
		        	    $this->createUser();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(776);
		        	    $this->dropUser();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(777);
		        	    $this->grantStatement();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(778);
		        	    $this->grantProxy();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(779);
		        	    $this->renameUser();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(780);
		        	    $this->revokeStatement();
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(781);
		        	    $this->revokeProxy();
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(782);
		        	    $this->analyzeTable();
		        	break;

		        	case 10:
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(783);
		        	    $this->checkTable();
		        	break;

		        	case 11:
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(784);
		        	    $this->checksumTable();
		        	break;

		        	case 12:
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(785);
		        	    $this->optimizeTable();
		        	break;

		        	case 13:
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(786);
		        	    $this->repairTable();
		        	break;

		        	case 14:
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(787);
		        	    $this->createUdfunction();
		        	break;

		        	case 15:
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(788);
		        	    $this->installPlugin();
		        	break;

		        	case 16:
		        	    $this->enterOuterAlt($localContext, 16);
		        	    $this->setState(789);
		        	    $this->uninstallPlugin();
		        	break;

		        	case 17:
		        	    $this->enterOuterAlt($localContext, 17);
		        	    $this->setState(790);
		        	    $this->setStatement();
		        	break;

		        	case 18:
		        	    $this->enterOuterAlt($localContext, 18);
		        	    $this->setState(791);
		        	    $this->showStatement();
		        	break;

		        	case 19:
		        	    $this->enterOuterAlt($localContext, 19);
		        	    $this->setState(792);
		        	    $this->binlogStatement();
		        	break;

		        	case 20:
		        	    $this->enterOuterAlt($localContext, 20);
		        	    $this->setState(793);
		        	    $this->cacheIndexStatement();
		        	break;

		        	case 21:
		        	    $this->enterOuterAlt($localContext, 21);
		        	    $this->setState(794);
		        	    $this->flushStatement();
		        	break;

		        	case 22:
		        	    $this->enterOuterAlt($localContext, 22);
		        	    $this->setState(795);
		        	    $this->killStatement();
		        	break;

		        	case 23:
		        	    $this->enterOuterAlt($localContext, 23);
		        	    $this->setState(796);
		        	    $this->loadIndexIntoCache();
		        	break;

		        	case 24:
		        	    $this->enterOuterAlt($localContext, 24);
		        	    $this->setState(797);
		        	    $this->resetStatement();
		        	break;

		        	case 25:
		        	    $this->enterOuterAlt($localContext, 25);
		        	    $this->setState(798);
		        	    $this->shutdownStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function utilityStatement() : Context\UtilityStatementContext
		{
		    $localContext = new Context\UtilityStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 22, self::RULE_utilityStatement);

		    try {
		        $this->setState(808);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 17, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(801);
		        	    $this->simpleDescribeStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(802);
		        	    $this->fullDescribeStatement();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(803);
		        	    $this->helpStatement();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(804);
		        	    $this->useStatement();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(805);
		        	    $this->signalStatement();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(806);
		        	    $this->resignalStatement();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(807);
		        	    $this->diagnosticsStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createDatabase() : Context\CreateDatabaseContext
		{
		    $localContext = new Context\CreateDatabaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 24, self::RULE_createDatabase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(810);
		        $this->match(self::CREATE);
		        $this->setState(811);

		        $localContext->dbFormat = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::DATABASE || $_la === self::SCHEMA)) {
		        	    $localContext->dbFormat = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(813);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IF) {
		        	$this->setState(812);
		        	$this->ifNotExists();
		        }
		        $this->setState(815);
		        $this->uid();
		        $this->setState(819);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CHARACTER) | (1 << self::COLLATE) | (1 << self::DEFAULT))) !== 0) || $_la === self::CHARSET) {
		        	$this->setState(816);
		        	$this->createDatabaseOption();
		        	$this->setState(821);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createEvent() : Context\CreateEventContext
		{
		    $localContext = new Context\CreateEventContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 26, self::RULE_createEvent);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(822);
		        $this->match(self::CREATE);
		        $this->setState(824);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFINER) {
		        	$this->setState(823);
		        	$this->ownerStatement();
		        }
		        $this->setState(826);
		        $this->match(self::EVENT);
		        $this->setState(828);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IF) {
		        	$this->setState(827);
		        	$this->ifNotExists();
		        }
		        $this->setState(830);
		        $this->fullId();
		        $this->setState(831);
		        $this->match(self::ON);
		        $this->setState(832);
		        $this->match(self::SCHEDULE);
		        $this->setState(833);
		        $this->scheduleExpression();
		        $this->setState(840);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ON) {
		        	$this->setState(834);
		        	$this->match(self::ON);
		        	$this->setState(835);
		        	$this->match(self::COMPLETION);
		        	$this->setState(837);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::NOT) {
		        		$this->setState(836);
		        		$this->match(self::NOT);
		        	}
		        	$this->setState(839);
		        	$this->match(self::PRESERVE);
		        }
		        $this->setState(843);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DISABLE || $_la === self::ENABLE) {
		        	$this->setState(842);
		        	$this->enableType();
		        }
		        $this->setState(847);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::COMMENT) {
		        	$this->setState(845);
		        	$this->match(self::COMMENT);
		        	$this->setState(846);
		        	$this->match(self::STRING_LITERAL);
		        }
		        $this->setState(849);
		        $this->match(self::DO);
		        $this->setState(850);
		        $this->routineBody();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createIndex() : Context\CreateIndexContext
		{
		    $localContext = new Context\CreateIndexContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 28, self::RULE_createIndex);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(852);
		        $this->match(self::CREATE);
		        $this->setState(854);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::OFFLINE || $_la === self::ONLINE) {
		        	$this->setState(853);

		        	$localContext->intimeAction = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::OFFLINE || $_la === self::ONLINE)) {
		        		    $localContext->intimeAction = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(857);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FULLTEXT || $_la === self::SPATIAL || $_la === self::UNIQUE) {
		        	$this->setState(856);

		        	$localContext->indexCategory = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::FULLTEXT || $_la === self::SPATIAL || $_la === self::UNIQUE)) {
		        		    $localContext->indexCategory = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(859);
		        $this->match(self::INDEX);
		        $this->setState(860);
		        $this->uid();
		        $this->setState(862);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::USING) {
		        	$this->setState(861);
		        	$this->indexType();
		        }
		        $this->setState(864);
		        $this->match(self::ON);
		        $this->setState(865);
		        $this->tableName();
		        $this->setState(866);
		        $this->indexColumnNames();
		        $this->setState(870);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
		        	$this->setState(867);
		        	$this->indexOption();
		        	$this->setState(872);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(885);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 33, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(883);
		        		$this->errorHandler->sync($this);

		        		switch ($this->input->LA(1)) {
		        		    case self::ALGORITHM:
		        		    	$this->setState(873);
		        		    	$this->match(self::ALGORITHM);
		        		    	$this->setState(875);
		        		    	$this->errorHandler->sync($this);
		        		    	$_la = $this->input->LA(1);

		        		    	if ($_la === self::EQUAL_SYMBOL) {
		        		    		$this->setState(874);
		        		    		$this->match(self::EQUAL_SYMBOL);
		        		    	}
		        		    	$this->setState(877);

		        		    	$localContext->algType = $this->input->LT(1);
		        		    	$_la = $this->input->LA(1);

		        		    	if (!($_la === self::DEFAULT || $_la === self::COPY || $_la === self::INPLACE)) {
		        		    		    $localContext->algType = $this->errorHandler->recoverInline($this);
		        		    	} else {
		        		    		if ($this->input->LA(1) === Token::EOF) {
		        		    		    $this->matchedEOF = true;
		        		    	    }

		        		    		$this->errorHandler->reportMatch($this);
		        		    		$this->consume();
		        		    	}
		        		    	break;

		        		    case self::LOCK:
		        		    	$this->setState(878);
		        		    	$this->match(self::LOCK);
		        		    	$this->setState(880);
		        		    	$this->errorHandler->sync($this);
		        		    	$_la = $this->input->LA(1);

		        		    	if ($_la === self::EQUAL_SYMBOL) {
		        		    		$this->setState(879);
		        		    		$this->match(self::EQUAL_SYMBOL);
		        		    	}
		        		    	$this->setState(882);

		        		    	$localContext->lockType = $this->input->LT(1);
		        		    	$_la = $this->input->LA(1);

		        		    	if (!($_la === self::DEFAULT || $_la === self::EXCLUSIVE || $_la === self::NONE || $_la === self::SHARED)) {
		        		    		    $localContext->lockType = $this->errorHandler->recoverInline($this);
		        		    	} else {
		        		    		if ($this->input->LA(1) === Token::EOF) {
		        		    		    $this->matchedEOF = true;
		        		    	    }

		        		    		$this->errorHandler->reportMatch($this);
		        		    		$this->consume();
		        		    	}
		        		    	break;

		        		default:
		        			throw new NoViableAltException($this);
		        		} 
		        	}

		        	$this->setState(887);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 33, $this->ctx);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createLogfileGroup() : Context\CreateLogfileGroupContext
		{
		    $localContext = new Context\CreateLogfileGroupContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 30, self::RULE_createLogfileGroup);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(888);
		        $this->match(self::CREATE);
		        $this->setState(889);
		        $this->match(self::LOGFILE);
		        $this->setState(890);
		        $this->match(self::GROUP);
		        $this->setState(891);
		        $this->uid();
		        $this->setState(892);
		        $this->match(self::ADD);
		        $this->setState(893);
		        $this->match(self::UNDOFILE);
		        $this->setState(894);
		        $localContext->undoFile = $this->match(self::STRING_LITERAL);
		        $this->setState(900);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::INITIAL_SIZE) {
		        	$this->setState(895);
		        	$this->match(self::INITIAL_SIZE);
		        	$this->setState(897);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(896);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(899);
		        	$localContext->initSize = $this->fileSizeLiteral();
		        }
		        $this->setState(907);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::UNDO_BUFFER_SIZE) {
		        	$this->setState(902);
		        	$this->match(self::UNDO_BUFFER_SIZE);
		        	$this->setState(904);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(903);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(906);
		        	$localContext->undoSize = $this->fileSizeLiteral();
		        }
		        $this->setState(914);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::REDO_BUFFER_SIZE) {
		        	$this->setState(909);
		        	$this->match(self::REDO_BUFFER_SIZE);
		        	$this->setState(911);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(910);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(913);
		        	$localContext->redoSize = $this->fileSizeLiteral();
		        }
		        $this->setState(921);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NODEGROUP) {
		        	$this->setState(916);
		        	$this->match(self::NODEGROUP);
		        	$this->setState(918);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(917);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(920);
		        	$this->uid();
		        }
		        $this->setState(924);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WAIT) {
		        	$this->setState(923);
		        	$this->match(self::WAIT);
		        }
		        $this->setState(931);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::COMMENT) {
		        	$this->setState(926);
		        	$this->match(self::COMMENT);
		        	$this->setState(928);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(927);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(930);
		        	$localContext->comment = $this->match(self::STRING_LITERAL);
		        }
		        $this->setState(933);
		        $this->match(self::ENGINE);
		        $this->setState(935);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EQUAL_SYMBOL) {
		        	$this->setState(934);
		        	$this->match(self::EQUAL_SYMBOL);
		        }
		        $this->setState(937);
		        $this->engineName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createProcedure() : Context\CreateProcedureContext
		{
		    $localContext = new Context\CreateProcedureContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 32, self::RULE_createProcedure);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(939);
		        $this->match(self::CREATE);
		        $this->setState(941);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFINER) {
		        	$this->setState(940);
		        	$this->ownerStatement();
		        }
		        $this->setState(943);
		        $this->match(self::PROCEDURE);
		        $this->setState(944);
		        $this->fullId();
		        $this->setState(945);
		        $this->match(self::LR_BRACKET);
		        $this->setState(947);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 71)) & ~0x3f) === 0 && ((1 << ($_la - 71)) & ((1 << (self::IN - 71)) | (1 << (self::INOUT - 71)) | (1 << (self::LEFT - 71)) | (1 << (self::NUMBER - 71)) | (1 << (self::OUT - 71)) | (1 << (self::RIGHT - 71)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	$this->setState(946);
		        	$this->procedureParameter();
		        }
		        $this->setState(953);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(949);
		        	$this->match(self::COMMA);
		        	$this->setState(950);
		        	$this->procedureParameter();
		        	$this->setState(955);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(956);
		        $this->match(self::RR_BRACKET);
		        $this->setState(960);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 49, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(957);
		        		$this->routineOption(); 
		        	}

		        	$this->setState(962);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 49, $this->ctx);
		        }
		        $this->setState(963);
		        $this->routineBody();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createFunction() : Context\CreateFunctionContext
		{
		    $localContext = new Context\CreateFunctionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 34, self::RULE_createFunction);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(965);
		        $this->match(self::CREATE);
		        $this->setState(967);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFINER) {
		        	$this->setState(966);
		        	$this->ownerStatement();
		        }
		        $this->setState(969);
		        $this->match(self::FUNCTION);
		        $this->setState(970);
		        $this->fullId();
		        $this->setState(971);
		        $this->match(self::LR_BRACKET);
		        $this->setState(973);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	$this->setState(972);
		        	$this->functionParameter();
		        }
		        $this->setState(979);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(975);
		        	$this->match(self::COMMA);
		        	$this->setState(976);
		        	$this->functionParameter();
		        	$this->setState(981);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(982);
		        $this->match(self::RR_BRACKET);
		        $this->setState(983);
		        $this->match(self::RETURNS);
		        $this->setState(984);
		        $this->dataType();
		        $this->setState(988);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 53, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(985);
		        		$this->routineOption(); 
		        	}

		        	$this->setState(990);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 53, $this->ctx);
		        }
		        $this->setState(993);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ALTER:
		            case self::ANALYZE:
		            case self::CALL:
		            case self::CHANGE:
		            case self::CHECK:
		            case self::CREATE:
		            case self::CURRENT:
		            case self::DATABASE:
		            case self::DELETE:
		            case self::DESC:
		            case self::DESCRIBE:
		            case self::DIAGNOSTICS:
		            case self::DROP:
		            case self::EXPLAIN:
		            case self::GET:
		            case self::GRANT:
		            case self::INSERT:
		            case self::KILL:
		            case self::LEFT:
		            case self::LOAD:
		            case self::LOCK:
		            case self::NUMBER:
		            case self::OPTIMIZE:
		            case self::PURGE:
		            case self::RELEASE:
		            case self::RENAME:
		            case self::REPLACE:
		            case self::RESIGNAL:
		            case self::REVOKE:
		            case self::RIGHT:
		            case self::SELECT:
		            case self::SET:
		            case self::SHOW:
		            case self::SIGNAL:
		            case self::STACKED:
		            case self::UNLOCK:
		            case self::UPDATE:
		            case self::USE:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::COUNT:
		            case self::POSITION:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::TABLES:
		            case self::ROUTINE:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::PRIVILEGES:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::LR_BRACKET:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::STRING_LITERAL:
		            case self::ID:
		            case self::REVERSE_QUOTE_ID:
		            	$this->setState(991);
		            	$this->routineBody();
		            	break;

		            case self::RETURN:
		            	$this->setState(992);
		            	$this->returnStatement();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createServer() : Context\CreateServerContext
		{
		    $localContext = new Context\CreateServerContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 36, self::RULE_createServer);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(995);
		        $this->match(self::CREATE);
		        $this->setState(996);
		        $this->match(self::SERVER);
		        $this->setState(997);
		        $this->uid();
		        $this->setState(998);
		        $this->match(self::FOREIGN);
		        $this->setState(999);
		        $this->match(self::DATA);
		        $this->setState(1000);
		        $this->match(self::WRAPPER);
		        $this->setState(1001);

		        $localContext->wrapperName = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::MYSQL || $_la === self::STRING_LITERAL)) {
		        	    $localContext->wrapperName = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(1002);
		        $this->match(self::OPTIONS);
		        $this->setState(1003);
		        $this->match(self::LR_BRACKET);
		        $this->setState(1004);
		        $this->serverOption();
		        $this->setState(1009);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(1005);
		        	$this->match(self::COMMA);
		        	$this->setState(1006);
		        	$this->serverOption();
		        	$this->setState(1011);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(1012);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createTable() : Context\CreateTableContext
		{
		    $localContext = new Context\CreateTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 38, self::RULE_createTable);

		    try {
		        $this->setState(1092);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 74, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\CopyCreateTableContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1014);
		        	    $this->match(self::CREATE);
		        	    $this->setState(1016);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::TEMPORARY) {
		        	    	$this->setState(1015);
		        	    	$this->match(self::TEMPORARY);
		        	    }
		        	    $this->setState(1018);
		        	    $this->match(self::TABLE);
		        	    $this->setState(1020);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::IF) {
		        	    	$this->setState(1019);
		        	    	$this->ifNotExists();
		        	    }
		        	    $this->setState(1022);
		        	    $this->tableName();
		        	    $this->setState(1030);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::LIKE:
		        	        	$this->setState(1023);
		        	        	$this->match(self::LIKE);
		        	        	$this->setState(1024);
		        	        	$this->tableName();
		        	        	break;

		        	        case self::LR_BRACKET:
		        	        	$this->setState(1025);
		        	        	$this->match(self::LR_BRACKET);
		        	        	$this->setState(1026);
		        	        	$this->match(self::LIKE);
		        	        	$this->setState(1027);
		        	        	$localContext->parenthesisTable = $this->tableName();
		        	        	$this->setState(1028);
		        	        	$this->match(self::RR_BRACKET);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\QueryCreateTableContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1032);
		        	    $this->match(self::CREATE);
		        	    $this->setState(1034);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::TEMPORARY) {
		        	    	$this->setState(1033);
		        	    	$this->match(self::TEMPORARY);
		        	    }
		        	    $this->setState(1036);
		        	    $this->match(self::TABLE);
		        	    $this->setState(1038);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::IF) {
		        	    	$this->setState(1037);
		        	    	$this->ifNotExists();
		        	    }
		        	    $this->setState(1040);
		        	    $this->tableName();
		        	    $this->setState(1042);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 61, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(1041);
		        	    	    $this->createDefinitions();
		        	    	break;
		        	    }
		        	    $this->setState(1054);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ((((($_la - 22)) & ~0x3f) === 0 && ((1 << ($_la - 22)) & ((1 << (self::CHARACTER - 22)) | (1 << (self::COLLATE - 22)) | (1 << (self::DEFAULT - 22)) | (1 << (self::INDEX - 22)))) !== 0) || $_la === self::UNION || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::ENGINE - 280)))) !== 0) || (((($_la - 384)) & ~0x3f) === 0 && ((1 << ($_la - 384)) & ((1 << (self::INSERT_METHOD - 384)) | (1 << (self::KEY_BLOCK_SIZE - 384)) | (1 << (self::MAX_ROWS - 384)) | (1 << (self::MIN_ROWS - 384)))) !== 0) || (((($_la - 464)) & ~0x3f) === 0 && ((1 << ($_la - 464)) & ((1 << (self::PACK_KEYS - 464)) | (1 << (self::PASSWORD - 464)) | (1 << (self::ROW_FORMAT - 464)))) !== 0) || (((($_la - 542)) & ~0x3f) === 0 && ((1 << ($_la - 542)) & ((1 << (self::STATS_AUTO_RECALC - 542)) | (1 << (self::STATS_PERSISTENT - 542)) | (1 << (self::STATS_SAMPLE_PAGES - 542)) | (1 << (self::STORAGE - 542)) | (1 << (self::TABLESPACE - 542)))) !== 0) || $_la === self::CHARSET) {
		        	    	$this->setState(1044);
		        	    	$this->tableOption();
		        	    	$this->setState(1051);
		        	    	$this->errorHandler->sync($this);

		        	    	$_la = $this->input->LA(1);
		        	    	while ((((($_la - 22)) & ~0x3f) === 0 && ((1 << ($_la - 22)) & ((1 << (self::CHARACTER - 22)) | (1 << (self::COLLATE - 22)) | (1 << (self::DEFAULT - 22)) | (1 << (self::INDEX - 22)))) !== 0) || $_la === self::UNION || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::ENGINE - 280)))) !== 0) || (((($_la - 384)) & ~0x3f) === 0 && ((1 << ($_la - 384)) & ((1 << (self::INSERT_METHOD - 384)) | (1 << (self::KEY_BLOCK_SIZE - 384)) | (1 << (self::MAX_ROWS - 384)) | (1 << (self::MIN_ROWS - 384)))) !== 0) || (((($_la - 464)) & ~0x3f) === 0 && ((1 << ($_la - 464)) & ((1 << (self::PACK_KEYS - 464)) | (1 << (self::PASSWORD - 464)) | (1 << (self::ROW_FORMAT - 464)))) !== 0) || (((($_la - 542)) & ~0x3f) === 0 && ((1 << ($_la - 542)) & ((1 << (self::STATS_AUTO_RECALC - 542)) | (1 << (self::STATS_PERSISTENT - 542)) | (1 << (self::STATS_SAMPLE_PAGES - 542)) | (1 << (self::STORAGE - 542)) | (1 << (self::TABLESPACE - 542)))) !== 0) || $_la === self::CHARSET || $_la === self::COMMA) {
		        	    		$this->setState(1046);
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);

		        	    		if ($_la === self::COMMA) {
		        	    			$this->setState(1045);
		        	    			$this->match(self::COMMA);
		        	    		}
		        	    		$this->setState(1048);
		        	    		$this->tableOption();
		        	    		$this->setState(1053);
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);
		        	    	}
		        	    }
		        	    $this->setState(1057);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::PARTITION) {
		        	    	$this->setState(1056);
		        	    	$this->partitionDefinitions();
		        	    }
		        	    $this->setState(1060);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::IGNORE || $_la === self::REPLACE) {
		        	    	$this->setState(1059);

		        	    	$localContext->keyViolate = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::IGNORE || $_la === self::REPLACE)) {
		        	    		    $localContext->keyViolate = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(1063);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::AS) {
		        	    	$this->setState(1062);
		        	    	$this->match(self::AS);
		        	    }
		        	    $this->setState(1065);
		        	    $this->selectStatement();
		        	break;

		        	case 3:
		        	    $localContext = new Context\ColumnCreateTableContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1067);
		        	    $this->match(self::CREATE);
		        	    $this->setState(1069);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::TEMPORARY) {
		        	    	$this->setState(1068);
		        	    	$this->match(self::TEMPORARY);
		        	    }
		        	    $this->setState(1071);
		        	    $this->match(self::TABLE);
		        	    $this->setState(1073);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::IF) {
		        	    	$this->setState(1072);
		        	    	$this->ifNotExists();
		        	    }
		        	    $this->setState(1075);
		        	    $this->tableName();
		        	    $this->setState(1076);
		        	    $this->createDefinitions();
		        	    $this->setState(1087);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 72, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(1077);
		        	    	    $this->tableOption();
		        	    	    $this->setState(1084);
		        	    	    $this->errorHandler->sync($this);

		        	    	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 71, $this->ctx);

		        	    	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	    	if ($alt === 1) {
		        	    	    		$this->setState(1079);
		        	    	    		$this->errorHandler->sync($this);
		        	    	    		$_la = $this->input->LA(1);

		        	    	    		if ($_la === self::COMMA) {
		        	    	    			$this->setState(1078);
		        	    	    			$this->match(self::COMMA);
		        	    	    		}
		        	    	    		$this->setState(1081);
		        	    	    		$this->tableOption(); 
		        	    	    	}

		        	    	    	$this->setState(1086);
		        	    	    	$this->errorHandler->sync($this);

		        	    	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 71, $this->ctx);
		        	    	    }
		        	    	break;
		        	    }
		        	    $this->setState(1090);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::PARTITION) {
		        	    	$this->setState(1089);
		        	    	$this->partitionDefinitions();
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createTablespaceInnodb() : Context\CreateTablespaceInnodbContext
		{
		    $localContext = new Context\CreateTablespaceInnodbContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 40, self::RULE_createTablespaceInnodb);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1094);
		        $this->match(self::CREATE);
		        $this->setState(1095);
		        $this->match(self::TABLESPACE);
		        $this->setState(1096);
		        $this->uid();
		        $this->setState(1097);
		        $this->match(self::ADD);
		        $this->setState(1098);
		        $this->match(self::DATAFILE);
		        $this->setState(1099);
		        $localContext->datafile = $this->match(self::STRING_LITERAL);
		        $this->setState(1103);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FILE_BLOCK_SIZE) {
		        	$this->setState(1100);
		        	$this->match(self::FILE_BLOCK_SIZE);
		        	$this->setState(1101);
		        	$this->match(self::EQUAL_SYMBOL);
		        	$this->setState(1102);
		        	$localContext->fileBlockSize = $this->fileSizeLiteral();
		        }
		        $this->setState(1110);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ENGINE) {
		        	$this->setState(1105);
		        	$this->match(self::ENGINE);
		        	$this->setState(1107);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1106);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1109);
		        	$this->engineName();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createTablespaceNdb() : Context\CreateTablespaceNdbContext
		{
		    $localContext = new Context\CreateTablespaceNdbContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 42, self::RULE_createTablespaceNdb);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1112);
		        $this->match(self::CREATE);
		        $this->setState(1113);
		        $this->match(self::TABLESPACE);
		        $this->setState(1114);
		        $this->uid();
		        $this->setState(1115);
		        $this->match(self::ADD);
		        $this->setState(1116);
		        $this->match(self::DATAFILE);
		        $this->setState(1117);
		        $localContext->datafile = $this->match(self::STRING_LITERAL);
		        $this->setState(1118);
		        $this->match(self::USE);
		        $this->setState(1119);
		        $this->match(self::LOGFILE);
		        $this->setState(1120);
		        $this->match(self::GROUP);
		        $this->setState(1121);
		        $this->uid();
		        $this->setState(1127);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EXTENT_SIZE) {
		        	$this->setState(1122);
		        	$this->match(self::EXTENT_SIZE);
		        	$this->setState(1124);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1123);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1126);
		        	$localContext->extentSize = $this->fileSizeLiteral();
		        }
		        $this->setState(1134);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::INITIAL_SIZE) {
		        	$this->setState(1129);
		        	$this->match(self::INITIAL_SIZE);
		        	$this->setState(1131);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1130);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1133);
		        	$localContext->initialSize = $this->fileSizeLiteral();
		        }
		        $this->setState(1141);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::AUTOEXTEND_SIZE) {
		        	$this->setState(1136);
		        	$this->match(self::AUTOEXTEND_SIZE);
		        	$this->setState(1138);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1137);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1140);
		        	$localContext->autoextendSize = $this->fileSizeLiteral();
		        }
		        $this->setState(1148);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::MAX_SIZE) {
		        	$this->setState(1143);
		        	$this->match(self::MAX_SIZE);
		        	$this->setState(1145);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1144);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1147);
		        	$localContext->maxSize = $this->fileSizeLiteral();
		        }
		        $this->setState(1155);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NODEGROUP) {
		        	$this->setState(1150);
		        	$this->match(self::NODEGROUP);
		        	$this->setState(1152);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1151);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1154);
		        	$this->uid();
		        }
		        $this->setState(1158);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WAIT) {
		        	$this->setState(1157);
		        	$this->match(self::WAIT);
		        }
		        $this->setState(1165);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::COMMENT) {
		        	$this->setState(1160);
		        	$this->match(self::COMMENT);
		        	$this->setState(1162);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(1161);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(1164);
		        	$localContext->comment = $this->match(self::STRING_LITERAL);
		        }
		        $this->setState(1167);
		        $this->match(self::ENGINE);
		        $this->setState(1169);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EQUAL_SYMBOL) {
		        	$this->setState(1168);
		        	$this->match(self::EQUAL_SYMBOL);
		        }
		        $this->setState(1171);
		        $this->engineName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createTrigger() : Context\CreateTriggerContext
		{
		    $localContext = new Context\CreateTriggerContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 44, self::RULE_createTrigger);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1173);
		        $this->match(self::CREATE);
		        $this->setState(1175);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFINER) {
		        	$this->setState(1174);
		        	$this->ownerStatement();
		        }
		        $this->setState(1177);
		        $this->match(self::TRIGGER);
		        $this->setState(1178);
		        $localContext->thisTrigger = $this->fullId();
		        $this->setState(1179);

		        $localContext->triggerTime = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::BEFORE || $_la === self::AFTER)) {
		        	    $localContext->triggerTime = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(1180);

		        $localContext->triggerEvent = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::DELETE || $_la === self::INSERT || $_la === self::UPDATE)) {
		        	    $localContext->triggerEvent = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(1181);
		        $this->match(self::ON);
		        $this->setState(1182);
		        $this->tableName();
		        $this->setState(1183);
		        $this->match(self::FOR);
		        $this->setState(1184);
		        $this->match(self::EACH);
		        $this->setState(1185);
		        $this->match(self::ROW);
		        $this->setState(1188);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 93, $this->ctx)) {
		            case 1:
		        	    $this->setState(1186);

		        	    $localContext->triggerPlace = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::FOLLOWS || $_la === self::PRECEDES)) {
		        	    	    $localContext->triggerPlace = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(1187);
		        	    $localContext->otherTrigger = $this->fullId();
		        	break;
		        }
		        $this->setState(1190);
		        $this->routineBody();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createView() : Context\CreateViewContext
		{
		    $localContext = new Context\CreateViewContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 46, self::RULE_createView);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1192);
		        $this->match(self::CREATE);
		        $this->setState(1195);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::OR) {
		        	$this->setState(1193);
		        	$this->match(self::OR);
		        	$this->setState(1194);
		        	$this->match(self::REPLACE);
		        }
		        $this->setState(1200);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ALGORITHM) {
		        	$this->setState(1197);
		        	$this->match(self::ALGORITHM);
		        	$this->setState(1198);
		        	$this->match(self::EQUAL_SYMBOL);
		        	$this->setState(1199);

		        	$localContext->algType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::MERGE || $_la === self::TEMPTABLE || $_la === self::UNDEFINED)) {
		        		    $localContext->algType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(1203);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFINER) {
		        	$this->setState(1202);
		        	$this->ownerStatement();
		        }
		        $this->setState(1208);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::SQL) {
		        	$this->setState(1205);
		        	$this->match(self::SQL);
		        	$this->setState(1206);
		        	$this->match(self::SECURITY);
		        	$this->setState(1207);

		        	$localContext->secContext = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::DEFINER || $_la === self::INVOKER)) {
		        		    $localContext->secContext = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(1210);
		        $this->match(self::VIEW);
		        $this->setState(1211);
		        $this->fullId();
		        $this->setState(1216);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LR_BRACKET) {
		        	$this->setState(1212);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(1213);
		        	$this->uidList();
		        	$this->setState(1214);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(1218);
		        $this->match(self::AS);
		        $this->setState(1219);
		        $this->selectStatement();
		        $this->setState(1226);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WITH) {
		        	$this->setState(1220);
		        	$this->match(self::WITH);
		        	$this->setState(1222);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::CASCADED || $_la === self::LOCAL) {
		        		$this->setState(1221);

		        		$localContext->checkOption = $this->input->LT(1);
		        		$_la = $this->input->LA(1);

		        		if (!($_la === self::CASCADED || $_la === self::LOCAL)) {
		        			    $localContext->checkOption = $this->errorHandler->recoverInline($this);
		        		} else {
		        			if ($this->input->LA(1) === Token::EOF) {
		        			    $this->matchedEOF = true;
		        		    }

		        			$this->errorHandler->reportMatch($this);
		        			$this->consume();
		        		}
		        	}
		        	$this->setState(1224);
		        	$this->match(self::CHECK);
		        	$this->setState(1225);
		        	$this->match(self::OPTION);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createDatabaseOption() : Context\CreateDatabaseOptionContext
		{
		    $localContext = new Context\CreateDatabaseOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 48, self::RULE_createDatabaseOption);

		    try {
		        $this->setState(1251);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 107, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1229);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::DEFAULT) {
		        	    	$this->setState(1228);
		        	    	$this->match(self::DEFAULT);
		        	    }
		        	    $this->setState(1234);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::CHARACTER:
		        	        	$this->setState(1231);
		        	        	$this->match(self::CHARACTER);
		        	        	$this->setState(1232);
		        	        	$this->match(self::SET);
		        	        	break;

		        	        case self::CHARSET:
		        	        	$this->setState(1233);
		        	        	$this->match(self::CHARSET);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	    $this->setState(1237);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1236);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1241);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::BINARY:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        	$this->setState(1239);
		        	        	$this->charsetName();
		        	        	break;

		        	        case self::DEFAULT:
		        	        	$this->setState(1240);
		        	        	$this->match(self::DEFAULT);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1244);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::DEFAULT) {
		        	    	$this->setState(1243);
		        	    	$this->match(self::DEFAULT);
		        	    }
		        	    $this->setState(1246);
		        	    $this->match(self::COLLATE);
		        	    $this->setState(1248);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1247);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1250);
		        	    $this->collationName();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function ownerStatement() : Context\OwnerStatementContext
		{
		    $localContext = new Context\OwnerStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 50, self::RULE_ownerStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1253);
		        $this->match(self::DEFINER);
		        $this->setState(1254);
		        $this->match(self::EQUAL_SYMBOL);
		        $this->setState(1261);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::STRING_LITERAL:
		            case self::ID:
		            case self::STRING_USER_NAME:
		            	$this->setState(1255);
		            	$this->userName();
		            	break;

		            case self::CURRENT_USER:
		            	$this->setState(1256);
		            	$this->match(self::CURRENT_USER);
		            	$this->setState(1259);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::LR_BRACKET) {
		            		$this->setState(1257);
		            		$this->match(self::LR_BRACKET);
		            		$this->setState(1258);
		            		$this->match(self::RR_BRACKET);
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function scheduleExpression() : Context\ScheduleExpressionContext
		{
		    $localContext = new Context\ScheduleExpressionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 52, self::RULE_scheduleExpression);

		    try {
		        $this->setState(1297);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::AT:
		            	$localContext = new Context\PreciseScheduleContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1263);
		            	$this->match(self::AT);
		            	$this->setState(1264);
		            	$this->timestampValue();
		            	$this->setState(1268);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::PLUS) {
		            		$this->setState(1265);
		            		$this->intervalExpr();
		            		$this->setState(1270);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		            case self::EVERY:
		            	$localContext = new Context\IntervalScheduleContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1271);
		            	$this->match(self::EVERY);
		            	$this->setState(1274);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 111, $this->ctx)) {
		            		case 1:
		            		    $this->setState(1272);
		            		    $this->decimalLiteral();
		            		break;

		            		case 2:
		            		    $this->setState(1273);
		            		    $this->recursiveExpression(0);
		            		break;
		            	}
		            	$this->setState(1276);
		            	$this->intervalType();
		            	$this->setState(1285);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::STARTS) {
		            		$this->setState(1277);
		            		$this->match(self::STARTS);
		            		$this->setState(1278);
		            		$localContext->startTimestamp = $this->timestampValue();
		            		$this->setState(1282);
		            		$this->errorHandler->sync($this);

		            		$_la = $this->input->LA(1);
		            		while ($_la === self::PLUS) {
		            			$this->setState(1279);
		            			$localContext->intervalExpr = $this->intervalExpr();
		            			$localContext->startIntervals[] = $localContext->intervalExpr;
		            			$this->setState(1284);
		            			$this->errorHandler->sync($this);
		            			$_la = $this->input->LA(1);
		            		}
		            	}
		            	$this->setState(1295);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::ENDS) {
		            		$this->setState(1287);
		            		$this->match(self::ENDS);
		            		$this->setState(1288);
		            		$localContext->endTimestamp = $this->timestampValue();
		            		$this->setState(1292);
		            		$this->errorHandler->sync($this);

		            		$_la = $this->input->LA(1);
		            		while ($_la === self::PLUS) {
		            			$this->setState(1289);
		            			$localContext->intervalExpr = $this->intervalExpr();
		            			$localContext->endIntervals[] = $localContext->intervalExpr;
		            			$this->setState(1294);
		            			$this->errorHandler->sync($this);
		            			$_la = $this->input->LA(1);
		            		}
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function timestampValue() : Context\TimestampValueContext
		{
		    $localContext = new Context\TimestampValueContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 54, self::RULE_timestampValue);

		    try {
		        $this->setState(1303);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 117, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1299);
		        	    $this->match(self::CURRENT_TIMESTAMP);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1300);
		        	    $this->stringLiteral();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1301);
		        	    $this->decimalLiteral();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(1302);
		        	    $this->recursiveExpression(0);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function intervalExpr() : Context\IntervalExprContext
		{
		    $localContext = new Context\IntervalExprContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 56, self::RULE_intervalExpr);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1305);
		        $this->match(self::PLUS);
		        $this->setState(1306);
		        $this->match(self::INTERVAL);
		        $this->setState(1309);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 118, $this->ctx)) {
		        	case 1:
		        	    $this->setState(1307);
		        	    $this->decimalLiteral();
		        	break;

		        	case 2:
		        	    $this->setState(1308);
		        	    $this->recursiveExpression(0);
		        	break;
		        }
		        $this->setState(1311);
		        $this->intervalType();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function intervalType() : Context\IntervalTypeContext
		{
		    $localContext = new Context\IntervalTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 58, self::RULE_intervalType);

		    try {
		        $this->setState(1326);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1313);
		            	$this->intervalTypeBase();
		            	break;

		            case self::YEAR:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1314);
		            	$this->match(self::YEAR);
		            	break;

		            case self::YEAR_MONTH:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(1315);
		            	$this->match(self::YEAR_MONTH);
		            	break;

		            case self::DAY_HOUR:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(1316);
		            	$this->match(self::DAY_HOUR);
		            	break;

		            case self::DAY_MINUTE:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(1317);
		            	$this->match(self::DAY_MINUTE);
		            	break;

		            case self::DAY_SECOND:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(1318);
		            	$this->match(self::DAY_SECOND);
		            	break;

		            case self::HOUR_MINUTE:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(1319);
		            	$this->match(self::HOUR_MINUTE);
		            	break;

		            case self::HOUR_SECOND:
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(1320);
		            	$this->match(self::HOUR_SECOND);
		            	break;

		            case self::MINUTE_SECOND:
		            	$this->enterOuterAlt($localContext, 9);
		            	$this->setState(1321);
		            	$this->match(self::MINUTE_SECOND);
		            	break;

		            case self::SECOND_MICROSECOND:
		            	$this->enterOuterAlt($localContext, 10);
		            	$this->setState(1322);
		            	$this->match(self::SECOND_MICROSECOND);
		            	break;

		            case self::MINUTE_MICROSECOND:
		            	$this->enterOuterAlt($localContext, 11);
		            	$this->setState(1323);
		            	$this->match(self::MINUTE_MICROSECOND);
		            	break;

		            case self::HOUR_MICROSECOND:
		            	$this->enterOuterAlt($localContext, 12);
		            	$this->setState(1324);
		            	$this->match(self::HOUR_MICROSECOND);
		            	break;

		            case self::DAY_MICROSECOND:
		            	$this->enterOuterAlt($localContext, 13);
		            	$this->setState(1325);
		            	$this->match(self::DAY_MICROSECOND);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function enableType() : Context\EnableTypeContext
		{
		    $localContext = new Context\EnableTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 60, self::RULE_enableType);

		    try {
		        $this->setState(1333);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 120, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1328);
		        	    $this->match(self::ENABLE);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1329);
		        	    $this->match(self::DISABLE);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1330);
		        	    $this->match(self::DISABLE);
		        	    $this->setState(1331);
		        	    $this->match(self::ON);
		        	    $this->setState(1332);
		        	    $this->match(self::SLAVE);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function indexType() : Context\IndexTypeContext
		{
		    $localContext = new Context\IndexTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 62, self::RULE_indexType);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1335);
		        $this->match(self::USING);
		        $this->setState(1336);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::BTREE || $_la === self::HASH)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function indexOption() : Context\IndexOptionContext
		{
		    $localContext = new Context\IndexOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 64, self::RULE_indexOption);

		    try {
		        $this->setState(1351);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::KEY_BLOCK_SIZE:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1338);
		            	$this->match(self::KEY_BLOCK_SIZE);
		            	$this->setState(1340);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(1339);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(1342);
		            	$this->fileSizeLiteral();
		            	break;

		            case self::USING:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1343);
		            	$this->indexType();
		            	break;

		            case self::WITH:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(1344);
		            	$this->match(self::WITH);
		            	$this->setState(1345);
		            	$this->match(self::PARSER);
		            	$this->setState(1346);
		            	$this->uid();
		            	break;

		            case self::COMMENT:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(1347);
		            	$this->match(self::COMMENT);
		            	$this->setState(1348);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::INVISIBLE:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(1349);
		            	$this->match(self::INVISIBLE);
		            	break;

		            case self::VISIBLE:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(1350);
		            	$this->match(self::VISIBLE);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function procedureParameter() : Context\ProcedureParameterContext
		{
		    $localContext = new Context\ProcedureParameterContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 66, self::RULE_procedureParameter);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1354);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ((((($_la - 71)) & ~0x3f) === 0 && ((1 << ($_la - 71)) & ((1 << (self::IN - 71)) | (1 << (self::INOUT - 71)) | (1 << (self::OUT - 71)))) !== 0)) {
		        	$this->setState(1353);

		        	$localContext->direction = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!((((($_la - 71)) & ~0x3f) === 0 && ((1 << ($_la - 71)) & ((1 << (self::IN - 71)) | (1 << (self::INOUT - 71)) | (1 << (self::OUT - 71)))) !== 0))) {
		        		    $localContext->direction = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(1356);
		        $this->uid();
		        $this->setState(1357);
		        $this->dataType();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function functionParameter() : Context\FunctionParameterContext
		{
		    $localContext = new Context\FunctionParameterContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 68, self::RULE_functionParameter);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1359);
		        $this->uid();
		        $this->setState(1360);
		        $this->dataType();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function routineOption() : Context\RoutineOptionContext
		{
		    $localContext = new Context\RoutineOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 70, self::RULE_routineOption);

		    try {
		        $this->setState(1385);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::COMMENT:
		            	$localContext = new Context\RoutineCommentContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1362);
		            	$this->match(self::COMMENT);
		            	$this->setState(1363);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::LANGUAGE:
		            	$localContext = new Context\RoutineLanguageContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1364);
		            	$this->match(self::LANGUAGE);
		            	$this->setState(1365);
		            	$this->match(self::SQL);
		            	break;

		            case self::DETERMINISTIC:
		            case self::NOT:
		            	$localContext = new Context\RoutineBehaviorContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(1367);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::NOT) {
		            		$this->setState(1366);
		            		$this->match(self::NOT);
		            	}
		            	$this->setState(1369);
		            	$this->match(self::DETERMINISTIC);
		            	break;

		            case self::MODIFIES:
		            case self::READS:
		            case self::CONTAINS:
		            case self::NO:
		            	$localContext = new Context\RoutineDataContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(1380);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::CONTAINS:
		            	    	$this->setState(1370);
		            	    	$this->match(self::CONTAINS);
		            	    	$this->setState(1371);
		            	    	$this->match(self::SQL);
		            	    	break;

		            	    case self::NO:
		            	    	$this->setState(1372);
		            	    	$this->match(self::NO);
		            	    	$this->setState(1373);
		            	    	$this->match(self::SQL);
		            	    	break;

		            	    case self::READS:
		            	    	$this->setState(1374);
		            	    	$this->match(self::READS);
		            	    	$this->setState(1375);
		            	    	$this->match(self::SQL);
		            	    	$this->setState(1376);
		            	    	$this->match(self::DATA);
		            	    	break;

		            	    case self::MODIFIES:
		            	    	$this->setState(1377);
		            	    	$this->match(self::MODIFIES);
		            	    	$this->setState(1378);
		            	    	$this->match(self::SQL);
		            	    	$this->setState(1379);
		            	    	$this->match(self::DATA);
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	break;

		            case self::SQL:
		            	$localContext = new Context\RoutineSecurityContext($localContext);
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(1382);
		            	$this->match(self::SQL);
		            	$this->setState(1383);
		            	$this->match(self::SECURITY);
		            	$this->setState(1384);

		            	$localContext->context = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::DEFINER || $_la === self::INVOKER)) {
		            		    $localContext->context = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function serverOption() : Context\ServerOptionContext
		{
		    $localContext = new Context\ServerOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 72, self::RULE_serverOption);

		    try {
		        $this->setState(1401);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::HOST:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1387);
		            	$this->match(self::HOST);
		            	$this->setState(1388);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::DATABASE:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1389);
		            	$this->match(self::DATABASE);
		            	$this->setState(1390);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::USER:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(1391);
		            	$this->match(self::USER);
		            	$this->setState(1392);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::PASSWORD:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(1393);
		            	$this->match(self::PASSWORD);
		            	$this->setState(1394);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::SOCKET:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(1395);
		            	$this->match(self::SOCKET);
		            	$this->setState(1396);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::OWNER:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(1397);
		            	$this->match(self::OWNER);
		            	$this->setState(1398);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::PORT:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(1399);
		            	$this->match(self::PORT);
		            	$this->setState(1400);
		            	$this->decimalLiteral();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createDefinitions() : Context\CreateDefinitionsContext
		{
		    $localContext = new Context\CreateDefinitionsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 74, self::RULE_createDefinitions);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1403);
		        $this->match(self::LR_BRACKET);
		        $this->setState(1404);
		        $this->createDefinition();
		        $this->setState(1409);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(1405);
		        	$this->match(self::COMMA);
		        	$this->setState(1406);
		        	$this->createDefinition();
		        	$this->setState(1411);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(1412);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createDefinition() : Context\CreateDefinitionContext
		{
		    $localContext = new Context\CreateDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 76, self::RULE_createDefinition);

		    try {
		        $this->setState(1419);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CURRENT:
		            case self::DATABASE:
		            case self::DIAGNOSTICS:
		            case self::LEFT:
		            case self::NUMBER:
		            case self::RIGHT:
		            case self::STACKED:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::COUNT:
		            case self::POSITION:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::TABLES:
		            case self::ROUTINE:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::PRIVILEGES:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::STRING_LITERAL:
		            case self::ID:
		            case self::REVERSE_QUOTE_ID:
		            	$localContext = new Context\ColumnDeclarationContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1414);
		            	$this->uid();
		            	$this->setState(1415);
		            	$this->columnDefinition();
		            	break;

		            case self::CHECK:
		            case self::CONSTRAINT:
		            case self::FOREIGN:
		            case self::PRIMARY:
		            case self::UNIQUE:
		            	$localContext = new Context\ConstraintDeclarationContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1417);
		            	$this->tableConstraint();
		            	break;

		            case self::FULLTEXT:
		            case self::INDEX:
		            case self::KEY:
		            case self::SPATIAL:
		            	$localContext = new Context\IndexDeclarationContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(1418);
		            	$this->indexColumnDefinition();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function columnDefinition() : Context\ColumnDefinitionContext
		{
		    $localContext = new Context\ColumnDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 78, self::RULE_columnDefinition);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1421);
		        $this->dataType();
		        $this->setState(1425);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::AS) | (1 << self::COLLATE) | (1 << self::DEFAULT) | (1 << self::GENERATED))) !== 0) || (((($_la - 82)) & ~0x3f) === 0 && ((1 << ($_la - 82)) & ((1 << (self::KEY - 82)) | (1 << (self::NOT - 82)) | (1 << (self::NULL_LITERAL - 82)) | (1 << (self::ON - 82)) | (1 << (self::PRIMARY - 82)) | (1 << (self::REFERENCES - 82)))) !== 0) || $_la === self::UNIQUE || $_la === self::SERIAL || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COMMENT - 280)))) !== 0) || $_la === self::STORAGE || $_la === self::NULL_SPEC_LITERAL) {
		        	$this->setState(1422);
		        	$this->columnConstraint();
		        	$this->setState(1427);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function columnConstraint() : Context\ColumnConstraintContext
		{
		    $localContext = new Context\ColumnConstraintContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 80, self::RULE_columnConstraint);

		    try {
		        $this->setState(1468);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::NOT:
		            case self::NULL_LITERAL:
		            case self::NULL_SPEC_LITERAL:
		            	$localContext = new Context\NullColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1428);
		            	$this->nullNotnull();
		            	break;

		            case self::DEFAULT:
		            	$localContext = new Context\DefaultColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1429);
		            	$this->match(self::DEFAULT);
		            	$this->setState(1430);
		            	$this->defaultValue();
		            	break;

		            case self::ON:
		            case self::AUTO_INCREMENT:
		            	$localContext = new Context\AutoIncrementColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(1435);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::AUTO_INCREMENT:
		            	    	$this->setState(1431);
		            	    	$this->match(self::AUTO_INCREMENT);
		            	    	break;

		            	    case self::ON:
		            	    	$this->setState(1432);
		            	    	$this->match(self::ON);
		            	    	$this->setState(1433);
		            	    	$this->match(self::UPDATE);
		            	    	$this->setState(1434);
		            	    	$this->currentTimestamp();
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	break;

		            case self::KEY:
		            case self::PRIMARY:
		            	$localContext = new Context\PrimaryKeyColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(1438);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::PRIMARY) {
		            		$this->setState(1437);
		            		$this->match(self::PRIMARY);
		            	}
		            	$this->setState(1440);
		            	$this->match(self::KEY);
		            	break;

		            case self::UNIQUE:
		            	$localContext = new Context\UniqueKeyColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(1441);
		            	$this->match(self::UNIQUE);
		            	$this->setState(1443);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 133, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(1442);
		            		    $this->match(self::KEY);
		            		break;
		            	}
		            	break;

		            case self::COMMENT:
		            	$localContext = new Context\CommentColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(1445);
		            	$this->match(self::COMMENT);
		            	$this->setState(1446);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::COLUMN_FORMAT:
		            	$localContext = new Context\FormatColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(1447);
		            	$this->match(self::COLUMN_FORMAT);
		            	$this->setState(1448);

		            	$localContext->colformat = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::DEFAULT || $_la === self::DYNAMIC || $_la === self::FIXED)) {
		            		    $localContext->colformat = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		            case self::STORAGE:
		            	$localContext = new Context\StorageColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(1449);
		            	$this->match(self::STORAGE);
		            	$this->setState(1450);

		            	$localContext->storageval = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::DEFAULT || $_la === self::DISK || $_la === self::MEMORY)) {
		            		    $localContext->storageval = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		            case self::REFERENCES:
		            	$localContext = new Context\ReferenceColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 9);
		            	$this->setState(1451);
		            	$this->referenceDefinition();
		            	break;

		            case self::COLLATE:
		            	$localContext = new Context\CollateColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 10);
		            	$this->setState(1452);
		            	$this->match(self::COLLATE);
		            	$this->setState(1453);
		            	$this->collationName();
		            	break;

		            case self::AS:
		            case self::GENERATED:
		            	$localContext = new Context\GeneratedColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 11);
		            	$this->setState(1456);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::GENERATED) {
		            		$this->setState(1454);
		            		$this->match(self::GENERATED);
		            		$this->setState(1455);
		            		$this->match(self::ALWAYS);
		            	}
		            	$this->setState(1458);
		            	$this->match(self::AS);
		            	$this->setState(1459);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(1460);
		            	$this->recursiveExpression(0);
		            	$this->setState(1461);
		            	$this->match(self::RR_BRACKET);
		            	$this->setState(1463);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::STORED || $_la === self::VIRTUAL) {
		            		$this->setState(1462);

		            		$_la = $this->input->LA(1);

		            		if (!($_la === self::STORED || $_la === self::VIRTUAL)) {
		            		$this->errorHandler->recoverInline($this);
		            		} else {
		            			if ($this->input->LA(1) === Token::EOF) {
		            			    $this->matchedEOF = true;
		            		    }

		            			$this->errorHandler->reportMatch($this);
		            			$this->consume();
		            		}
		            	}
		            	break;

		            case self::SERIAL:
		            	$localContext = new Context\SerialDefaultColumnConstraintContext($localContext);
		            	$this->enterOuterAlt($localContext, 12);
		            	$this->setState(1465);
		            	$this->match(self::SERIAL);
		            	$this->setState(1466);
		            	$this->match(self::DEFAULT);
		            	$this->setState(1467);
		            	$this->match(self::VALUE);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableConstraint() : Context\TableConstraintContext
		{
		    $localContext = new Context\TableConstraintContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 82, self::RULE_tableConstraint);

		    try {
		        $this->setState(1539);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 153, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\PrimaryKeyTableConstraintContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1474);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(1470);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(1472);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    		$this->setState(1471);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(1476);
		        	    $this->match(self::PRIMARY);
		        	    $this->setState(1477);
		        	    $this->match(self::KEY);
		        	    $this->setState(1479);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    	$this->setState(1478);
		        	    	$localContext->index = $this->uid();
		        	    }
		        	    $this->setState(1482);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::USING) {
		        	    	$this->setState(1481);
		        	    	$this->indexType();
		        	    }
		        	    $this->setState(1484);
		        	    $this->indexColumnNames();
		        	    $this->setState(1488);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
		        	    	$this->setState(1485);
		        	    	$this->indexOption();
		        	    	$this->setState(1490);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\UniqueKeyTableConstraintContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1495);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(1491);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(1493);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    		$this->setState(1492);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(1497);
		        	    $this->match(self::UNIQUE);
		        	    $this->setState(1499);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::INDEX || $_la === self::KEY) {
		        	    	$this->setState(1498);

		        	    	$localContext->indexFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    		    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(1502);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    	$this->setState(1501);
		        	    	$localContext->index = $this->uid();
		        	    }
		        	    $this->setState(1505);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::USING) {
		        	    	$this->setState(1504);
		        	    	$this->indexType();
		        	    }
		        	    $this->setState(1507);
		        	    $this->indexColumnNames();
		        	    $this->setState(1511);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
		        	    	$this->setState(1508);
		        	    	$this->indexOption();
		        	    	$this->setState(1513);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\ForeignKeyTableConstraintContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1518);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(1514);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(1516);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    		$this->setState(1515);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(1520);
		        	    $this->match(self::FOREIGN);
		        	    $this->setState(1521);
		        	    $this->match(self::KEY);
		        	    $this->setState(1523);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    	$this->setState(1522);
		        	    	$localContext->index = $this->uid();
		        	    }
		        	    $this->setState(1525);
		        	    $this->indexColumnNames();
		        	    $this->setState(1526);
		        	    $this->referenceDefinition();
		        	break;

		        	case 4:
		        	    $localContext = new Context\CheckTableConstraintContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(1532);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(1528);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(1530);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    		$this->setState(1529);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(1534);
		        	    $this->match(self::CHECK);
		        	    $this->setState(1535);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(1536);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(1537);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function referenceDefinition() : Context\ReferenceDefinitionContext
		{
		    $localContext = new Context\ReferenceDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 84, self::RULE_referenceDefinition);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1541);
		        $this->match(self::REFERENCES);
		        $this->setState(1542);
		        $this->tableName();
		        $this->setState(1544);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 154, $this->ctx)) {
		            case 1:
		        	    $this->setState(1543);
		        	    $this->indexColumnNames();
		        	break;
		        }
		        $this->setState(1548);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::MATCH) {
		        	$this->setState(1546);
		        	$this->match(self::MATCH);
		        	$this->setState(1547);

		        	$localContext->matchType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::FULL || $_la === self::PARTIAL || $_la === self::SIMPLE)) {
		        		    $localContext->matchType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(1551);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 156, $this->ctx)) {
		            case 1:
		        	    $this->setState(1550);
		        	    $this->referenceAction();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function referenceAction() : Context\ReferenceActionContext
		{
		    $localContext = new Context\ReferenceActionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 86, self::RULE_referenceAction);

		    try {
		        $this->setState(1569);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 159, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1553);
		        	    $this->match(self::ON);
		        	    $this->setState(1554);
		        	    $this->match(self::DELETE);
		        	    $this->setState(1555);
		        	    $localContext->onDelete = $this->referenceControlType();
		        	    $this->setState(1559);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 157, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(1556);
		        	    	    $this->match(self::ON);
		        	    	    $this->setState(1557);
		        	    	    $this->match(self::UPDATE);
		        	    	    $this->setState(1558);
		        	    	    $localContext->onUpdate = $this->referenceControlType();
		        	    	break;
		        	    }
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1561);
		        	    $this->match(self::ON);
		        	    $this->setState(1562);
		        	    $this->match(self::UPDATE);
		        	    $this->setState(1563);
		        	    $localContext->onUpdate = $this->referenceControlType();
		        	    $this->setState(1567);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 158, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(1564);
		        	    	    $this->match(self::ON);
		        	    	    $this->setState(1565);
		        	    	    $this->match(self::DELETE);
		        	    	    $this->setState(1566);
		        	    	    $localContext->onDelete = $this->referenceControlType();
		        	    	break;
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function referenceControlType() : Context\ReferenceControlTypeContext
		{
		    $localContext = new Context\ReferenceControlTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 88, self::RULE_referenceControlType);

		    try {
		        $this->setState(1577);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::RESTRICT:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1571);
		            	$this->match(self::RESTRICT);
		            	break;

		            case self::CASCADE:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1572);
		            	$this->match(self::CASCADE);
		            	break;

		            case self::SET:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(1573);
		            	$this->match(self::SET);
		            	$this->setState(1574);
		            	$this->match(self::NULL_LITERAL);
		            	break;

		            case self::NO:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(1575);
		            	$this->match(self::NO);
		            	$this->setState(1576);
		            	$this->match(self::ACTION);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function indexColumnDefinition() : Context\IndexColumnDefinitionContext
		{
		    $localContext = new Context\IndexColumnDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 90, self::RULE_indexColumnDefinition);

		    try {
		        $this->setState(1607);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::INDEX:
		            case self::KEY:
		            	$localContext = new Context\SimpleIndexDeclarationContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(1579);

		            	$localContext->indexFormat = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::INDEX || $_la === self::KEY)) {
		            		    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(1581);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		            		$this->setState(1580);
		            		$this->uid();
		            	}
		            	$this->setState(1584);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::USING) {
		            		$this->setState(1583);
		            		$this->indexType();
		            	}
		            	$this->setState(1586);
		            	$this->indexColumnNames();
		            	$this->setState(1590);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
		            		$this->setState(1587);
		            		$this->indexOption();
		            		$this->setState(1592);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		            case self::FULLTEXT:
		            case self::SPATIAL:
		            	$localContext = new Context\SpecialIndexDeclarationContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(1593);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::FULLTEXT || $_la === self::SPATIAL)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(1595);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::INDEX || $_la === self::KEY) {
		            		$this->setState(1594);

		            		$localContext->indexFormat = $this->input->LT(1);
		            		$_la = $this->input->LA(1);

		            		if (!($_la === self::INDEX || $_la === self::KEY)) {
		            			    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		            		} else {
		            			if ($this->input->LA(1) === Token::EOF) {
		            			    $this->matchedEOF = true;
		            		    }

		            			$this->errorHandler->reportMatch($this);
		            			$this->consume();
		            		}
		            	}
		            	$this->setState(1598);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		            		$this->setState(1597);
		            		$this->uid();
		            	}
		            	$this->setState(1600);
		            	$this->indexColumnNames();
		            	$this->setState(1604);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
		            		$this->setState(1601);
		            		$this->indexOption();
		            		$this->setState(1606);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableOption() : Context\TableOptionContext
		{
		    $localContext = new Context\TableOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 92, self::RULE_tableOption);

		    try {
		        $this->setState(1753);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 197, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\TableOptionEngineContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1609);
		        	    $this->match(self::ENGINE);
		        	    $this->setState(1611);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1610);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1613);
		        	    $this->engineName();
		        	break;

		        	case 2:
		        	    $localContext = new Context\TableOptionAutoIncrementContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1614);
		        	    $this->match(self::AUTO_INCREMENT);
		        	    $this->setState(1616);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1615);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1618);
		        	    $this->decimalLiteral();
		        	break;

		        	case 3:
		        	    $localContext = new Context\TableOptionAverageContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1619);
		        	    $this->match(self::AVG_ROW_LENGTH);
		        	    $this->setState(1621);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1620);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1623);
		        	    $this->decimalLiteral();
		        	break;

		        	case 4:
		        	    $localContext = new Context\TableOptionCharsetContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(1625);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::DEFAULT) {
		        	    	$this->setState(1624);
		        	    	$this->match(self::DEFAULT);
		        	    }
		        	    $this->setState(1630);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::CHARACTER:
		        	        	$this->setState(1627);
		        	        	$this->match(self::CHARACTER);
		        	        	$this->setState(1628);
		        	        	$this->match(self::SET);
		        	        	break;

		        	        case self::CHARSET:
		        	        	$this->setState(1629);
		        	        	$this->match(self::CHARSET);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	    $this->setState(1633);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1632);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1637);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::BINARY:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        	$this->setState(1635);
		        	        	$this->charsetName();
		        	        	break;

		        	        case self::DEFAULT:
		        	        	$this->setState(1636);
		        	        	$this->match(self::DEFAULT);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 5:
		        	    $localContext = new Context\TableOptionChecksumContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(1639);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::CHECKSUM || $_la === self::PAGE_CHECKSUM)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(1641);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1640);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1643);

		        	    $localContext->boolValue = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		        	    	    $localContext->boolValue = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 6:
		        	    $localContext = new Context\TableOptionCollateContext($localContext);
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(1645);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::DEFAULT) {
		        	    	$this->setState(1644);
		        	    	$this->match(self::DEFAULT);
		        	    }
		        	    $this->setState(1647);
		        	    $this->match(self::COLLATE);
		        	    $this->setState(1649);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1648);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1651);
		        	    $this->collationName();
		        	break;

		        	case 7:
		        	    $localContext = new Context\TableOptionCommentContext($localContext);
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(1652);
		        	    $this->match(self::COMMENT);
		        	    $this->setState(1654);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1653);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1656);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 8:
		        	    $localContext = new Context\TableOptionCompressionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(1657);
		        	    $this->match(self::COMPRESSION);
		        	    $this->setState(1659);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1658);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1661);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::STRING_LITERAL || $_la === self::ID)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 9:
		        	    $localContext = new Context\TableOptionConnectionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(1662);
		        	    $this->match(self::CONNECTION);
		        	    $this->setState(1664);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1663);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1666);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 10:
		        	    $localContext = new Context\TableOptionDataDirectoryContext($localContext);
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(1667);
		        	    $this->match(self::DATA);
		        	    $this->setState(1668);
		        	    $this->match(self::DIRECTORY);
		        	    $this->setState(1670);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1669);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1672);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 11:
		        	    $localContext = new Context\TableOptionDelayContext($localContext);
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(1673);
		        	    $this->match(self::DELAY_KEY_WRITE);
		        	    $this->setState(1675);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1674);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1677);

		        	    $localContext->boolValue = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		        	    	    $localContext->boolValue = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 12:
		        	    $localContext = new Context\TableOptionEncryptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(1678);
		        	    $this->match(self::ENCRYPTION);
		        	    $this->setState(1680);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1679);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1682);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 13:
		        	    $localContext = new Context\TableOptionIndexDirectoryContext($localContext);
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(1683);
		        	    $this->match(self::INDEX);
		        	    $this->setState(1684);
		        	    $this->match(self::DIRECTORY);
		        	    $this->setState(1686);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1685);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1688);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 14:
		        	    $localContext = new Context\TableOptionInsertMethodContext($localContext);
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(1689);
		        	    $this->match(self::INSERT_METHOD);
		        	    $this->setState(1691);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1690);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1693);

		        	    $localContext->insertMethod = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::FIRST || $_la === self::LAST || $_la === self::NO)) {
		        	    	    $localContext->insertMethod = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 15:
		        	    $localContext = new Context\TableOptionKeyBlockSizeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(1694);
		        	    $this->match(self::KEY_BLOCK_SIZE);
		        	    $this->setState(1696);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1695);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1698);
		        	    $this->fileSizeLiteral();
		        	break;

		        	case 16:
		        	    $localContext = new Context\TableOptionMaxRowsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 16);
		        	    $this->setState(1699);
		        	    $this->match(self::MAX_ROWS);
		        	    $this->setState(1701);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1700);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1703);
		        	    $this->decimalLiteral();
		        	break;

		        	case 17:
		        	    $localContext = new Context\TableOptionMinRowsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 17);
		        	    $this->setState(1704);
		        	    $this->match(self::MIN_ROWS);
		        	    $this->setState(1706);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1705);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1708);
		        	    $this->decimalLiteral();
		        	break;

		        	case 18:
		        	    $localContext = new Context\TableOptionPackKeysContext($localContext);
		        	    $this->enterOuterAlt($localContext, 18);
		        	    $this->setState(1709);
		        	    $this->match(self::PACK_KEYS);
		        	    $this->setState(1711);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1710);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1713);

		        	    $localContext->extBoolValue = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DEFAULT || $_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		        	    	    $localContext->extBoolValue = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 19:
		        	    $localContext = new Context\TableOptionPasswordContext($localContext);
		        	    $this->enterOuterAlt($localContext, 19);
		        	    $this->setState(1714);
		        	    $this->match(self::PASSWORD);
		        	    $this->setState(1716);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1715);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1718);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 20:
		        	    $localContext = new Context\TableOptionRowFormatContext($localContext);
		        	    $this->enterOuterAlt($localContext, 20);
		        	    $this->setState(1719);
		        	    $this->match(self::ROW_FORMAT);
		        	    $this->setState(1721);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1720);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1723);

		        	    $localContext->rowFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DEFAULT || (((($_la - 307)) & ~0x3f) === 0 && ((1 << ($_la - 307)) & ((1 << (self::COMPACT - 307)) | (1 << (self::COMPRESSED - 307)) | (1 << (self::DYNAMIC - 307)) | (1 << (self::FIXED - 307)))) !== 0) || $_la === self::REDUNDANT)) {
		        	    	    $localContext->rowFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 21:
		        	    $localContext = new Context\TableOptionRecalculationContext($localContext);
		        	    $this->enterOuterAlt($localContext, 21);
		        	    $this->setState(1724);
		        	    $this->match(self::STATS_AUTO_RECALC);
		        	    $this->setState(1726);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1725);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1728);

		        	    $localContext->extBoolValue = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DEFAULT || $_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		        	    	    $localContext->extBoolValue = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 22:
		        	    $localContext = new Context\TableOptionPersistentContext($localContext);
		        	    $this->enterOuterAlt($localContext, 22);
		        	    $this->setState(1729);
		        	    $this->match(self::STATS_PERSISTENT);
		        	    $this->setState(1731);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1730);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1733);

		        	    $localContext->extBoolValue = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DEFAULT || $_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		        	    	    $localContext->extBoolValue = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 23:
		        	    $localContext = new Context\TableOptionSamplePageContext($localContext);
		        	    $this->enterOuterAlt($localContext, 23);
		        	    $this->setState(1734);
		        	    $this->match(self::STATS_SAMPLE_PAGES);
		        	    $this->setState(1736);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1735);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1738);
		        	    $this->decimalLiteral();
		        	break;

		        	case 24:
		        	    $localContext = new Context\TableOptionTablespaceContext($localContext);
		        	    $this->enterOuterAlt($localContext, 24);
		        	    $this->setState(1739);
		        	    $this->match(self::TABLESPACE);
		        	    $this->setState(1740);
		        	    $this->uid();
		        	    $this->setState(1742);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 195, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(1741);
		        	    	    $this->tablespaceStorage();
		        	    	break;
		        	    }
		        	break;

		        	case 25:
		        	    $localContext = new Context\TableOptionTablespaceContext($localContext);
		        	    $this->enterOuterAlt($localContext, 25);
		        	    $this->setState(1744);
		        	    $this->tablespaceStorage();
		        	break;

		        	case 26:
		        	    $localContext = new Context\TableOptionUnionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 26);
		        	    $this->setState(1745);
		        	    $this->match(self::UNION);
		        	    $this->setState(1747);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(1746);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(1749);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(1750);
		        	    $this->tables();
		        	    $this->setState(1751);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tablespaceStorage() : Context\TablespaceStorageContext
		{
		    $localContext = new Context\TablespaceStorageContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 94, self::RULE_tablespaceStorage);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1755);
		        $this->match(self::STORAGE);
		        $this->setState(1756);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::DEFAULT || $_la === self::DISK || $_la === self::MEMORY)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function partitionDefinitions() : Context\PartitionDefinitionsContext
		{
		    $localContext = new Context\PartitionDefinitionsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 96, self::RULE_partitionDefinitions);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1758);
		        $this->match(self::PARTITION);
		        $this->setState(1759);
		        $this->match(self::BY);
		        $this->setState(1760);
		        $this->partitionFunctionDefinition();
		        $this->setState(1763);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITIONS) {
		        	$this->setState(1761);
		        	$this->match(self::PARTITIONS);
		        	$this->setState(1762);
		        	$localContext->count = $this->decimalLiteral();
		        }
		        $this->setState(1772);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::SUBPARTITION) {
		        	$this->setState(1765);
		        	$this->match(self::SUBPARTITION);
		        	$this->setState(1766);
		        	$this->match(self::BY);
		        	$this->setState(1767);
		        	$this->subpartitionFunctionDefinition();
		        	$this->setState(1770);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::SUBPARTITIONS) {
		        		$this->setState(1768);
		        		$this->match(self::SUBPARTITIONS);
		        		$this->setState(1769);
		        		$localContext->subCount = $this->decimalLiteral();
		        	}
		        }
		        $this->setState(1785);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 202, $this->ctx)) {
		            case 1:
		        	    $this->setState(1774);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(1775);
		        	    $this->partitionDefinition();
		        	    $this->setState(1780);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(1776);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(1777);
		        	    	$this->partitionDefinition();
		        	    	$this->setState(1782);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(1783);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function partitionFunctionDefinition() : Context\PartitionFunctionDefinitionContext
		{
		    $localContext = new Context\PartitionFunctionDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 98, self::RULE_partitionFunctionDefinition);

		    try {
		        $this->setState(1832);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 208, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\PartitionFunctionHashContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1788);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LINEAR) {
		        	    	$this->setState(1787);
		        	    	$this->match(self::LINEAR);
		        	    }
		        	    $this->setState(1790);
		        	    $this->match(self::HASH);
		        	    $this->setState(1791);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(1792);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(1793);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 2:
		        	    $localContext = new Context\PartitionFunctionKeyContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1796);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LINEAR) {
		        	    	$this->setState(1795);
		        	    	$this->match(self::LINEAR);
		        	    }
		        	    $this->setState(1798);
		        	    $this->match(self::KEY);
		        	    $this->setState(1802);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ALGORITHM) {
		        	    	$this->setState(1799);
		        	    	$this->match(self::ALGORITHM);
		        	    	$this->setState(1800);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    	$this->setState(1801);

		        	    	$localContext->algType = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::ONE_DECIMAL || $_la === self::TWO_DECIMAL)) {
		        	    		    $localContext->algType = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(1804);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(1805);
		        	    $this->uidList();
		        	    $this->setState(1806);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 3:
		        	    $localContext = new Context\PartitionFunctionRangeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1808);
		        	    $this->match(self::RANGE);
		        	    $this->setState(1818);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::LR_BRACKET:
		        	        	$this->setState(1809);
		        	        	$this->match(self::LR_BRACKET);
		        	        	$this->setState(1810);
		        	        	$this->recursiveExpression(0);
		        	        	$this->setState(1811);
		        	        	$this->match(self::RR_BRACKET);
		        	        	break;

		        	        case self::COLUMNS:
		        	        	$this->setState(1813);
		        	        	$this->match(self::COLUMNS);
		        	        	$this->setState(1814);
		        	        	$this->match(self::LR_BRACKET);
		        	        	$this->setState(1815);
		        	        	$this->uidList();
		        	        	$this->setState(1816);
		        	        	$this->match(self::RR_BRACKET);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 4:
		        	    $localContext = new Context\PartitionFunctionListContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(1820);
		        	    $this->match(self::LIST);
		        	    $this->setState(1830);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::LR_BRACKET:
		        	        	$this->setState(1821);
		        	        	$this->match(self::LR_BRACKET);
		        	        	$this->setState(1822);
		        	        	$this->recursiveExpression(0);
		        	        	$this->setState(1823);
		        	        	$this->match(self::RR_BRACKET);
		        	        	break;

		        	        case self::COLUMNS:
		        	        	$this->setState(1825);
		        	        	$this->match(self::COLUMNS);
		        	        	$this->setState(1826);
		        	        	$this->match(self::LR_BRACKET);
		        	        	$this->setState(1827);
		        	        	$this->uidList();
		        	        	$this->setState(1828);
		        	        	$this->match(self::RR_BRACKET);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function subpartitionFunctionDefinition() : Context\SubpartitionFunctionDefinitionContext
		{
		    $localContext = new Context\SubpartitionFunctionDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 100, self::RULE_subpartitionFunctionDefinition);

		    try {
		        $this->setState(1855);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 212, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SubPartitionFunctionHashContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1835);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LINEAR) {
		        	    	$this->setState(1834);
		        	    	$this->match(self::LINEAR);
		        	    }
		        	    $this->setState(1837);
		        	    $this->match(self::HASH);
		        	    $this->setState(1838);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(1839);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(1840);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 2:
		        	    $localContext = new Context\SubPartitionFunctionKeyContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1843);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LINEAR) {
		        	    	$this->setState(1842);
		        	    	$this->match(self::LINEAR);
		        	    }
		        	    $this->setState(1845);
		        	    $this->match(self::KEY);
		        	    $this->setState(1849);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ALGORITHM) {
		        	    	$this->setState(1846);
		        	    	$this->match(self::ALGORITHM);
		        	    	$this->setState(1847);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    	$this->setState(1848);

		        	    	$localContext->algType = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::ONE_DECIMAL || $_la === self::TWO_DECIMAL)) {
		        	    		    $localContext->algType = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(1851);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(1852);
		        	    $this->uidList();
		        	    $this->setState(1853);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function partitionDefinition() : Context\PartitionDefinitionContext
		{
		    $localContext = new Context\PartitionDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 102, self::RULE_partitionDefinition);

		    try {
		        $this->setState(1988);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 231, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\PartitionComparisionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1857);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(1858);
		        	    $this->uid();
		        	    $this->setState(1859);
		        	    $this->match(self::VALUES);
		        	    $this->setState(1860);
		        	    $this->match(self::LESS);
		        	    $this->setState(1861);
		        	    $this->match(self::THAN);
		        	    $this->setState(1862);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(1863);
		        	    $this->partitionDefinerAtom();
		        	    $this->setState(1868);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(1864);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(1865);
		        	    	$this->partitionDefinerAtom();
		        	    	$this->setState(1870);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(1871);
		        	    $this->match(self::RR_BRACKET);
		        	    $this->setState(1875);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::INDEX || (((($_la - 305)) & ~0x3f) === 0 && ((1 << ($_la - 305)) & ((1 << (self::COMMENT - 305)) | (1 << (self::DATA - 305)) | (1 << (self::ENGINE - 305)))) !== 0) || (((($_la - 428)) & ~0x3f) === 0 && ((1 << ($_la - 428)) & ((1 << (self::MAX_ROWS - 428)) | (1 << (self::MIN_ROWS - 428)) | (1 << (self::NODEGROUP - 428)))) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
		        	    	$this->setState(1872);
		        	    	$this->partitionOption();
		        	    	$this->setState(1877);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(1886);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::SUBPARTITION) {
		        	    	$this->setState(1878);
		        	    	$this->subpartitionDefinition();
		        	    	$this->setState(1883);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 215, $this->ctx);

		        	    	while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    		if ($alt === 1) {
		        	    			$this->setState(1879);
		        	    			$this->match(self::COMMA);
		        	    			$this->setState(1880);
		        	    			$this->subpartitionDefinition(); 
		        	    		}

		        	    		$this->setState(1885);
		        	    		$this->errorHandler->sync($this);

		        	    		$alt = $this->getInterpreter()->adaptivePredict($this->input, 215, $this->ctx);
		        	    	}
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\PartitionComparisionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1888);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(1889);
		        	    $this->uid();
		        	    $this->setState(1890);
		        	    $this->match(self::VALUES);
		        	    $this->setState(1891);
		        	    $this->match(self::LESS);
		        	    $this->setState(1892);
		        	    $this->match(self::THAN);
		        	    $this->setState(1893);
		        	    $this->partitionDefinerAtom();
		        	    $this->setState(1897);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::INDEX || (((($_la - 305)) & ~0x3f) === 0 && ((1 << ($_la - 305)) & ((1 << (self::COMMENT - 305)) | (1 << (self::DATA - 305)) | (1 << (self::ENGINE - 305)))) !== 0) || (((($_la - 428)) & ~0x3f) === 0 && ((1 << ($_la - 428)) & ((1 << (self::MAX_ROWS - 428)) | (1 << (self::MIN_ROWS - 428)) | (1 << (self::NODEGROUP - 428)))) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
		        	    	$this->setState(1894);
		        	    	$this->partitionOption();
		        	    	$this->setState(1899);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(1908);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::SUBPARTITION) {
		        	    	$this->setState(1900);
		        	    	$this->subpartitionDefinition();
		        	    	$this->setState(1905);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 218, $this->ctx);

		        	    	while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    		if ($alt === 1) {
		        	    			$this->setState(1901);
		        	    			$this->match(self::COMMA);
		        	    			$this->setState(1902);
		        	    			$this->subpartitionDefinition(); 
		        	    		}

		        	    		$this->setState(1907);
		        	    		$this->errorHandler->sync($this);

		        	    		$alt = $this->getInterpreter()->adaptivePredict($this->input, 218, $this->ctx);
		        	    	}
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\PartitionListAtomContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1910);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(1911);
		        	    $this->uid();
		        	    $this->setState(1912);
		        	    $this->match(self::VALUES);
		        	    $this->setState(1913);
		        	    $this->match(self::IN);
		        	    $this->setState(1914);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(1915);
		        	    $this->partitionDefinerAtom();
		        	    $this->setState(1920);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(1916);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(1917);
		        	    	$this->partitionDefinerAtom();
		        	    	$this->setState(1922);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(1923);
		        	    $this->match(self::RR_BRACKET);
		        	    $this->setState(1927);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::INDEX || (((($_la - 305)) & ~0x3f) === 0 && ((1 << ($_la - 305)) & ((1 << (self::COMMENT - 305)) | (1 << (self::DATA - 305)) | (1 << (self::ENGINE - 305)))) !== 0) || (((($_la - 428)) & ~0x3f) === 0 && ((1 << ($_la - 428)) & ((1 << (self::MAX_ROWS - 428)) | (1 << (self::MIN_ROWS - 428)) | (1 << (self::NODEGROUP - 428)))) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
		        	    	$this->setState(1924);
		        	    	$this->partitionOption();
		        	    	$this->setState(1929);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(1938);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::SUBPARTITION) {
		        	    	$this->setState(1930);
		        	    	$this->subpartitionDefinition();
		        	    	$this->setState(1935);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 222, $this->ctx);

		        	    	while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    		if ($alt === 1) {
		        	    			$this->setState(1931);
		        	    			$this->match(self::COMMA);
		        	    			$this->setState(1932);
		        	    			$this->subpartitionDefinition(); 
		        	    		}

		        	    		$this->setState(1937);
		        	    		$this->errorHandler->sync($this);

		        	    		$alt = $this->getInterpreter()->adaptivePredict($this->input, 222, $this->ctx);
		        	    	}
		        	    }
		        	break;

		        	case 4:
		        	    $localContext = new Context\PartitionListVectorContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(1940);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(1941);
		        	    $this->uid();
		        	    $this->setState(1942);
		        	    $this->match(self::VALUES);
		        	    $this->setState(1943);
		        	    $this->match(self::IN);
		        	    $this->setState(1944);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(1945);
		        	    $this->partitionDefinerVector();
		        	    $this->setState(1950);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(1946);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(1947);
		        	    	$this->partitionDefinerVector();
		        	    	$this->setState(1952);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(1953);
		        	    $this->match(self::RR_BRACKET);
		        	    $this->setState(1957);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::INDEX || (((($_la - 305)) & ~0x3f) === 0 && ((1 << ($_la - 305)) & ((1 << (self::COMMENT - 305)) | (1 << (self::DATA - 305)) | (1 << (self::ENGINE - 305)))) !== 0) || (((($_la - 428)) & ~0x3f) === 0 && ((1 << ($_la - 428)) & ((1 << (self::MAX_ROWS - 428)) | (1 << (self::MIN_ROWS - 428)) | (1 << (self::NODEGROUP - 428)))) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
		        	    	$this->setState(1954);
		        	    	$this->partitionOption();
		        	    	$this->setState(1959);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(1968);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::SUBPARTITION) {
		        	    	$this->setState(1960);
		        	    	$this->subpartitionDefinition();
		        	    	$this->setState(1965);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 226, $this->ctx);

		        	    	while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    		if ($alt === 1) {
		        	    			$this->setState(1961);
		        	    			$this->match(self::COMMA);
		        	    			$this->setState(1962);
		        	    			$this->subpartitionDefinition(); 
		        	    		}

		        	    		$this->setState(1967);
		        	    		$this->errorHandler->sync($this);

		        	    		$alt = $this->getInterpreter()->adaptivePredict($this->input, 226, $this->ctx);
		        	    	}
		        	    }
		        	break;

		        	case 5:
		        	    $localContext = new Context\PartitionSimpleContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(1970);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(1971);
		        	    $this->uid();
		        	    $this->setState(1975);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::INDEX || (((($_la - 305)) & ~0x3f) === 0 && ((1 << ($_la - 305)) & ((1 << (self::COMMENT - 305)) | (1 << (self::DATA - 305)) | (1 << (self::ENGINE - 305)))) !== 0) || (((($_la - 428)) & ~0x3f) === 0 && ((1 << ($_la - 428)) & ((1 << (self::MAX_ROWS - 428)) | (1 << (self::MIN_ROWS - 428)) | (1 << (self::NODEGROUP - 428)))) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
		        	    	$this->setState(1972);
		        	    	$this->partitionOption();
		        	    	$this->setState(1977);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(1986);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::SUBPARTITION) {
		        	    	$this->setState(1978);
		        	    	$this->subpartitionDefinition();
		        	    	$this->setState(1983);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 229, $this->ctx);

		        	    	while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    		if ($alt === 1) {
		        	    			$this->setState(1979);
		        	    			$this->match(self::COMMA);
		        	    			$this->setState(1980);
		        	    			$this->subpartitionDefinition(); 
		        	    		}

		        	    		$this->setState(1985);
		        	    		$this->errorHandler->sync($this);

		        	    		$alt = $this->getInterpreter()->adaptivePredict($this->input, 229, $this->ctx);
		        	    	}
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function partitionDefinerAtom() : Context\PartitionDefinerAtomContext
		{
		    $localContext = new Context\PartitionDefinerAtomContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 104, self::RULE_partitionDefinerAtom);

		    try {
		        $this->setState(1993);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 232, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(1990);
		        	    $this->constant();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(1991);
		        	    $this->recursiveExpression(0);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(1992);
		        	    $this->match(self::MAXVALUE);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function partitionDefinerVector() : Context\PartitionDefinerVectorContext
		{
		    $localContext = new Context\PartitionDefinerVectorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 106, self::RULE_partitionDefinerVector);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(1995);
		        $this->match(self::LR_BRACKET);
		        $this->setState(1996);
		        $this->partitionDefinerAtom();
		        $this->setState(1999); 
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        do {
		        	$this->setState(1997);
		        	$this->match(self::COMMA);
		        	$this->setState(1998);
		        	$this->partitionDefinerAtom();
		        	$this->setState(2001); 
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        } while ($_la === self::COMMA);
		        $this->setState(2003);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function subpartitionDefinition() : Context\SubpartitionDefinitionContext
		{
		    $localContext = new Context\SubpartitionDefinitionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 108, self::RULE_subpartitionDefinition);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2005);
		        $this->match(self::SUBPARTITION);
		        $this->setState(2006);
		        $this->uid();
		        $this->setState(2010);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::INDEX || (((($_la - 305)) & ~0x3f) === 0 && ((1 << ($_la - 305)) & ((1 << (self::COMMENT - 305)) | (1 << (self::DATA - 305)) | (1 << (self::ENGINE - 305)))) !== 0) || (((($_la - 428)) & ~0x3f) === 0 && ((1 << ($_la - 428)) & ((1 << (self::MAX_ROWS - 428)) | (1 << (self::MIN_ROWS - 428)) | (1 << (self::NODEGROUP - 428)))) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
		        	$this->setState(2007);
		        	$this->partitionOption();
		        	$this->setState(2012);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function partitionOption() : Context\PartitionOptionContext
		{
		    $localContext = new Context\PartitionOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 110, self::RULE_partitionOption);

		    try {
		        $this->setState(2058);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ENGINE:
		            case self::STORAGE:
		            	$localContext = new Context\PartitionOptionEngineContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(2014);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::STORAGE) {
		            		$this->setState(2013);
		            		$this->match(self::STORAGE);
		            	}
		            	$this->setState(2016);
		            	$this->match(self::ENGINE);
		            	$this->setState(2018);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2017);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2020);
		            	$this->engineName();
		            	break;

		            case self::COMMENT:
		            	$localContext = new Context\PartitionOptionCommentContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(2021);
		            	$this->match(self::COMMENT);
		            	$this->setState(2023);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2022);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2025);
		            	$localContext->comment = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::DATA:
		            	$localContext = new Context\PartitionOptionDataDirectoryContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(2026);
		            	$this->match(self::DATA);
		            	$this->setState(2027);
		            	$this->match(self::DIRECTORY);
		            	$this->setState(2029);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2028);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2031);
		            	$localContext->dataDirectory = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::INDEX:
		            	$localContext = new Context\PartitionOptionIndexDirectoryContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(2032);
		            	$this->match(self::INDEX);
		            	$this->setState(2033);
		            	$this->match(self::DIRECTORY);
		            	$this->setState(2035);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2034);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2037);
		            	$localContext->indexDirectory = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::MAX_ROWS:
		            	$localContext = new Context\PartitionOptionMaxRowsContext($localContext);
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(2038);
		            	$this->match(self::MAX_ROWS);
		            	$this->setState(2040);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2039);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2042);
		            	$localContext->maxRows = $this->decimalLiteral();
		            	break;

		            case self::MIN_ROWS:
		            	$localContext = new Context\PartitionOptionMinRowsContext($localContext);
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(2043);
		            	$this->match(self::MIN_ROWS);
		            	$this->setState(2045);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2044);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2047);
		            	$localContext->minRows = $this->decimalLiteral();
		            	break;

		            case self::TABLESPACE:
		            	$localContext = new Context\PartitionOptionTablespaceContext($localContext);
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(2048);
		            	$this->match(self::TABLESPACE);
		            	$this->setState(2050);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2049);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2052);
		            	$localContext->tablespace = $this->uid();
		            	break;

		            case self::NODEGROUP:
		            	$localContext = new Context\PartitionOptionNodeGroupContext($localContext);
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(2053);
		            	$this->match(self::NODEGROUP);
		            	$this->setState(2055);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::EQUAL_SYMBOL) {
		            		$this->setState(2054);
		            		$this->match(self::EQUAL_SYMBOL);
		            	}
		            	$this->setState(2057);
		            	$localContext->nodegroup = $this->uid();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterDatabase() : Context\AlterDatabaseContext
		{
		    $localContext = new Context\AlterDatabaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 112, self::RULE_alterDatabase);

		    try {
		        $this->setState(2078);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 247, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\AlterSimpleDatabaseContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(2060);
		        	    $this->match(self::ALTER);
		        	    $this->setState(2061);

		        	    $localContext->dbFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DATABASE || $_la === self::SCHEMA)) {
		        	    	    $localContext->dbFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(2063);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 245, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(2062);
		        	    	    $this->uid();
		        	    	break;
		        	    }
		        	    $this->setState(2066); 
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    do {
		        	    	$this->setState(2065);
		        	    	$this->createDatabaseOption();
		        	    	$this->setState(2068); 
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    } while (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CHARACTER) | (1 << self::COLLATE) | (1 << self::DEFAULT))) !== 0) || $_la === self::CHARSET);
		        	break;

		        	case 2:
		        	    $localContext = new Context\AlterUpgradeNameContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(2070);
		        	    $this->match(self::ALTER);
		        	    $this->setState(2071);

		        	    $localContext->dbFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DATABASE || $_la === self::SCHEMA)) {
		        	    	    $localContext->dbFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(2072);
		        	    $this->uid();
		        	    $this->setState(2073);
		        	    $this->match(self::UPGRADE);
		        	    $this->setState(2074);
		        	    $this->match(self::DATA);
		        	    $this->setState(2075);
		        	    $this->match(self::DIRECTORY);
		        	    $this->setState(2076);
		        	    $this->match(self::NAME);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterEvent() : Context\AlterEventContext
		{
		    $localContext = new Context\AlterEventContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 114, self::RULE_alterEvent);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2080);
		        $this->match(self::ALTER);
		        $this->setState(2082);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFINER) {
		        	$this->setState(2081);
		        	$this->ownerStatement();
		        }
		        $this->setState(2084);
		        $this->match(self::EVENT);
		        $this->setState(2085);
		        $this->fullId();
		        $this->setState(2089);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 249, $this->ctx)) {
		            case 1:
		        	    $this->setState(2086);
		        	    $this->match(self::ON);
		        	    $this->setState(2087);
		        	    $this->match(self::SCHEDULE);
		        	    $this->setState(2088);
		        	    $this->scheduleExpression();
		        	break;
		        }
		        $this->setState(2097);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ON) {
		        	$this->setState(2091);
		        	$this->match(self::ON);
		        	$this->setState(2092);
		        	$this->match(self::COMPLETION);
		        	$this->setState(2094);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::NOT) {
		        		$this->setState(2093);
		        		$this->match(self::NOT);
		        	}
		        	$this->setState(2096);
		        	$this->match(self::PRESERVE);
		        }
		        $this->setState(2102);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 252, $this->ctx)) {
		            case 1:
		        	    $this->setState(2099);
		        	    $this->match(self::RENAME);
		        	    $this->setState(2100);
		        	    $this->match(self::TO);
		        	    $this->setState(2101);
		        	    $this->fullId();
		        	break;
		        }
		        $this->setState(2105);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DISABLE || $_la === self::ENABLE) {
		        	$this->setState(2104);
		        	$this->enableType();
		        }
		        $this->setState(2109);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::COMMENT) {
		        	$this->setState(2107);
		        	$this->match(self::COMMENT);
		        	$this->setState(2108);
		        	$this->match(self::STRING_LITERAL);
		        }
		        $this->setState(2113);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 255, $this->ctx)) {
		            case 1:
		        	    $this->setState(2111);
		        	    $this->match(self::DO);
		        	    $this->setState(2112);
		        	    $this->routineBody();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterFunction() : Context\AlterFunctionContext
		{
		    $localContext = new Context\AlterFunctionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 116, self::RULE_alterFunction);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2115);
		        $this->match(self::ALTER);
		        $this->setState(2116);
		        $this->match(self::FUNCTION);
		        $this->setState(2117);
		        $this->fullId();
		        $this->setState(2121);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::DETERMINISTIC || (((($_la - 100)) & ~0x3f) === 0 && ((1 << ($_la - 100)) & ((1 << (self::MODIFIES - 100)) | (1 << (self::NOT - 100)) | (1 << (self::READS - 100)) | (1 << (self::SQL - 100)))) !== 0) || $_la === self::COMMENT || $_la === self::CONTAINS || $_la === self::LANGUAGE || $_la === self::NO) {
		        	$this->setState(2118);
		        	$this->routineOption();
		        	$this->setState(2123);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterInstance() : Context\AlterInstanceContext
		{
		    $localContext = new Context\AlterInstanceContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 118, self::RULE_alterInstance);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2124);
		        $this->match(self::ALTER);
		        $this->setState(2125);
		        $this->match(self::INSTANCE);
		        $this->setState(2126);
		        $this->match(self::ROTATE);
		        $this->setState(2127);
		        $this->match(self::INNODB);
		        $this->setState(2128);
		        $this->match(self::MASTER);
		        $this->setState(2129);
		        $this->match(self::KEY);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterLogfileGroup() : Context\AlterLogfileGroupContext
		{
		    $localContext = new Context\AlterLogfileGroupContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 120, self::RULE_alterLogfileGroup);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2131);
		        $this->match(self::ALTER);
		        $this->setState(2132);
		        $this->match(self::LOGFILE);
		        $this->setState(2133);
		        $this->match(self::GROUP);
		        $this->setState(2134);
		        $this->uid();
		        $this->setState(2135);
		        $this->match(self::ADD);
		        $this->setState(2136);
		        $this->match(self::UNDOFILE);
		        $this->setState(2137);
		        $this->match(self::STRING_LITERAL);
		        $this->setState(2143);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::INITIAL_SIZE) {
		        	$this->setState(2138);
		        	$this->match(self::INITIAL_SIZE);
		        	$this->setState(2140);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(2139);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(2142);
		        	$this->fileSizeLiteral();
		        }
		        $this->setState(2146);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WAIT) {
		        	$this->setState(2145);
		        	$this->match(self::WAIT);
		        }
		        $this->setState(2148);
		        $this->match(self::ENGINE);
		        $this->setState(2150);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EQUAL_SYMBOL) {
		        	$this->setState(2149);
		        	$this->match(self::EQUAL_SYMBOL);
		        }
		        $this->setState(2152);
		        $this->engineName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterProcedure() : Context\AlterProcedureContext
		{
		    $localContext = new Context\AlterProcedureContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 122, self::RULE_alterProcedure);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2154);
		        $this->match(self::ALTER);
		        $this->setState(2155);
		        $this->match(self::PROCEDURE);
		        $this->setState(2156);
		        $this->fullId();
		        $this->setState(2160);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::DETERMINISTIC || (((($_la - 100)) & ~0x3f) === 0 && ((1 << ($_la - 100)) & ((1 << (self::MODIFIES - 100)) | (1 << (self::NOT - 100)) | (1 << (self::READS - 100)) | (1 << (self::SQL - 100)))) !== 0) || $_la === self::COMMENT || $_la === self::CONTAINS || $_la === self::LANGUAGE || $_la === self::NO) {
		        	$this->setState(2157);
		        	$this->routineOption();
		        	$this->setState(2162);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterServer() : Context\AlterServerContext
		{
		    $localContext = new Context\AlterServerContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 124, self::RULE_alterServer);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2163);
		        $this->match(self::ALTER);
		        $this->setState(2164);
		        $this->match(self::SERVER);
		        $this->setState(2165);
		        $this->uid();
		        $this->setState(2166);
		        $this->match(self::OPTIONS);
		        $this->setState(2167);
		        $this->match(self::LR_BRACKET);
		        $this->setState(2168);
		        $this->serverOption();
		        $this->setState(2173);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(2169);
		        	$this->match(self::COMMA);
		        	$this->setState(2170);
		        	$this->serverOption();
		        	$this->setState(2175);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(2176);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterTable() : Context\AlterTableContext
		{
		    $localContext = new Context\AlterTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 126, self::RULE_alterTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2178);
		        $this->match(self::ALTER);
		        $this->setState(2180);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::OFFLINE || $_la === self::ONLINE) {
		        	$this->setState(2179);

		        	$localContext->intimeAction = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::OFFLINE || $_la === self::ONLINE)) {
		        		    $localContext->intimeAction = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(2183);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(2182);
		        	$this->match(self::IGNORE);
		        }
		        $this->setState(2185);
		        $this->match(self::TABLE);
		        $this->setState(2186);
		        $this->tableName();
		        $this->setState(2195);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 266, $this->ctx)) {
		            case 1:
		        	    $this->setState(2187);
		        	    $this->alterSpecification();
		        	    $this->setState(2192);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(2188);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(2189);
		        	    	$this->alterSpecification();
		        	    	$this->setState(2194);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		        $this->setState(2198);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITION) {
		        	$this->setState(2197);
		        	$this->partitionDefinitions();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterTablespace() : Context\AlterTablespaceContext
		{
		    $localContext = new Context\AlterTablespaceContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 128, self::RULE_alterTablespace);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2200);
		        $this->match(self::ALTER);
		        $this->setState(2201);
		        $this->match(self::TABLESPACE);
		        $this->setState(2202);
		        $this->uid();
		        $this->setState(2203);

		        $localContext->objectAction = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::ADD || $_la === self::DROP)) {
		        	    $localContext->objectAction = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(2204);
		        $this->match(self::DATAFILE);
		        $this->setState(2205);
		        $this->match(self::STRING_LITERAL);
		        $this->setState(2209);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::INITIAL_SIZE) {
		        	$this->setState(2206);
		        	$this->match(self::INITIAL_SIZE);
		        	$this->setState(2207);
		        	$this->match(self::EQUAL_SYMBOL);
		        	$this->setState(2208);
		        	$this->fileSizeLiteral();
		        }
		        $this->setState(2212);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WAIT) {
		        	$this->setState(2211);
		        	$this->match(self::WAIT);
		        }
		        $this->setState(2214);
		        $this->match(self::ENGINE);
		        $this->setState(2216);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EQUAL_SYMBOL) {
		        	$this->setState(2215);
		        	$this->match(self::EQUAL_SYMBOL);
		        }
		        $this->setState(2218);
		        $this->engineName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterView() : Context\AlterViewContext
		{
		    $localContext = new Context\AlterViewContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 130, self::RULE_alterView);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2220);
		        $this->match(self::ALTER);
		        $this->setState(2224);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ALGORITHM) {
		        	$this->setState(2221);
		        	$this->match(self::ALGORITHM);
		        	$this->setState(2222);
		        	$this->match(self::EQUAL_SYMBOL);
		        	$this->setState(2223);

		        	$localContext->algType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::MERGE || $_la === self::TEMPTABLE || $_la === self::UNDEFINED)) {
		        		    $localContext->algType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(2227);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFINER) {
		        	$this->setState(2226);
		        	$this->ownerStatement();
		        }
		        $this->setState(2232);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::SQL) {
		        	$this->setState(2229);
		        	$this->match(self::SQL);
		        	$this->setState(2230);
		        	$this->match(self::SECURITY);
		        	$this->setState(2231);

		        	$localContext->secContext = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::DEFINER || $_la === self::INVOKER)) {
		        		    $localContext->secContext = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(2234);
		        $this->match(self::VIEW);
		        $this->setState(2235);
		        $this->fullId();
		        $this->setState(2240);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LR_BRACKET) {
		        	$this->setState(2236);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(2237);
		        	$this->uidList();
		        	$this->setState(2238);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(2242);
		        $this->match(self::AS);
		        $this->setState(2243);
		        $this->selectStatement();
		        $this->setState(2250);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WITH) {
		        	$this->setState(2244);
		        	$this->match(self::WITH);
		        	$this->setState(2246);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::CASCADED || $_la === self::LOCAL) {
		        		$this->setState(2245);

		        		$localContext->checkOpt = $this->input->LT(1);
		        		$_la = $this->input->LA(1);

		        		if (!($_la === self::CASCADED || $_la === self::LOCAL)) {
		        			    $localContext->checkOpt = $this->errorHandler->recoverInline($this);
		        		} else {
		        			if ($this->input->LA(1) === Token::EOF) {
		        			    $this->matchedEOF = true;
		        		    }

		        			$this->errorHandler->reportMatch($this);
		        			$this->consume();
		        		}
		        	}
		        	$this->setState(2248);
		        	$this->match(self::CHECK);
		        	$this->setState(2249);
		        	$this->match(self::OPTION);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterSpecification() : Context\AlterSpecificationContext
		{
		    $localContext = new Context\AlterSpecificationContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 132, self::RULE_alterSpecification);

		    try {
		        $this->setState(2610);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 331, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\AlterByTableOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(2252);
		        	    $this->tableOption();
		        	    $this->setState(2259);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 278, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(2254);
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);

		        	    		if ($_la === self::COMMA) {
		        	    			$this->setState(2253);
		        	    			$this->match(self::COMMA);
		        	    		}
		        	    		$this->setState(2256);
		        	    		$this->tableOption(); 
		        	    	}

		        	    	$this->setState(2261);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 278, $this->ctx);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\AlterByAddColumnContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(2262);
		        	    $this->match(self::ADD);
		        	    $this->setState(2264);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLUMN) {
		        	    	$this->setState(2263);
		        	    	$this->match(self::COLUMN);
		        	    }
		        	    $this->setState(2266);
		        	    $this->uid();
		        	    $this->setState(2267);
		        	    $this->columnDefinition();
		        	    $this->setState(2271);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::FIRST:
		        	        	$this->setState(2268);
		        	        	$this->match(self::FIRST);
		        	        	break;

		        	        case self::AFTER:
		        	        	$this->setState(2269);
		        	        	$this->match(self::AFTER);
		        	        	$this->setState(2270);
		        	        	$this->uid();
		        	        	break;

		        	        case self::EOF:
		        	        case self::ALTER:
		        	        case self::ANALYZE:
		        	        case self::CALL:
		        	        case self::CHANGE:
		        	        case self::CHECK:
		        	        case self::CREATE:
		        	        case self::DELETE:
		        	        case self::DESC:
		        	        case self::DESCRIBE:
		        	        case self::DROP:
		        	        case self::EXPLAIN:
		        	        case self::GET:
		        	        case self::GRANT:
		        	        case self::INSERT:
		        	        case self::KILL:
		        	        case self::LOAD:
		        	        case self::LOCK:
		        	        case self::OPTIMIZE:
		        	        case self::PARTITION:
		        	        case self::PURGE:
		        	        case self::RELEASE:
		        	        case self::RENAME:
		        	        case self::REPLACE:
		        	        case self::RESIGNAL:
		        	        case self::REVOKE:
		        	        case self::SELECT:
		        	        case self::SET:
		        	        case self::SHOW:
		        	        case self::SIGNAL:
		        	        case self::UNLOCK:
		        	        case self::UPDATE:
		        	        case self::USE:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::CACHE:
		        	        case self::CHECKSUM:
		        	        case self::COMMIT:
		        	        case self::DEALLOCATE:
		        	        case self::DO:
		        	        case self::FLUSH:
		        	        case self::HANDLER:
		        	        case self::HELP:
		        	        case self::INSTALL:
		        	        case self::PREPARE:
		        	        case self::REPAIR:
		        	        case self::RESET:
		        	        case self::ROLLBACK:
		        	        case self::SAVEPOINT:
		        	        case self::START:
		        	        case self::STOP:
		        	        case self::TRUNCATE:
		        	        case self::UNINSTALL:
		        	        case self::XA:
		        	        case self::EXECUTE:
		        	        case self::SHUTDOWN:
		        	        case self::MINUSMINUS:
		        	        case self::LR_BRACKET:
		        	        case self::COMMA:
		        	        case self::SEMI:
		        	        	break;

		        	    default:
		        	    	break;
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\AlterByAddColumnsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(2273);
		        	    $this->match(self::ADD);
		        	    $this->setState(2275);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLUMN) {
		        	    	$this->setState(2274);
		        	    	$this->match(self::COLUMN);
		        	    }
		        	    $this->setState(2277);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2278);
		        	    $this->uid();
		        	    $this->setState(2279);
		        	    $this->columnDefinition();
		        	    $this->setState(2286);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(2280);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(2281);
		        	    	$this->uid();
		        	    	$this->setState(2282);
		        	    	$this->columnDefinition();
		        	    	$this->setState(2288);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2289);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 4:
		        	    $localContext = new Context\AlterByAddIndexContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(2291);
		        	    $this->match(self::ADD);
		        	    $this->setState(2292);

		        	    $localContext->indexFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    	    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(2294);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    	$this->setState(2293);
		        	    	$this->uid();
		        	    }
		        	    $this->setState(2297);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::USING) {
		        	    	$this->setState(2296);
		        	    	$this->indexType();
		        	    }
		        	    $this->setState(2299);
		        	    $this->indexColumnNames();
		        	    $this->setState(2303);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
		        	    	$this->setState(2300);
		        	    	$this->indexOption();
		        	    	$this->setState(2305);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 5:
		        	    $localContext = new Context\AlterByAddPrimaryKeyContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(2306);
		        	    $this->match(self::ADD);
		        	    $this->setState(2311);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(2307);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(2309);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    		$this->setState(2308);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(2313);
		        	    $this->match(self::PRIMARY);
		        	    $this->setState(2314);
		        	    $this->match(self::KEY);
		        	    $this->setState(2316);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    	$this->setState(2315);
		        	    	$localContext->index = $this->uid();
		        	    }
		        	    $this->setState(2319);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::USING) {
		        	    	$this->setState(2318);
		        	    	$this->indexType();
		        	    }
		        	    $this->setState(2321);
		        	    $this->indexColumnNames();
		        	    $this->setState(2325);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
		        	    	$this->setState(2322);
		        	    	$this->indexOption();
		        	    	$this->setState(2327);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 6:
		        	    $localContext = new Context\AlterByAddUniqueKeyContext($localContext);
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(2328);
		        	    $this->match(self::ADD);
		        	    $this->setState(2333);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(2329);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(2331);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    		$this->setState(2330);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(2335);
		        	    $this->match(self::UNIQUE);
		        	    $this->setState(2337);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::INDEX || $_la === self::KEY) {
		        	    	$this->setState(2336);

		        	    	$localContext->indexFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    		    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(2340);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    	$this->setState(2339);
		        	    	$localContext->indexName = $this->uid();
		        	    }
		        	    $this->setState(2343);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::USING) {
		        	    	$this->setState(2342);
		        	    	$this->indexType();
		        	    }
		        	    $this->setState(2345);
		        	    $this->indexColumnNames();
		        	    $this->setState(2349);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
		        	    	$this->setState(2346);
		        	    	$this->indexOption();
		        	    	$this->setState(2351);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 7:
		        	    $localContext = new Context\AlterByAddSpecialIndexContext($localContext);
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(2352);
		        	    $this->match(self::ADD);
		        	    $this->setState(2353);

		        	    $localContext->keyType = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::FULLTEXT || $_la === self::SPATIAL)) {
		        	    	    $localContext->keyType = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(2355);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::INDEX || $_la === self::KEY) {
		        	    	$this->setState(2354);

		        	    	$localContext->indexFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    		    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(2358);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    	$this->setState(2357);
		        	    	$this->uid();
		        	    }
		        	    $this->setState(2360);
		        	    $this->indexColumnNames();
		        	    $this->setState(2364);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
		        	    	$this->setState(2361);
		        	    	$this->indexOption();
		        	    	$this->setState(2366);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 8:
		        	    $localContext = new Context\AlterByAddForeignKeyContext($localContext);
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(2367);
		        	    $this->match(self::ADD);
		        	    $this->setState(2372);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(2368);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(2370);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    		$this->setState(2369);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(2374);
		        	    $this->match(self::FOREIGN);
		        	    $this->setState(2375);
		        	    $this->match(self::KEY);
		        	    $this->setState(2377);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    	$this->setState(2376);
		        	    	$localContext->indexName = $this->uid();
		        	    }
		        	    $this->setState(2379);
		        	    $this->indexColumnNames();
		        	    $this->setState(2380);
		        	    $this->referenceDefinition();
		        	break;

		        	case 9:
		        	    $localContext = new Context\AlterByAddCheckTableConstraintContext($localContext);
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(2382);
		        	    $this->match(self::ADD);
		        	    $this->setState(2387);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CONSTRAINT) {
		        	    	$this->setState(2383);
		        	    	$this->match(self::CONSTRAINT);
		        	    	$this->setState(2385);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	    		$this->setState(2384);
		        	    		$localContext->name = $this->uid();
		        	    	}
		        	    }
		        	    $this->setState(2389);
		        	    $this->match(self::CHECK);
		        	    $this->setState(2390);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2391);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(2392);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 10:
		        	    $localContext = new Context\AlterBySetAlgorithmContext($localContext);
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(2394);
		        	    $this->match(self::ALGORITHM);
		        	    $this->setState(2396);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(2395);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(2398);

		        	    $localContext->algType = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DEFAULT || $_la === self::COPY || $_la === self::INPLACE)) {
		        	    	    $localContext->algType = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 11:
		        	    $localContext = new Context\AlterByChangeDefaultContext($localContext);
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(2399);
		        	    $this->match(self::ALTER);
		        	    $this->setState(2401);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLUMN) {
		        	    	$this->setState(2400);
		        	    	$this->match(self::COLUMN);
		        	    }
		        	    $this->setState(2403);
		        	    $this->uid();
		        	    $this->setState(2409);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::SET:
		        	        	$this->setState(2404);
		        	        	$this->match(self::SET);
		        	        	$this->setState(2405);
		        	        	$this->match(self::DEFAULT);
		        	        	$this->setState(2406);
		        	        	$this->defaultValue();
		        	        	break;

		        	        case self::DROP:
		        	        	$this->setState(2407);
		        	        	$this->match(self::DROP);
		        	        	$this->setState(2408);
		        	        	$this->match(self::DEFAULT);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 12:
		        	    $localContext = new Context\AlterByChangeColumnContext($localContext);
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(2411);
		        	    $this->match(self::CHANGE);
		        	    $this->setState(2413);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLUMN) {
		        	    	$this->setState(2412);
		        	    	$this->match(self::COLUMN);
		        	    }
		        	    $this->setState(2415);
		        	    $localContext->oldColumn = $this->uid();
		        	    $this->setState(2416);
		        	    $localContext->newColumn = $this->uid();
		        	    $this->setState(2417);
		        	    $this->columnDefinition();
		        	    $this->setState(2421);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::FIRST:
		        	        	$this->setState(2418);
		        	        	$this->match(self::FIRST);
		        	        	break;

		        	        case self::AFTER:
		        	        	$this->setState(2419);
		        	        	$this->match(self::AFTER);
		        	        	$this->setState(2420);
		        	        	$localContext->afterColumn = $this->uid();
		        	        	break;

		        	        case self::EOF:
		        	        case self::ALTER:
		        	        case self::ANALYZE:
		        	        case self::CALL:
		        	        case self::CHANGE:
		        	        case self::CHECK:
		        	        case self::CREATE:
		        	        case self::DELETE:
		        	        case self::DESC:
		        	        case self::DESCRIBE:
		        	        case self::DROP:
		        	        case self::EXPLAIN:
		        	        case self::GET:
		        	        case self::GRANT:
		        	        case self::INSERT:
		        	        case self::KILL:
		        	        case self::LOAD:
		        	        case self::LOCK:
		        	        case self::OPTIMIZE:
		        	        case self::PARTITION:
		        	        case self::PURGE:
		        	        case self::RELEASE:
		        	        case self::RENAME:
		        	        case self::REPLACE:
		        	        case self::RESIGNAL:
		        	        case self::REVOKE:
		        	        case self::SELECT:
		        	        case self::SET:
		        	        case self::SHOW:
		        	        case self::SIGNAL:
		        	        case self::UNLOCK:
		        	        case self::UPDATE:
		        	        case self::USE:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::CACHE:
		        	        case self::CHECKSUM:
		        	        case self::COMMIT:
		        	        case self::DEALLOCATE:
		        	        case self::DO:
		        	        case self::FLUSH:
		        	        case self::HANDLER:
		        	        case self::HELP:
		        	        case self::INSTALL:
		        	        case self::PREPARE:
		        	        case self::REPAIR:
		        	        case self::RESET:
		        	        case self::ROLLBACK:
		        	        case self::SAVEPOINT:
		        	        case self::START:
		        	        case self::STOP:
		        	        case self::TRUNCATE:
		        	        case self::UNINSTALL:
		        	        case self::XA:
		        	        case self::EXECUTE:
		        	        case self::SHUTDOWN:
		        	        case self::MINUSMINUS:
		        	        case self::LR_BRACKET:
		        	        case self::COMMA:
		        	        case self::SEMI:
		        	        	break;

		        	    default:
		        	    	break;
		        	    }
		        	break;

		        	case 13:
		        	    $localContext = new Context\AlterByRenameColumnContext($localContext);
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(2423);
		        	    $this->match(self::RENAME);
		        	    $this->setState(2424);
		        	    $this->match(self::COLUMN);
		        	    $this->setState(2425);
		        	    $localContext->oldColumn = $this->uid();
		        	    $this->setState(2426);
		        	    $this->match(self::TO);
		        	    $this->setState(2427);
		        	    $localContext->newColumn = $this->uid();
		        	break;

		        	case 14:
		        	    $localContext = new Context\AlterByLockContext($localContext);
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(2429);
		        	    $this->match(self::LOCK);
		        	    $this->setState(2431);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::EQUAL_SYMBOL) {
		        	    	$this->setState(2430);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    }
		        	    $this->setState(2433);

		        	    $localContext->lockType = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DEFAULT || $_la === self::EXCLUSIVE || $_la === self::NONE || $_la === self::SHARED)) {
		        	    	    $localContext->lockType = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 15:
		        	    $localContext = new Context\AlterByModifyColumnContext($localContext);
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(2434);
		        	    $this->match(self::MODIFY);
		        	    $this->setState(2436);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLUMN) {
		        	    	$this->setState(2435);
		        	    	$this->match(self::COLUMN);
		        	    }
		        	    $this->setState(2438);
		        	    $this->uid();
		        	    $this->setState(2439);
		        	    $this->columnDefinition();
		        	    $this->setState(2443);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::FIRST:
		        	        	$this->setState(2440);
		        	        	$this->match(self::FIRST);
		        	        	break;

		        	        case self::AFTER:
		        	        	$this->setState(2441);
		        	        	$this->match(self::AFTER);
		        	        	$this->setState(2442);
		        	        	$this->uid();
		        	        	break;

		        	        case self::EOF:
		        	        case self::ALTER:
		        	        case self::ANALYZE:
		        	        case self::CALL:
		        	        case self::CHANGE:
		        	        case self::CHECK:
		        	        case self::CREATE:
		        	        case self::DELETE:
		        	        case self::DESC:
		        	        case self::DESCRIBE:
		        	        case self::DROP:
		        	        case self::EXPLAIN:
		        	        case self::GET:
		        	        case self::GRANT:
		        	        case self::INSERT:
		        	        case self::KILL:
		        	        case self::LOAD:
		        	        case self::LOCK:
		        	        case self::OPTIMIZE:
		        	        case self::PARTITION:
		        	        case self::PURGE:
		        	        case self::RELEASE:
		        	        case self::RENAME:
		        	        case self::REPLACE:
		        	        case self::RESIGNAL:
		        	        case self::REVOKE:
		        	        case self::SELECT:
		        	        case self::SET:
		        	        case self::SHOW:
		        	        case self::SIGNAL:
		        	        case self::UNLOCK:
		        	        case self::UPDATE:
		        	        case self::USE:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::CACHE:
		        	        case self::CHECKSUM:
		        	        case self::COMMIT:
		        	        case self::DEALLOCATE:
		        	        case self::DO:
		        	        case self::FLUSH:
		        	        case self::HANDLER:
		        	        case self::HELP:
		        	        case self::INSTALL:
		        	        case self::PREPARE:
		        	        case self::REPAIR:
		        	        case self::RESET:
		        	        case self::ROLLBACK:
		        	        case self::SAVEPOINT:
		        	        case self::START:
		        	        case self::STOP:
		        	        case self::TRUNCATE:
		        	        case self::UNINSTALL:
		        	        case self::XA:
		        	        case self::EXECUTE:
		        	        case self::SHUTDOWN:
		        	        case self::MINUSMINUS:
		        	        case self::LR_BRACKET:
		        	        case self::COMMA:
		        	        case self::SEMI:
		        	        	break;

		        	    default:
		        	    	break;
		        	    }
		        	break;

		        	case 16:
		        	    $localContext = new Context\AlterByDropColumnContext($localContext);
		        	    $this->enterOuterAlt($localContext, 16);
		        	    $this->setState(2445);
		        	    $this->match(self::DROP);
		        	    $this->setState(2447);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLUMN) {
		        	    	$this->setState(2446);
		        	    	$this->match(self::COLUMN);
		        	    }
		        	    $this->setState(2449);
		        	    $this->uid();
		        	    $this->setState(2451);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::RESTRICT) {
		        	    	$this->setState(2450);
		        	    	$this->match(self::RESTRICT);
		        	    }
		        	break;

		        	case 17:
		        	    $localContext = new Context\AlterByDropPrimaryKeyContext($localContext);
		        	    $this->enterOuterAlt($localContext, 17);
		        	    $this->setState(2453);
		        	    $this->match(self::DROP);
		        	    $this->setState(2454);
		        	    $this->match(self::PRIMARY);
		        	    $this->setState(2455);
		        	    $this->match(self::KEY);
		        	break;

		        	case 18:
		        	    $localContext = new Context\AlterByRenameIndexContext($localContext);
		        	    $this->enterOuterAlt($localContext, 18);
		        	    $this->setState(2456);
		        	    $this->match(self::RENAME);
		        	    $this->setState(2457);

		        	    $localContext->indexFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    	    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(2458);
		        	    $this->uid();
		        	    $this->setState(2459);
		        	    $this->match(self::TO);
		        	    $this->setState(2460);
		        	    $this->uid();
		        	break;

		        	case 19:
		        	    $localContext = new Context\AlterByDropIndexContext($localContext);
		        	    $this->enterOuterAlt($localContext, 19);
		        	    $this->setState(2462);
		        	    $this->match(self::DROP);
		        	    $this->setState(2463);

		        	    $localContext->indexFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    	    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(2464);
		        	    $this->uid();
		        	break;

		        	case 20:
		        	    $localContext = new Context\AlterByDropForeignKeyContext($localContext);
		        	    $this->enterOuterAlt($localContext, 20);
		        	    $this->setState(2465);
		        	    $this->match(self::DROP);
		        	    $this->setState(2466);
		        	    $this->match(self::FOREIGN);
		        	    $this->setState(2467);
		        	    $this->match(self::KEY);
		        	    $this->setState(2468);
		        	    $this->uid();
		        	break;

		        	case 21:
		        	    $localContext = new Context\AlterByDisableKeysContext($localContext);
		        	    $this->enterOuterAlt($localContext, 21);
		        	    $this->setState(2469);
		        	    $this->match(self::DISABLE);
		        	    $this->setState(2470);
		        	    $this->match(self::KEYS);
		        	break;

		        	case 22:
		        	    $localContext = new Context\AlterByEnableKeysContext($localContext);
		        	    $this->enterOuterAlt($localContext, 22);
		        	    $this->setState(2471);
		        	    $this->match(self::ENABLE);
		        	    $this->setState(2472);
		        	    $this->match(self::KEYS);
		        	break;

		        	case 23:
		        	    $localContext = new Context\AlterByRenameContext($localContext);
		        	    $this->enterOuterAlt($localContext, 23);
		        	    $this->setState(2473);
		        	    $this->match(self::RENAME);
		        	    $this->setState(2475);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::AS || $_la === self::TO) {
		        	    	$this->setState(2474);

		        	    	$localContext->renameFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::AS || $_la === self::TO)) {
		        	    		    $localContext->renameFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(2479);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 316, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(2477);
		        	    	    $this->uid();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(2478);
		        	    	    $this->fullId();
		        	    	break;
		        	    }
		        	break;

		        	case 24:
		        	    $localContext = new Context\AlterByOrderContext($localContext);
		        	    $this->enterOuterAlt($localContext, 24);
		        	    $this->setState(2481);
		        	    $this->match(self::ORDER);
		        	    $this->setState(2482);
		        	    $this->match(self::BY);
		        	    $this->setState(2483);
		        	    $this->uidList();
		        	break;

		        	case 25:
		        	    $localContext = new Context\AlterByConvertCharsetContext($localContext);
		        	    $this->enterOuterAlt($localContext, 25);
		        	    $this->setState(2484);
		        	    $this->match(self::CONVERT);
		        	    $this->setState(2485);
		        	    $this->match(self::TO);
		        	    $this->setState(2486);
		        	    $this->match(self::CHARACTER);
		        	    $this->setState(2487);
		        	    $this->match(self::SET);
		        	    $this->setState(2488);
		        	    $this->charsetName();
		        	    $this->setState(2491);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLLATE) {
		        	    	$this->setState(2489);
		        	    	$this->match(self::COLLATE);
		        	    	$this->setState(2490);
		        	    	$this->collationName();
		        	    }
		        	break;

		        	case 26:
		        	    $localContext = new Context\AlterByDefaultCharsetContext($localContext);
		        	    $this->enterOuterAlt($localContext, 26);
		        	    $this->setState(2494);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::DEFAULT) {
		        	    	$this->setState(2493);
		        	    	$this->match(self::DEFAULT);
		        	    }
		        	    $this->setState(2496);
		        	    $this->match(self::CHARACTER);
		        	    $this->setState(2497);
		        	    $this->match(self::SET);
		        	    $this->setState(2498);
		        	    $this->match(self::EQUAL_SYMBOL);
		        	    $this->setState(2499);
		        	    $this->charsetName();
		        	    $this->setState(2503);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::COLLATE) {
		        	    	$this->setState(2500);
		        	    	$this->match(self::COLLATE);
		        	    	$this->setState(2501);
		        	    	$this->match(self::EQUAL_SYMBOL);
		        	    	$this->setState(2502);
		        	    	$this->collationName();
		        	    }
		        	break;

		        	case 27:
		        	    $localContext = new Context\AlterByDiscardTablespaceContext($localContext);
		        	    $this->enterOuterAlt($localContext, 27);
		        	    $this->setState(2505);
		        	    $this->match(self::DISCARD);
		        	    $this->setState(2506);
		        	    $this->match(self::TABLESPACE);
		        	break;

		        	case 28:
		        	    $localContext = new Context\AlterByImportTablespaceContext($localContext);
		        	    $this->enterOuterAlt($localContext, 28);
		        	    $this->setState(2507);
		        	    $this->match(self::IMPORT);
		        	    $this->setState(2508);
		        	    $this->match(self::TABLESPACE);
		        	break;

		        	case 29:
		        	    $localContext = new Context\AlterByForceContext($localContext);
		        	    $this->enterOuterAlt($localContext, 29);
		        	    $this->setState(2509);
		        	    $this->match(self::FORCE);
		        	break;

		        	case 30:
		        	    $localContext = new Context\AlterByValidateContext($localContext);
		        	    $this->enterOuterAlt($localContext, 30);
		        	    $this->setState(2510);

		        	    $localContext->validationFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::WITH || $_la === self::WITHOUT)) {
		        	    	    $localContext->validationFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(2511);
		        	    $this->match(self::VALIDATION);
		        	break;

		        	case 31:
		        	    $localContext = new Context\AlterByAddPartitionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 31);
		        	    $this->setState(2512);
		        	    $this->match(self::ADD);
		        	    $this->setState(2513);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2514);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2515);
		        	    $this->partitionDefinition();
		        	    $this->setState(2520);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(2516);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(2517);
		        	    	$this->partitionDefinition();
		        	    	$this->setState(2522);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2523);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 32:
		        	    $localContext = new Context\AlterByDropPartitionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 32);
		        	    $this->setState(2525);
		        	    $this->match(self::DROP);
		        	    $this->setState(2526);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2527);
		        	    $this->uidList();
		        	break;

		        	case 33:
		        	    $localContext = new Context\AlterByDiscardPartitionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 33);
		        	    $this->setState(2528);
		        	    $this->match(self::DISCARD);
		        	    $this->setState(2529);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2532);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::CURRENT:
		        	        case self::DATABASE:
		        	        case self::DIAGNOSTICS:
		        	        case self::LEFT:
		        	        case self::NUMBER:
		        	        case self::RIGHT:
		        	        case self::STACKED:
		        	        case self::DATE:
		        	        case self::TIME:
		        	        case self::TIMESTAMP:
		        	        case self::DATETIME:
		        	        case self::YEAR:
		        	        case self::TEXT:
		        	        case self::ENUM:
		        	        case self::SERIAL:
		        	        case self::COUNT:
		        	        case self::POSITION:
		        	        case self::ACCOUNT:
		        	        case self::ACTION:
		        	        case self::AFTER:
		        	        case self::AGGREGATE:
		        	        case self::ALGORITHM:
		        	        case self::ANY:
		        	        case self::AT:
		        	        case self::AUTHORS:
		        	        case self::AUTOCOMMIT:
		        	        case self::AUTOEXTEND_SIZE:
		        	        case self::AUTO_INCREMENT:
		        	        case self::AVG_ROW_LENGTH:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::BIT:
		        	        case self::BLOCK:
		        	        case self::BOOL:
		        	        case self::BOOLEAN:
		        	        case self::BTREE:
		        	        case self::CACHE:
		        	        case self::CASCADED:
		        	        case self::CHAIN:
		        	        case self::CHANGED:
		        	        case self::CHANNEL:
		        	        case self::CHECKSUM:
		        	        case self::PAGE_CHECKSUM:
		        	        case self::CIPHER:
		        	        case self::CLASS_ORIGIN:
		        	        case self::CLIENT:
		        	        case self::CLOSE:
		        	        case self::COALESCE:
		        	        case self::CODE:
		        	        case self::COLUMNS:
		        	        case self::COLUMN_FORMAT:
		        	        case self::COLUMN_NAME:
		        	        case self::COMMENT:
		        	        case self::COMMIT:
		        	        case self::COMPACT:
		        	        case self::COMPLETION:
		        	        case self::COMPRESSED:
		        	        case self::COMPRESSION:
		        	        case self::CONCURRENT:
		        	        case self::CONNECTION:
		        	        case self::CONSISTENT:
		        	        case self::CONSTRAINT_CATALOG:
		        	        case self::CONSTRAINT_SCHEMA:
		        	        case self::CONSTRAINT_NAME:
		        	        case self::CONTAINS:
		        	        case self::CONTEXT:
		        	        case self::CONTRIBUTORS:
		        	        case self::COPY:
		        	        case self::CPU:
		        	        case self::CURSOR_NAME:
		        	        case self::DATA:
		        	        case self::DATAFILE:
		        	        case self::DEALLOCATE:
		        	        case self::DEFAULT_AUTH:
		        	        case self::DEFINER:
		        	        case self::DELAY_KEY_WRITE:
		        	        case self::DES_KEY_FILE:
		        	        case self::DIRECTORY:
		        	        case self::DISABLE:
		        	        case self::DISCARD:
		        	        case self::DISK:
		        	        case self::DO:
		        	        case self::DUMPFILE:
		        	        case self::DUPLICATE:
		        	        case self::DYNAMIC:
		        	        case self::ENABLE:
		        	        case self::ENCRYPTION:
		        	        case self::END:
		        	        case self::ENDS:
		        	        case self::ENGINE:
		        	        case self::ENGINES:
		        	        case self::ERROR:
		        	        case self::ERRORS:
		        	        case self::ESCAPE:
		        	        case self::EVEN:
		        	        case self::EVENT:
		        	        case self::EVENTS:
		        	        case self::EVERY:
		        	        case self::EXCHANGE:
		        	        case self::EXCLUSIVE:
		        	        case self::EXPIRE:
		        	        case self::EXPORT:
		        	        case self::EXTENDED:
		        	        case self::EXTENT_SIZE:
		        	        case self::FAST:
		        	        case self::FAULTS:
		        	        case self::FIELDS:
		        	        case self::FILE_BLOCK_SIZE:
		        	        case self::FILTER:
		        	        case self::FIRST:
		        	        case self::FIXED:
		        	        case self::FLUSH:
		        	        case self::FOLLOWS:
		        	        case self::FOUND:
		        	        case self::FULL:
		        	        case self::FUNCTION:
		        	        case self::GENERAL:
		        	        case self::GLOBAL:
		        	        case self::GRANTS:
		        	        case self::GROUP_REPLICATION:
		        	        case self::HANDLER:
		        	        case self::HASH:
		        	        case self::HELP:
		        	        case self::HOST:
		        	        case self::HOSTS:
		        	        case self::IDENTIFIED:
		        	        case self::IGNORE_SERVER_IDS:
		        	        case self::IMPORT:
		        	        case self::INDEXES:
		        	        case self::INITIAL_SIZE:
		        	        case self::INPLACE:
		        	        case self::INSERT_METHOD:
		        	        case self::INSTALL:
		        	        case self::INSTANCE:
		        	        case self::INVISIBLE:
		        	        case self::INVOKER:
		        	        case self::IO:
		        	        case self::IO_THREAD:
		        	        case self::IPC:
		        	        case self::ISOLATION:
		        	        case self::ISSUER:
		        	        case self::JSON:
		        	        case self::KEY_BLOCK_SIZE:
		        	        case self::LANGUAGE:
		        	        case self::LAST:
		        	        case self::LEAVES:
		        	        case self::LESS:
		        	        case self::LEVEL:
		        	        case self::LIST:
		        	        case self::LOCAL:
		        	        case self::LOGFILE:
		        	        case self::LOGS:
		        	        case self::MASTER:
		        	        case self::MASTER_AUTO_POSITION:
		        	        case self::MASTER_CONNECT_RETRY:
		        	        case self::MASTER_DELAY:
		        	        case self::MASTER_HEARTBEAT_PERIOD:
		        	        case self::MASTER_HOST:
		        	        case self::MASTER_LOG_FILE:
		        	        case self::MASTER_LOG_POS:
		        	        case self::MASTER_PASSWORD:
		        	        case self::MASTER_PORT:
		        	        case self::MASTER_RETRY_COUNT:
		        	        case self::MASTER_SSL:
		        	        case self::MASTER_SSL_CA:
		        	        case self::MASTER_SSL_CAPATH:
		        	        case self::MASTER_SSL_CERT:
		        	        case self::MASTER_SSL_CIPHER:
		        	        case self::MASTER_SSL_CRL:
		        	        case self::MASTER_SSL_CRLPATH:
		        	        case self::MASTER_SSL_KEY:
		        	        case self::MASTER_TLS_VERSION:
		        	        case self::MASTER_USER:
		        	        case self::MAX_CONNECTIONS_PER_HOUR:
		        	        case self::MAX_QUERIES_PER_HOUR:
		        	        case self::MAX_ROWS:
		        	        case self::MAX_SIZE:
		        	        case self::MAX_UPDATES_PER_HOUR:
		        	        case self::MAX_USER_CONNECTIONS:
		        	        case self::MEDIUM:
		        	        case self::MERGE:
		        	        case self::MESSAGE_TEXT:
		        	        case self::MID:
		        	        case self::MIGRATE:
		        	        case self::MIN_ROWS:
		        	        case self::MODE:
		        	        case self::MODIFY:
		        	        case self::MUTEX:
		        	        case self::MYSQL:
		        	        case self::MYSQL_ERRNO:
		        	        case self::NAME:
		        	        case self::NAMES:
		        	        case self::NCHAR:
		        	        case self::NEVER:
		        	        case self::NEXT:
		        	        case self::NO:
		        	        case self::NODEGROUP:
		        	        case self::NONE:
		        	        case self::OFFLINE:
		        	        case self::OFFSET:
		        	        case self::OJ:
		        	        case self::OLD_PASSWORD:
		        	        case self::ONE:
		        	        case self::ONLINE:
		        	        case self::ONLY:
		        	        case self::OPEN:
		        	        case self::OPTIMIZER_COSTS:
		        	        case self::OPTIONS:
		        	        case self::OWNER:
		        	        case self::PACK_KEYS:
		        	        case self::PAGE:
		        	        case self::PARSER:
		        	        case self::PARTIAL:
		        	        case self::PARTITIONING:
		        	        case self::PARTITIONS:
		        	        case self::PASSWORD:
		        	        case self::PHASE:
		        	        case self::PLUGIN:
		        	        case self::PLUGIN_DIR:
		        	        case self::PLUGINS:
		        	        case self::PORT:
		        	        case self::PRECEDES:
		        	        case self::PREPARE:
		        	        case self::PRESERVE:
		        	        case self::PREV:
		        	        case self::PROCESSLIST:
		        	        case self::PROFILE:
		        	        case self::PROFILES:
		        	        case self::PROXY:
		        	        case self::QUERY:
		        	        case self::QUICK:
		        	        case self::REBUILD:
		        	        case self::RECOVER:
		        	        case self::REDO_BUFFER_SIZE:
		        	        case self::REDUNDANT:
		        	        case self::RELAY:
		        	        case self::RELAY_LOG_FILE:
		        	        case self::RELAY_LOG_POS:
		        	        case self::RELAYLOG:
		        	        case self::REMOVE:
		        	        case self::REORGANIZE:
		        	        case self::REPAIR:
		        	        case self::REPLICATE_DO_DB:
		        	        case self::REPLICATE_DO_TABLE:
		        	        case self::REPLICATE_IGNORE_DB:
		        	        case self::REPLICATE_IGNORE_TABLE:
		        	        case self::REPLICATE_REWRITE_DB:
		        	        case self::REPLICATE_WILD_DO_TABLE:
		        	        case self::REPLICATE_WILD_IGNORE_TABLE:
		        	        case self::REPLICATION:
		        	        case self::RESET:
		        	        case self::RESUME:
		        	        case self::RETURNED_SQLSTATE:
		        	        case self::RETURNS:
		        	        case self::ROLLBACK:
		        	        case self::ROLLUP:
		        	        case self::ROTATE:
		        	        case self::ROW:
		        	        case self::ROWS:
		        	        case self::ROW_FORMAT:
		        	        case self::SAVEPOINT:
		        	        case self::SCHEDULE:
		        	        case self::SECURITY:
		        	        case self::SERVER:
		        	        case self::SESSION:
		        	        case self::SHARE:
		        	        case self::SHARED:
		        	        case self::SIGNED:
		        	        case self::SIMPLE:
		        	        case self::SLAVE:
		        	        case self::SLOW:
		        	        case self::SNAPSHOT:
		        	        case self::SOCKET:
		        	        case self::SOME:
		        	        case self::SONAME:
		        	        case self::SOUNDS:
		        	        case self::SOURCE:
		        	        case self::SQL_AFTER_GTIDS:
		        	        case self::SQL_AFTER_MTS_GAPS:
		        	        case self::SQL_BEFORE_GTIDS:
		        	        case self::SQL_BUFFER_RESULT:
		        	        case self::SQL_CACHE:
		        	        case self::SQL_NO_CACHE:
		        	        case self::SQL_THREAD:
		        	        case self::START:
		        	        case self::STARTS:
		        	        case self::STATS_AUTO_RECALC:
		        	        case self::STATS_PERSISTENT:
		        	        case self::STATS_SAMPLE_PAGES:
		        	        case self::STATUS:
		        	        case self::STOP:
		        	        case self::STORAGE:
		        	        case self::STRING:
		        	        case self::SUBCLASS_ORIGIN:
		        	        case self::SUBJECT:
		        	        case self::SUBPARTITION:
		        	        case self::SUBPARTITIONS:
		        	        case self::SUSPEND:
		        	        case self::SWAPS:
		        	        case self::SWITCHES:
		        	        case self::TABLE_NAME:
		        	        case self::TABLESPACE:
		        	        case self::TEMPORARY:
		        	        case self::TEMPTABLE:
		        	        case self::THAN:
		        	        case self::TRADITIONAL:
		        	        case self::TRANSACTION:
		        	        case self::TRIGGERS:
		        	        case self::TRUNCATE:
		        	        case self::UNDEFINED:
		        	        case self::UNDOFILE:
		        	        case self::UNDO_BUFFER_SIZE:
		        	        case self::UNINSTALL:
		        	        case self::UNKNOWN:
		        	        case self::UNTIL:
		        	        case self::UPGRADE:
		        	        case self::USER:
		        	        case self::USE_FRM:
		        	        case self::USER_RESOURCES:
		        	        case self::VALIDATION:
		        	        case self::VALUE:
		        	        case self::VARIABLES:
		        	        case self::VIEW:
		        	        case self::VISIBLE:
		        	        case self::WAIT:
		        	        case self::WARNINGS:
		        	        case self::WITHOUT:
		        	        case self::WORK:
		        	        case self::WRAPPER:
		        	        case self::X509:
		        	        case self::XA:
		        	        case self::XML:
		        	        case self::INTERNAL:
		        	        case self::QUARTER:
		        	        case self::MONTH:
		        	        case self::DAY:
		        	        case self::HOUR:
		        	        case self::MINUTE:
		        	        case self::WEEK:
		        	        case self::SECOND:
		        	        case self::MICROSECOND:
		        	        case self::TABLES:
		        	        case self::ROUTINE:
		        	        case self::EXECUTE:
		        	        case self::FILE:
		        	        case self::PROCESS:
		        	        case self::RELOAD:
		        	        case self::SHUTDOWN:
		        	        case self::SUPER:
		        	        case self::PRIVILEGES:
		        	        case self::SESSION_VARIABLES_ADMIN:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::ARCHIVE:
		        	        case self::BLACKHOLE:
		        	        case self::CSV:
		        	        case self::FEDERATED:
		        	        case self::INNODB:
		        	        case self::MEMORY:
		        	        case self::MRG_MYISAM:
		        	        case self::MYISAM:
		        	        case self::NDB:
		        	        case self::NDBCLUSTER:
		        	        case self::PERFORMANCE_SCHEMA:
		        	        case self::TOKUDB:
		        	        case self::REPEATABLE:
		        	        case self::COMMITTED:
		        	        case self::UNCOMMITTED:
		        	        case self::SERIALIZABLE:
		        	        case self::GEOMETRYCOLLECTION:
		        	        case self::LINESTRING:
		        	        case self::MULTILINESTRING:
		        	        case self::MULTIPOINT:
		        	        case self::MULTIPOLYGON:
		        	        case self::POINT:
		        	        case self::POLYGON:
		        	        case self::ABS:
		        	        case self::ACOS:
		        	        case self::ADDDATE:
		        	        case self::ADDTIME:
		        	        case self::AES_DECRYPT:
		        	        case self::AES_ENCRYPT:
		        	        case self::AREA:
		        	        case self::ASBINARY:
		        	        case self::ASIN:
		        	        case self::ASTEXT:
		        	        case self::ASWKB:
		        	        case self::ASWKT:
		        	        case self::ASYMMETRIC_DECRYPT:
		        	        case self::ASYMMETRIC_DERIVE:
		        	        case self::ASYMMETRIC_ENCRYPT:
		        	        case self::ASYMMETRIC_SIGN:
		        	        case self::ASYMMETRIC_VERIFY:
		        	        case self::ATAN:
		        	        case self::ATAN2:
		        	        case self::BENCHMARK:
		        	        case self::BIN:
		        	        case self::BIT_COUNT:
		        	        case self::BIT_LENGTH:
		        	        case self::BUFFER:
		        	        case self::CATALOG_NAME:
		        	        case self::CEIL:
		        	        case self::CEILING:
		        	        case self::CENTROID:
		        	        case self::CHARACTER_LENGTH:
		        	        case self::CHARSET:
		        	        case self::CHAR_LENGTH:
		        	        case self::COERCIBILITY:
		        	        case self::COLLATION:
		        	        case self::COMPRESS:
		        	        case self::CONCAT:
		        	        case self::CONCAT_WS:
		        	        case self::CONNECTION_ID:
		        	        case self::CONV:
		        	        case self::CONVERT_TZ:
		        	        case self::COS:
		        	        case self::COT:
		        	        case self::CRC32:
		        	        case self::CREATE_ASYMMETRIC_PRIV_KEY:
		        	        case self::CREATE_ASYMMETRIC_PUB_KEY:
		        	        case self::CREATE_DH_PARAMETERS:
		        	        case self::CREATE_DIGEST:
		        	        case self::CROSSES:
		        	        case self::DATEDIFF:
		        	        case self::DATE_FORMAT:
		        	        case self::DAYNAME:
		        	        case self::DAYOFMONTH:
		        	        case self::DAYOFWEEK:
		        	        case self::DAYOFYEAR:
		        	        case self::DECODE:
		        	        case self::DEGREES:
		        	        case self::DES_DECRYPT:
		        	        case self::DES_ENCRYPT:
		        	        case self::DIMENSION:
		        	        case self::DISJOINT:
		        	        case self::ELT:
		        	        case self::ENCODE:
		        	        case self::ENCRYPT:
		        	        case self::ENDPOINT:
		        	        case self::ENVELOPE:
		        	        case self::EQUALS:
		        	        case self::EXP:
		        	        case self::EXPORT_SET:
		        	        case self::EXTERIORRING:
		        	        case self::EXTRACTVALUE:
		        	        case self::FIELD:
		        	        case self::FIND_IN_SET:
		        	        case self::FLOOR:
		        	        case self::FORMAT:
		        	        case self::FOUND_ROWS:
		        	        case self::FROM_BASE64:
		        	        case self::FROM_DAYS:
		        	        case self::FROM_UNIXTIME:
		        	        case self::GEOMCOLLFROMTEXT:
		        	        case self::GEOMCOLLFROMWKB:
		        	        case self::GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::GEOMETRYFROMTEXT:
		        	        case self::GEOMETRYFROMWKB:
		        	        case self::GEOMETRYN:
		        	        case self::GEOMETRYTYPE:
		        	        case self::GEOMFROMTEXT:
		        	        case self::GEOMFROMWKB:
		        	        case self::GET_FORMAT:
		        	        case self::GET_LOCK:
		        	        case self::GLENGTH:
		        	        case self::GREATEST:
		        	        case self::GTID_SUBSET:
		        	        case self::GTID_SUBTRACT:
		        	        case self::HEX:
		        	        case self::IFNULL:
		        	        case self::INET6_ATON:
		        	        case self::INET6_NTOA:
		        	        case self::INET_ATON:
		        	        case self::INET_NTOA:
		        	        case self::INSTR:
		        	        case self::INTERIORRINGN:
		        	        case self::INTERSECTS:
		        	        case self::ISCLOSED:
		        	        case self::ISEMPTY:
		        	        case self::ISNULL:
		        	        case self::ISSIMPLE:
		        	        case self::IS_FREE_LOCK:
		        	        case self::IS_IPV4:
		        	        case self::IS_IPV4_COMPAT:
		        	        case self::IS_IPV4_MAPPED:
		        	        case self::IS_IPV6:
		        	        case self::IS_USED_LOCK:
		        	        case self::LAST_INSERT_ID:
		        	        case self::LCASE:
		        	        case self::LEAST:
		        	        case self::LENGTH:
		        	        case self::LINEFROMTEXT:
		        	        case self::LINEFROMWKB:
		        	        case self::LINESTRINGFROMTEXT:
		        	        case self::LINESTRINGFROMWKB:
		        	        case self::LN:
		        	        case self::LOAD_FILE:
		        	        case self::LOCATE:
		        	        case self::LOG:
		        	        case self::LOG10:
		        	        case self::LOG2:
		        	        case self::LOWER:
		        	        case self::LPAD:
		        	        case self::LTRIM:
		        	        case self::MAKEDATE:
		        	        case self::MAKETIME:
		        	        case self::MAKE_SET:
		        	        case self::MASTER_POS_WAIT:
		        	        case self::MBRCONTAINS:
		        	        case self::MBRDISJOINT:
		        	        case self::MBREQUAL:
		        	        case self::MBRINTERSECTS:
		        	        case self::MBROVERLAPS:
		        	        case self::MBRTOUCHES:
		        	        case self::MBRWITHIN:
		        	        case self::MD5:
		        	        case self::MLINEFROMTEXT:
		        	        case self::MLINEFROMWKB:
		        	        case self::MONTHNAME:
		        	        case self::MPOINTFROMTEXT:
		        	        case self::MPOINTFROMWKB:
		        	        case self::MPOLYFROMTEXT:
		        	        case self::MPOLYFROMWKB:
		        	        case self::MULTILINESTRINGFROMTEXT:
		        	        case self::MULTILINESTRINGFROMWKB:
		        	        case self::MULTIPOINTFROMTEXT:
		        	        case self::MULTIPOINTFROMWKB:
		        	        case self::MULTIPOLYGONFROMTEXT:
		        	        case self::MULTIPOLYGONFROMWKB:
		        	        case self::NAME_CONST:
		        	        case self::NULLIF:
		        	        case self::NUMGEOMETRIES:
		        	        case self::NUMINTERIORRINGS:
		        	        case self::NUMPOINTS:
		        	        case self::OCT:
		        	        case self::OCTET_LENGTH:
		        	        case self::ORD:
		        	        case self::OVERLAPS:
		        	        case self::PERIOD_ADD:
		        	        case self::PERIOD_DIFF:
		        	        case self::PI:
		        	        case self::POINTFROMTEXT:
		        	        case self::POINTFROMWKB:
		        	        case self::POINTN:
		        	        case self::POLYFROMTEXT:
		        	        case self::POLYFROMWKB:
		        	        case self::POLYGONFROMTEXT:
		        	        case self::POLYGONFROMWKB:
		        	        case self::POW:
		        	        case self::POWER:
		        	        case self::QUOTE:
		        	        case self::RADIANS:
		        	        case self::RAND:
		        	        case self::RANDOM_BYTES:
		        	        case self::RELEASE_LOCK:
		        	        case self::REVERSE:
		        	        case self::ROUND:
		        	        case self::ROW_COUNT:
		        	        case self::RPAD:
		        	        case self::RTRIM:
		        	        case self::SEC_TO_TIME:
		        	        case self::SESSION_USER:
		        	        case self::SHA:
		        	        case self::SHA1:
		        	        case self::SHA2:
		        	        case self::SCHEMA_NAME:
		        	        case self::SIGN:
		        	        case self::SIN:
		        	        case self::SLEEP:
		        	        case self::SOUNDEX:
		        	        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		        	        case self::SQRT:
		        	        case self::SRID:
		        	        case self::STARTPOINT:
		        	        case self::STRCMP:
		        	        case self::STR_TO_DATE:
		        	        case self::ST_AREA:
		        	        case self::ST_ASBINARY:
		        	        case self::ST_ASTEXT:
		        	        case self::ST_ASWKB:
		        	        case self::ST_ASWKT:
		        	        case self::ST_BUFFER:
		        	        case self::ST_CENTROID:
		        	        case self::ST_CONTAINS:
		        	        case self::ST_CROSSES:
		        	        case self::ST_DIFFERENCE:
		        	        case self::ST_DIMENSION:
		        	        case self::ST_DISJOINT:
		        	        case self::ST_DISTANCE:
		        	        case self::ST_ENDPOINT:
		        	        case self::ST_ENVELOPE:
		        	        case self::ST_EQUALS:
		        	        case self::ST_EXTERIORRING:
		        	        case self::ST_GEOMCOLLFROMTEXT:
		        	        case self::ST_GEOMCOLLFROMTXT:
		        	        case self::ST_GEOMCOLLFROMWKB:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::ST_GEOMETRYFROMTEXT:
		        	        case self::ST_GEOMETRYFROMWKB:
		        	        case self::ST_GEOMETRYN:
		        	        case self::ST_GEOMETRYTYPE:
		        	        case self::ST_GEOMFROMTEXT:
		        	        case self::ST_GEOMFROMWKB:
		        	        case self::ST_INTERIORRINGN:
		        	        case self::ST_INTERSECTION:
		        	        case self::ST_INTERSECTS:
		        	        case self::ST_ISCLOSED:
		        	        case self::ST_ISEMPTY:
		        	        case self::ST_ISSIMPLE:
		        	        case self::ST_LINEFROMTEXT:
		        	        case self::ST_LINEFROMWKB:
		        	        case self::ST_LINESTRINGFROMTEXT:
		        	        case self::ST_LINESTRINGFROMWKB:
		        	        case self::ST_NUMGEOMETRIES:
		        	        case self::ST_NUMINTERIORRING:
		        	        case self::ST_NUMINTERIORRINGS:
		        	        case self::ST_NUMPOINTS:
		        	        case self::ST_OVERLAPS:
		        	        case self::ST_POINTFROMTEXT:
		        	        case self::ST_POINTFROMWKB:
		        	        case self::ST_POINTN:
		        	        case self::ST_POLYFROMTEXT:
		        	        case self::ST_POLYFROMWKB:
		        	        case self::ST_POLYGONFROMTEXT:
		        	        case self::ST_POLYGONFROMWKB:
		        	        case self::ST_SRID:
		        	        case self::ST_STARTPOINT:
		        	        case self::ST_SYMDIFFERENCE:
		        	        case self::ST_TOUCHES:
		        	        case self::ST_UNION:
		        	        case self::ST_WITHIN:
		        	        case self::ST_X:
		        	        case self::ST_Y:
		        	        case self::SUBDATE:
		        	        case self::SUBSTRING_INDEX:
		        	        case self::SUBTIME:
		        	        case self::SYSTEM_USER:
		        	        case self::TAN:
		        	        case self::TIMEDIFF:
		        	        case self::TIMESTAMPADD:
		        	        case self::TIMESTAMPDIFF:
		        	        case self::TIME_FORMAT:
		        	        case self::TIME_TO_SEC:
		        	        case self::TOUCHES:
		        	        case self::TO_BASE64:
		        	        case self::TO_DAYS:
		        	        case self::TO_SECONDS:
		        	        case self::UCASE:
		        	        case self::UNCOMPRESS:
		        	        case self::UNCOMPRESSED_LENGTH:
		        	        case self::UNHEX:
		        	        case self::UNIX_TIMESTAMP:
		        	        case self::UPDATEXML:
		        	        case self::UPPER:
		        	        case self::UUID:
		        	        case self::UUID_SHORT:
		        	        case self::VALIDATE_PASSWORD_STRENGTH:
		        	        case self::VERSION:
		        	        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		        	        case self::WEEKDAY:
		        	        case self::WEEKOFYEAR:
		        	        case self::WEIGHT_STRING:
		        	        case self::WITHIN:
		        	        case self::YEARWEEK:
		        	        case self::Y_FUNCTION:
		        	        case self::X_FUNCTION:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        case self::ID:
		        	        case self::REVERSE_QUOTE_ID:
		        	        	$this->setState(2530);
		        	        	$this->uidList();
		        	        	break;

		        	        case self::ALL:
		        	        	$this->setState(2531);
		        	        	$this->match(self::ALL);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	    $this->setState(2534);
		        	    $this->match(self::TABLESPACE);
		        	break;

		        	case 34:
		        	    $localContext = new Context\AlterByImportPartitionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 34);
		        	    $this->setState(2535);
		        	    $this->match(self::IMPORT);
		        	    $this->setState(2536);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2539);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::CURRENT:
		        	        case self::DATABASE:
		        	        case self::DIAGNOSTICS:
		        	        case self::LEFT:
		        	        case self::NUMBER:
		        	        case self::RIGHT:
		        	        case self::STACKED:
		        	        case self::DATE:
		        	        case self::TIME:
		        	        case self::TIMESTAMP:
		        	        case self::DATETIME:
		        	        case self::YEAR:
		        	        case self::TEXT:
		        	        case self::ENUM:
		        	        case self::SERIAL:
		        	        case self::COUNT:
		        	        case self::POSITION:
		        	        case self::ACCOUNT:
		        	        case self::ACTION:
		        	        case self::AFTER:
		        	        case self::AGGREGATE:
		        	        case self::ALGORITHM:
		        	        case self::ANY:
		        	        case self::AT:
		        	        case self::AUTHORS:
		        	        case self::AUTOCOMMIT:
		        	        case self::AUTOEXTEND_SIZE:
		        	        case self::AUTO_INCREMENT:
		        	        case self::AVG_ROW_LENGTH:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::BIT:
		        	        case self::BLOCK:
		        	        case self::BOOL:
		        	        case self::BOOLEAN:
		        	        case self::BTREE:
		        	        case self::CACHE:
		        	        case self::CASCADED:
		        	        case self::CHAIN:
		        	        case self::CHANGED:
		        	        case self::CHANNEL:
		        	        case self::CHECKSUM:
		        	        case self::PAGE_CHECKSUM:
		        	        case self::CIPHER:
		        	        case self::CLASS_ORIGIN:
		        	        case self::CLIENT:
		        	        case self::CLOSE:
		        	        case self::COALESCE:
		        	        case self::CODE:
		        	        case self::COLUMNS:
		        	        case self::COLUMN_FORMAT:
		        	        case self::COLUMN_NAME:
		        	        case self::COMMENT:
		        	        case self::COMMIT:
		        	        case self::COMPACT:
		        	        case self::COMPLETION:
		        	        case self::COMPRESSED:
		        	        case self::COMPRESSION:
		        	        case self::CONCURRENT:
		        	        case self::CONNECTION:
		        	        case self::CONSISTENT:
		        	        case self::CONSTRAINT_CATALOG:
		        	        case self::CONSTRAINT_SCHEMA:
		        	        case self::CONSTRAINT_NAME:
		        	        case self::CONTAINS:
		        	        case self::CONTEXT:
		        	        case self::CONTRIBUTORS:
		        	        case self::COPY:
		        	        case self::CPU:
		        	        case self::CURSOR_NAME:
		        	        case self::DATA:
		        	        case self::DATAFILE:
		        	        case self::DEALLOCATE:
		        	        case self::DEFAULT_AUTH:
		        	        case self::DEFINER:
		        	        case self::DELAY_KEY_WRITE:
		        	        case self::DES_KEY_FILE:
		        	        case self::DIRECTORY:
		        	        case self::DISABLE:
		        	        case self::DISCARD:
		        	        case self::DISK:
		        	        case self::DO:
		        	        case self::DUMPFILE:
		        	        case self::DUPLICATE:
		        	        case self::DYNAMIC:
		        	        case self::ENABLE:
		        	        case self::ENCRYPTION:
		        	        case self::END:
		        	        case self::ENDS:
		        	        case self::ENGINE:
		        	        case self::ENGINES:
		        	        case self::ERROR:
		        	        case self::ERRORS:
		        	        case self::ESCAPE:
		        	        case self::EVEN:
		        	        case self::EVENT:
		        	        case self::EVENTS:
		        	        case self::EVERY:
		        	        case self::EXCHANGE:
		        	        case self::EXCLUSIVE:
		        	        case self::EXPIRE:
		        	        case self::EXPORT:
		        	        case self::EXTENDED:
		        	        case self::EXTENT_SIZE:
		        	        case self::FAST:
		        	        case self::FAULTS:
		        	        case self::FIELDS:
		        	        case self::FILE_BLOCK_SIZE:
		        	        case self::FILTER:
		        	        case self::FIRST:
		        	        case self::FIXED:
		        	        case self::FLUSH:
		        	        case self::FOLLOWS:
		        	        case self::FOUND:
		        	        case self::FULL:
		        	        case self::FUNCTION:
		        	        case self::GENERAL:
		        	        case self::GLOBAL:
		        	        case self::GRANTS:
		        	        case self::GROUP_REPLICATION:
		        	        case self::HANDLER:
		        	        case self::HASH:
		        	        case self::HELP:
		        	        case self::HOST:
		        	        case self::HOSTS:
		        	        case self::IDENTIFIED:
		        	        case self::IGNORE_SERVER_IDS:
		        	        case self::IMPORT:
		        	        case self::INDEXES:
		        	        case self::INITIAL_SIZE:
		        	        case self::INPLACE:
		        	        case self::INSERT_METHOD:
		        	        case self::INSTALL:
		        	        case self::INSTANCE:
		        	        case self::INVISIBLE:
		        	        case self::INVOKER:
		        	        case self::IO:
		        	        case self::IO_THREAD:
		        	        case self::IPC:
		        	        case self::ISOLATION:
		        	        case self::ISSUER:
		        	        case self::JSON:
		        	        case self::KEY_BLOCK_SIZE:
		        	        case self::LANGUAGE:
		        	        case self::LAST:
		        	        case self::LEAVES:
		        	        case self::LESS:
		        	        case self::LEVEL:
		        	        case self::LIST:
		        	        case self::LOCAL:
		        	        case self::LOGFILE:
		        	        case self::LOGS:
		        	        case self::MASTER:
		        	        case self::MASTER_AUTO_POSITION:
		        	        case self::MASTER_CONNECT_RETRY:
		        	        case self::MASTER_DELAY:
		        	        case self::MASTER_HEARTBEAT_PERIOD:
		        	        case self::MASTER_HOST:
		        	        case self::MASTER_LOG_FILE:
		        	        case self::MASTER_LOG_POS:
		        	        case self::MASTER_PASSWORD:
		        	        case self::MASTER_PORT:
		        	        case self::MASTER_RETRY_COUNT:
		        	        case self::MASTER_SSL:
		        	        case self::MASTER_SSL_CA:
		        	        case self::MASTER_SSL_CAPATH:
		        	        case self::MASTER_SSL_CERT:
		        	        case self::MASTER_SSL_CIPHER:
		        	        case self::MASTER_SSL_CRL:
		        	        case self::MASTER_SSL_CRLPATH:
		        	        case self::MASTER_SSL_KEY:
		        	        case self::MASTER_TLS_VERSION:
		        	        case self::MASTER_USER:
		        	        case self::MAX_CONNECTIONS_PER_HOUR:
		        	        case self::MAX_QUERIES_PER_HOUR:
		        	        case self::MAX_ROWS:
		        	        case self::MAX_SIZE:
		        	        case self::MAX_UPDATES_PER_HOUR:
		        	        case self::MAX_USER_CONNECTIONS:
		        	        case self::MEDIUM:
		        	        case self::MERGE:
		        	        case self::MESSAGE_TEXT:
		        	        case self::MID:
		        	        case self::MIGRATE:
		        	        case self::MIN_ROWS:
		        	        case self::MODE:
		        	        case self::MODIFY:
		        	        case self::MUTEX:
		        	        case self::MYSQL:
		        	        case self::MYSQL_ERRNO:
		        	        case self::NAME:
		        	        case self::NAMES:
		        	        case self::NCHAR:
		        	        case self::NEVER:
		        	        case self::NEXT:
		        	        case self::NO:
		        	        case self::NODEGROUP:
		        	        case self::NONE:
		        	        case self::OFFLINE:
		        	        case self::OFFSET:
		        	        case self::OJ:
		        	        case self::OLD_PASSWORD:
		        	        case self::ONE:
		        	        case self::ONLINE:
		        	        case self::ONLY:
		        	        case self::OPEN:
		        	        case self::OPTIMIZER_COSTS:
		        	        case self::OPTIONS:
		        	        case self::OWNER:
		        	        case self::PACK_KEYS:
		        	        case self::PAGE:
		        	        case self::PARSER:
		        	        case self::PARTIAL:
		        	        case self::PARTITIONING:
		        	        case self::PARTITIONS:
		        	        case self::PASSWORD:
		        	        case self::PHASE:
		        	        case self::PLUGIN:
		        	        case self::PLUGIN_DIR:
		        	        case self::PLUGINS:
		        	        case self::PORT:
		        	        case self::PRECEDES:
		        	        case self::PREPARE:
		        	        case self::PRESERVE:
		        	        case self::PREV:
		        	        case self::PROCESSLIST:
		        	        case self::PROFILE:
		        	        case self::PROFILES:
		        	        case self::PROXY:
		        	        case self::QUERY:
		        	        case self::QUICK:
		        	        case self::REBUILD:
		        	        case self::RECOVER:
		        	        case self::REDO_BUFFER_SIZE:
		        	        case self::REDUNDANT:
		        	        case self::RELAY:
		        	        case self::RELAY_LOG_FILE:
		        	        case self::RELAY_LOG_POS:
		        	        case self::RELAYLOG:
		        	        case self::REMOVE:
		        	        case self::REORGANIZE:
		        	        case self::REPAIR:
		        	        case self::REPLICATE_DO_DB:
		        	        case self::REPLICATE_DO_TABLE:
		        	        case self::REPLICATE_IGNORE_DB:
		        	        case self::REPLICATE_IGNORE_TABLE:
		        	        case self::REPLICATE_REWRITE_DB:
		        	        case self::REPLICATE_WILD_DO_TABLE:
		        	        case self::REPLICATE_WILD_IGNORE_TABLE:
		        	        case self::REPLICATION:
		        	        case self::RESET:
		        	        case self::RESUME:
		        	        case self::RETURNED_SQLSTATE:
		        	        case self::RETURNS:
		        	        case self::ROLLBACK:
		        	        case self::ROLLUP:
		        	        case self::ROTATE:
		        	        case self::ROW:
		        	        case self::ROWS:
		        	        case self::ROW_FORMAT:
		        	        case self::SAVEPOINT:
		        	        case self::SCHEDULE:
		        	        case self::SECURITY:
		        	        case self::SERVER:
		        	        case self::SESSION:
		        	        case self::SHARE:
		        	        case self::SHARED:
		        	        case self::SIGNED:
		        	        case self::SIMPLE:
		        	        case self::SLAVE:
		        	        case self::SLOW:
		        	        case self::SNAPSHOT:
		        	        case self::SOCKET:
		        	        case self::SOME:
		        	        case self::SONAME:
		        	        case self::SOUNDS:
		        	        case self::SOURCE:
		        	        case self::SQL_AFTER_GTIDS:
		        	        case self::SQL_AFTER_MTS_GAPS:
		        	        case self::SQL_BEFORE_GTIDS:
		        	        case self::SQL_BUFFER_RESULT:
		        	        case self::SQL_CACHE:
		        	        case self::SQL_NO_CACHE:
		        	        case self::SQL_THREAD:
		        	        case self::START:
		        	        case self::STARTS:
		        	        case self::STATS_AUTO_RECALC:
		        	        case self::STATS_PERSISTENT:
		        	        case self::STATS_SAMPLE_PAGES:
		        	        case self::STATUS:
		        	        case self::STOP:
		        	        case self::STORAGE:
		        	        case self::STRING:
		        	        case self::SUBCLASS_ORIGIN:
		        	        case self::SUBJECT:
		        	        case self::SUBPARTITION:
		        	        case self::SUBPARTITIONS:
		        	        case self::SUSPEND:
		        	        case self::SWAPS:
		        	        case self::SWITCHES:
		        	        case self::TABLE_NAME:
		        	        case self::TABLESPACE:
		        	        case self::TEMPORARY:
		        	        case self::TEMPTABLE:
		        	        case self::THAN:
		        	        case self::TRADITIONAL:
		        	        case self::TRANSACTION:
		        	        case self::TRIGGERS:
		        	        case self::TRUNCATE:
		        	        case self::UNDEFINED:
		        	        case self::UNDOFILE:
		        	        case self::UNDO_BUFFER_SIZE:
		        	        case self::UNINSTALL:
		        	        case self::UNKNOWN:
		        	        case self::UNTIL:
		        	        case self::UPGRADE:
		        	        case self::USER:
		        	        case self::USE_FRM:
		        	        case self::USER_RESOURCES:
		        	        case self::VALIDATION:
		        	        case self::VALUE:
		        	        case self::VARIABLES:
		        	        case self::VIEW:
		        	        case self::VISIBLE:
		        	        case self::WAIT:
		        	        case self::WARNINGS:
		        	        case self::WITHOUT:
		        	        case self::WORK:
		        	        case self::WRAPPER:
		        	        case self::X509:
		        	        case self::XA:
		        	        case self::XML:
		        	        case self::INTERNAL:
		        	        case self::QUARTER:
		        	        case self::MONTH:
		        	        case self::DAY:
		        	        case self::HOUR:
		        	        case self::MINUTE:
		        	        case self::WEEK:
		        	        case self::SECOND:
		        	        case self::MICROSECOND:
		        	        case self::TABLES:
		        	        case self::ROUTINE:
		        	        case self::EXECUTE:
		        	        case self::FILE:
		        	        case self::PROCESS:
		        	        case self::RELOAD:
		        	        case self::SHUTDOWN:
		        	        case self::SUPER:
		        	        case self::PRIVILEGES:
		        	        case self::SESSION_VARIABLES_ADMIN:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::ARCHIVE:
		        	        case self::BLACKHOLE:
		        	        case self::CSV:
		        	        case self::FEDERATED:
		        	        case self::INNODB:
		        	        case self::MEMORY:
		        	        case self::MRG_MYISAM:
		        	        case self::MYISAM:
		        	        case self::NDB:
		        	        case self::NDBCLUSTER:
		        	        case self::PERFORMANCE_SCHEMA:
		        	        case self::TOKUDB:
		        	        case self::REPEATABLE:
		        	        case self::COMMITTED:
		        	        case self::UNCOMMITTED:
		        	        case self::SERIALIZABLE:
		        	        case self::GEOMETRYCOLLECTION:
		        	        case self::LINESTRING:
		        	        case self::MULTILINESTRING:
		        	        case self::MULTIPOINT:
		        	        case self::MULTIPOLYGON:
		        	        case self::POINT:
		        	        case self::POLYGON:
		        	        case self::ABS:
		        	        case self::ACOS:
		        	        case self::ADDDATE:
		        	        case self::ADDTIME:
		        	        case self::AES_DECRYPT:
		        	        case self::AES_ENCRYPT:
		        	        case self::AREA:
		        	        case self::ASBINARY:
		        	        case self::ASIN:
		        	        case self::ASTEXT:
		        	        case self::ASWKB:
		        	        case self::ASWKT:
		        	        case self::ASYMMETRIC_DECRYPT:
		        	        case self::ASYMMETRIC_DERIVE:
		        	        case self::ASYMMETRIC_ENCRYPT:
		        	        case self::ASYMMETRIC_SIGN:
		        	        case self::ASYMMETRIC_VERIFY:
		        	        case self::ATAN:
		        	        case self::ATAN2:
		        	        case self::BENCHMARK:
		        	        case self::BIN:
		        	        case self::BIT_COUNT:
		        	        case self::BIT_LENGTH:
		        	        case self::BUFFER:
		        	        case self::CATALOG_NAME:
		        	        case self::CEIL:
		        	        case self::CEILING:
		        	        case self::CENTROID:
		        	        case self::CHARACTER_LENGTH:
		        	        case self::CHARSET:
		        	        case self::CHAR_LENGTH:
		        	        case self::COERCIBILITY:
		        	        case self::COLLATION:
		        	        case self::COMPRESS:
		        	        case self::CONCAT:
		        	        case self::CONCAT_WS:
		        	        case self::CONNECTION_ID:
		        	        case self::CONV:
		        	        case self::CONVERT_TZ:
		        	        case self::COS:
		        	        case self::COT:
		        	        case self::CRC32:
		        	        case self::CREATE_ASYMMETRIC_PRIV_KEY:
		        	        case self::CREATE_ASYMMETRIC_PUB_KEY:
		        	        case self::CREATE_DH_PARAMETERS:
		        	        case self::CREATE_DIGEST:
		        	        case self::CROSSES:
		        	        case self::DATEDIFF:
		        	        case self::DATE_FORMAT:
		        	        case self::DAYNAME:
		        	        case self::DAYOFMONTH:
		        	        case self::DAYOFWEEK:
		        	        case self::DAYOFYEAR:
		        	        case self::DECODE:
		        	        case self::DEGREES:
		        	        case self::DES_DECRYPT:
		        	        case self::DES_ENCRYPT:
		        	        case self::DIMENSION:
		        	        case self::DISJOINT:
		        	        case self::ELT:
		        	        case self::ENCODE:
		        	        case self::ENCRYPT:
		        	        case self::ENDPOINT:
		        	        case self::ENVELOPE:
		        	        case self::EQUALS:
		        	        case self::EXP:
		        	        case self::EXPORT_SET:
		        	        case self::EXTERIORRING:
		        	        case self::EXTRACTVALUE:
		        	        case self::FIELD:
		        	        case self::FIND_IN_SET:
		        	        case self::FLOOR:
		        	        case self::FORMAT:
		        	        case self::FOUND_ROWS:
		        	        case self::FROM_BASE64:
		        	        case self::FROM_DAYS:
		        	        case self::FROM_UNIXTIME:
		        	        case self::GEOMCOLLFROMTEXT:
		        	        case self::GEOMCOLLFROMWKB:
		        	        case self::GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::GEOMETRYFROMTEXT:
		        	        case self::GEOMETRYFROMWKB:
		        	        case self::GEOMETRYN:
		        	        case self::GEOMETRYTYPE:
		        	        case self::GEOMFROMTEXT:
		        	        case self::GEOMFROMWKB:
		        	        case self::GET_FORMAT:
		        	        case self::GET_LOCK:
		        	        case self::GLENGTH:
		        	        case self::GREATEST:
		        	        case self::GTID_SUBSET:
		        	        case self::GTID_SUBTRACT:
		        	        case self::HEX:
		        	        case self::IFNULL:
		        	        case self::INET6_ATON:
		        	        case self::INET6_NTOA:
		        	        case self::INET_ATON:
		        	        case self::INET_NTOA:
		        	        case self::INSTR:
		        	        case self::INTERIORRINGN:
		        	        case self::INTERSECTS:
		        	        case self::ISCLOSED:
		        	        case self::ISEMPTY:
		        	        case self::ISNULL:
		        	        case self::ISSIMPLE:
		        	        case self::IS_FREE_LOCK:
		        	        case self::IS_IPV4:
		        	        case self::IS_IPV4_COMPAT:
		        	        case self::IS_IPV4_MAPPED:
		        	        case self::IS_IPV6:
		        	        case self::IS_USED_LOCK:
		        	        case self::LAST_INSERT_ID:
		        	        case self::LCASE:
		        	        case self::LEAST:
		        	        case self::LENGTH:
		        	        case self::LINEFROMTEXT:
		        	        case self::LINEFROMWKB:
		        	        case self::LINESTRINGFROMTEXT:
		        	        case self::LINESTRINGFROMWKB:
		        	        case self::LN:
		        	        case self::LOAD_FILE:
		        	        case self::LOCATE:
		        	        case self::LOG:
		        	        case self::LOG10:
		        	        case self::LOG2:
		        	        case self::LOWER:
		        	        case self::LPAD:
		        	        case self::LTRIM:
		        	        case self::MAKEDATE:
		        	        case self::MAKETIME:
		        	        case self::MAKE_SET:
		        	        case self::MASTER_POS_WAIT:
		        	        case self::MBRCONTAINS:
		        	        case self::MBRDISJOINT:
		        	        case self::MBREQUAL:
		        	        case self::MBRINTERSECTS:
		        	        case self::MBROVERLAPS:
		        	        case self::MBRTOUCHES:
		        	        case self::MBRWITHIN:
		        	        case self::MD5:
		        	        case self::MLINEFROMTEXT:
		        	        case self::MLINEFROMWKB:
		        	        case self::MONTHNAME:
		        	        case self::MPOINTFROMTEXT:
		        	        case self::MPOINTFROMWKB:
		        	        case self::MPOLYFROMTEXT:
		        	        case self::MPOLYFROMWKB:
		        	        case self::MULTILINESTRINGFROMTEXT:
		        	        case self::MULTILINESTRINGFROMWKB:
		        	        case self::MULTIPOINTFROMTEXT:
		        	        case self::MULTIPOINTFROMWKB:
		        	        case self::MULTIPOLYGONFROMTEXT:
		        	        case self::MULTIPOLYGONFROMWKB:
		        	        case self::NAME_CONST:
		        	        case self::NULLIF:
		        	        case self::NUMGEOMETRIES:
		        	        case self::NUMINTERIORRINGS:
		        	        case self::NUMPOINTS:
		        	        case self::OCT:
		        	        case self::OCTET_LENGTH:
		        	        case self::ORD:
		        	        case self::OVERLAPS:
		        	        case self::PERIOD_ADD:
		        	        case self::PERIOD_DIFF:
		        	        case self::PI:
		        	        case self::POINTFROMTEXT:
		        	        case self::POINTFROMWKB:
		        	        case self::POINTN:
		        	        case self::POLYFROMTEXT:
		        	        case self::POLYFROMWKB:
		        	        case self::POLYGONFROMTEXT:
		        	        case self::POLYGONFROMWKB:
		        	        case self::POW:
		        	        case self::POWER:
		        	        case self::QUOTE:
		        	        case self::RADIANS:
		        	        case self::RAND:
		        	        case self::RANDOM_BYTES:
		        	        case self::RELEASE_LOCK:
		        	        case self::REVERSE:
		        	        case self::ROUND:
		        	        case self::ROW_COUNT:
		        	        case self::RPAD:
		        	        case self::RTRIM:
		        	        case self::SEC_TO_TIME:
		        	        case self::SESSION_USER:
		        	        case self::SHA:
		        	        case self::SHA1:
		        	        case self::SHA2:
		        	        case self::SCHEMA_NAME:
		        	        case self::SIGN:
		        	        case self::SIN:
		        	        case self::SLEEP:
		        	        case self::SOUNDEX:
		        	        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		        	        case self::SQRT:
		        	        case self::SRID:
		        	        case self::STARTPOINT:
		        	        case self::STRCMP:
		        	        case self::STR_TO_DATE:
		        	        case self::ST_AREA:
		        	        case self::ST_ASBINARY:
		        	        case self::ST_ASTEXT:
		        	        case self::ST_ASWKB:
		        	        case self::ST_ASWKT:
		        	        case self::ST_BUFFER:
		        	        case self::ST_CENTROID:
		        	        case self::ST_CONTAINS:
		        	        case self::ST_CROSSES:
		        	        case self::ST_DIFFERENCE:
		        	        case self::ST_DIMENSION:
		        	        case self::ST_DISJOINT:
		        	        case self::ST_DISTANCE:
		        	        case self::ST_ENDPOINT:
		        	        case self::ST_ENVELOPE:
		        	        case self::ST_EQUALS:
		        	        case self::ST_EXTERIORRING:
		        	        case self::ST_GEOMCOLLFROMTEXT:
		        	        case self::ST_GEOMCOLLFROMTXT:
		        	        case self::ST_GEOMCOLLFROMWKB:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::ST_GEOMETRYFROMTEXT:
		        	        case self::ST_GEOMETRYFROMWKB:
		        	        case self::ST_GEOMETRYN:
		        	        case self::ST_GEOMETRYTYPE:
		        	        case self::ST_GEOMFROMTEXT:
		        	        case self::ST_GEOMFROMWKB:
		        	        case self::ST_INTERIORRINGN:
		        	        case self::ST_INTERSECTION:
		        	        case self::ST_INTERSECTS:
		        	        case self::ST_ISCLOSED:
		        	        case self::ST_ISEMPTY:
		        	        case self::ST_ISSIMPLE:
		        	        case self::ST_LINEFROMTEXT:
		        	        case self::ST_LINEFROMWKB:
		        	        case self::ST_LINESTRINGFROMTEXT:
		        	        case self::ST_LINESTRINGFROMWKB:
		        	        case self::ST_NUMGEOMETRIES:
		        	        case self::ST_NUMINTERIORRING:
		        	        case self::ST_NUMINTERIORRINGS:
		        	        case self::ST_NUMPOINTS:
		        	        case self::ST_OVERLAPS:
		        	        case self::ST_POINTFROMTEXT:
		        	        case self::ST_POINTFROMWKB:
		        	        case self::ST_POINTN:
		        	        case self::ST_POLYFROMTEXT:
		        	        case self::ST_POLYFROMWKB:
		        	        case self::ST_POLYGONFROMTEXT:
		        	        case self::ST_POLYGONFROMWKB:
		        	        case self::ST_SRID:
		        	        case self::ST_STARTPOINT:
		        	        case self::ST_SYMDIFFERENCE:
		        	        case self::ST_TOUCHES:
		        	        case self::ST_UNION:
		        	        case self::ST_WITHIN:
		        	        case self::ST_X:
		        	        case self::ST_Y:
		        	        case self::SUBDATE:
		        	        case self::SUBSTRING_INDEX:
		        	        case self::SUBTIME:
		        	        case self::SYSTEM_USER:
		        	        case self::TAN:
		        	        case self::TIMEDIFF:
		        	        case self::TIMESTAMPADD:
		        	        case self::TIMESTAMPDIFF:
		        	        case self::TIME_FORMAT:
		        	        case self::TIME_TO_SEC:
		        	        case self::TOUCHES:
		        	        case self::TO_BASE64:
		        	        case self::TO_DAYS:
		        	        case self::TO_SECONDS:
		        	        case self::UCASE:
		        	        case self::UNCOMPRESS:
		        	        case self::UNCOMPRESSED_LENGTH:
		        	        case self::UNHEX:
		        	        case self::UNIX_TIMESTAMP:
		        	        case self::UPDATEXML:
		        	        case self::UPPER:
		        	        case self::UUID:
		        	        case self::UUID_SHORT:
		        	        case self::VALIDATE_PASSWORD_STRENGTH:
		        	        case self::VERSION:
		        	        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		        	        case self::WEEKDAY:
		        	        case self::WEEKOFYEAR:
		        	        case self::WEIGHT_STRING:
		        	        case self::WITHIN:
		        	        case self::YEARWEEK:
		        	        case self::Y_FUNCTION:
		        	        case self::X_FUNCTION:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        case self::ID:
		        	        case self::REVERSE_QUOTE_ID:
		        	        	$this->setState(2537);
		        	        	$this->uidList();
		        	        	break;

		        	        case self::ALL:
		        	        	$this->setState(2538);
		        	        	$this->match(self::ALL);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	    $this->setState(2541);
		        	    $this->match(self::TABLESPACE);
		        	break;

		        	case 35:
		        	    $localContext = new Context\AlterByTruncatePartitionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 35);
		        	    $this->setState(2542);
		        	    $this->match(self::TRUNCATE);
		        	    $this->setState(2543);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2546);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::CURRENT:
		        	        case self::DATABASE:
		        	        case self::DIAGNOSTICS:
		        	        case self::LEFT:
		        	        case self::NUMBER:
		        	        case self::RIGHT:
		        	        case self::STACKED:
		        	        case self::DATE:
		        	        case self::TIME:
		        	        case self::TIMESTAMP:
		        	        case self::DATETIME:
		        	        case self::YEAR:
		        	        case self::TEXT:
		        	        case self::ENUM:
		        	        case self::SERIAL:
		        	        case self::COUNT:
		        	        case self::POSITION:
		        	        case self::ACCOUNT:
		        	        case self::ACTION:
		        	        case self::AFTER:
		        	        case self::AGGREGATE:
		        	        case self::ALGORITHM:
		        	        case self::ANY:
		        	        case self::AT:
		        	        case self::AUTHORS:
		        	        case self::AUTOCOMMIT:
		        	        case self::AUTOEXTEND_SIZE:
		        	        case self::AUTO_INCREMENT:
		        	        case self::AVG_ROW_LENGTH:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::BIT:
		        	        case self::BLOCK:
		        	        case self::BOOL:
		        	        case self::BOOLEAN:
		        	        case self::BTREE:
		        	        case self::CACHE:
		        	        case self::CASCADED:
		        	        case self::CHAIN:
		        	        case self::CHANGED:
		        	        case self::CHANNEL:
		        	        case self::CHECKSUM:
		        	        case self::PAGE_CHECKSUM:
		        	        case self::CIPHER:
		        	        case self::CLASS_ORIGIN:
		        	        case self::CLIENT:
		        	        case self::CLOSE:
		        	        case self::COALESCE:
		        	        case self::CODE:
		        	        case self::COLUMNS:
		        	        case self::COLUMN_FORMAT:
		        	        case self::COLUMN_NAME:
		        	        case self::COMMENT:
		        	        case self::COMMIT:
		        	        case self::COMPACT:
		        	        case self::COMPLETION:
		        	        case self::COMPRESSED:
		        	        case self::COMPRESSION:
		        	        case self::CONCURRENT:
		        	        case self::CONNECTION:
		        	        case self::CONSISTENT:
		        	        case self::CONSTRAINT_CATALOG:
		        	        case self::CONSTRAINT_SCHEMA:
		        	        case self::CONSTRAINT_NAME:
		        	        case self::CONTAINS:
		        	        case self::CONTEXT:
		        	        case self::CONTRIBUTORS:
		        	        case self::COPY:
		        	        case self::CPU:
		        	        case self::CURSOR_NAME:
		        	        case self::DATA:
		        	        case self::DATAFILE:
		        	        case self::DEALLOCATE:
		        	        case self::DEFAULT_AUTH:
		        	        case self::DEFINER:
		        	        case self::DELAY_KEY_WRITE:
		        	        case self::DES_KEY_FILE:
		        	        case self::DIRECTORY:
		        	        case self::DISABLE:
		        	        case self::DISCARD:
		        	        case self::DISK:
		        	        case self::DO:
		        	        case self::DUMPFILE:
		        	        case self::DUPLICATE:
		        	        case self::DYNAMIC:
		        	        case self::ENABLE:
		        	        case self::ENCRYPTION:
		        	        case self::END:
		        	        case self::ENDS:
		        	        case self::ENGINE:
		        	        case self::ENGINES:
		        	        case self::ERROR:
		        	        case self::ERRORS:
		        	        case self::ESCAPE:
		        	        case self::EVEN:
		        	        case self::EVENT:
		        	        case self::EVENTS:
		        	        case self::EVERY:
		        	        case self::EXCHANGE:
		        	        case self::EXCLUSIVE:
		        	        case self::EXPIRE:
		        	        case self::EXPORT:
		        	        case self::EXTENDED:
		        	        case self::EXTENT_SIZE:
		        	        case self::FAST:
		        	        case self::FAULTS:
		        	        case self::FIELDS:
		        	        case self::FILE_BLOCK_SIZE:
		        	        case self::FILTER:
		        	        case self::FIRST:
		        	        case self::FIXED:
		        	        case self::FLUSH:
		        	        case self::FOLLOWS:
		        	        case self::FOUND:
		        	        case self::FULL:
		        	        case self::FUNCTION:
		        	        case self::GENERAL:
		        	        case self::GLOBAL:
		        	        case self::GRANTS:
		        	        case self::GROUP_REPLICATION:
		        	        case self::HANDLER:
		        	        case self::HASH:
		        	        case self::HELP:
		        	        case self::HOST:
		        	        case self::HOSTS:
		        	        case self::IDENTIFIED:
		        	        case self::IGNORE_SERVER_IDS:
		        	        case self::IMPORT:
		        	        case self::INDEXES:
		        	        case self::INITIAL_SIZE:
		        	        case self::INPLACE:
		        	        case self::INSERT_METHOD:
		        	        case self::INSTALL:
		        	        case self::INSTANCE:
		        	        case self::INVISIBLE:
		        	        case self::INVOKER:
		        	        case self::IO:
		        	        case self::IO_THREAD:
		        	        case self::IPC:
		        	        case self::ISOLATION:
		        	        case self::ISSUER:
		        	        case self::JSON:
		        	        case self::KEY_BLOCK_SIZE:
		        	        case self::LANGUAGE:
		        	        case self::LAST:
		        	        case self::LEAVES:
		        	        case self::LESS:
		        	        case self::LEVEL:
		        	        case self::LIST:
		        	        case self::LOCAL:
		        	        case self::LOGFILE:
		        	        case self::LOGS:
		        	        case self::MASTER:
		        	        case self::MASTER_AUTO_POSITION:
		        	        case self::MASTER_CONNECT_RETRY:
		        	        case self::MASTER_DELAY:
		        	        case self::MASTER_HEARTBEAT_PERIOD:
		        	        case self::MASTER_HOST:
		        	        case self::MASTER_LOG_FILE:
		        	        case self::MASTER_LOG_POS:
		        	        case self::MASTER_PASSWORD:
		        	        case self::MASTER_PORT:
		        	        case self::MASTER_RETRY_COUNT:
		        	        case self::MASTER_SSL:
		        	        case self::MASTER_SSL_CA:
		        	        case self::MASTER_SSL_CAPATH:
		        	        case self::MASTER_SSL_CERT:
		        	        case self::MASTER_SSL_CIPHER:
		        	        case self::MASTER_SSL_CRL:
		        	        case self::MASTER_SSL_CRLPATH:
		        	        case self::MASTER_SSL_KEY:
		        	        case self::MASTER_TLS_VERSION:
		        	        case self::MASTER_USER:
		        	        case self::MAX_CONNECTIONS_PER_HOUR:
		        	        case self::MAX_QUERIES_PER_HOUR:
		        	        case self::MAX_ROWS:
		        	        case self::MAX_SIZE:
		        	        case self::MAX_UPDATES_PER_HOUR:
		        	        case self::MAX_USER_CONNECTIONS:
		        	        case self::MEDIUM:
		        	        case self::MERGE:
		        	        case self::MESSAGE_TEXT:
		        	        case self::MID:
		        	        case self::MIGRATE:
		        	        case self::MIN_ROWS:
		        	        case self::MODE:
		        	        case self::MODIFY:
		        	        case self::MUTEX:
		        	        case self::MYSQL:
		        	        case self::MYSQL_ERRNO:
		        	        case self::NAME:
		        	        case self::NAMES:
		        	        case self::NCHAR:
		        	        case self::NEVER:
		        	        case self::NEXT:
		        	        case self::NO:
		        	        case self::NODEGROUP:
		        	        case self::NONE:
		        	        case self::OFFLINE:
		        	        case self::OFFSET:
		        	        case self::OJ:
		        	        case self::OLD_PASSWORD:
		        	        case self::ONE:
		        	        case self::ONLINE:
		        	        case self::ONLY:
		        	        case self::OPEN:
		        	        case self::OPTIMIZER_COSTS:
		        	        case self::OPTIONS:
		        	        case self::OWNER:
		        	        case self::PACK_KEYS:
		        	        case self::PAGE:
		        	        case self::PARSER:
		        	        case self::PARTIAL:
		        	        case self::PARTITIONING:
		        	        case self::PARTITIONS:
		        	        case self::PASSWORD:
		        	        case self::PHASE:
		        	        case self::PLUGIN:
		        	        case self::PLUGIN_DIR:
		        	        case self::PLUGINS:
		        	        case self::PORT:
		        	        case self::PRECEDES:
		        	        case self::PREPARE:
		        	        case self::PRESERVE:
		        	        case self::PREV:
		        	        case self::PROCESSLIST:
		        	        case self::PROFILE:
		        	        case self::PROFILES:
		        	        case self::PROXY:
		        	        case self::QUERY:
		        	        case self::QUICK:
		        	        case self::REBUILD:
		        	        case self::RECOVER:
		        	        case self::REDO_BUFFER_SIZE:
		        	        case self::REDUNDANT:
		        	        case self::RELAY:
		        	        case self::RELAY_LOG_FILE:
		        	        case self::RELAY_LOG_POS:
		        	        case self::RELAYLOG:
		        	        case self::REMOVE:
		        	        case self::REORGANIZE:
		        	        case self::REPAIR:
		        	        case self::REPLICATE_DO_DB:
		        	        case self::REPLICATE_DO_TABLE:
		        	        case self::REPLICATE_IGNORE_DB:
		        	        case self::REPLICATE_IGNORE_TABLE:
		        	        case self::REPLICATE_REWRITE_DB:
		        	        case self::REPLICATE_WILD_DO_TABLE:
		        	        case self::REPLICATE_WILD_IGNORE_TABLE:
		        	        case self::REPLICATION:
		        	        case self::RESET:
		        	        case self::RESUME:
		        	        case self::RETURNED_SQLSTATE:
		        	        case self::RETURNS:
		        	        case self::ROLLBACK:
		        	        case self::ROLLUP:
		        	        case self::ROTATE:
		        	        case self::ROW:
		        	        case self::ROWS:
		        	        case self::ROW_FORMAT:
		        	        case self::SAVEPOINT:
		        	        case self::SCHEDULE:
		        	        case self::SECURITY:
		        	        case self::SERVER:
		        	        case self::SESSION:
		        	        case self::SHARE:
		        	        case self::SHARED:
		        	        case self::SIGNED:
		        	        case self::SIMPLE:
		        	        case self::SLAVE:
		        	        case self::SLOW:
		        	        case self::SNAPSHOT:
		        	        case self::SOCKET:
		        	        case self::SOME:
		        	        case self::SONAME:
		        	        case self::SOUNDS:
		        	        case self::SOURCE:
		        	        case self::SQL_AFTER_GTIDS:
		        	        case self::SQL_AFTER_MTS_GAPS:
		        	        case self::SQL_BEFORE_GTIDS:
		        	        case self::SQL_BUFFER_RESULT:
		        	        case self::SQL_CACHE:
		        	        case self::SQL_NO_CACHE:
		        	        case self::SQL_THREAD:
		        	        case self::START:
		        	        case self::STARTS:
		        	        case self::STATS_AUTO_RECALC:
		        	        case self::STATS_PERSISTENT:
		        	        case self::STATS_SAMPLE_PAGES:
		        	        case self::STATUS:
		        	        case self::STOP:
		        	        case self::STORAGE:
		        	        case self::STRING:
		        	        case self::SUBCLASS_ORIGIN:
		        	        case self::SUBJECT:
		        	        case self::SUBPARTITION:
		        	        case self::SUBPARTITIONS:
		        	        case self::SUSPEND:
		        	        case self::SWAPS:
		        	        case self::SWITCHES:
		        	        case self::TABLE_NAME:
		        	        case self::TABLESPACE:
		        	        case self::TEMPORARY:
		        	        case self::TEMPTABLE:
		        	        case self::THAN:
		        	        case self::TRADITIONAL:
		        	        case self::TRANSACTION:
		        	        case self::TRIGGERS:
		        	        case self::TRUNCATE:
		        	        case self::UNDEFINED:
		        	        case self::UNDOFILE:
		        	        case self::UNDO_BUFFER_SIZE:
		        	        case self::UNINSTALL:
		        	        case self::UNKNOWN:
		        	        case self::UNTIL:
		        	        case self::UPGRADE:
		        	        case self::USER:
		        	        case self::USE_FRM:
		        	        case self::USER_RESOURCES:
		        	        case self::VALIDATION:
		        	        case self::VALUE:
		        	        case self::VARIABLES:
		        	        case self::VIEW:
		        	        case self::VISIBLE:
		        	        case self::WAIT:
		        	        case self::WARNINGS:
		        	        case self::WITHOUT:
		        	        case self::WORK:
		        	        case self::WRAPPER:
		        	        case self::X509:
		        	        case self::XA:
		        	        case self::XML:
		        	        case self::INTERNAL:
		        	        case self::QUARTER:
		        	        case self::MONTH:
		        	        case self::DAY:
		        	        case self::HOUR:
		        	        case self::MINUTE:
		        	        case self::WEEK:
		        	        case self::SECOND:
		        	        case self::MICROSECOND:
		        	        case self::TABLES:
		        	        case self::ROUTINE:
		        	        case self::EXECUTE:
		        	        case self::FILE:
		        	        case self::PROCESS:
		        	        case self::RELOAD:
		        	        case self::SHUTDOWN:
		        	        case self::SUPER:
		        	        case self::PRIVILEGES:
		        	        case self::SESSION_VARIABLES_ADMIN:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::ARCHIVE:
		        	        case self::BLACKHOLE:
		        	        case self::CSV:
		        	        case self::FEDERATED:
		        	        case self::INNODB:
		        	        case self::MEMORY:
		        	        case self::MRG_MYISAM:
		        	        case self::MYISAM:
		        	        case self::NDB:
		        	        case self::NDBCLUSTER:
		        	        case self::PERFORMANCE_SCHEMA:
		        	        case self::TOKUDB:
		        	        case self::REPEATABLE:
		        	        case self::COMMITTED:
		        	        case self::UNCOMMITTED:
		        	        case self::SERIALIZABLE:
		        	        case self::GEOMETRYCOLLECTION:
		        	        case self::LINESTRING:
		        	        case self::MULTILINESTRING:
		        	        case self::MULTIPOINT:
		        	        case self::MULTIPOLYGON:
		        	        case self::POINT:
		        	        case self::POLYGON:
		        	        case self::ABS:
		        	        case self::ACOS:
		        	        case self::ADDDATE:
		        	        case self::ADDTIME:
		        	        case self::AES_DECRYPT:
		        	        case self::AES_ENCRYPT:
		        	        case self::AREA:
		        	        case self::ASBINARY:
		        	        case self::ASIN:
		        	        case self::ASTEXT:
		        	        case self::ASWKB:
		        	        case self::ASWKT:
		        	        case self::ASYMMETRIC_DECRYPT:
		        	        case self::ASYMMETRIC_DERIVE:
		        	        case self::ASYMMETRIC_ENCRYPT:
		        	        case self::ASYMMETRIC_SIGN:
		        	        case self::ASYMMETRIC_VERIFY:
		        	        case self::ATAN:
		        	        case self::ATAN2:
		        	        case self::BENCHMARK:
		        	        case self::BIN:
		        	        case self::BIT_COUNT:
		        	        case self::BIT_LENGTH:
		        	        case self::BUFFER:
		        	        case self::CATALOG_NAME:
		        	        case self::CEIL:
		        	        case self::CEILING:
		        	        case self::CENTROID:
		        	        case self::CHARACTER_LENGTH:
		        	        case self::CHARSET:
		        	        case self::CHAR_LENGTH:
		        	        case self::COERCIBILITY:
		        	        case self::COLLATION:
		        	        case self::COMPRESS:
		        	        case self::CONCAT:
		        	        case self::CONCAT_WS:
		        	        case self::CONNECTION_ID:
		        	        case self::CONV:
		        	        case self::CONVERT_TZ:
		        	        case self::COS:
		        	        case self::COT:
		        	        case self::CRC32:
		        	        case self::CREATE_ASYMMETRIC_PRIV_KEY:
		        	        case self::CREATE_ASYMMETRIC_PUB_KEY:
		        	        case self::CREATE_DH_PARAMETERS:
		        	        case self::CREATE_DIGEST:
		        	        case self::CROSSES:
		        	        case self::DATEDIFF:
		        	        case self::DATE_FORMAT:
		        	        case self::DAYNAME:
		        	        case self::DAYOFMONTH:
		        	        case self::DAYOFWEEK:
		        	        case self::DAYOFYEAR:
		        	        case self::DECODE:
		        	        case self::DEGREES:
		        	        case self::DES_DECRYPT:
		        	        case self::DES_ENCRYPT:
		        	        case self::DIMENSION:
		        	        case self::DISJOINT:
		        	        case self::ELT:
		        	        case self::ENCODE:
		        	        case self::ENCRYPT:
		        	        case self::ENDPOINT:
		        	        case self::ENVELOPE:
		        	        case self::EQUALS:
		        	        case self::EXP:
		        	        case self::EXPORT_SET:
		        	        case self::EXTERIORRING:
		        	        case self::EXTRACTVALUE:
		        	        case self::FIELD:
		        	        case self::FIND_IN_SET:
		        	        case self::FLOOR:
		        	        case self::FORMAT:
		        	        case self::FOUND_ROWS:
		        	        case self::FROM_BASE64:
		        	        case self::FROM_DAYS:
		        	        case self::FROM_UNIXTIME:
		        	        case self::GEOMCOLLFROMTEXT:
		        	        case self::GEOMCOLLFROMWKB:
		        	        case self::GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::GEOMETRYFROMTEXT:
		        	        case self::GEOMETRYFROMWKB:
		        	        case self::GEOMETRYN:
		        	        case self::GEOMETRYTYPE:
		        	        case self::GEOMFROMTEXT:
		        	        case self::GEOMFROMWKB:
		        	        case self::GET_FORMAT:
		        	        case self::GET_LOCK:
		        	        case self::GLENGTH:
		        	        case self::GREATEST:
		        	        case self::GTID_SUBSET:
		        	        case self::GTID_SUBTRACT:
		        	        case self::HEX:
		        	        case self::IFNULL:
		        	        case self::INET6_ATON:
		        	        case self::INET6_NTOA:
		        	        case self::INET_ATON:
		        	        case self::INET_NTOA:
		        	        case self::INSTR:
		        	        case self::INTERIORRINGN:
		        	        case self::INTERSECTS:
		        	        case self::ISCLOSED:
		        	        case self::ISEMPTY:
		        	        case self::ISNULL:
		        	        case self::ISSIMPLE:
		        	        case self::IS_FREE_LOCK:
		        	        case self::IS_IPV4:
		        	        case self::IS_IPV4_COMPAT:
		        	        case self::IS_IPV4_MAPPED:
		        	        case self::IS_IPV6:
		        	        case self::IS_USED_LOCK:
		        	        case self::LAST_INSERT_ID:
		        	        case self::LCASE:
		        	        case self::LEAST:
		        	        case self::LENGTH:
		        	        case self::LINEFROMTEXT:
		        	        case self::LINEFROMWKB:
		        	        case self::LINESTRINGFROMTEXT:
		        	        case self::LINESTRINGFROMWKB:
		        	        case self::LN:
		        	        case self::LOAD_FILE:
		        	        case self::LOCATE:
		        	        case self::LOG:
		        	        case self::LOG10:
		        	        case self::LOG2:
		        	        case self::LOWER:
		        	        case self::LPAD:
		        	        case self::LTRIM:
		        	        case self::MAKEDATE:
		        	        case self::MAKETIME:
		        	        case self::MAKE_SET:
		        	        case self::MASTER_POS_WAIT:
		        	        case self::MBRCONTAINS:
		        	        case self::MBRDISJOINT:
		        	        case self::MBREQUAL:
		        	        case self::MBRINTERSECTS:
		        	        case self::MBROVERLAPS:
		        	        case self::MBRTOUCHES:
		        	        case self::MBRWITHIN:
		        	        case self::MD5:
		        	        case self::MLINEFROMTEXT:
		        	        case self::MLINEFROMWKB:
		        	        case self::MONTHNAME:
		        	        case self::MPOINTFROMTEXT:
		        	        case self::MPOINTFROMWKB:
		        	        case self::MPOLYFROMTEXT:
		        	        case self::MPOLYFROMWKB:
		        	        case self::MULTILINESTRINGFROMTEXT:
		        	        case self::MULTILINESTRINGFROMWKB:
		        	        case self::MULTIPOINTFROMTEXT:
		        	        case self::MULTIPOINTFROMWKB:
		        	        case self::MULTIPOLYGONFROMTEXT:
		        	        case self::MULTIPOLYGONFROMWKB:
		        	        case self::NAME_CONST:
		        	        case self::NULLIF:
		        	        case self::NUMGEOMETRIES:
		        	        case self::NUMINTERIORRINGS:
		        	        case self::NUMPOINTS:
		        	        case self::OCT:
		        	        case self::OCTET_LENGTH:
		        	        case self::ORD:
		        	        case self::OVERLAPS:
		        	        case self::PERIOD_ADD:
		        	        case self::PERIOD_DIFF:
		        	        case self::PI:
		        	        case self::POINTFROMTEXT:
		        	        case self::POINTFROMWKB:
		        	        case self::POINTN:
		        	        case self::POLYFROMTEXT:
		        	        case self::POLYFROMWKB:
		        	        case self::POLYGONFROMTEXT:
		        	        case self::POLYGONFROMWKB:
		        	        case self::POW:
		        	        case self::POWER:
		        	        case self::QUOTE:
		        	        case self::RADIANS:
		        	        case self::RAND:
		        	        case self::RANDOM_BYTES:
		        	        case self::RELEASE_LOCK:
		        	        case self::REVERSE:
		        	        case self::ROUND:
		        	        case self::ROW_COUNT:
		        	        case self::RPAD:
		        	        case self::RTRIM:
		        	        case self::SEC_TO_TIME:
		        	        case self::SESSION_USER:
		        	        case self::SHA:
		        	        case self::SHA1:
		        	        case self::SHA2:
		        	        case self::SCHEMA_NAME:
		        	        case self::SIGN:
		        	        case self::SIN:
		        	        case self::SLEEP:
		        	        case self::SOUNDEX:
		        	        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		        	        case self::SQRT:
		        	        case self::SRID:
		        	        case self::STARTPOINT:
		        	        case self::STRCMP:
		        	        case self::STR_TO_DATE:
		        	        case self::ST_AREA:
		        	        case self::ST_ASBINARY:
		        	        case self::ST_ASTEXT:
		        	        case self::ST_ASWKB:
		        	        case self::ST_ASWKT:
		        	        case self::ST_BUFFER:
		        	        case self::ST_CENTROID:
		        	        case self::ST_CONTAINS:
		        	        case self::ST_CROSSES:
		        	        case self::ST_DIFFERENCE:
		        	        case self::ST_DIMENSION:
		        	        case self::ST_DISJOINT:
		        	        case self::ST_DISTANCE:
		        	        case self::ST_ENDPOINT:
		        	        case self::ST_ENVELOPE:
		        	        case self::ST_EQUALS:
		        	        case self::ST_EXTERIORRING:
		        	        case self::ST_GEOMCOLLFROMTEXT:
		        	        case self::ST_GEOMCOLLFROMTXT:
		        	        case self::ST_GEOMCOLLFROMWKB:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::ST_GEOMETRYFROMTEXT:
		        	        case self::ST_GEOMETRYFROMWKB:
		        	        case self::ST_GEOMETRYN:
		        	        case self::ST_GEOMETRYTYPE:
		        	        case self::ST_GEOMFROMTEXT:
		        	        case self::ST_GEOMFROMWKB:
		        	        case self::ST_INTERIORRINGN:
		        	        case self::ST_INTERSECTION:
		        	        case self::ST_INTERSECTS:
		        	        case self::ST_ISCLOSED:
		        	        case self::ST_ISEMPTY:
		        	        case self::ST_ISSIMPLE:
		        	        case self::ST_LINEFROMTEXT:
		        	        case self::ST_LINEFROMWKB:
		        	        case self::ST_LINESTRINGFROMTEXT:
		        	        case self::ST_LINESTRINGFROMWKB:
		        	        case self::ST_NUMGEOMETRIES:
		        	        case self::ST_NUMINTERIORRING:
		        	        case self::ST_NUMINTERIORRINGS:
		        	        case self::ST_NUMPOINTS:
		        	        case self::ST_OVERLAPS:
		        	        case self::ST_POINTFROMTEXT:
		        	        case self::ST_POINTFROMWKB:
		        	        case self::ST_POINTN:
		        	        case self::ST_POLYFROMTEXT:
		        	        case self::ST_POLYFROMWKB:
		        	        case self::ST_POLYGONFROMTEXT:
		        	        case self::ST_POLYGONFROMWKB:
		        	        case self::ST_SRID:
		        	        case self::ST_STARTPOINT:
		        	        case self::ST_SYMDIFFERENCE:
		        	        case self::ST_TOUCHES:
		        	        case self::ST_UNION:
		        	        case self::ST_WITHIN:
		        	        case self::ST_X:
		        	        case self::ST_Y:
		        	        case self::SUBDATE:
		        	        case self::SUBSTRING_INDEX:
		        	        case self::SUBTIME:
		        	        case self::SYSTEM_USER:
		        	        case self::TAN:
		        	        case self::TIMEDIFF:
		        	        case self::TIMESTAMPADD:
		        	        case self::TIMESTAMPDIFF:
		        	        case self::TIME_FORMAT:
		        	        case self::TIME_TO_SEC:
		        	        case self::TOUCHES:
		        	        case self::TO_BASE64:
		        	        case self::TO_DAYS:
		        	        case self::TO_SECONDS:
		        	        case self::UCASE:
		        	        case self::UNCOMPRESS:
		        	        case self::UNCOMPRESSED_LENGTH:
		        	        case self::UNHEX:
		        	        case self::UNIX_TIMESTAMP:
		        	        case self::UPDATEXML:
		        	        case self::UPPER:
		        	        case self::UUID:
		        	        case self::UUID_SHORT:
		        	        case self::VALIDATE_PASSWORD_STRENGTH:
		        	        case self::VERSION:
		        	        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		        	        case self::WEEKDAY:
		        	        case self::WEEKOFYEAR:
		        	        case self::WEIGHT_STRING:
		        	        case self::WITHIN:
		        	        case self::YEARWEEK:
		        	        case self::Y_FUNCTION:
		        	        case self::X_FUNCTION:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        case self::ID:
		        	        case self::REVERSE_QUOTE_ID:
		        	        	$this->setState(2544);
		        	        	$this->uidList();
		        	        	break;

		        	        case self::ALL:
		        	        	$this->setState(2545);
		        	        	$this->match(self::ALL);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 36:
		        	    $localContext = new Context\AlterByCoalescePartitionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 36);
		        	    $this->setState(2548);
		        	    $this->match(self::COALESCE);
		        	    $this->setState(2549);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2550);
		        	    $this->decimalLiteral();
		        	break;

		        	case 37:
		        	    $localContext = new Context\AlterByReorganizePartitionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 37);
		        	    $this->setState(2551);
		        	    $this->match(self::REORGANIZE);
		        	    $this->setState(2552);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2553);
		        	    $this->uidList();
		        	    $this->setState(2554);
		        	    $this->match(self::INTO);
		        	    $this->setState(2555);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2556);
		        	    $this->partitionDefinition();
		        	    $this->setState(2561);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(2557);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(2558);
		        	    	$this->partitionDefinition();
		        	    	$this->setState(2563);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2564);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 38:
		        	    $localContext = new Context\AlterByExchangePartitionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 38);
		        	    $this->setState(2566);
		        	    $this->match(self::EXCHANGE);
		        	    $this->setState(2567);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2568);
		        	    $this->uid();
		        	    $this->setState(2569);
		        	    $this->match(self::WITH);
		        	    $this->setState(2570);
		        	    $this->match(self::TABLE);
		        	    $this->setState(2571);
		        	    $this->tableName();
		        	    $this->setState(2574);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::WITH || $_la === self::WITHOUT) {
		        	    	$this->setState(2572);

		        	    	$localContext->validationFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::WITH || $_la === self::WITHOUT)) {
		        	    		    $localContext->validationFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(2573);
		        	    	$this->match(self::VALIDATION);
		        	    }
		        	break;

		        	case 39:
		        	    $localContext = new Context\AlterByAnalyzePartitionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 39);
		        	    $this->setState(2576);
		        	    $this->match(self::ANALYZE);
		        	    $this->setState(2577);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2580);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::CURRENT:
		        	        case self::DATABASE:
		        	        case self::DIAGNOSTICS:
		        	        case self::LEFT:
		        	        case self::NUMBER:
		        	        case self::RIGHT:
		        	        case self::STACKED:
		        	        case self::DATE:
		        	        case self::TIME:
		        	        case self::TIMESTAMP:
		        	        case self::DATETIME:
		        	        case self::YEAR:
		        	        case self::TEXT:
		        	        case self::ENUM:
		        	        case self::SERIAL:
		        	        case self::COUNT:
		        	        case self::POSITION:
		        	        case self::ACCOUNT:
		        	        case self::ACTION:
		        	        case self::AFTER:
		        	        case self::AGGREGATE:
		        	        case self::ALGORITHM:
		        	        case self::ANY:
		        	        case self::AT:
		        	        case self::AUTHORS:
		        	        case self::AUTOCOMMIT:
		        	        case self::AUTOEXTEND_SIZE:
		        	        case self::AUTO_INCREMENT:
		        	        case self::AVG_ROW_LENGTH:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::BIT:
		        	        case self::BLOCK:
		        	        case self::BOOL:
		        	        case self::BOOLEAN:
		        	        case self::BTREE:
		        	        case self::CACHE:
		        	        case self::CASCADED:
		        	        case self::CHAIN:
		        	        case self::CHANGED:
		        	        case self::CHANNEL:
		        	        case self::CHECKSUM:
		        	        case self::PAGE_CHECKSUM:
		        	        case self::CIPHER:
		        	        case self::CLASS_ORIGIN:
		        	        case self::CLIENT:
		        	        case self::CLOSE:
		        	        case self::COALESCE:
		        	        case self::CODE:
		        	        case self::COLUMNS:
		        	        case self::COLUMN_FORMAT:
		        	        case self::COLUMN_NAME:
		        	        case self::COMMENT:
		        	        case self::COMMIT:
		        	        case self::COMPACT:
		        	        case self::COMPLETION:
		        	        case self::COMPRESSED:
		        	        case self::COMPRESSION:
		        	        case self::CONCURRENT:
		        	        case self::CONNECTION:
		        	        case self::CONSISTENT:
		        	        case self::CONSTRAINT_CATALOG:
		        	        case self::CONSTRAINT_SCHEMA:
		        	        case self::CONSTRAINT_NAME:
		        	        case self::CONTAINS:
		        	        case self::CONTEXT:
		        	        case self::CONTRIBUTORS:
		        	        case self::COPY:
		        	        case self::CPU:
		        	        case self::CURSOR_NAME:
		        	        case self::DATA:
		        	        case self::DATAFILE:
		        	        case self::DEALLOCATE:
		        	        case self::DEFAULT_AUTH:
		        	        case self::DEFINER:
		        	        case self::DELAY_KEY_WRITE:
		        	        case self::DES_KEY_FILE:
		        	        case self::DIRECTORY:
		        	        case self::DISABLE:
		        	        case self::DISCARD:
		        	        case self::DISK:
		        	        case self::DO:
		        	        case self::DUMPFILE:
		        	        case self::DUPLICATE:
		        	        case self::DYNAMIC:
		        	        case self::ENABLE:
		        	        case self::ENCRYPTION:
		        	        case self::END:
		        	        case self::ENDS:
		        	        case self::ENGINE:
		        	        case self::ENGINES:
		        	        case self::ERROR:
		        	        case self::ERRORS:
		        	        case self::ESCAPE:
		        	        case self::EVEN:
		        	        case self::EVENT:
		        	        case self::EVENTS:
		        	        case self::EVERY:
		        	        case self::EXCHANGE:
		        	        case self::EXCLUSIVE:
		        	        case self::EXPIRE:
		        	        case self::EXPORT:
		        	        case self::EXTENDED:
		        	        case self::EXTENT_SIZE:
		        	        case self::FAST:
		        	        case self::FAULTS:
		        	        case self::FIELDS:
		        	        case self::FILE_BLOCK_SIZE:
		        	        case self::FILTER:
		        	        case self::FIRST:
		        	        case self::FIXED:
		        	        case self::FLUSH:
		        	        case self::FOLLOWS:
		        	        case self::FOUND:
		        	        case self::FULL:
		        	        case self::FUNCTION:
		        	        case self::GENERAL:
		        	        case self::GLOBAL:
		        	        case self::GRANTS:
		        	        case self::GROUP_REPLICATION:
		        	        case self::HANDLER:
		        	        case self::HASH:
		        	        case self::HELP:
		        	        case self::HOST:
		        	        case self::HOSTS:
		        	        case self::IDENTIFIED:
		        	        case self::IGNORE_SERVER_IDS:
		        	        case self::IMPORT:
		        	        case self::INDEXES:
		        	        case self::INITIAL_SIZE:
		        	        case self::INPLACE:
		        	        case self::INSERT_METHOD:
		        	        case self::INSTALL:
		        	        case self::INSTANCE:
		        	        case self::INVISIBLE:
		        	        case self::INVOKER:
		        	        case self::IO:
		        	        case self::IO_THREAD:
		        	        case self::IPC:
		        	        case self::ISOLATION:
		        	        case self::ISSUER:
		        	        case self::JSON:
		        	        case self::KEY_BLOCK_SIZE:
		        	        case self::LANGUAGE:
		        	        case self::LAST:
		        	        case self::LEAVES:
		        	        case self::LESS:
		        	        case self::LEVEL:
		        	        case self::LIST:
		        	        case self::LOCAL:
		        	        case self::LOGFILE:
		        	        case self::LOGS:
		        	        case self::MASTER:
		        	        case self::MASTER_AUTO_POSITION:
		        	        case self::MASTER_CONNECT_RETRY:
		        	        case self::MASTER_DELAY:
		        	        case self::MASTER_HEARTBEAT_PERIOD:
		        	        case self::MASTER_HOST:
		        	        case self::MASTER_LOG_FILE:
		        	        case self::MASTER_LOG_POS:
		        	        case self::MASTER_PASSWORD:
		        	        case self::MASTER_PORT:
		        	        case self::MASTER_RETRY_COUNT:
		        	        case self::MASTER_SSL:
		        	        case self::MASTER_SSL_CA:
		        	        case self::MASTER_SSL_CAPATH:
		        	        case self::MASTER_SSL_CERT:
		        	        case self::MASTER_SSL_CIPHER:
		        	        case self::MASTER_SSL_CRL:
		        	        case self::MASTER_SSL_CRLPATH:
		        	        case self::MASTER_SSL_KEY:
		        	        case self::MASTER_TLS_VERSION:
		        	        case self::MASTER_USER:
		        	        case self::MAX_CONNECTIONS_PER_HOUR:
		        	        case self::MAX_QUERIES_PER_HOUR:
		        	        case self::MAX_ROWS:
		        	        case self::MAX_SIZE:
		        	        case self::MAX_UPDATES_PER_HOUR:
		        	        case self::MAX_USER_CONNECTIONS:
		        	        case self::MEDIUM:
		        	        case self::MERGE:
		        	        case self::MESSAGE_TEXT:
		        	        case self::MID:
		        	        case self::MIGRATE:
		        	        case self::MIN_ROWS:
		        	        case self::MODE:
		        	        case self::MODIFY:
		        	        case self::MUTEX:
		        	        case self::MYSQL:
		        	        case self::MYSQL_ERRNO:
		        	        case self::NAME:
		        	        case self::NAMES:
		        	        case self::NCHAR:
		        	        case self::NEVER:
		        	        case self::NEXT:
		        	        case self::NO:
		        	        case self::NODEGROUP:
		        	        case self::NONE:
		        	        case self::OFFLINE:
		        	        case self::OFFSET:
		        	        case self::OJ:
		        	        case self::OLD_PASSWORD:
		        	        case self::ONE:
		        	        case self::ONLINE:
		        	        case self::ONLY:
		        	        case self::OPEN:
		        	        case self::OPTIMIZER_COSTS:
		        	        case self::OPTIONS:
		        	        case self::OWNER:
		        	        case self::PACK_KEYS:
		        	        case self::PAGE:
		        	        case self::PARSER:
		        	        case self::PARTIAL:
		        	        case self::PARTITIONING:
		        	        case self::PARTITIONS:
		        	        case self::PASSWORD:
		        	        case self::PHASE:
		        	        case self::PLUGIN:
		        	        case self::PLUGIN_DIR:
		        	        case self::PLUGINS:
		        	        case self::PORT:
		        	        case self::PRECEDES:
		        	        case self::PREPARE:
		        	        case self::PRESERVE:
		        	        case self::PREV:
		        	        case self::PROCESSLIST:
		        	        case self::PROFILE:
		        	        case self::PROFILES:
		        	        case self::PROXY:
		        	        case self::QUERY:
		        	        case self::QUICK:
		        	        case self::REBUILD:
		        	        case self::RECOVER:
		        	        case self::REDO_BUFFER_SIZE:
		        	        case self::REDUNDANT:
		        	        case self::RELAY:
		        	        case self::RELAY_LOG_FILE:
		        	        case self::RELAY_LOG_POS:
		        	        case self::RELAYLOG:
		        	        case self::REMOVE:
		        	        case self::REORGANIZE:
		        	        case self::REPAIR:
		        	        case self::REPLICATE_DO_DB:
		        	        case self::REPLICATE_DO_TABLE:
		        	        case self::REPLICATE_IGNORE_DB:
		        	        case self::REPLICATE_IGNORE_TABLE:
		        	        case self::REPLICATE_REWRITE_DB:
		        	        case self::REPLICATE_WILD_DO_TABLE:
		        	        case self::REPLICATE_WILD_IGNORE_TABLE:
		        	        case self::REPLICATION:
		        	        case self::RESET:
		        	        case self::RESUME:
		        	        case self::RETURNED_SQLSTATE:
		        	        case self::RETURNS:
		        	        case self::ROLLBACK:
		        	        case self::ROLLUP:
		        	        case self::ROTATE:
		        	        case self::ROW:
		        	        case self::ROWS:
		        	        case self::ROW_FORMAT:
		        	        case self::SAVEPOINT:
		        	        case self::SCHEDULE:
		        	        case self::SECURITY:
		        	        case self::SERVER:
		        	        case self::SESSION:
		        	        case self::SHARE:
		        	        case self::SHARED:
		        	        case self::SIGNED:
		        	        case self::SIMPLE:
		        	        case self::SLAVE:
		        	        case self::SLOW:
		        	        case self::SNAPSHOT:
		        	        case self::SOCKET:
		        	        case self::SOME:
		        	        case self::SONAME:
		        	        case self::SOUNDS:
		        	        case self::SOURCE:
		        	        case self::SQL_AFTER_GTIDS:
		        	        case self::SQL_AFTER_MTS_GAPS:
		        	        case self::SQL_BEFORE_GTIDS:
		        	        case self::SQL_BUFFER_RESULT:
		        	        case self::SQL_CACHE:
		        	        case self::SQL_NO_CACHE:
		        	        case self::SQL_THREAD:
		        	        case self::START:
		        	        case self::STARTS:
		        	        case self::STATS_AUTO_RECALC:
		        	        case self::STATS_PERSISTENT:
		        	        case self::STATS_SAMPLE_PAGES:
		        	        case self::STATUS:
		        	        case self::STOP:
		        	        case self::STORAGE:
		        	        case self::STRING:
		        	        case self::SUBCLASS_ORIGIN:
		        	        case self::SUBJECT:
		        	        case self::SUBPARTITION:
		        	        case self::SUBPARTITIONS:
		        	        case self::SUSPEND:
		        	        case self::SWAPS:
		        	        case self::SWITCHES:
		        	        case self::TABLE_NAME:
		        	        case self::TABLESPACE:
		        	        case self::TEMPORARY:
		        	        case self::TEMPTABLE:
		        	        case self::THAN:
		        	        case self::TRADITIONAL:
		        	        case self::TRANSACTION:
		        	        case self::TRIGGERS:
		        	        case self::TRUNCATE:
		        	        case self::UNDEFINED:
		        	        case self::UNDOFILE:
		        	        case self::UNDO_BUFFER_SIZE:
		        	        case self::UNINSTALL:
		        	        case self::UNKNOWN:
		        	        case self::UNTIL:
		        	        case self::UPGRADE:
		        	        case self::USER:
		        	        case self::USE_FRM:
		        	        case self::USER_RESOURCES:
		        	        case self::VALIDATION:
		        	        case self::VALUE:
		        	        case self::VARIABLES:
		        	        case self::VIEW:
		        	        case self::VISIBLE:
		        	        case self::WAIT:
		        	        case self::WARNINGS:
		        	        case self::WITHOUT:
		        	        case self::WORK:
		        	        case self::WRAPPER:
		        	        case self::X509:
		        	        case self::XA:
		        	        case self::XML:
		        	        case self::INTERNAL:
		        	        case self::QUARTER:
		        	        case self::MONTH:
		        	        case self::DAY:
		        	        case self::HOUR:
		        	        case self::MINUTE:
		        	        case self::WEEK:
		        	        case self::SECOND:
		        	        case self::MICROSECOND:
		        	        case self::TABLES:
		        	        case self::ROUTINE:
		        	        case self::EXECUTE:
		        	        case self::FILE:
		        	        case self::PROCESS:
		        	        case self::RELOAD:
		        	        case self::SHUTDOWN:
		        	        case self::SUPER:
		        	        case self::PRIVILEGES:
		        	        case self::SESSION_VARIABLES_ADMIN:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::ARCHIVE:
		        	        case self::BLACKHOLE:
		        	        case self::CSV:
		        	        case self::FEDERATED:
		        	        case self::INNODB:
		        	        case self::MEMORY:
		        	        case self::MRG_MYISAM:
		        	        case self::MYISAM:
		        	        case self::NDB:
		        	        case self::NDBCLUSTER:
		        	        case self::PERFORMANCE_SCHEMA:
		        	        case self::TOKUDB:
		        	        case self::REPEATABLE:
		        	        case self::COMMITTED:
		        	        case self::UNCOMMITTED:
		        	        case self::SERIALIZABLE:
		        	        case self::GEOMETRYCOLLECTION:
		        	        case self::LINESTRING:
		        	        case self::MULTILINESTRING:
		        	        case self::MULTIPOINT:
		        	        case self::MULTIPOLYGON:
		        	        case self::POINT:
		        	        case self::POLYGON:
		        	        case self::ABS:
		        	        case self::ACOS:
		        	        case self::ADDDATE:
		        	        case self::ADDTIME:
		        	        case self::AES_DECRYPT:
		        	        case self::AES_ENCRYPT:
		        	        case self::AREA:
		        	        case self::ASBINARY:
		        	        case self::ASIN:
		        	        case self::ASTEXT:
		        	        case self::ASWKB:
		        	        case self::ASWKT:
		        	        case self::ASYMMETRIC_DECRYPT:
		        	        case self::ASYMMETRIC_DERIVE:
		        	        case self::ASYMMETRIC_ENCRYPT:
		        	        case self::ASYMMETRIC_SIGN:
		        	        case self::ASYMMETRIC_VERIFY:
		        	        case self::ATAN:
		        	        case self::ATAN2:
		        	        case self::BENCHMARK:
		        	        case self::BIN:
		        	        case self::BIT_COUNT:
		        	        case self::BIT_LENGTH:
		        	        case self::BUFFER:
		        	        case self::CATALOG_NAME:
		        	        case self::CEIL:
		        	        case self::CEILING:
		        	        case self::CENTROID:
		        	        case self::CHARACTER_LENGTH:
		        	        case self::CHARSET:
		        	        case self::CHAR_LENGTH:
		        	        case self::COERCIBILITY:
		        	        case self::COLLATION:
		        	        case self::COMPRESS:
		        	        case self::CONCAT:
		        	        case self::CONCAT_WS:
		        	        case self::CONNECTION_ID:
		        	        case self::CONV:
		        	        case self::CONVERT_TZ:
		        	        case self::COS:
		        	        case self::COT:
		        	        case self::CRC32:
		        	        case self::CREATE_ASYMMETRIC_PRIV_KEY:
		        	        case self::CREATE_ASYMMETRIC_PUB_KEY:
		        	        case self::CREATE_DH_PARAMETERS:
		        	        case self::CREATE_DIGEST:
		        	        case self::CROSSES:
		        	        case self::DATEDIFF:
		        	        case self::DATE_FORMAT:
		        	        case self::DAYNAME:
		        	        case self::DAYOFMONTH:
		        	        case self::DAYOFWEEK:
		        	        case self::DAYOFYEAR:
		        	        case self::DECODE:
		        	        case self::DEGREES:
		        	        case self::DES_DECRYPT:
		        	        case self::DES_ENCRYPT:
		        	        case self::DIMENSION:
		        	        case self::DISJOINT:
		        	        case self::ELT:
		        	        case self::ENCODE:
		        	        case self::ENCRYPT:
		        	        case self::ENDPOINT:
		        	        case self::ENVELOPE:
		        	        case self::EQUALS:
		        	        case self::EXP:
		        	        case self::EXPORT_SET:
		        	        case self::EXTERIORRING:
		        	        case self::EXTRACTVALUE:
		        	        case self::FIELD:
		        	        case self::FIND_IN_SET:
		        	        case self::FLOOR:
		        	        case self::FORMAT:
		        	        case self::FOUND_ROWS:
		        	        case self::FROM_BASE64:
		        	        case self::FROM_DAYS:
		        	        case self::FROM_UNIXTIME:
		        	        case self::GEOMCOLLFROMTEXT:
		        	        case self::GEOMCOLLFROMWKB:
		        	        case self::GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::GEOMETRYFROMTEXT:
		        	        case self::GEOMETRYFROMWKB:
		        	        case self::GEOMETRYN:
		        	        case self::GEOMETRYTYPE:
		        	        case self::GEOMFROMTEXT:
		        	        case self::GEOMFROMWKB:
		        	        case self::GET_FORMAT:
		        	        case self::GET_LOCK:
		        	        case self::GLENGTH:
		        	        case self::GREATEST:
		        	        case self::GTID_SUBSET:
		        	        case self::GTID_SUBTRACT:
		        	        case self::HEX:
		        	        case self::IFNULL:
		        	        case self::INET6_ATON:
		        	        case self::INET6_NTOA:
		        	        case self::INET_ATON:
		        	        case self::INET_NTOA:
		        	        case self::INSTR:
		        	        case self::INTERIORRINGN:
		        	        case self::INTERSECTS:
		        	        case self::ISCLOSED:
		        	        case self::ISEMPTY:
		        	        case self::ISNULL:
		        	        case self::ISSIMPLE:
		        	        case self::IS_FREE_LOCK:
		        	        case self::IS_IPV4:
		        	        case self::IS_IPV4_COMPAT:
		        	        case self::IS_IPV4_MAPPED:
		        	        case self::IS_IPV6:
		        	        case self::IS_USED_LOCK:
		        	        case self::LAST_INSERT_ID:
		        	        case self::LCASE:
		        	        case self::LEAST:
		        	        case self::LENGTH:
		        	        case self::LINEFROMTEXT:
		        	        case self::LINEFROMWKB:
		        	        case self::LINESTRINGFROMTEXT:
		        	        case self::LINESTRINGFROMWKB:
		        	        case self::LN:
		        	        case self::LOAD_FILE:
		        	        case self::LOCATE:
		        	        case self::LOG:
		        	        case self::LOG10:
		        	        case self::LOG2:
		        	        case self::LOWER:
		        	        case self::LPAD:
		        	        case self::LTRIM:
		        	        case self::MAKEDATE:
		        	        case self::MAKETIME:
		        	        case self::MAKE_SET:
		        	        case self::MASTER_POS_WAIT:
		        	        case self::MBRCONTAINS:
		        	        case self::MBRDISJOINT:
		        	        case self::MBREQUAL:
		        	        case self::MBRINTERSECTS:
		        	        case self::MBROVERLAPS:
		        	        case self::MBRTOUCHES:
		        	        case self::MBRWITHIN:
		        	        case self::MD5:
		        	        case self::MLINEFROMTEXT:
		        	        case self::MLINEFROMWKB:
		        	        case self::MONTHNAME:
		        	        case self::MPOINTFROMTEXT:
		        	        case self::MPOINTFROMWKB:
		        	        case self::MPOLYFROMTEXT:
		        	        case self::MPOLYFROMWKB:
		        	        case self::MULTILINESTRINGFROMTEXT:
		        	        case self::MULTILINESTRINGFROMWKB:
		        	        case self::MULTIPOINTFROMTEXT:
		        	        case self::MULTIPOINTFROMWKB:
		        	        case self::MULTIPOLYGONFROMTEXT:
		        	        case self::MULTIPOLYGONFROMWKB:
		        	        case self::NAME_CONST:
		        	        case self::NULLIF:
		        	        case self::NUMGEOMETRIES:
		        	        case self::NUMINTERIORRINGS:
		        	        case self::NUMPOINTS:
		        	        case self::OCT:
		        	        case self::OCTET_LENGTH:
		        	        case self::ORD:
		        	        case self::OVERLAPS:
		        	        case self::PERIOD_ADD:
		        	        case self::PERIOD_DIFF:
		        	        case self::PI:
		        	        case self::POINTFROMTEXT:
		        	        case self::POINTFROMWKB:
		        	        case self::POINTN:
		        	        case self::POLYFROMTEXT:
		        	        case self::POLYFROMWKB:
		        	        case self::POLYGONFROMTEXT:
		        	        case self::POLYGONFROMWKB:
		        	        case self::POW:
		        	        case self::POWER:
		        	        case self::QUOTE:
		        	        case self::RADIANS:
		        	        case self::RAND:
		        	        case self::RANDOM_BYTES:
		        	        case self::RELEASE_LOCK:
		        	        case self::REVERSE:
		        	        case self::ROUND:
		        	        case self::ROW_COUNT:
		        	        case self::RPAD:
		        	        case self::RTRIM:
		        	        case self::SEC_TO_TIME:
		        	        case self::SESSION_USER:
		        	        case self::SHA:
		        	        case self::SHA1:
		        	        case self::SHA2:
		        	        case self::SCHEMA_NAME:
		        	        case self::SIGN:
		        	        case self::SIN:
		        	        case self::SLEEP:
		        	        case self::SOUNDEX:
		        	        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		        	        case self::SQRT:
		        	        case self::SRID:
		        	        case self::STARTPOINT:
		        	        case self::STRCMP:
		        	        case self::STR_TO_DATE:
		        	        case self::ST_AREA:
		        	        case self::ST_ASBINARY:
		        	        case self::ST_ASTEXT:
		        	        case self::ST_ASWKB:
		        	        case self::ST_ASWKT:
		        	        case self::ST_BUFFER:
		        	        case self::ST_CENTROID:
		        	        case self::ST_CONTAINS:
		        	        case self::ST_CROSSES:
		        	        case self::ST_DIFFERENCE:
		        	        case self::ST_DIMENSION:
		        	        case self::ST_DISJOINT:
		        	        case self::ST_DISTANCE:
		        	        case self::ST_ENDPOINT:
		        	        case self::ST_ENVELOPE:
		        	        case self::ST_EQUALS:
		        	        case self::ST_EXTERIORRING:
		        	        case self::ST_GEOMCOLLFROMTEXT:
		        	        case self::ST_GEOMCOLLFROMTXT:
		        	        case self::ST_GEOMCOLLFROMWKB:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::ST_GEOMETRYFROMTEXT:
		        	        case self::ST_GEOMETRYFROMWKB:
		        	        case self::ST_GEOMETRYN:
		        	        case self::ST_GEOMETRYTYPE:
		        	        case self::ST_GEOMFROMTEXT:
		        	        case self::ST_GEOMFROMWKB:
		        	        case self::ST_INTERIORRINGN:
		        	        case self::ST_INTERSECTION:
		        	        case self::ST_INTERSECTS:
		        	        case self::ST_ISCLOSED:
		        	        case self::ST_ISEMPTY:
		        	        case self::ST_ISSIMPLE:
		        	        case self::ST_LINEFROMTEXT:
		        	        case self::ST_LINEFROMWKB:
		        	        case self::ST_LINESTRINGFROMTEXT:
		        	        case self::ST_LINESTRINGFROMWKB:
		        	        case self::ST_NUMGEOMETRIES:
		        	        case self::ST_NUMINTERIORRING:
		        	        case self::ST_NUMINTERIORRINGS:
		        	        case self::ST_NUMPOINTS:
		        	        case self::ST_OVERLAPS:
		        	        case self::ST_POINTFROMTEXT:
		        	        case self::ST_POINTFROMWKB:
		        	        case self::ST_POINTN:
		        	        case self::ST_POLYFROMTEXT:
		        	        case self::ST_POLYFROMWKB:
		        	        case self::ST_POLYGONFROMTEXT:
		        	        case self::ST_POLYGONFROMWKB:
		        	        case self::ST_SRID:
		        	        case self::ST_STARTPOINT:
		        	        case self::ST_SYMDIFFERENCE:
		        	        case self::ST_TOUCHES:
		        	        case self::ST_UNION:
		        	        case self::ST_WITHIN:
		        	        case self::ST_X:
		        	        case self::ST_Y:
		        	        case self::SUBDATE:
		        	        case self::SUBSTRING_INDEX:
		        	        case self::SUBTIME:
		        	        case self::SYSTEM_USER:
		        	        case self::TAN:
		        	        case self::TIMEDIFF:
		        	        case self::TIMESTAMPADD:
		        	        case self::TIMESTAMPDIFF:
		        	        case self::TIME_FORMAT:
		        	        case self::TIME_TO_SEC:
		        	        case self::TOUCHES:
		        	        case self::TO_BASE64:
		        	        case self::TO_DAYS:
		        	        case self::TO_SECONDS:
		        	        case self::UCASE:
		        	        case self::UNCOMPRESS:
		        	        case self::UNCOMPRESSED_LENGTH:
		        	        case self::UNHEX:
		        	        case self::UNIX_TIMESTAMP:
		        	        case self::UPDATEXML:
		        	        case self::UPPER:
		        	        case self::UUID:
		        	        case self::UUID_SHORT:
		        	        case self::VALIDATE_PASSWORD_STRENGTH:
		        	        case self::VERSION:
		        	        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		        	        case self::WEEKDAY:
		        	        case self::WEEKOFYEAR:
		        	        case self::WEIGHT_STRING:
		        	        case self::WITHIN:
		        	        case self::YEARWEEK:
		        	        case self::Y_FUNCTION:
		        	        case self::X_FUNCTION:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        case self::ID:
		        	        case self::REVERSE_QUOTE_ID:
		        	        	$this->setState(2578);
		        	        	$this->uidList();
		        	        	break;

		        	        case self::ALL:
		        	        	$this->setState(2579);
		        	        	$this->match(self::ALL);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 40:
		        	    $localContext = new Context\AlterByCheckPartitionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 40);
		        	    $this->setState(2582);
		        	    $this->match(self::CHECK);
		        	    $this->setState(2583);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2586);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::CURRENT:
		        	        case self::DATABASE:
		        	        case self::DIAGNOSTICS:
		        	        case self::LEFT:
		        	        case self::NUMBER:
		        	        case self::RIGHT:
		        	        case self::STACKED:
		        	        case self::DATE:
		        	        case self::TIME:
		        	        case self::TIMESTAMP:
		        	        case self::DATETIME:
		        	        case self::YEAR:
		        	        case self::TEXT:
		        	        case self::ENUM:
		        	        case self::SERIAL:
		        	        case self::COUNT:
		        	        case self::POSITION:
		        	        case self::ACCOUNT:
		        	        case self::ACTION:
		        	        case self::AFTER:
		        	        case self::AGGREGATE:
		        	        case self::ALGORITHM:
		        	        case self::ANY:
		        	        case self::AT:
		        	        case self::AUTHORS:
		        	        case self::AUTOCOMMIT:
		        	        case self::AUTOEXTEND_SIZE:
		        	        case self::AUTO_INCREMENT:
		        	        case self::AVG_ROW_LENGTH:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::BIT:
		        	        case self::BLOCK:
		        	        case self::BOOL:
		        	        case self::BOOLEAN:
		        	        case self::BTREE:
		        	        case self::CACHE:
		        	        case self::CASCADED:
		        	        case self::CHAIN:
		        	        case self::CHANGED:
		        	        case self::CHANNEL:
		        	        case self::CHECKSUM:
		        	        case self::PAGE_CHECKSUM:
		        	        case self::CIPHER:
		        	        case self::CLASS_ORIGIN:
		        	        case self::CLIENT:
		        	        case self::CLOSE:
		        	        case self::COALESCE:
		        	        case self::CODE:
		        	        case self::COLUMNS:
		        	        case self::COLUMN_FORMAT:
		        	        case self::COLUMN_NAME:
		        	        case self::COMMENT:
		        	        case self::COMMIT:
		        	        case self::COMPACT:
		        	        case self::COMPLETION:
		        	        case self::COMPRESSED:
		        	        case self::COMPRESSION:
		        	        case self::CONCURRENT:
		        	        case self::CONNECTION:
		        	        case self::CONSISTENT:
		        	        case self::CONSTRAINT_CATALOG:
		        	        case self::CONSTRAINT_SCHEMA:
		        	        case self::CONSTRAINT_NAME:
		        	        case self::CONTAINS:
		        	        case self::CONTEXT:
		        	        case self::CONTRIBUTORS:
		        	        case self::COPY:
		        	        case self::CPU:
		        	        case self::CURSOR_NAME:
		        	        case self::DATA:
		        	        case self::DATAFILE:
		        	        case self::DEALLOCATE:
		        	        case self::DEFAULT_AUTH:
		        	        case self::DEFINER:
		        	        case self::DELAY_KEY_WRITE:
		        	        case self::DES_KEY_FILE:
		        	        case self::DIRECTORY:
		        	        case self::DISABLE:
		        	        case self::DISCARD:
		        	        case self::DISK:
		        	        case self::DO:
		        	        case self::DUMPFILE:
		        	        case self::DUPLICATE:
		        	        case self::DYNAMIC:
		        	        case self::ENABLE:
		        	        case self::ENCRYPTION:
		        	        case self::END:
		        	        case self::ENDS:
		        	        case self::ENGINE:
		        	        case self::ENGINES:
		        	        case self::ERROR:
		        	        case self::ERRORS:
		        	        case self::ESCAPE:
		        	        case self::EVEN:
		        	        case self::EVENT:
		        	        case self::EVENTS:
		        	        case self::EVERY:
		        	        case self::EXCHANGE:
		        	        case self::EXCLUSIVE:
		        	        case self::EXPIRE:
		        	        case self::EXPORT:
		        	        case self::EXTENDED:
		        	        case self::EXTENT_SIZE:
		        	        case self::FAST:
		        	        case self::FAULTS:
		        	        case self::FIELDS:
		        	        case self::FILE_BLOCK_SIZE:
		        	        case self::FILTER:
		        	        case self::FIRST:
		        	        case self::FIXED:
		        	        case self::FLUSH:
		        	        case self::FOLLOWS:
		        	        case self::FOUND:
		        	        case self::FULL:
		        	        case self::FUNCTION:
		        	        case self::GENERAL:
		        	        case self::GLOBAL:
		        	        case self::GRANTS:
		        	        case self::GROUP_REPLICATION:
		        	        case self::HANDLER:
		        	        case self::HASH:
		        	        case self::HELP:
		        	        case self::HOST:
		        	        case self::HOSTS:
		        	        case self::IDENTIFIED:
		        	        case self::IGNORE_SERVER_IDS:
		        	        case self::IMPORT:
		        	        case self::INDEXES:
		        	        case self::INITIAL_SIZE:
		        	        case self::INPLACE:
		        	        case self::INSERT_METHOD:
		        	        case self::INSTALL:
		        	        case self::INSTANCE:
		        	        case self::INVISIBLE:
		        	        case self::INVOKER:
		        	        case self::IO:
		        	        case self::IO_THREAD:
		        	        case self::IPC:
		        	        case self::ISOLATION:
		        	        case self::ISSUER:
		        	        case self::JSON:
		        	        case self::KEY_BLOCK_SIZE:
		        	        case self::LANGUAGE:
		        	        case self::LAST:
		        	        case self::LEAVES:
		        	        case self::LESS:
		        	        case self::LEVEL:
		        	        case self::LIST:
		        	        case self::LOCAL:
		        	        case self::LOGFILE:
		        	        case self::LOGS:
		        	        case self::MASTER:
		        	        case self::MASTER_AUTO_POSITION:
		        	        case self::MASTER_CONNECT_RETRY:
		        	        case self::MASTER_DELAY:
		        	        case self::MASTER_HEARTBEAT_PERIOD:
		        	        case self::MASTER_HOST:
		        	        case self::MASTER_LOG_FILE:
		        	        case self::MASTER_LOG_POS:
		        	        case self::MASTER_PASSWORD:
		        	        case self::MASTER_PORT:
		        	        case self::MASTER_RETRY_COUNT:
		        	        case self::MASTER_SSL:
		        	        case self::MASTER_SSL_CA:
		        	        case self::MASTER_SSL_CAPATH:
		        	        case self::MASTER_SSL_CERT:
		        	        case self::MASTER_SSL_CIPHER:
		        	        case self::MASTER_SSL_CRL:
		        	        case self::MASTER_SSL_CRLPATH:
		        	        case self::MASTER_SSL_KEY:
		        	        case self::MASTER_TLS_VERSION:
		        	        case self::MASTER_USER:
		        	        case self::MAX_CONNECTIONS_PER_HOUR:
		        	        case self::MAX_QUERIES_PER_HOUR:
		        	        case self::MAX_ROWS:
		        	        case self::MAX_SIZE:
		        	        case self::MAX_UPDATES_PER_HOUR:
		        	        case self::MAX_USER_CONNECTIONS:
		        	        case self::MEDIUM:
		        	        case self::MERGE:
		        	        case self::MESSAGE_TEXT:
		        	        case self::MID:
		        	        case self::MIGRATE:
		        	        case self::MIN_ROWS:
		        	        case self::MODE:
		        	        case self::MODIFY:
		        	        case self::MUTEX:
		        	        case self::MYSQL:
		        	        case self::MYSQL_ERRNO:
		        	        case self::NAME:
		        	        case self::NAMES:
		        	        case self::NCHAR:
		        	        case self::NEVER:
		        	        case self::NEXT:
		        	        case self::NO:
		        	        case self::NODEGROUP:
		        	        case self::NONE:
		        	        case self::OFFLINE:
		        	        case self::OFFSET:
		        	        case self::OJ:
		        	        case self::OLD_PASSWORD:
		        	        case self::ONE:
		        	        case self::ONLINE:
		        	        case self::ONLY:
		        	        case self::OPEN:
		        	        case self::OPTIMIZER_COSTS:
		        	        case self::OPTIONS:
		        	        case self::OWNER:
		        	        case self::PACK_KEYS:
		        	        case self::PAGE:
		        	        case self::PARSER:
		        	        case self::PARTIAL:
		        	        case self::PARTITIONING:
		        	        case self::PARTITIONS:
		        	        case self::PASSWORD:
		        	        case self::PHASE:
		        	        case self::PLUGIN:
		        	        case self::PLUGIN_DIR:
		        	        case self::PLUGINS:
		        	        case self::PORT:
		        	        case self::PRECEDES:
		        	        case self::PREPARE:
		        	        case self::PRESERVE:
		        	        case self::PREV:
		        	        case self::PROCESSLIST:
		        	        case self::PROFILE:
		        	        case self::PROFILES:
		        	        case self::PROXY:
		        	        case self::QUERY:
		        	        case self::QUICK:
		        	        case self::REBUILD:
		        	        case self::RECOVER:
		        	        case self::REDO_BUFFER_SIZE:
		        	        case self::REDUNDANT:
		        	        case self::RELAY:
		        	        case self::RELAY_LOG_FILE:
		        	        case self::RELAY_LOG_POS:
		        	        case self::RELAYLOG:
		        	        case self::REMOVE:
		        	        case self::REORGANIZE:
		        	        case self::REPAIR:
		        	        case self::REPLICATE_DO_DB:
		        	        case self::REPLICATE_DO_TABLE:
		        	        case self::REPLICATE_IGNORE_DB:
		        	        case self::REPLICATE_IGNORE_TABLE:
		        	        case self::REPLICATE_REWRITE_DB:
		        	        case self::REPLICATE_WILD_DO_TABLE:
		        	        case self::REPLICATE_WILD_IGNORE_TABLE:
		        	        case self::REPLICATION:
		        	        case self::RESET:
		        	        case self::RESUME:
		        	        case self::RETURNED_SQLSTATE:
		        	        case self::RETURNS:
		        	        case self::ROLLBACK:
		        	        case self::ROLLUP:
		        	        case self::ROTATE:
		        	        case self::ROW:
		        	        case self::ROWS:
		        	        case self::ROW_FORMAT:
		        	        case self::SAVEPOINT:
		        	        case self::SCHEDULE:
		        	        case self::SECURITY:
		        	        case self::SERVER:
		        	        case self::SESSION:
		        	        case self::SHARE:
		        	        case self::SHARED:
		        	        case self::SIGNED:
		        	        case self::SIMPLE:
		        	        case self::SLAVE:
		        	        case self::SLOW:
		        	        case self::SNAPSHOT:
		        	        case self::SOCKET:
		        	        case self::SOME:
		        	        case self::SONAME:
		        	        case self::SOUNDS:
		        	        case self::SOURCE:
		        	        case self::SQL_AFTER_GTIDS:
		        	        case self::SQL_AFTER_MTS_GAPS:
		        	        case self::SQL_BEFORE_GTIDS:
		        	        case self::SQL_BUFFER_RESULT:
		        	        case self::SQL_CACHE:
		        	        case self::SQL_NO_CACHE:
		        	        case self::SQL_THREAD:
		        	        case self::START:
		        	        case self::STARTS:
		        	        case self::STATS_AUTO_RECALC:
		        	        case self::STATS_PERSISTENT:
		        	        case self::STATS_SAMPLE_PAGES:
		        	        case self::STATUS:
		        	        case self::STOP:
		        	        case self::STORAGE:
		        	        case self::STRING:
		        	        case self::SUBCLASS_ORIGIN:
		        	        case self::SUBJECT:
		        	        case self::SUBPARTITION:
		        	        case self::SUBPARTITIONS:
		        	        case self::SUSPEND:
		        	        case self::SWAPS:
		        	        case self::SWITCHES:
		        	        case self::TABLE_NAME:
		        	        case self::TABLESPACE:
		        	        case self::TEMPORARY:
		        	        case self::TEMPTABLE:
		        	        case self::THAN:
		        	        case self::TRADITIONAL:
		        	        case self::TRANSACTION:
		        	        case self::TRIGGERS:
		        	        case self::TRUNCATE:
		        	        case self::UNDEFINED:
		        	        case self::UNDOFILE:
		        	        case self::UNDO_BUFFER_SIZE:
		        	        case self::UNINSTALL:
		        	        case self::UNKNOWN:
		        	        case self::UNTIL:
		        	        case self::UPGRADE:
		        	        case self::USER:
		        	        case self::USE_FRM:
		        	        case self::USER_RESOURCES:
		        	        case self::VALIDATION:
		        	        case self::VALUE:
		        	        case self::VARIABLES:
		        	        case self::VIEW:
		        	        case self::VISIBLE:
		        	        case self::WAIT:
		        	        case self::WARNINGS:
		        	        case self::WITHOUT:
		        	        case self::WORK:
		        	        case self::WRAPPER:
		        	        case self::X509:
		        	        case self::XA:
		        	        case self::XML:
		        	        case self::INTERNAL:
		        	        case self::QUARTER:
		        	        case self::MONTH:
		        	        case self::DAY:
		        	        case self::HOUR:
		        	        case self::MINUTE:
		        	        case self::WEEK:
		        	        case self::SECOND:
		        	        case self::MICROSECOND:
		        	        case self::TABLES:
		        	        case self::ROUTINE:
		        	        case self::EXECUTE:
		        	        case self::FILE:
		        	        case self::PROCESS:
		        	        case self::RELOAD:
		        	        case self::SHUTDOWN:
		        	        case self::SUPER:
		        	        case self::PRIVILEGES:
		        	        case self::SESSION_VARIABLES_ADMIN:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::ARCHIVE:
		        	        case self::BLACKHOLE:
		        	        case self::CSV:
		        	        case self::FEDERATED:
		        	        case self::INNODB:
		        	        case self::MEMORY:
		        	        case self::MRG_MYISAM:
		        	        case self::MYISAM:
		        	        case self::NDB:
		        	        case self::NDBCLUSTER:
		        	        case self::PERFORMANCE_SCHEMA:
		        	        case self::TOKUDB:
		        	        case self::REPEATABLE:
		        	        case self::COMMITTED:
		        	        case self::UNCOMMITTED:
		        	        case self::SERIALIZABLE:
		        	        case self::GEOMETRYCOLLECTION:
		        	        case self::LINESTRING:
		        	        case self::MULTILINESTRING:
		        	        case self::MULTIPOINT:
		        	        case self::MULTIPOLYGON:
		        	        case self::POINT:
		        	        case self::POLYGON:
		        	        case self::ABS:
		        	        case self::ACOS:
		        	        case self::ADDDATE:
		        	        case self::ADDTIME:
		        	        case self::AES_DECRYPT:
		        	        case self::AES_ENCRYPT:
		        	        case self::AREA:
		        	        case self::ASBINARY:
		        	        case self::ASIN:
		        	        case self::ASTEXT:
		        	        case self::ASWKB:
		        	        case self::ASWKT:
		        	        case self::ASYMMETRIC_DECRYPT:
		        	        case self::ASYMMETRIC_DERIVE:
		        	        case self::ASYMMETRIC_ENCRYPT:
		        	        case self::ASYMMETRIC_SIGN:
		        	        case self::ASYMMETRIC_VERIFY:
		        	        case self::ATAN:
		        	        case self::ATAN2:
		        	        case self::BENCHMARK:
		        	        case self::BIN:
		        	        case self::BIT_COUNT:
		        	        case self::BIT_LENGTH:
		        	        case self::BUFFER:
		        	        case self::CATALOG_NAME:
		        	        case self::CEIL:
		        	        case self::CEILING:
		        	        case self::CENTROID:
		        	        case self::CHARACTER_LENGTH:
		        	        case self::CHARSET:
		        	        case self::CHAR_LENGTH:
		        	        case self::COERCIBILITY:
		        	        case self::COLLATION:
		        	        case self::COMPRESS:
		        	        case self::CONCAT:
		        	        case self::CONCAT_WS:
		        	        case self::CONNECTION_ID:
		        	        case self::CONV:
		        	        case self::CONVERT_TZ:
		        	        case self::COS:
		        	        case self::COT:
		        	        case self::CRC32:
		        	        case self::CREATE_ASYMMETRIC_PRIV_KEY:
		        	        case self::CREATE_ASYMMETRIC_PUB_KEY:
		        	        case self::CREATE_DH_PARAMETERS:
		        	        case self::CREATE_DIGEST:
		        	        case self::CROSSES:
		        	        case self::DATEDIFF:
		        	        case self::DATE_FORMAT:
		        	        case self::DAYNAME:
		        	        case self::DAYOFMONTH:
		        	        case self::DAYOFWEEK:
		        	        case self::DAYOFYEAR:
		        	        case self::DECODE:
		        	        case self::DEGREES:
		        	        case self::DES_DECRYPT:
		        	        case self::DES_ENCRYPT:
		        	        case self::DIMENSION:
		        	        case self::DISJOINT:
		        	        case self::ELT:
		        	        case self::ENCODE:
		        	        case self::ENCRYPT:
		        	        case self::ENDPOINT:
		        	        case self::ENVELOPE:
		        	        case self::EQUALS:
		        	        case self::EXP:
		        	        case self::EXPORT_SET:
		        	        case self::EXTERIORRING:
		        	        case self::EXTRACTVALUE:
		        	        case self::FIELD:
		        	        case self::FIND_IN_SET:
		        	        case self::FLOOR:
		        	        case self::FORMAT:
		        	        case self::FOUND_ROWS:
		        	        case self::FROM_BASE64:
		        	        case self::FROM_DAYS:
		        	        case self::FROM_UNIXTIME:
		        	        case self::GEOMCOLLFROMTEXT:
		        	        case self::GEOMCOLLFROMWKB:
		        	        case self::GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::GEOMETRYFROMTEXT:
		        	        case self::GEOMETRYFROMWKB:
		        	        case self::GEOMETRYN:
		        	        case self::GEOMETRYTYPE:
		        	        case self::GEOMFROMTEXT:
		        	        case self::GEOMFROMWKB:
		        	        case self::GET_FORMAT:
		        	        case self::GET_LOCK:
		        	        case self::GLENGTH:
		        	        case self::GREATEST:
		        	        case self::GTID_SUBSET:
		        	        case self::GTID_SUBTRACT:
		        	        case self::HEX:
		        	        case self::IFNULL:
		        	        case self::INET6_ATON:
		        	        case self::INET6_NTOA:
		        	        case self::INET_ATON:
		        	        case self::INET_NTOA:
		        	        case self::INSTR:
		        	        case self::INTERIORRINGN:
		        	        case self::INTERSECTS:
		        	        case self::ISCLOSED:
		        	        case self::ISEMPTY:
		        	        case self::ISNULL:
		        	        case self::ISSIMPLE:
		        	        case self::IS_FREE_LOCK:
		        	        case self::IS_IPV4:
		        	        case self::IS_IPV4_COMPAT:
		        	        case self::IS_IPV4_MAPPED:
		        	        case self::IS_IPV6:
		        	        case self::IS_USED_LOCK:
		        	        case self::LAST_INSERT_ID:
		        	        case self::LCASE:
		        	        case self::LEAST:
		        	        case self::LENGTH:
		        	        case self::LINEFROMTEXT:
		        	        case self::LINEFROMWKB:
		        	        case self::LINESTRINGFROMTEXT:
		        	        case self::LINESTRINGFROMWKB:
		        	        case self::LN:
		        	        case self::LOAD_FILE:
		        	        case self::LOCATE:
		        	        case self::LOG:
		        	        case self::LOG10:
		        	        case self::LOG2:
		        	        case self::LOWER:
		        	        case self::LPAD:
		        	        case self::LTRIM:
		        	        case self::MAKEDATE:
		        	        case self::MAKETIME:
		        	        case self::MAKE_SET:
		        	        case self::MASTER_POS_WAIT:
		        	        case self::MBRCONTAINS:
		        	        case self::MBRDISJOINT:
		        	        case self::MBREQUAL:
		        	        case self::MBRINTERSECTS:
		        	        case self::MBROVERLAPS:
		        	        case self::MBRTOUCHES:
		        	        case self::MBRWITHIN:
		        	        case self::MD5:
		        	        case self::MLINEFROMTEXT:
		        	        case self::MLINEFROMWKB:
		        	        case self::MONTHNAME:
		        	        case self::MPOINTFROMTEXT:
		        	        case self::MPOINTFROMWKB:
		        	        case self::MPOLYFROMTEXT:
		        	        case self::MPOLYFROMWKB:
		        	        case self::MULTILINESTRINGFROMTEXT:
		        	        case self::MULTILINESTRINGFROMWKB:
		        	        case self::MULTIPOINTFROMTEXT:
		        	        case self::MULTIPOINTFROMWKB:
		        	        case self::MULTIPOLYGONFROMTEXT:
		        	        case self::MULTIPOLYGONFROMWKB:
		        	        case self::NAME_CONST:
		        	        case self::NULLIF:
		        	        case self::NUMGEOMETRIES:
		        	        case self::NUMINTERIORRINGS:
		        	        case self::NUMPOINTS:
		        	        case self::OCT:
		        	        case self::OCTET_LENGTH:
		        	        case self::ORD:
		        	        case self::OVERLAPS:
		        	        case self::PERIOD_ADD:
		        	        case self::PERIOD_DIFF:
		        	        case self::PI:
		        	        case self::POINTFROMTEXT:
		        	        case self::POINTFROMWKB:
		        	        case self::POINTN:
		        	        case self::POLYFROMTEXT:
		        	        case self::POLYFROMWKB:
		        	        case self::POLYGONFROMTEXT:
		        	        case self::POLYGONFROMWKB:
		        	        case self::POW:
		        	        case self::POWER:
		        	        case self::QUOTE:
		        	        case self::RADIANS:
		        	        case self::RAND:
		        	        case self::RANDOM_BYTES:
		        	        case self::RELEASE_LOCK:
		        	        case self::REVERSE:
		        	        case self::ROUND:
		        	        case self::ROW_COUNT:
		        	        case self::RPAD:
		        	        case self::RTRIM:
		        	        case self::SEC_TO_TIME:
		        	        case self::SESSION_USER:
		        	        case self::SHA:
		        	        case self::SHA1:
		        	        case self::SHA2:
		        	        case self::SCHEMA_NAME:
		        	        case self::SIGN:
		        	        case self::SIN:
		        	        case self::SLEEP:
		        	        case self::SOUNDEX:
		        	        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		        	        case self::SQRT:
		        	        case self::SRID:
		        	        case self::STARTPOINT:
		        	        case self::STRCMP:
		        	        case self::STR_TO_DATE:
		        	        case self::ST_AREA:
		        	        case self::ST_ASBINARY:
		        	        case self::ST_ASTEXT:
		        	        case self::ST_ASWKB:
		        	        case self::ST_ASWKT:
		        	        case self::ST_BUFFER:
		        	        case self::ST_CENTROID:
		        	        case self::ST_CONTAINS:
		        	        case self::ST_CROSSES:
		        	        case self::ST_DIFFERENCE:
		        	        case self::ST_DIMENSION:
		        	        case self::ST_DISJOINT:
		        	        case self::ST_DISTANCE:
		        	        case self::ST_ENDPOINT:
		        	        case self::ST_ENVELOPE:
		        	        case self::ST_EQUALS:
		        	        case self::ST_EXTERIORRING:
		        	        case self::ST_GEOMCOLLFROMTEXT:
		        	        case self::ST_GEOMCOLLFROMTXT:
		        	        case self::ST_GEOMCOLLFROMWKB:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::ST_GEOMETRYFROMTEXT:
		        	        case self::ST_GEOMETRYFROMWKB:
		        	        case self::ST_GEOMETRYN:
		        	        case self::ST_GEOMETRYTYPE:
		        	        case self::ST_GEOMFROMTEXT:
		        	        case self::ST_GEOMFROMWKB:
		        	        case self::ST_INTERIORRINGN:
		        	        case self::ST_INTERSECTION:
		        	        case self::ST_INTERSECTS:
		        	        case self::ST_ISCLOSED:
		        	        case self::ST_ISEMPTY:
		        	        case self::ST_ISSIMPLE:
		        	        case self::ST_LINEFROMTEXT:
		        	        case self::ST_LINEFROMWKB:
		        	        case self::ST_LINESTRINGFROMTEXT:
		        	        case self::ST_LINESTRINGFROMWKB:
		        	        case self::ST_NUMGEOMETRIES:
		        	        case self::ST_NUMINTERIORRING:
		        	        case self::ST_NUMINTERIORRINGS:
		        	        case self::ST_NUMPOINTS:
		        	        case self::ST_OVERLAPS:
		        	        case self::ST_POINTFROMTEXT:
		        	        case self::ST_POINTFROMWKB:
		        	        case self::ST_POINTN:
		        	        case self::ST_POLYFROMTEXT:
		        	        case self::ST_POLYFROMWKB:
		        	        case self::ST_POLYGONFROMTEXT:
		        	        case self::ST_POLYGONFROMWKB:
		        	        case self::ST_SRID:
		        	        case self::ST_STARTPOINT:
		        	        case self::ST_SYMDIFFERENCE:
		        	        case self::ST_TOUCHES:
		        	        case self::ST_UNION:
		        	        case self::ST_WITHIN:
		        	        case self::ST_X:
		        	        case self::ST_Y:
		        	        case self::SUBDATE:
		        	        case self::SUBSTRING_INDEX:
		        	        case self::SUBTIME:
		        	        case self::SYSTEM_USER:
		        	        case self::TAN:
		        	        case self::TIMEDIFF:
		        	        case self::TIMESTAMPADD:
		        	        case self::TIMESTAMPDIFF:
		        	        case self::TIME_FORMAT:
		        	        case self::TIME_TO_SEC:
		        	        case self::TOUCHES:
		        	        case self::TO_BASE64:
		        	        case self::TO_DAYS:
		        	        case self::TO_SECONDS:
		        	        case self::UCASE:
		        	        case self::UNCOMPRESS:
		        	        case self::UNCOMPRESSED_LENGTH:
		        	        case self::UNHEX:
		        	        case self::UNIX_TIMESTAMP:
		        	        case self::UPDATEXML:
		        	        case self::UPPER:
		        	        case self::UUID:
		        	        case self::UUID_SHORT:
		        	        case self::VALIDATE_PASSWORD_STRENGTH:
		        	        case self::VERSION:
		        	        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		        	        case self::WEEKDAY:
		        	        case self::WEEKOFYEAR:
		        	        case self::WEIGHT_STRING:
		        	        case self::WITHIN:
		        	        case self::YEARWEEK:
		        	        case self::Y_FUNCTION:
		        	        case self::X_FUNCTION:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        case self::ID:
		        	        case self::REVERSE_QUOTE_ID:
		        	        	$this->setState(2584);
		        	        	$this->uidList();
		        	        	break;

		        	        case self::ALL:
		        	        	$this->setState(2585);
		        	        	$this->match(self::ALL);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 41:
		        	    $localContext = new Context\AlterByOptimizePartitionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 41);
		        	    $this->setState(2588);
		        	    $this->match(self::OPTIMIZE);
		        	    $this->setState(2589);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2592);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::CURRENT:
		        	        case self::DATABASE:
		        	        case self::DIAGNOSTICS:
		        	        case self::LEFT:
		        	        case self::NUMBER:
		        	        case self::RIGHT:
		        	        case self::STACKED:
		        	        case self::DATE:
		        	        case self::TIME:
		        	        case self::TIMESTAMP:
		        	        case self::DATETIME:
		        	        case self::YEAR:
		        	        case self::TEXT:
		        	        case self::ENUM:
		        	        case self::SERIAL:
		        	        case self::COUNT:
		        	        case self::POSITION:
		        	        case self::ACCOUNT:
		        	        case self::ACTION:
		        	        case self::AFTER:
		        	        case self::AGGREGATE:
		        	        case self::ALGORITHM:
		        	        case self::ANY:
		        	        case self::AT:
		        	        case self::AUTHORS:
		        	        case self::AUTOCOMMIT:
		        	        case self::AUTOEXTEND_SIZE:
		        	        case self::AUTO_INCREMENT:
		        	        case self::AVG_ROW_LENGTH:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::BIT:
		        	        case self::BLOCK:
		        	        case self::BOOL:
		        	        case self::BOOLEAN:
		        	        case self::BTREE:
		        	        case self::CACHE:
		        	        case self::CASCADED:
		        	        case self::CHAIN:
		        	        case self::CHANGED:
		        	        case self::CHANNEL:
		        	        case self::CHECKSUM:
		        	        case self::PAGE_CHECKSUM:
		        	        case self::CIPHER:
		        	        case self::CLASS_ORIGIN:
		        	        case self::CLIENT:
		        	        case self::CLOSE:
		        	        case self::COALESCE:
		        	        case self::CODE:
		        	        case self::COLUMNS:
		        	        case self::COLUMN_FORMAT:
		        	        case self::COLUMN_NAME:
		        	        case self::COMMENT:
		        	        case self::COMMIT:
		        	        case self::COMPACT:
		        	        case self::COMPLETION:
		        	        case self::COMPRESSED:
		        	        case self::COMPRESSION:
		        	        case self::CONCURRENT:
		        	        case self::CONNECTION:
		        	        case self::CONSISTENT:
		        	        case self::CONSTRAINT_CATALOG:
		        	        case self::CONSTRAINT_SCHEMA:
		        	        case self::CONSTRAINT_NAME:
		        	        case self::CONTAINS:
		        	        case self::CONTEXT:
		        	        case self::CONTRIBUTORS:
		        	        case self::COPY:
		        	        case self::CPU:
		        	        case self::CURSOR_NAME:
		        	        case self::DATA:
		        	        case self::DATAFILE:
		        	        case self::DEALLOCATE:
		        	        case self::DEFAULT_AUTH:
		        	        case self::DEFINER:
		        	        case self::DELAY_KEY_WRITE:
		        	        case self::DES_KEY_FILE:
		        	        case self::DIRECTORY:
		        	        case self::DISABLE:
		        	        case self::DISCARD:
		        	        case self::DISK:
		        	        case self::DO:
		        	        case self::DUMPFILE:
		        	        case self::DUPLICATE:
		        	        case self::DYNAMIC:
		        	        case self::ENABLE:
		        	        case self::ENCRYPTION:
		        	        case self::END:
		        	        case self::ENDS:
		        	        case self::ENGINE:
		        	        case self::ENGINES:
		        	        case self::ERROR:
		        	        case self::ERRORS:
		        	        case self::ESCAPE:
		        	        case self::EVEN:
		        	        case self::EVENT:
		        	        case self::EVENTS:
		        	        case self::EVERY:
		        	        case self::EXCHANGE:
		        	        case self::EXCLUSIVE:
		        	        case self::EXPIRE:
		        	        case self::EXPORT:
		        	        case self::EXTENDED:
		        	        case self::EXTENT_SIZE:
		        	        case self::FAST:
		        	        case self::FAULTS:
		        	        case self::FIELDS:
		        	        case self::FILE_BLOCK_SIZE:
		        	        case self::FILTER:
		        	        case self::FIRST:
		        	        case self::FIXED:
		        	        case self::FLUSH:
		        	        case self::FOLLOWS:
		        	        case self::FOUND:
		        	        case self::FULL:
		        	        case self::FUNCTION:
		        	        case self::GENERAL:
		        	        case self::GLOBAL:
		        	        case self::GRANTS:
		        	        case self::GROUP_REPLICATION:
		        	        case self::HANDLER:
		        	        case self::HASH:
		        	        case self::HELP:
		        	        case self::HOST:
		        	        case self::HOSTS:
		        	        case self::IDENTIFIED:
		        	        case self::IGNORE_SERVER_IDS:
		        	        case self::IMPORT:
		        	        case self::INDEXES:
		        	        case self::INITIAL_SIZE:
		        	        case self::INPLACE:
		        	        case self::INSERT_METHOD:
		        	        case self::INSTALL:
		        	        case self::INSTANCE:
		        	        case self::INVISIBLE:
		        	        case self::INVOKER:
		        	        case self::IO:
		        	        case self::IO_THREAD:
		        	        case self::IPC:
		        	        case self::ISOLATION:
		        	        case self::ISSUER:
		        	        case self::JSON:
		        	        case self::KEY_BLOCK_SIZE:
		        	        case self::LANGUAGE:
		        	        case self::LAST:
		        	        case self::LEAVES:
		        	        case self::LESS:
		        	        case self::LEVEL:
		        	        case self::LIST:
		        	        case self::LOCAL:
		        	        case self::LOGFILE:
		        	        case self::LOGS:
		        	        case self::MASTER:
		        	        case self::MASTER_AUTO_POSITION:
		        	        case self::MASTER_CONNECT_RETRY:
		        	        case self::MASTER_DELAY:
		        	        case self::MASTER_HEARTBEAT_PERIOD:
		        	        case self::MASTER_HOST:
		        	        case self::MASTER_LOG_FILE:
		        	        case self::MASTER_LOG_POS:
		        	        case self::MASTER_PASSWORD:
		        	        case self::MASTER_PORT:
		        	        case self::MASTER_RETRY_COUNT:
		        	        case self::MASTER_SSL:
		        	        case self::MASTER_SSL_CA:
		        	        case self::MASTER_SSL_CAPATH:
		        	        case self::MASTER_SSL_CERT:
		        	        case self::MASTER_SSL_CIPHER:
		        	        case self::MASTER_SSL_CRL:
		        	        case self::MASTER_SSL_CRLPATH:
		        	        case self::MASTER_SSL_KEY:
		        	        case self::MASTER_TLS_VERSION:
		        	        case self::MASTER_USER:
		        	        case self::MAX_CONNECTIONS_PER_HOUR:
		        	        case self::MAX_QUERIES_PER_HOUR:
		        	        case self::MAX_ROWS:
		        	        case self::MAX_SIZE:
		        	        case self::MAX_UPDATES_PER_HOUR:
		        	        case self::MAX_USER_CONNECTIONS:
		        	        case self::MEDIUM:
		        	        case self::MERGE:
		        	        case self::MESSAGE_TEXT:
		        	        case self::MID:
		        	        case self::MIGRATE:
		        	        case self::MIN_ROWS:
		        	        case self::MODE:
		        	        case self::MODIFY:
		        	        case self::MUTEX:
		        	        case self::MYSQL:
		        	        case self::MYSQL_ERRNO:
		        	        case self::NAME:
		        	        case self::NAMES:
		        	        case self::NCHAR:
		        	        case self::NEVER:
		        	        case self::NEXT:
		        	        case self::NO:
		        	        case self::NODEGROUP:
		        	        case self::NONE:
		        	        case self::OFFLINE:
		        	        case self::OFFSET:
		        	        case self::OJ:
		        	        case self::OLD_PASSWORD:
		        	        case self::ONE:
		        	        case self::ONLINE:
		        	        case self::ONLY:
		        	        case self::OPEN:
		        	        case self::OPTIMIZER_COSTS:
		        	        case self::OPTIONS:
		        	        case self::OWNER:
		        	        case self::PACK_KEYS:
		        	        case self::PAGE:
		        	        case self::PARSER:
		        	        case self::PARTIAL:
		        	        case self::PARTITIONING:
		        	        case self::PARTITIONS:
		        	        case self::PASSWORD:
		        	        case self::PHASE:
		        	        case self::PLUGIN:
		        	        case self::PLUGIN_DIR:
		        	        case self::PLUGINS:
		        	        case self::PORT:
		        	        case self::PRECEDES:
		        	        case self::PREPARE:
		        	        case self::PRESERVE:
		        	        case self::PREV:
		        	        case self::PROCESSLIST:
		        	        case self::PROFILE:
		        	        case self::PROFILES:
		        	        case self::PROXY:
		        	        case self::QUERY:
		        	        case self::QUICK:
		        	        case self::REBUILD:
		        	        case self::RECOVER:
		        	        case self::REDO_BUFFER_SIZE:
		        	        case self::REDUNDANT:
		        	        case self::RELAY:
		        	        case self::RELAY_LOG_FILE:
		        	        case self::RELAY_LOG_POS:
		        	        case self::RELAYLOG:
		        	        case self::REMOVE:
		        	        case self::REORGANIZE:
		        	        case self::REPAIR:
		        	        case self::REPLICATE_DO_DB:
		        	        case self::REPLICATE_DO_TABLE:
		        	        case self::REPLICATE_IGNORE_DB:
		        	        case self::REPLICATE_IGNORE_TABLE:
		        	        case self::REPLICATE_REWRITE_DB:
		        	        case self::REPLICATE_WILD_DO_TABLE:
		        	        case self::REPLICATE_WILD_IGNORE_TABLE:
		        	        case self::REPLICATION:
		        	        case self::RESET:
		        	        case self::RESUME:
		        	        case self::RETURNED_SQLSTATE:
		        	        case self::RETURNS:
		        	        case self::ROLLBACK:
		        	        case self::ROLLUP:
		        	        case self::ROTATE:
		        	        case self::ROW:
		        	        case self::ROWS:
		        	        case self::ROW_FORMAT:
		        	        case self::SAVEPOINT:
		        	        case self::SCHEDULE:
		        	        case self::SECURITY:
		        	        case self::SERVER:
		        	        case self::SESSION:
		        	        case self::SHARE:
		        	        case self::SHARED:
		        	        case self::SIGNED:
		        	        case self::SIMPLE:
		        	        case self::SLAVE:
		        	        case self::SLOW:
		        	        case self::SNAPSHOT:
		        	        case self::SOCKET:
		        	        case self::SOME:
		        	        case self::SONAME:
		        	        case self::SOUNDS:
		        	        case self::SOURCE:
		        	        case self::SQL_AFTER_GTIDS:
		        	        case self::SQL_AFTER_MTS_GAPS:
		        	        case self::SQL_BEFORE_GTIDS:
		        	        case self::SQL_BUFFER_RESULT:
		        	        case self::SQL_CACHE:
		        	        case self::SQL_NO_CACHE:
		        	        case self::SQL_THREAD:
		        	        case self::START:
		        	        case self::STARTS:
		        	        case self::STATS_AUTO_RECALC:
		        	        case self::STATS_PERSISTENT:
		        	        case self::STATS_SAMPLE_PAGES:
		        	        case self::STATUS:
		        	        case self::STOP:
		        	        case self::STORAGE:
		        	        case self::STRING:
		        	        case self::SUBCLASS_ORIGIN:
		        	        case self::SUBJECT:
		        	        case self::SUBPARTITION:
		        	        case self::SUBPARTITIONS:
		        	        case self::SUSPEND:
		        	        case self::SWAPS:
		        	        case self::SWITCHES:
		        	        case self::TABLE_NAME:
		        	        case self::TABLESPACE:
		        	        case self::TEMPORARY:
		        	        case self::TEMPTABLE:
		        	        case self::THAN:
		        	        case self::TRADITIONAL:
		        	        case self::TRANSACTION:
		        	        case self::TRIGGERS:
		        	        case self::TRUNCATE:
		        	        case self::UNDEFINED:
		        	        case self::UNDOFILE:
		        	        case self::UNDO_BUFFER_SIZE:
		        	        case self::UNINSTALL:
		        	        case self::UNKNOWN:
		        	        case self::UNTIL:
		        	        case self::UPGRADE:
		        	        case self::USER:
		        	        case self::USE_FRM:
		        	        case self::USER_RESOURCES:
		        	        case self::VALIDATION:
		        	        case self::VALUE:
		        	        case self::VARIABLES:
		        	        case self::VIEW:
		        	        case self::VISIBLE:
		        	        case self::WAIT:
		        	        case self::WARNINGS:
		        	        case self::WITHOUT:
		        	        case self::WORK:
		        	        case self::WRAPPER:
		        	        case self::X509:
		        	        case self::XA:
		        	        case self::XML:
		        	        case self::INTERNAL:
		        	        case self::QUARTER:
		        	        case self::MONTH:
		        	        case self::DAY:
		        	        case self::HOUR:
		        	        case self::MINUTE:
		        	        case self::WEEK:
		        	        case self::SECOND:
		        	        case self::MICROSECOND:
		        	        case self::TABLES:
		        	        case self::ROUTINE:
		        	        case self::EXECUTE:
		        	        case self::FILE:
		        	        case self::PROCESS:
		        	        case self::RELOAD:
		        	        case self::SHUTDOWN:
		        	        case self::SUPER:
		        	        case self::PRIVILEGES:
		        	        case self::SESSION_VARIABLES_ADMIN:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::ARCHIVE:
		        	        case self::BLACKHOLE:
		        	        case self::CSV:
		        	        case self::FEDERATED:
		        	        case self::INNODB:
		        	        case self::MEMORY:
		        	        case self::MRG_MYISAM:
		        	        case self::MYISAM:
		        	        case self::NDB:
		        	        case self::NDBCLUSTER:
		        	        case self::PERFORMANCE_SCHEMA:
		        	        case self::TOKUDB:
		        	        case self::REPEATABLE:
		        	        case self::COMMITTED:
		        	        case self::UNCOMMITTED:
		        	        case self::SERIALIZABLE:
		        	        case self::GEOMETRYCOLLECTION:
		        	        case self::LINESTRING:
		        	        case self::MULTILINESTRING:
		        	        case self::MULTIPOINT:
		        	        case self::MULTIPOLYGON:
		        	        case self::POINT:
		        	        case self::POLYGON:
		        	        case self::ABS:
		        	        case self::ACOS:
		        	        case self::ADDDATE:
		        	        case self::ADDTIME:
		        	        case self::AES_DECRYPT:
		        	        case self::AES_ENCRYPT:
		        	        case self::AREA:
		        	        case self::ASBINARY:
		        	        case self::ASIN:
		        	        case self::ASTEXT:
		        	        case self::ASWKB:
		        	        case self::ASWKT:
		        	        case self::ASYMMETRIC_DECRYPT:
		        	        case self::ASYMMETRIC_DERIVE:
		        	        case self::ASYMMETRIC_ENCRYPT:
		        	        case self::ASYMMETRIC_SIGN:
		        	        case self::ASYMMETRIC_VERIFY:
		        	        case self::ATAN:
		        	        case self::ATAN2:
		        	        case self::BENCHMARK:
		        	        case self::BIN:
		        	        case self::BIT_COUNT:
		        	        case self::BIT_LENGTH:
		        	        case self::BUFFER:
		        	        case self::CATALOG_NAME:
		        	        case self::CEIL:
		        	        case self::CEILING:
		        	        case self::CENTROID:
		        	        case self::CHARACTER_LENGTH:
		        	        case self::CHARSET:
		        	        case self::CHAR_LENGTH:
		        	        case self::COERCIBILITY:
		        	        case self::COLLATION:
		        	        case self::COMPRESS:
		        	        case self::CONCAT:
		        	        case self::CONCAT_WS:
		        	        case self::CONNECTION_ID:
		        	        case self::CONV:
		        	        case self::CONVERT_TZ:
		        	        case self::COS:
		        	        case self::COT:
		        	        case self::CRC32:
		        	        case self::CREATE_ASYMMETRIC_PRIV_KEY:
		        	        case self::CREATE_ASYMMETRIC_PUB_KEY:
		        	        case self::CREATE_DH_PARAMETERS:
		        	        case self::CREATE_DIGEST:
		        	        case self::CROSSES:
		        	        case self::DATEDIFF:
		        	        case self::DATE_FORMAT:
		        	        case self::DAYNAME:
		        	        case self::DAYOFMONTH:
		        	        case self::DAYOFWEEK:
		        	        case self::DAYOFYEAR:
		        	        case self::DECODE:
		        	        case self::DEGREES:
		        	        case self::DES_DECRYPT:
		        	        case self::DES_ENCRYPT:
		        	        case self::DIMENSION:
		        	        case self::DISJOINT:
		        	        case self::ELT:
		        	        case self::ENCODE:
		        	        case self::ENCRYPT:
		        	        case self::ENDPOINT:
		        	        case self::ENVELOPE:
		        	        case self::EQUALS:
		        	        case self::EXP:
		        	        case self::EXPORT_SET:
		        	        case self::EXTERIORRING:
		        	        case self::EXTRACTVALUE:
		        	        case self::FIELD:
		        	        case self::FIND_IN_SET:
		        	        case self::FLOOR:
		        	        case self::FORMAT:
		        	        case self::FOUND_ROWS:
		        	        case self::FROM_BASE64:
		        	        case self::FROM_DAYS:
		        	        case self::FROM_UNIXTIME:
		        	        case self::GEOMCOLLFROMTEXT:
		        	        case self::GEOMCOLLFROMWKB:
		        	        case self::GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::GEOMETRYFROMTEXT:
		        	        case self::GEOMETRYFROMWKB:
		        	        case self::GEOMETRYN:
		        	        case self::GEOMETRYTYPE:
		        	        case self::GEOMFROMTEXT:
		        	        case self::GEOMFROMWKB:
		        	        case self::GET_FORMAT:
		        	        case self::GET_LOCK:
		        	        case self::GLENGTH:
		        	        case self::GREATEST:
		        	        case self::GTID_SUBSET:
		        	        case self::GTID_SUBTRACT:
		        	        case self::HEX:
		        	        case self::IFNULL:
		        	        case self::INET6_ATON:
		        	        case self::INET6_NTOA:
		        	        case self::INET_ATON:
		        	        case self::INET_NTOA:
		        	        case self::INSTR:
		        	        case self::INTERIORRINGN:
		        	        case self::INTERSECTS:
		        	        case self::ISCLOSED:
		        	        case self::ISEMPTY:
		        	        case self::ISNULL:
		        	        case self::ISSIMPLE:
		        	        case self::IS_FREE_LOCK:
		        	        case self::IS_IPV4:
		        	        case self::IS_IPV4_COMPAT:
		        	        case self::IS_IPV4_MAPPED:
		        	        case self::IS_IPV6:
		        	        case self::IS_USED_LOCK:
		        	        case self::LAST_INSERT_ID:
		        	        case self::LCASE:
		        	        case self::LEAST:
		        	        case self::LENGTH:
		        	        case self::LINEFROMTEXT:
		        	        case self::LINEFROMWKB:
		        	        case self::LINESTRINGFROMTEXT:
		        	        case self::LINESTRINGFROMWKB:
		        	        case self::LN:
		        	        case self::LOAD_FILE:
		        	        case self::LOCATE:
		        	        case self::LOG:
		        	        case self::LOG10:
		        	        case self::LOG2:
		        	        case self::LOWER:
		        	        case self::LPAD:
		        	        case self::LTRIM:
		        	        case self::MAKEDATE:
		        	        case self::MAKETIME:
		        	        case self::MAKE_SET:
		        	        case self::MASTER_POS_WAIT:
		        	        case self::MBRCONTAINS:
		        	        case self::MBRDISJOINT:
		        	        case self::MBREQUAL:
		        	        case self::MBRINTERSECTS:
		        	        case self::MBROVERLAPS:
		        	        case self::MBRTOUCHES:
		        	        case self::MBRWITHIN:
		        	        case self::MD5:
		        	        case self::MLINEFROMTEXT:
		        	        case self::MLINEFROMWKB:
		        	        case self::MONTHNAME:
		        	        case self::MPOINTFROMTEXT:
		        	        case self::MPOINTFROMWKB:
		        	        case self::MPOLYFROMTEXT:
		        	        case self::MPOLYFROMWKB:
		        	        case self::MULTILINESTRINGFROMTEXT:
		        	        case self::MULTILINESTRINGFROMWKB:
		        	        case self::MULTIPOINTFROMTEXT:
		        	        case self::MULTIPOINTFROMWKB:
		        	        case self::MULTIPOLYGONFROMTEXT:
		        	        case self::MULTIPOLYGONFROMWKB:
		        	        case self::NAME_CONST:
		        	        case self::NULLIF:
		        	        case self::NUMGEOMETRIES:
		        	        case self::NUMINTERIORRINGS:
		        	        case self::NUMPOINTS:
		        	        case self::OCT:
		        	        case self::OCTET_LENGTH:
		        	        case self::ORD:
		        	        case self::OVERLAPS:
		        	        case self::PERIOD_ADD:
		        	        case self::PERIOD_DIFF:
		        	        case self::PI:
		        	        case self::POINTFROMTEXT:
		        	        case self::POINTFROMWKB:
		        	        case self::POINTN:
		        	        case self::POLYFROMTEXT:
		        	        case self::POLYFROMWKB:
		        	        case self::POLYGONFROMTEXT:
		        	        case self::POLYGONFROMWKB:
		        	        case self::POW:
		        	        case self::POWER:
		        	        case self::QUOTE:
		        	        case self::RADIANS:
		        	        case self::RAND:
		        	        case self::RANDOM_BYTES:
		        	        case self::RELEASE_LOCK:
		        	        case self::REVERSE:
		        	        case self::ROUND:
		        	        case self::ROW_COUNT:
		        	        case self::RPAD:
		        	        case self::RTRIM:
		        	        case self::SEC_TO_TIME:
		        	        case self::SESSION_USER:
		        	        case self::SHA:
		        	        case self::SHA1:
		        	        case self::SHA2:
		        	        case self::SCHEMA_NAME:
		        	        case self::SIGN:
		        	        case self::SIN:
		        	        case self::SLEEP:
		        	        case self::SOUNDEX:
		        	        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		        	        case self::SQRT:
		        	        case self::SRID:
		        	        case self::STARTPOINT:
		        	        case self::STRCMP:
		        	        case self::STR_TO_DATE:
		        	        case self::ST_AREA:
		        	        case self::ST_ASBINARY:
		        	        case self::ST_ASTEXT:
		        	        case self::ST_ASWKB:
		        	        case self::ST_ASWKT:
		        	        case self::ST_BUFFER:
		        	        case self::ST_CENTROID:
		        	        case self::ST_CONTAINS:
		        	        case self::ST_CROSSES:
		        	        case self::ST_DIFFERENCE:
		        	        case self::ST_DIMENSION:
		        	        case self::ST_DISJOINT:
		        	        case self::ST_DISTANCE:
		        	        case self::ST_ENDPOINT:
		        	        case self::ST_ENVELOPE:
		        	        case self::ST_EQUALS:
		        	        case self::ST_EXTERIORRING:
		        	        case self::ST_GEOMCOLLFROMTEXT:
		        	        case self::ST_GEOMCOLLFROMTXT:
		        	        case self::ST_GEOMCOLLFROMWKB:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::ST_GEOMETRYFROMTEXT:
		        	        case self::ST_GEOMETRYFROMWKB:
		        	        case self::ST_GEOMETRYN:
		        	        case self::ST_GEOMETRYTYPE:
		        	        case self::ST_GEOMFROMTEXT:
		        	        case self::ST_GEOMFROMWKB:
		        	        case self::ST_INTERIORRINGN:
		        	        case self::ST_INTERSECTION:
		        	        case self::ST_INTERSECTS:
		        	        case self::ST_ISCLOSED:
		        	        case self::ST_ISEMPTY:
		        	        case self::ST_ISSIMPLE:
		        	        case self::ST_LINEFROMTEXT:
		        	        case self::ST_LINEFROMWKB:
		        	        case self::ST_LINESTRINGFROMTEXT:
		        	        case self::ST_LINESTRINGFROMWKB:
		        	        case self::ST_NUMGEOMETRIES:
		        	        case self::ST_NUMINTERIORRING:
		        	        case self::ST_NUMINTERIORRINGS:
		        	        case self::ST_NUMPOINTS:
		        	        case self::ST_OVERLAPS:
		        	        case self::ST_POINTFROMTEXT:
		        	        case self::ST_POINTFROMWKB:
		        	        case self::ST_POINTN:
		        	        case self::ST_POLYFROMTEXT:
		        	        case self::ST_POLYFROMWKB:
		        	        case self::ST_POLYGONFROMTEXT:
		        	        case self::ST_POLYGONFROMWKB:
		        	        case self::ST_SRID:
		        	        case self::ST_STARTPOINT:
		        	        case self::ST_SYMDIFFERENCE:
		        	        case self::ST_TOUCHES:
		        	        case self::ST_UNION:
		        	        case self::ST_WITHIN:
		        	        case self::ST_X:
		        	        case self::ST_Y:
		        	        case self::SUBDATE:
		        	        case self::SUBSTRING_INDEX:
		        	        case self::SUBTIME:
		        	        case self::SYSTEM_USER:
		        	        case self::TAN:
		        	        case self::TIMEDIFF:
		        	        case self::TIMESTAMPADD:
		        	        case self::TIMESTAMPDIFF:
		        	        case self::TIME_FORMAT:
		        	        case self::TIME_TO_SEC:
		        	        case self::TOUCHES:
		        	        case self::TO_BASE64:
		        	        case self::TO_DAYS:
		        	        case self::TO_SECONDS:
		        	        case self::UCASE:
		        	        case self::UNCOMPRESS:
		        	        case self::UNCOMPRESSED_LENGTH:
		        	        case self::UNHEX:
		        	        case self::UNIX_TIMESTAMP:
		        	        case self::UPDATEXML:
		        	        case self::UPPER:
		        	        case self::UUID:
		        	        case self::UUID_SHORT:
		        	        case self::VALIDATE_PASSWORD_STRENGTH:
		        	        case self::VERSION:
		        	        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		        	        case self::WEEKDAY:
		        	        case self::WEEKOFYEAR:
		        	        case self::WEIGHT_STRING:
		        	        case self::WITHIN:
		        	        case self::YEARWEEK:
		        	        case self::Y_FUNCTION:
		        	        case self::X_FUNCTION:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        case self::ID:
		        	        case self::REVERSE_QUOTE_ID:
		        	        	$this->setState(2590);
		        	        	$this->uidList();
		        	        	break;

		        	        case self::ALL:
		        	        	$this->setState(2591);
		        	        	$this->match(self::ALL);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 42:
		        	    $localContext = new Context\AlterByRebuildPartitionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 42);
		        	    $this->setState(2594);
		        	    $this->match(self::REBUILD);
		        	    $this->setState(2595);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2598);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::CURRENT:
		        	        case self::DATABASE:
		        	        case self::DIAGNOSTICS:
		        	        case self::LEFT:
		        	        case self::NUMBER:
		        	        case self::RIGHT:
		        	        case self::STACKED:
		        	        case self::DATE:
		        	        case self::TIME:
		        	        case self::TIMESTAMP:
		        	        case self::DATETIME:
		        	        case self::YEAR:
		        	        case self::TEXT:
		        	        case self::ENUM:
		        	        case self::SERIAL:
		        	        case self::COUNT:
		        	        case self::POSITION:
		        	        case self::ACCOUNT:
		        	        case self::ACTION:
		        	        case self::AFTER:
		        	        case self::AGGREGATE:
		        	        case self::ALGORITHM:
		        	        case self::ANY:
		        	        case self::AT:
		        	        case self::AUTHORS:
		        	        case self::AUTOCOMMIT:
		        	        case self::AUTOEXTEND_SIZE:
		        	        case self::AUTO_INCREMENT:
		        	        case self::AVG_ROW_LENGTH:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::BIT:
		        	        case self::BLOCK:
		        	        case self::BOOL:
		        	        case self::BOOLEAN:
		        	        case self::BTREE:
		        	        case self::CACHE:
		        	        case self::CASCADED:
		        	        case self::CHAIN:
		        	        case self::CHANGED:
		        	        case self::CHANNEL:
		        	        case self::CHECKSUM:
		        	        case self::PAGE_CHECKSUM:
		        	        case self::CIPHER:
		        	        case self::CLASS_ORIGIN:
		        	        case self::CLIENT:
		        	        case self::CLOSE:
		        	        case self::COALESCE:
		        	        case self::CODE:
		        	        case self::COLUMNS:
		        	        case self::COLUMN_FORMAT:
		        	        case self::COLUMN_NAME:
		        	        case self::COMMENT:
		        	        case self::COMMIT:
		        	        case self::COMPACT:
		        	        case self::COMPLETION:
		        	        case self::COMPRESSED:
		        	        case self::COMPRESSION:
		        	        case self::CONCURRENT:
		        	        case self::CONNECTION:
		        	        case self::CONSISTENT:
		        	        case self::CONSTRAINT_CATALOG:
		        	        case self::CONSTRAINT_SCHEMA:
		        	        case self::CONSTRAINT_NAME:
		        	        case self::CONTAINS:
		        	        case self::CONTEXT:
		        	        case self::CONTRIBUTORS:
		        	        case self::COPY:
		        	        case self::CPU:
		        	        case self::CURSOR_NAME:
		        	        case self::DATA:
		        	        case self::DATAFILE:
		        	        case self::DEALLOCATE:
		        	        case self::DEFAULT_AUTH:
		        	        case self::DEFINER:
		        	        case self::DELAY_KEY_WRITE:
		        	        case self::DES_KEY_FILE:
		        	        case self::DIRECTORY:
		        	        case self::DISABLE:
		        	        case self::DISCARD:
		        	        case self::DISK:
		        	        case self::DO:
		        	        case self::DUMPFILE:
		        	        case self::DUPLICATE:
		        	        case self::DYNAMIC:
		        	        case self::ENABLE:
		        	        case self::ENCRYPTION:
		        	        case self::END:
		        	        case self::ENDS:
		        	        case self::ENGINE:
		        	        case self::ENGINES:
		        	        case self::ERROR:
		        	        case self::ERRORS:
		        	        case self::ESCAPE:
		        	        case self::EVEN:
		        	        case self::EVENT:
		        	        case self::EVENTS:
		        	        case self::EVERY:
		        	        case self::EXCHANGE:
		        	        case self::EXCLUSIVE:
		        	        case self::EXPIRE:
		        	        case self::EXPORT:
		        	        case self::EXTENDED:
		        	        case self::EXTENT_SIZE:
		        	        case self::FAST:
		        	        case self::FAULTS:
		        	        case self::FIELDS:
		        	        case self::FILE_BLOCK_SIZE:
		        	        case self::FILTER:
		        	        case self::FIRST:
		        	        case self::FIXED:
		        	        case self::FLUSH:
		        	        case self::FOLLOWS:
		        	        case self::FOUND:
		        	        case self::FULL:
		        	        case self::FUNCTION:
		        	        case self::GENERAL:
		        	        case self::GLOBAL:
		        	        case self::GRANTS:
		        	        case self::GROUP_REPLICATION:
		        	        case self::HANDLER:
		        	        case self::HASH:
		        	        case self::HELP:
		        	        case self::HOST:
		        	        case self::HOSTS:
		        	        case self::IDENTIFIED:
		        	        case self::IGNORE_SERVER_IDS:
		        	        case self::IMPORT:
		        	        case self::INDEXES:
		        	        case self::INITIAL_SIZE:
		        	        case self::INPLACE:
		        	        case self::INSERT_METHOD:
		        	        case self::INSTALL:
		        	        case self::INSTANCE:
		        	        case self::INVISIBLE:
		        	        case self::INVOKER:
		        	        case self::IO:
		        	        case self::IO_THREAD:
		        	        case self::IPC:
		        	        case self::ISOLATION:
		        	        case self::ISSUER:
		        	        case self::JSON:
		        	        case self::KEY_BLOCK_SIZE:
		        	        case self::LANGUAGE:
		        	        case self::LAST:
		        	        case self::LEAVES:
		        	        case self::LESS:
		        	        case self::LEVEL:
		        	        case self::LIST:
		        	        case self::LOCAL:
		        	        case self::LOGFILE:
		        	        case self::LOGS:
		        	        case self::MASTER:
		        	        case self::MASTER_AUTO_POSITION:
		        	        case self::MASTER_CONNECT_RETRY:
		        	        case self::MASTER_DELAY:
		        	        case self::MASTER_HEARTBEAT_PERIOD:
		        	        case self::MASTER_HOST:
		        	        case self::MASTER_LOG_FILE:
		        	        case self::MASTER_LOG_POS:
		        	        case self::MASTER_PASSWORD:
		        	        case self::MASTER_PORT:
		        	        case self::MASTER_RETRY_COUNT:
		        	        case self::MASTER_SSL:
		        	        case self::MASTER_SSL_CA:
		        	        case self::MASTER_SSL_CAPATH:
		        	        case self::MASTER_SSL_CERT:
		        	        case self::MASTER_SSL_CIPHER:
		        	        case self::MASTER_SSL_CRL:
		        	        case self::MASTER_SSL_CRLPATH:
		        	        case self::MASTER_SSL_KEY:
		        	        case self::MASTER_TLS_VERSION:
		        	        case self::MASTER_USER:
		        	        case self::MAX_CONNECTIONS_PER_HOUR:
		        	        case self::MAX_QUERIES_PER_HOUR:
		        	        case self::MAX_ROWS:
		        	        case self::MAX_SIZE:
		        	        case self::MAX_UPDATES_PER_HOUR:
		        	        case self::MAX_USER_CONNECTIONS:
		        	        case self::MEDIUM:
		        	        case self::MERGE:
		        	        case self::MESSAGE_TEXT:
		        	        case self::MID:
		        	        case self::MIGRATE:
		        	        case self::MIN_ROWS:
		        	        case self::MODE:
		        	        case self::MODIFY:
		        	        case self::MUTEX:
		        	        case self::MYSQL:
		        	        case self::MYSQL_ERRNO:
		        	        case self::NAME:
		        	        case self::NAMES:
		        	        case self::NCHAR:
		        	        case self::NEVER:
		        	        case self::NEXT:
		        	        case self::NO:
		        	        case self::NODEGROUP:
		        	        case self::NONE:
		        	        case self::OFFLINE:
		        	        case self::OFFSET:
		        	        case self::OJ:
		        	        case self::OLD_PASSWORD:
		        	        case self::ONE:
		        	        case self::ONLINE:
		        	        case self::ONLY:
		        	        case self::OPEN:
		        	        case self::OPTIMIZER_COSTS:
		        	        case self::OPTIONS:
		        	        case self::OWNER:
		        	        case self::PACK_KEYS:
		        	        case self::PAGE:
		        	        case self::PARSER:
		        	        case self::PARTIAL:
		        	        case self::PARTITIONING:
		        	        case self::PARTITIONS:
		        	        case self::PASSWORD:
		        	        case self::PHASE:
		        	        case self::PLUGIN:
		        	        case self::PLUGIN_DIR:
		        	        case self::PLUGINS:
		        	        case self::PORT:
		        	        case self::PRECEDES:
		        	        case self::PREPARE:
		        	        case self::PRESERVE:
		        	        case self::PREV:
		        	        case self::PROCESSLIST:
		        	        case self::PROFILE:
		        	        case self::PROFILES:
		        	        case self::PROXY:
		        	        case self::QUERY:
		        	        case self::QUICK:
		        	        case self::REBUILD:
		        	        case self::RECOVER:
		        	        case self::REDO_BUFFER_SIZE:
		        	        case self::REDUNDANT:
		        	        case self::RELAY:
		        	        case self::RELAY_LOG_FILE:
		        	        case self::RELAY_LOG_POS:
		        	        case self::RELAYLOG:
		        	        case self::REMOVE:
		        	        case self::REORGANIZE:
		        	        case self::REPAIR:
		        	        case self::REPLICATE_DO_DB:
		        	        case self::REPLICATE_DO_TABLE:
		        	        case self::REPLICATE_IGNORE_DB:
		        	        case self::REPLICATE_IGNORE_TABLE:
		        	        case self::REPLICATE_REWRITE_DB:
		        	        case self::REPLICATE_WILD_DO_TABLE:
		        	        case self::REPLICATE_WILD_IGNORE_TABLE:
		        	        case self::REPLICATION:
		        	        case self::RESET:
		        	        case self::RESUME:
		        	        case self::RETURNED_SQLSTATE:
		        	        case self::RETURNS:
		        	        case self::ROLLBACK:
		        	        case self::ROLLUP:
		        	        case self::ROTATE:
		        	        case self::ROW:
		        	        case self::ROWS:
		        	        case self::ROW_FORMAT:
		        	        case self::SAVEPOINT:
		        	        case self::SCHEDULE:
		        	        case self::SECURITY:
		        	        case self::SERVER:
		        	        case self::SESSION:
		        	        case self::SHARE:
		        	        case self::SHARED:
		        	        case self::SIGNED:
		        	        case self::SIMPLE:
		        	        case self::SLAVE:
		        	        case self::SLOW:
		        	        case self::SNAPSHOT:
		        	        case self::SOCKET:
		        	        case self::SOME:
		        	        case self::SONAME:
		        	        case self::SOUNDS:
		        	        case self::SOURCE:
		        	        case self::SQL_AFTER_GTIDS:
		        	        case self::SQL_AFTER_MTS_GAPS:
		        	        case self::SQL_BEFORE_GTIDS:
		        	        case self::SQL_BUFFER_RESULT:
		        	        case self::SQL_CACHE:
		        	        case self::SQL_NO_CACHE:
		        	        case self::SQL_THREAD:
		        	        case self::START:
		        	        case self::STARTS:
		        	        case self::STATS_AUTO_RECALC:
		        	        case self::STATS_PERSISTENT:
		        	        case self::STATS_SAMPLE_PAGES:
		        	        case self::STATUS:
		        	        case self::STOP:
		        	        case self::STORAGE:
		        	        case self::STRING:
		        	        case self::SUBCLASS_ORIGIN:
		        	        case self::SUBJECT:
		        	        case self::SUBPARTITION:
		        	        case self::SUBPARTITIONS:
		        	        case self::SUSPEND:
		        	        case self::SWAPS:
		        	        case self::SWITCHES:
		        	        case self::TABLE_NAME:
		        	        case self::TABLESPACE:
		        	        case self::TEMPORARY:
		        	        case self::TEMPTABLE:
		        	        case self::THAN:
		        	        case self::TRADITIONAL:
		        	        case self::TRANSACTION:
		        	        case self::TRIGGERS:
		        	        case self::TRUNCATE:
		        	        case self::UNDEFINED:
		        	        case self::UNDOFILE:
		        	        case self::UNDO_BUFFER_SIZE:
		        	        case self::UNINSTALL:
		        	        case self::UNKNOWN:
		        	        case self::UNTIL:
		        	        case self::UPGRADE:
		        	        case self::USER:
		        	        case self::USE_FRM:
		        	        case self::USER_RESOURCES:
		        	        case self::VALIDATION:
		        	        case self::VALUE:
		        	        case self::VARIABLES:
		        	        case self::VIEW:
		        	        case self::VISIBLE:
		        	        case self::WAIT:
		        	        case self::WARNINGS:
		        	        case self::WITHOUT:
		        	        case self::WORK:
		        	        case self::WRAPPER:
		        	        case self::X509:
		        	        case self::XA:
		        	        case self::XML:
		        	        case self::INTERNAL:
		        	        case self::QUARTER:
		        	        case self::MONTH:
		        	        case self::DAY:
		        	        case self::HOUR:
		        	        case self::MINUTE:
		        	        case self::WEEK:
		        	        case self::SECOND:
		        	        case self::MICROSECOND:
		        	        case self::TABLES:
		        	        case self::ROUTINE:
		        	        case self::EXECUTE:
		        	        case self::FILE:
		        	        case self::PROCESS:
		        	        case self::RELOAD:
		        	        case self::SHUTDOWN:
		        	        case self::SUPER:
		        	        case self::PRIVILEGES:
		        	        case self::SESSION_VARIABLES_ADMIN:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::ARCHIVE:
		        	        case self::BLACKHOLE:
		        	        case self::CSV:
		        	        case self::FEDERATED:
		        	        case self::INNODB:
		        	        case self::MEMORY:
		        	        case self::MRG_MYISAM:
		        	        case self::MYISAM:
		        	        case self::NDB:
		        	        case self::NDBCLUSTER:
		        	        case self::PERFORMANCE_SCHEMA:
		        	        case self::TOKUDB:
		        	        case self::REPEATABLE:
		        	        case self::COMMITTED:
		        	        case self::UNCOMMITTED:
		        	        case self::SERIALIZABLE:
		        	        case self::GEOMETRYCOLLECTION:
		        	        case self::LINESTRING:
		        	        case self::MULTILINESTRING:
		        	        case self::MULTIPOINT:
		        	        case self::MULTIPOLYGON:
		        	        case self::POINT:
		        	        case self::POLYGON:
		        	        case self::ABS:
		        	        case self::ACOS:
		        	        case self::ADDDATE:
		        	        case self::ADDTIME:
		        	        case self::AES_DECRYPT:
		        	        case self::AES_ENCRYPT:
		        	        case self::AREA:
		        	        case self::ASBINARY:
		        	        case self::ASIN:
		        	        case self::ASTEXT:
		        	        case self::ASWKB:
		        	        case self::ASWKT:
		        	        case self::ASYMMETRIC_DECRYPT:
		        	        case self::ASYMMETRIC_DERIVE:
		        	        case self::ASYMMETRIC_ENCRYPT:
		        	        case self::ASYMMETRIC_SIGN:
		        	        case self::ASYMMETRIC_VERIFY:
		        	        case self::ATAN:
		        	        case self::ATAN2:
		        	        case self::BENCHMARK:
		        	        case self::BIN:
		        	        case self::BIT_COUNT:
		        	        case self::BIT_LENGTH:
		        	        case self::BUFFER:
		        	        case self::CATALOG_NAME:
		        	        case self::CEIL:
		        	        case self::CEILING:
		        	        case self::CENTROID:
		        	        case self::CHARACTER_LENGTH:
		        	        case self::CHARSET:
		        	        case self::CHAR_LENGTH:
		        	        case self::COERCIBILITY:
		        	        case self::COLLATION:
		        	        case self::COMPRESS:
		        	        case self::CONCAT:
		        	        case self::CONCAT_WS:
		        	        case self::CONNECTION_ID:
		        	        case self::CONV:
		        	        case self::CONVERT_TZ:
		        	        case self::COS:
		        	        case self::COT:
		        	        case self::CRC32:
		        	        case self::CREATE_ASYMMETRIC_PRIV_KEY:
		        	        case self::CREATE_ASYMMETRIC_PUB_KEY:
		        	        case self::CREATE_DH_PARAMETERS:
		        	        case self::CREATE_DIGEST:
		        	        case self::CROSSES:
		        	        case self::DATEDIFF:
		        	        case self::DATE_FORMAT:
		        	        case self::DAYNAME:
		        	        case self::DAYOFMONTH:
		        	        case self::DAYOFWEEK:
		        	        case self::DAYOFYEAR:
		        	        case self::DECODE:
		        	        case self::DEGREES:
		        	        case self::DES_DECRYPT:
		        	        case self::DES_ENCRYPT:
		        	        case self::DIMENSION:
		        	        case self::DISJOINT:
		        	        case self::ELT:
		        	        case self::ENCODE:
		        	        case self::ENCRYPT:
		        	        case self::ENDPOINT:
		        	        case self::ENVELOPE:
		        	        case self::EQUALS:
		        	        case self::EXP:
		        	        case self::EXPORT_SET:
		        	        case self::EXTERIORRING:
		        	        case self::EXTRACTVALUE:
		        	        case self::FIELD:
		        	        case self::FIND_IN_SET:
		        	        case self::FLOOR:
		        	        case self::FORMAT:
		        	        case self::FOUND_ROWS:
		        	        case self::FROM_BASE64:
		        	        case self::FROM_DAYS:
		        	        case self::FROM_UNIXTIME:
		        	        case self::GEOMCOLLFROMTEXT:
		        	        case self::GEOMCOLLFROMWKB:
		        	        case self::GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::GEOMETRYFROMTEXT:
		        	        case self::GEOMETRYFROMWKB:
		        	        case self::GEOMETRYN:
		        	        case self::GEOMETRYTYPE:
		        	        case self::GEOMFROMTEXT:
		        	        case self::GEOMFROMWKB:
		        	        case self::GET_FORMAT:
		        	        case self::GET_LOCK:
		        	        case self::GLENGTH:
		        	        case self::GREATEST:
		        	        case self::GTID_SUBSET:
		        	        case self::GTID_SUBTRACT:
		        	        case self::HEX:
		        	        case self::IFNULL:
		        	        case self::INET6_ATON:
		        	        case self::INET6_NTOA:
		        	        case self::INET_ATON:
		        	        case self::INET_NTOA:
		        	        case self::INSTR:
		        	        case self::INTERIORRINGN:
		        	        case self::INTERSECTS:
		        	        case self::ISCLOSED:
		        	        case self::ISEMPTY:
		        	        case self::ISNULL:
		        	        case self::ISSIMPLE:
		        	        case self::IS_FREE_LOCK:
		        	        case self::IS_IPV4:
		        	        case self::IS_IPV4_COMPAT:
		        	        case self::IS_IPV4_MAPPED:
		        	        case self::IS_IPV6:
		        	        case self::IS_USED_LOCK:
		        	        case self::LAST_INSERT_ID:
		        	        case self::LCASE:
		        	        case self::LEAST:
		        	        case self::LENGTH:
		        	        case self::LINEFROMTEXT:
		        	        case self::LINEFROMWKB:
		        	        case self::LINESTRINGFROMTEXT:
		        	        case self::LINESTRINGFROMWKB:
		        	        case self::LN:
		        	        case self::LOAD_FILE:
		        	        case self::LOCATE:
		        	        case self::LOG:
		        	        case self::LOG10:
		        	        case self::LOG2:
		        	        case self::LOWER:
		        	        case self::LPAD:
		        	        case self::LTRIM:
		        	        case self::MAKEDATE:
		        	        case self::MAKETIME:
		        	        case self::MAKE_SET:
		        	        case self::MASTER_POS_WAIT:
		        	        case self::MBRCONTAINS:
		        	        case self::MBRDISJOINT:
		        	        case self::MBREQUAL:
		        	        case self::MBRINTERSECTS:
		        	        case self::MBROVERLAPS:
		        	        case self::MBRTOUCHES:
		        	        case self::MBRWITHIN:
		        	        case self::MD5:
		        	        case self::MLINEFROMTEXT:
		        	        case self::MLINEFROMWKB:
		        	        case self::MONTHNAME:
		        	        case self::MPOINTFROMTEXT:
		        	        case self::MPOINTFROMWKB:
		        	        case self::MPOLYFROMTEXT:
		        	        case self::MPOLYFROMWKB:
		        	        case self::MULTILINESTRINGFROMTEXT:
		        	        case self::MULTILINESTRINGFROMWKB:
		        	        case self::MULTIPOINTFROMTEXT:
		        	        case self::MULTIPOINTFROMWKB:
		        	        case self::MULTIPOLYGONFROMTEXT:
		        	        case self::MULTIPOLYGONFROMWKB:
		        	        case self::NAME_CONST:
		        	        case self::NULLIF:
		        	        case self::NUMGEOMETRIES:
		        	        case self::NUMINTERIORRINGS:
		        	        case self::NUMPOINTS:
		        	        case self::OCT:
		        	        case self::OCTET_LENGTH:
		        	        case self::ORD:
		        	        case self::OVERLAPS:
		        	        case self::PERIOD_ADD:
		        	        case self::PERIOD_DIFF:
		        	        case self::PI:
		        	        case self::POINTFROMTEXT:
		        	        case self::POINTFROMWKB:
		        	        case self::POINTN:
		        	        case self::POLYFROMTEXT:
		        	        case self::POLYFROMWKB:
		        	        case self::POLYGONFROMTEXT:
		        	        case self::POLYGONFROMWKB:
		        	        case self::POW:
		        	        case self::POWER:
		        	        case self::QUOTE:
		        	        case self::RADIANS:
		        	        case self::RAND:
		        	        case self::RANDOM_BYTES:
		        	        case self::RELEASE_LOCK:
		        	        case self::REVERSE:
		        	        case self::ROUND:
		        	        case self::ROW_COUNT:
		        	        case self::RPAD:
		        	        case self::RTRIM:
		        	        case self::SEC_TO_TIME:
		        	        case self::SESSION_USER:
		        	        case self::SHA:
		        	        case self::SHA1:
		        	        case self::SHA2:
		        	        case self::SCHEMA_NAME:
		        	        case self::SIGN:
		        	        case self::SIN:
		        	        case self::SLEEP:
		        	        case self::SOUNDEX:
		        	        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		        	        case self::SQRT:
		        	        case self::SRID:
		        	        case self::STARTPOINT:
		        	        case self::STRCMP:
		        	        case self::STR_TO_DATE:
		        	        case self::ST_AREA:
		        	        case self::ST_ASBINARY:
		        	        case self::ST_ASTEXT:
		        	        case self::ST_ASWKB:
		        	        case self::ST_ASWKT:
		        	        case self::ST_BUFFER:
		        	        case self::ST_CENTROID:
		        	        case self::ST_CONTAINS:
		        	        case self::ST_CROSSES:
		        	        case self::ST_DIFFERENCE:
		        	        case self::ST_DIMENSION:
		        	        case self::ST_DISJOINT:
		        	        case self::ST_DISTANCE:
		        	        case self::ST_ENDPOINT:
		        	        case self::ST_ENVELOPE:
		        	        case self::ST_EQUALS:
		        	        case self::ST_EXTERIORRING:
		        	        case self::ST_GEOMCOLLFROMTEXT:
		        	        case self::ST_GEOMCOLLFROMTXT:
		        	        case self::ST_GEOMCOLLFROMWKB:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::ST_GEOMETRYFROMTEXT:
		        	        case self::ST_GEOMETRYFROMWKB:
		        	        case self::ST_GEOMETRYN:
		        	        case self::ST_GEOMETRYTYPE:
		        	        case self::ST_GEOMFROMTEXT:
		        	        case self::ST_GEOMFROMWKB:
		        	        case self::ST_INTERIORRINGN:
		        	        case self::ST_INTERSECTION:
		        	        case self::ST_INTERSECTS:
		        	        case self::ST_ISCLOSED:
		        	        case self::ST_ISEMPTY:
		        	        case self::ST_ISSIMPLE:
		        	        case self::ST_LINEFROMTEXT:
		        	        case self::ST_LINEFROMWKB:
		        	        case self::ST_LINESTRINGFROMTEXT:
		        	        case self::ST_LINESTRINGFROMWKB:
		        	        case self::ST_NUMGEOMETRIES:
		        	        case self::ST_NUMINTERIORRING:
		        	        case self::ST_NUMINTERIORRINGS:
		        	        case self::ST_NUMPOINTS:
		        	        case self::ST_OVERLAPS:
		        	        case self::ST_POINTFROMTEXT:
		        	        case self::ST_POINTFROMWKB:
		        	        case self::ST_POINTN:
		        	        case self::ST_POLYFROMTEXT:
		        	        case self::ST_POLYFROMWKB:
		        	        case self::ST_POLYGONFROMTEXT:
		        	        case self::ST_POLYGONFROMWKB:
		        	        case self::ST_SRID:
		        	        case self::ST_STARTPOINT:
		        	        case self::ST_SYMDIFFERENCE:
		        	        case self::ST_TOUCHES:
		        	        case self::ST_UNION:
		        	        case self::ST_WITHIN:
		        	        case self::ST_X:
		        	        case self::ST_Y:
		        	        case self::SUBDATE:
		        	        case self::SUBSTRING_INDEX:
		        	        case self::SUBTIME:
		        	        case self::SYSTEM_USER:
		        	        case self::TAN:
		        	        case self::TIMEDIFF:
		        	        case self::TIMESTAMPADD:
		        	        case self::TIMESTAMPDIFF:
		        	        case self::TIME_FORMAT:
		        	        case self::TIME_TO_SEC:
		        	        case self::TOUCHES:
		        	        case self::TO_BASE64:
		        	        case self::TO_DAYS:
		        	        case self::TO_SECONDS:
		        	        case self::UCASE:
		        	        case self::UNCOMPRESS:
		        	        case self::UNCOMPRESSED_LENGTH:
		        	        case self::UNHEX:
		        	        case self::UNIX_TIMESTAMP:
		        	        case self::UPDATEXML:
		        	        case self::UPPER:
		        	        case self::UUID:
		        	        case self::UUID_SHORT:
		        	        case self::VALIDATE_PASSWORD_STRENGTH:
		        	        case self::VERSION:
		        	        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		        	        case self::WEEKDAY:
		        	        case self::WEEKOFYEAR:
		        	        case self::WEIGHT_STRING:
		        	        case self::WITHIN:
		        	        case self::YEARWEEK:
		        	        case self::Y_FUNCTION:
		        	        case self::X_FUNCTION:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        case self::ID:
		        	        case self::REVERSE_QUOTE_ID:
		        	        	$this->setState(2596);
		        	        	$this->uidList();
		        	        	break;

		        	        case self::ALL:
		        	        	$this->setState(2597);
		        	        	$this->match(self::ALL);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 43:
		        	    $localContext = new Context\AlterByRepairPartitionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 43);
		        	    $this->setState(2600);
		        	    $this->match(self::REPAIR);
		        	    $this->setState(2601);
		        	    $this->match(self::PARTITION);
		        	    $this->setState(2604);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::CURRENT:
		        	        case self::DATABASE:
		        	        case self::DIAGNOSTICS:
		        	        case self::LEFT:
		        	        case self::NUMBER:
		        	        case self::RIGHT:
		        	        case self::STACKED:
		        	        case self::DATE:
		        	        case self::TIME:
		        	        case self::TIMESTAMP:
		        	        case self::DATETIME:
		        	        case self::YEAR:
		        	        case self::TEXT:
		        	        case self::ENUM:
		        	        case self::SERIAL:
		        	        case self::COUNT:
		        	        case self::POSITION:
		        	        case self::ACCOUNT:
		        	        case self::ACTION:
		        	        case self::AFTER:
		        	        case self::AGGREGATE:
		        	        case self::ALGORITHM:
		        	        case self::ANY:
		        	        case self::AT:
		        	        case self::AUTHORS:
		        	        case self::AUTOCOMMIT:
		        	        case self::AUTOEXTEND_SIZE:
		        	        case self::AUTO_INCREMENT:
		        	        case self::AVG_ROW_LENGTH:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::BIT:
		        	        case self::BLOCK:
		        	        case self::BOOL:
		        	        case self::BOOLEAN:
		        	        case self::BTREE:
		        	        case self::CACHE:
		        	        case self::CASCADED:
		        	        case self::CHAIN:
		        	        case self::CHANGED:
		        	        case self::CHANNEL:
		        	        case self::CHECKSUM:
		        	        case self::PAGE_CHECKSUM:
		        	        case self::CIPHER:
		        	        case self::CLASS_ORIGIN:
		        	        case self::CLIENT:
		        	        case self::CLOSE:
		        	        case self::COALESCE:
		        	        case self::CODE:
		        	        case self::COLUMNS:
		        	        case self::COLUMN_FORMAT:
		        	        case self::COLUMN_NAME:
		        	        case self::COMMENT:
		        	        case self::COMMIT:
		        	        case self::COMPACT:
		        	        case self::COMPLETION:
		        	        case self::COMPRESSED:
		        	        case self::COMPRESSION:
		        	        case self::CONCURRENT:
		        	        case self::CONNECTION:
		        	        case self::CONSISTENT:
		        	        case self::CONSTRAINT_CATALOG:
		        	        case self::CONSTRAINT_SCHEMA:
		        	        case self::CONSTRAINT_NAME:
		        	        case self::CONTAINS:
		        	        case self::CONTEXT:
		        	        case self::CONTRIBUTORS:
		        	        case self::COPY:
		        	        case self::CPU:
		        	        case self::CURSOR_NAME:
		        	        case self::DATA:
		        	        case self::DATAFILE:
		        	        case self::DEALLOCATE:
		        	        case self::DEFAULT_AUTH:
		        	        case self::DEFINER:
		        	        case self::DELAY_KEY_WRITE:
		        	        case self::DES_KEY_FILE:
		        	        case self::DIRECTORY:
		        	        case self::DISABLE:
		        	        case self::DISCARD:
		        	        case self::DISK:
		        	        case self::DO:
		        	        case self::DUMPFILE:
		        	        case self::DUPLICATE:
		        	        case self::DYNAMIC:
		        	        case self::ENABLE:
		        	        case self::ENCRYPTION:
		        	        case self::END:
		        	        case self::ENDS:
		        	        case self::ENGINE:
		        	        case self::ENGINES:
		        	        case self::ERROR:
		        	        case self::ERRORS:
		        	        case self::ESCAPE:
		        	        case self::EVEN:
		        	        case self::EVENT:
		        	        case self::EVENTS:
		        	        case self::EVERY:
		        	        case self::EXCHANGE:
		        	        case self::EXCLUSIVE:
		        	        case self::EXPIRE:
		        	        case self::EXPORT:
		        	        case self::EXTENDED:
		        	        case self::EXTENT_SIZE:
		        	        case self::FAST:
		        	        case self::FAULTS:
		        	        case self::FIELDS:
		        	        case self::FILE_BLOCK_SIZE:
		        	        case self::FILTER:
		        	        case self::FIRST:
		        	        case self::FIXED:
		        	        case self::FLUSH:
		        	        case self::FOLLOWS:
		        	        case self::FOUND:
		        	        case self::FULL:
		        	        case self::FUNCTION:
		        	        case self::GENERAL:
		        	        case self::GLOBAL:
		        	        case self::GRANTS:
		        	        case self::GROUP_REPLICATION:
		        	        case self::HANDLER:
		        	        case self::HASH:
		        	        case self::HELP:
		        	        case self::HOST:
		        	        case self::HOSTS:
		        	        case self::IDENTIFIED:
		        	        case self::IGNORE_SERVER_IDS:
		        	        case self::IMPORT:
		        	        case self::INDEXES:
		        	        case self::INITIAL_SIZE:
		        	        case self::INPLACE:
		        	        case self::INSERT_METHOD:
		        	        case self::INSTALL:
		        	        case self::INSTANCE:
		        	        case self::INVISIBLE:
		        	        case self::INVOKER:
		        	        case self::IO:
		        	        case self::IO_THREAD:
		        	        case self::IPC:
		        	        case self::ISOLATION:
		        	        case self::ISSUER:
		        	        case self::JSON:
		        	        case self::KEY_BLOCK_SIZE:
		        	        case self::LANGUAGE:
		        	        case self::LAST:
		        	        case self::LEAVES:
		        	        case self::LESS:
		        	        case self::LEVEL:
		        	        case self::LIST:
		        	        case self::LOCAL:
		        	        case self::LOGFILE:
		        	        case self::LOGS:
		        	        case self::MASTER:
		        	        case self::MASTER_AUTO_POSITION:
		        	        case self::MASTER_CONNECT_RETRY:
		        	        case self::MASTER_DELAY:
		        	        case self::MASTER_HEARTBEAT_PERIOD:
		        	        case self::MASTER_HOST:
		        	        case self::MASTER_LOG_FILE:
		        	        case self::MASTER_LOG_POS:
		        	        case self::MASTER_PASSWORD:
		        	        case self::MASTER_PORT:
		        	        case self::MASTER_RETRY_COUNT:
		        	        case self::MASTER_SSL:
		        	        case self::MASTER_SSL_CA:
		        	        case self::MASTER_SSL_CAPATH:
		        	        case self::MASTER_SSL_CERT:
		        	        case self::MASTER_SSL_CIPHER:
		        	        case self::MASTER_SSL_CRL:
		        	        case self::MASTER_SSL_CRLPATH:
		        	        case self::MASTER_SSL_KEY:
		        	        case self::MASTER_TLS_VERSION:
		        	        case self::MASTER_USER:
		        	        case self::MAX_CONNECTIONS_PER_HOUR:
		        	        case self::MAX_QUERIES_PER_HOUR:
		        	        case self::MAX_ROWS:
		        	        case self::MAX_SIZE:
		        	        case self::MAX_UPDATES_PER_HOUR:
		        	        case self::MAX_USER_CONNECTIONS:
		        	        case self::MEDIUM:
		        	        case self::MERGE:
		        	        case self::MESSAGE_TEXT:
		        	        case self::MID:
		        	        case self::MIGRATE:
		        	        case self::MIN_ROWS:
		        	        case self::MODE:
		        	        case self::MODIFY:
		        	        case self::MUTEX:
		        	        case self::MYSQL:
		        	        case self::MYSQL_ERRNO:
		        	        case self::NAME:
		        	        case self::NAMES:
		        	        case self::NCHAR:
		        	        case self::NEVER:
		        	        case self::NEXT:
		        	        case self::NO:
		        	        case self::NODEGROUP:
		        	        case self::NONE:
		        	        case self::OFFLINE:
		        	        case self::OFFSET:
		        	        case self::OJ:
		        	        case self::OLD_PASSWORD:
		        	        case self::ONE:
		        	        case self::ONLINE:
		        	        case self::ONLY:
		        	        case self::OPEN:
		        	        case self::OPTIMIZER_COSTS:
		        	        case self::OPTIONS:
		        	        case self::OWNER:
		        	        case self::PACK_KEYS:
		        	        case self::PAGE:
		        	        case self::PARSER:
		        	        case self::PARTIAL:
		        	        case self::PARTITIONING:
		        	        case self::PARTITIONS:
		        	        case self::PASSWORD:
		        	        case self::PHASE:
		        	        case self::PLUGIN:
		        	        case self::PLUGIN_DIR:
		        	        case self::PLUGINS:
		        	        case self::PORT:
		        	        case self::PRECEDES:
		        	        case self::PREPARE:
		        	        case self::PRESERVE:
		        	        case self::PREV:
		        	        case self::PROCESSLIST:
		        	        case self::PROFILE:
		        	        case self::PROFILES:
		        	        case self::PROXY:
		        	        case self::QUERY:
		        	        case self::QUICK:
		        	        case self::REBUILD:
		        	        case self::RECOVER:
		        	        case self::REDO_BUFFER_SIZE:
		        	        case self::REDUNDANT:
		        	        case self::RELAY:
		        	        case self::RELAY_LOG_FILE:
		        	        case self::RELAY_LOG_POS:
		        	        case self::RELAYLOG:
		        	        case self::REMOVE:
		        	        case self::REORGANIZE:
		        	        case self::REPAIR:
		        	        case self::REPLICATE_DO_DB:
		        	        case self::REPLICATE_DO_TABLE:
		        	        case self::REPLICATE_IGNORE_DB:
		        	        case self::REPLICATE_IGNORE_TABLE:
		        	        case self::REPLICATE_REWRITE_DB:
		        	        case self::REPLICATE_WILD_DO_TABLE:
		        	        case self::REPLICATE_WILD_IGNORE_TABLE:
		        	        case self::REPLICATION:
		        	        case self::RESET:
		        	        case self::RESUME:
		        	        case self::RETURNED_SQLSTATE:
		        	        case self::RETURNS:
		        	        case self::ROLLBACK:
		        	        case self::ROLLUP:
		        	        case self::ROTATE:
		        	        case self::ROW:
		        	        case self::ROWS:
		        	        case self::ROW_FORMAT:
		        	        case self::SAVEPOINT:
		        	        case self::SCHEDULE:
		        	        case self::SECURITY:
		        	        case self::SERVER:
		        	        case self::SESSION:
		        	        case self::SHARE:
		        	        case self::SHARED:
		        	        case self::SIGNED:
		        	        case self::SIMPLE:
		        	        case self::SLAVE:
		        	        case self::SLOW:
		        	        case self::SNAPSHOT:
		        	        case self::SOCKET:
		        	        case self::SOME:
		        	        case self::SONAME:
		        	        case self::SOUNDS:
		        	        case self::SOURCE:
		        	        case self::SQL_AFTER_GTIDS:
		        	        case self::SQL_AFTER_MTS_GAPS:
		        	        case self::SQL_BEFORE_GTIDS:
		        	        case self::SQL_BUFFER_RESULT:
		        	        case self::SQL_CACHE:
		        	        case self::SQL_NO_CACHE:
		        	        case self::SQL_THREAD:
		        	        case self::START:
		        	        case self::STARTS:
		        	        case self::STATS_AUTO_RECALC:
		        	        case self::STATS_PERSISTENT:
		        	        case self::STATS_SAMPLE_PAGES:
		        	        case self::STATUS:
		        	        case self::STOP:
		        	        case self::STORAGE:
		        	        case self::STRING:
		        	        case self::SUBCLASS_ORIGIN:
		        	        case self::SUBJECT:
		        	        case self::SUBPARTITION:
		        	        case self::SUBPARTITIONS:
		        	        case self::SUSPEND:
		        	        case self::SWAPS:
		        	        case self::SWITCHES:
		        	        case self::TABLE_NAME:
		        	        case self::TABLESPACE:
		        	        case self::TEMPORARY:
		        	        case self::TEMPTABLE:
		        	        case self::THAN:
		        	        case self::TRADITIONAL:
		        	        case self::TRANSACTION:
		        	        case self::TRIGGERS:
		        	        case self::TRUNCATE:
		        	        case self::UNDEFINED:
		        	        case self::UNDOFILE:
		        	        case self::UNDO_BUFFER_SIZE:
		        	        case self::UNINSTALL:
		        	        case self::UNKNOWN:
		        	        case self::UNTIL:
		        	        case self::UPGRADE:
		        	        case self::USER:
		        	        case self::USE_FRM:
		        	        case self::USER_RESOURCES:
		        	        case self::VALIDATION:
		        	        case self::VALUE:
		        	        case self::VARIABLES:
		        	        case self::VIEW:
		        	        case self::VISIBLE:
		        	        case self::WAIT:
		        	        case self::WARNINGS:
		        	        case self::WITHOUT:
		        	        case self::WORK:
		        	        case self::WRAPPER:
		        	        case self::X509:
		        	        case self::XA:
		        	        case self::XML:
		        	        case self::INTERNAL:
		        	        case self::QUARTER:
		        	        case self::MONTH:
		        	        case self::DAY:
		        	        case self::HOUR:
		        	        case self::MINUTE:
		        	        case self::WEEK:
		        	        case self::SECOND:
		        	        case self::MICROSECOND:
		        	        case self::TABLES:
		        	        case self::ROUTINE:
		        	        case self::EXECUTE:
		        	        case self::FILE:
		        	        case self::PROCESS:
		        	        case self::RELOAD:
		        	        case self::SHUTDOWN:
		        	        case self::SUPER:
		        	        case self::PRIVILEGES:
		        	        case self::SESSION_VARIABLES_ADMIN:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::ARCHIVE:
		        	        case self::BLACKHOLE:
		        	        case self::CSV:
		        	        case self::FEDERATED:
		        	        case self::INNODB:
		        	        case self::MEMORY:
		        	        case self::MRG_MYISAM:
		        	        case self::MYISAM:
		        	        case self::NDB:
		        	        case self::NDBCLUSTER:
		        	        case self::PERFORMANCE_SCHEMA:
		        	        case self::TOKUDB:
		        	        case self::REPEATABLE:
		        	        case self::COMMITTED:
		        	        case self::UNCOMMITTED:
		        	        case self::SERIALIZABLE:
		        	        case self::GEOMETRYCOLLECTION:
		        	        case self::LINESTRING:
		        	        case self::MULTILINESTRING:
		        	        case self::MULTIPOINT:
		        	        case self::MULTIPOLYGON:
		        	        case self::POINT:
		        	        case self::POLYGON:
		        	        case self::ABS:
		        	        case self::ACOS:
		        	        case self::ADDDATE:
		        	        case self::ADDTIME:
		        	        case self::AES_DECRYPT:
		        	        case self::AES_ENCRYPT:
		        	        case self::AREA:
		        	        case self::ASBINARY:
		        	        case self::ASIN:
		        	        case self::ASTEXT:
		        	        case self::ASWKB:
		        	        case self::ASWKT:
		        	        case self::ASYMMETRIC_DECRYPT:
		        	        case self::ASYMMETRIC_DERIVE:
		        	        case self::ASYMMETRIC_ENCRYPT:
		        	        case self::ASYMMETRIC_SIGN:
		        	        case self::ASYMMETRIC_VERIFY:
		        	        case self::ATAN:
		        	        case self::ATAN2:
		        	        case self::BENCHMARK:
		        	        case self::BIN:
		        	        case self::BIT_COUNT:
		        	        case self::BIT_LENGTH:
		        	        case self::BUFFER:
		        	        case self::CATALOG_NAME:
		        	        case self::CEIL:
		        	        case self::CEILING:
		        	        case self::CENTROID:
		        	        case self::CHARACTER_LENGTH:
		        	        case self::CHARSET:
		        	        case self::CHAR_LENGTH:
		        	        case self::COERCIBILITY:
		        	        case self::COLLATION:
		        	        case self::COMPRESS:
		        	        case self::CONCAT:
		        	        case self::CONCAT_WS:
		        	        case self::CONNECTION_ID:
		        	        case self::CONV:
		        	        case self::CONVERT_TZ:
		        	        case self::COS:
		        	        case self::COT:
		        	        case self::CRC32:
		        	        case self::CREATE_ASYMMETRIC_PRIV_KEY:
		        	        case self::CREATE_ASYMMETRIC_PUB_KEY:
		        	        case self::CREATE_DH_PARAMETERS:
		        	        case self::CREATE_DIGEST:
		        	        case self::CROSSES:
		        	        case self::DATEDIFF:
		        	        case self::DATE_FORMAT:
		        	        case self::DAYNAME:
		        	        case self::DAYOFMONTH:
		        	        case self::DAYOFWEEK:
		        	        case self::DAYOFYEAR:
		        	        case self::DECODE:
		        	        case self::DEGREES:
		        	        case self::DES_DECRYPT:
		        	        case self::DES_ENCRYPT:
		        	        case self::DIMENSION:
		        	        case self::DISJOINT:
		        	        case self::ELT:
		        	        case self::ENCODE:
		        	        case self::ENCRYPT:
		        	        case self::ENDPOINT:
		        	        case self::ENVELOPE:
		        	        case self::EQUALS:
		        	        case self::EXP:
		        	        case self::EXPORT_SET:
		        	        case self::EXTERIORRING:
		        	        case self::EXTRACTVALUE:
		        	        case self::FIELD:
		        	        case self::FIND_IN_SET:
		        	        case self::FLOOR:
		        	        case self::FORMAT:
		        	        case self::FOUND_ROWS:
		        	        case self::FROM_BASE64:
		        	        case self::FROM_DAYS:
		        	        case self::FROM_UNIXTIME:
		        	        case self::GEOMCOLLFROMTEXT:
		        	        case self::GEOMCOLLFROMWKB:
		        	        case self::GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::GEOMETRYFROMTEXT:
		        	        case self::GEOMETRYFROMWKB:
		        	        case self::GEOMETRYN:
		        	        case self::GEOMETRYTYPE:
		        	        case self::GEOMFROMTEXT:
		        	        case self::GEOMFROMWKB:
		        	        case self::GET_FORMAT:
		        	        case self::GET_LOCK:
		        	        case self::GLENGTH:
		        	        case self::GREATEST:
		        	        case self::GTID_SUBSET:
		        	        case self::GTID_SUBTRACT:
		        	        case self::HEX:
		        	        case self::IFNULL:
		        	        case self::INET6_ATON:
		        	        case self::INET6_NTOA:
		        	        case self::INET_ATON:
		        	        case self::INET_NTOA:
		        	        case self::INSTR:
		        	        case self::INTERIORRINGN:
		        	        case self::INTERSECTS:
		        	        case self::ISCLOSED:
		        	        case self::ISEMPTY:
		        	        case self::ISNULL:
		        	        case self::ISSIMPLE:
		        	        case self::IS_FREE_LOCK:
		        	        case self::IS_IPV4:
		        	        case self::IS_IPV4_COMPAT:
		        	        case self::IS_IPV4_MAPPED:
		        	        case self::IS_IPV6:
		        	        case self::IS_USED_LOCK:
		        	        case self::LAST_INSERT_ID:
		        	        case self::LCASE:
		        	        case self::LEAST:
		        	        case self::LENGTH:
		        	        case self::LINEFROMTEXT:
		        	        case self::LINEFROMWKB:
		        	        case self::LINESTRINGFROMTEXT:
		        	        case self::LINESTRINGFROMWKB:
		        	        case self::LN:
		        	        case self::LOAD_FILE:
		        	        case self::LOCATE:
		        	        case self::LOG:
		        	        case self::LOG10:
		        	        case self::LOG2:
		        	        case self::LOWER:
		        	        case self::LPAD:
		        	        case self::LTRIM:
		        	        case self::MAKEDATE:
		        	        case self::MAKETIME:
		        	        case self::MAKE_SET:
		        	        case self::MASTER_POS_WAIT:
		        	        case self::MBRCONTAINS:
		        	        case self::MBRDISJOINT:
		        	        case self::MBREQUAL:
		        	        case self::MBRINTERSECTS:
		        	        case self::MBROVERLAPS:
		        	        case self::MBRTOUCHES:
		        	        case self::MBRWITHIN:
		        	        case self::MD5:
		        	        case self::MLINEFROMTEXT:
		        	        case self::MLINEFROMWKB:
		        	        case self::MONTHNAME:
		        	        case self::MPOINTFROMTEXT:
		        	        case self::MPOINTFROMWKB:
		        	        case self::MPOLYFROMTEXT:
		        	        case self::MPOLYFROMWKB:
		        	        case self::MULTILINESTRINGFROMTEXT:
		        	        case self::MULTILINESTRINGFROMWKB:
		        	        case self::MULTIPOINTFROMTEXT:
		        	        case self::MULTIPOINTFROMWKB:
		        	        case self::MULTIPOLYGONFROMTEXT:
		        	        case self::MULTIPOLYGONFROMWKB:
		        	        case self::NAME_CONST:
		        	        case self::NULLIF:
		        	        case self::NUMGEOMETRIES:
		        	        case self::NUMINTERIORRINGS:
		        	        case self::NUMPOINTS:
		        	        case self::OCT:
		        	        case self::OCTET_LENGTH:
		        	        case self::ORD:
		        	        case self::OVERLAPS:
		        	        case self::PERIOD_ADD:
		        	        case self::PERIOD_DIFF:
		        	        case self::PI:
		        	        case self::POINTFROMTEXT:
		        	        case self::POINTFROMWKB:
		        	        case self::POINTN:
		        	        case self::POLYFROMTEXT:
		        	        case self::POLYFROMWKB:
		        	        case self::POLYGONFROMTEXT:
		        	        case self::POLYGONFROMWKB:
		        	        case self::POW:
		        	        case self::POWER:
		        	        case self::QUOTE:
		        	        case self::RADIANS:
		        	        case self::RAND:
		        	        case self::RANDOM_BYTES:
		        	        case self::RELEASE_LOCK:
		        	        case self::REVERSE:
		        	        case self::ROUND:
		        	        case self::ROW_COUNT:
		        	        case self::RPAD:
		        	        case self::RTRIM:
		        	        case self::SEC_TO_TIME:
		        	        case self::SESSION_USER:
		        	        case self::SHA:
		        	        case self::SHA1:
		        	        case self::SHA2:
		        	        case self::SCHEMA_NAME:
		        	        case self::SIGN:
		        	        case self::SIN:
		        	        case self::SLEEP:
		        	        case self::SOUNDEX:
		        	        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		        	        case self::SQRT:
		        	        case self::SRID:
		        	        case self::STARTPOINT:
		        	        case self::STRCMP:
		        	        case self::STR_TO_DATE:
		        	        case self::ST_AREA:
		        	        case self::ST_ASBINARY:
		        	        case self::ST_ASTEXT:
		        	        case self::ST_ASWKB:
		        	        case self::ST_ASWKT:
		        	        case self::ST_BUFFER:
		        	        case self::ST_CENTROID:
		        	        case self::ST_CONTAINS:
		        	        case self::ST_CROSSES:
		        	        case self::ST_DIFFERENCE:
		        	        case self::ST_DIMENSION:
		        	        case self::ST_DISJOINT:
		        	        case self::ST_DISTANCE:
		        	        case self::ST_ENDPOINT:
		        	        case self::ST_ENVELOPE:
		        	        case self::ST_EQUALS:
		        	        case self::ST_EXTERIORRING:
		        	        case self::ST_GEOMCOLLFROMTEXT:
		        	        case self::ST_GEOMCOLLFROMTXT:
		        	        case self::ST_GEOMCOLLFROMWKB:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::ST_GEOMETRYFROMTEXT:
		        	        case self::ST_GEOMETRYFROMWKB:
		        	        case self::ST_GEOMETRYN:
		        	        case self::ST_GEOMETRYTYPE:
		        	        case self::ST_GEOMFROMTEXT:
		        	        case self::ST_GEOMFROMWKB:
		        	        case self::ST_INTERIORRINGN:
		        	        case self::ST_INTERSECTION:
		        	        case self::ST_INTERSECTS:
		        	        case self::ST_ISCLOSED:
		        	        case self::ST_ISEMPTY:
		        	        case self::ST_ISSIMPLE:
		        	        case self::ST_LINEFROMTEXT:
		        	        case self::ST_LINEFROMWKB:
		        	        case self::ST_LINESTRINGFROMTEXT:
		        	        case self::ST_LINESTRINGFROMWKB:
		        	        case self::ST_NUMGEOMETRIES:
		        	        case self::ST_NUMINTERIORRING:
		        	        case self::ST_NUMINTERIORRINGS:
		        	        case self::ST_NUMPOINTS:
		        	        case self::ST_OVERLAPS:
		        	        case self::ST_POINTFROMTEXT:
		        	        case self::ST_POINTFROMWKB:
		        	        case self::ST_POINTN:
		        	        case self::ST_POLYFROMTEXT:
		        	        case self::ST_POLYFROMWKB:
		        	        case self::ST_POLYGONFROMTEXT:
		        	        case self::ST_POLYGONFROMWKB:
		        	        case self::ST_SRID:
		        	        case self::ST_STARTPOINT:
		        	        case self::ST_SYMDIFFERENCE:
		        	        case self::ST_TOUCHES:
		        	        case self::ST_UNION:
		        	        case self::ST_WITHIN:
		        	        case self::ST_X:
		        	        case self::ST_Y:
		        	        case self::SUBDATE:
		        	        case self::SUBSTRING_INDEX:
		        	        case self::SUBTIME:
		        	        case self::SYSTEM_USER:
		        	        case self::TAN:
		        	        case self::TIMEDIFF:
		        	        case self::TIMESTAMPADD:
		        	        case self::TIMESTAMPDIFF:
		        	        case self::TIME_FORMAT:
		        	        case self::TIME_TO_SEC:
		        	        case self::TOUCHES:
		        	        case self::TO_BASE64:
		        	        case self::TO_DAYS:
		        	        case self::TO_SECONDS:
		        	        case self::UCASE:
		        	        case self::UNCOMPRESS:
		        	        case self::UNCOMPRESSED_LENGTH:
		        	        case self::UNHEX:
		        	        case self::UNIX_TIMESTAMP:
		        	        case self::UPDATEXML:
		        	        case self::UPPER:
		        	        case self::UUID:
		        	        case self::UUID_SHORT:
		        	        case self::VALIDATE_PASSWORD_STRENGTH:
		        	        case self::VERSION:
		        	        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		        	        case self::WEEKDAY:
		        	        case self::WEEKOFYEAR:
		        	        case self::WEIGHT_STRING:
		        	        case self::WITHIN:
		        	        case self::YEARWEEK:
		        	        case self::Y_FUNCTION:
		        	        case self::X_FUNCTION:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        case self::ID:
		        	        case self::REVERSE_QUOTE_ID:
		        	        	$this->setState(2602);
		        	        	$this->uidList();
		        	        	break;

		        	        case self::ALL:
		        	        	$this->setState(2603);
		        	        	$this->match(self::ALL);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 44:
		        	    $localContext = new Context\AlterByRemovePartitioningContext($localContext);
		        	    $this->enterOuterAlt($localContext, 44);
		        	    $this->setState(2606);
		        	    $this->match(self::REMOVE);
		        	    $this->setState(2607);
		        	    $this->match(self::PARTITIONING);
		        	break;

		        	case 45:
		        	    $localContext = new Context\AlterByUpgradePartitioningContext($localContext);
		        	    $this->enterOuterAlt($localContext, 45);
		        	    $this->setState(2608);
		        	    $this->match(self::UPGRADE);
		        	    $this->setState(2609);
		        	    $this->match(self::PARTITIONING);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropDatabase() : Context\DropDatabaseContext
		{
		    $localContext = new Context\DropDatabaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 134, self::RULE_dropDatabase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2612);
		        $this->match(self::DROP);
		        $this->setState(2613);

		        $localContext->dbFormat = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::DATABASE || $_la === self::SCHEMA)) {
		        	    $localContext->dbFormat = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(2615);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IF) {
		        	$this->setState(2614);
		        	$this->ifExists();
		        }
		        $this->setState(2617);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropEvent() : Context\DropEventContext
		{
		    $localContext = new Context\DropEventContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 136, self::RULE_dropEvent);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2619);
		        $this->match(self::DROP);
		        $this->setState(2620);
		        $this->match(self::EVENT);
		        $this->setState(2622);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IF) {
		        	$this->setState(2621);
		        	$this->ifExists();
		        }
		        $this->setState(2624);
		        $this->fullId();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropIndex() : Context\DropIndexContext
		{
		    $localContext = new Context\DropIndexContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 138, self::RULE_dropIndex);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2626);
		        $this->match(self::DROP);
		        $this->setState(2627);
		        $this->match(self::INDEX);
		        $this->setState(2629);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 334, $this->ctx)) {
		            case 1:
		        	    $this->setState(2628);

		        	    $localContext->intimeAction = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::OFFLINE || $_la === self::ONLINE)) {
		        	    	    $localContext->intimeAction = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;
		        }
		        $this->setState(2631);
		        $this->uid();
		        $this->setState(2632);
		        $this->match(self::ON);
		        $this->setState(2633);
		        $this->tableName();
		        $this->setState(2646);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 338, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(2644);
		        		$this->errorHandler->sync($this);

		        		switch ($this->input->LA(1)) {
		        		    case self::ALGORITHM:
		        		    	$this->setState(2634);
		        		    	$this->match(self::ALGORITHM);
		        		    	$this->setState(2636);
		        		    	$this->errorHandler->sync($this);
		        		    	$_la = $this->input->LA(1);

		        		    	if ($_la === self::EQUAL_SYMBOL) {
		        		    		$this->setState(2635);
		        		    		$this->match(self::EQUAL_SYMBOL);
		        		    	}
		        		    	$this->setState(2638);

		        		    	$localContext->algType = $this->input->LT(1);
		        		    	$_la = $this->input->LA(1);

		        		    	if (!($_la === self::DEFAULT || $_la === self::COPY || $_la === self::INPLACE)) {
		        		    		    $localContext->algType = $this->errorHandler->recoverInline($this);
		        		    	} else {
		        		    		if ($this->input->LA(1) === Token::EOF) {
		        		    		    $this->matchedEOF = true;
		        		    	    }

		        		    		$this->errorHandler->reportMatch($this);
		        		    		$this->consume();
		        		    	}
		        		    	break;

		        		    case self::LOCK:
		        		    	$this->setState(2639);
		        		    	$this->match(self::LOCK);
		        		    	$this->setState(2641);
		        		    	$this->errorHandler->sync($this);
		        		    	$_la = $this->input->LA(1);

		        		    	if ($_la === self::EQUAL_SYMBOL) {
		        		    		$this->setState(2640);
		        		    		$this->match(self::EQUAL_SYMBOL);
		        		    	}
		        		    	$this->setState(2643);

		        		    	$localContext->lockType = $this->input->LT(1);
		        		    	$_la = $this->input->LA(1);

		        		    	if (!($_la === self::DEFAULT || $_la === self::EXCLUSIVE || $_la === self::NONE || $_la === self::SHARED)) {
		        		    		    $localContext->lockType = $this->errorHandler->recoverInline($this);
		        		    	} else {
		        		    		if ($this->input->LA(1) === Token::EOF) {
		        		    		    $this->matchedEOF = true;
		        		    	    }

		        		    		$this->errorHandler->reportMatch($this);
		        		    		$this->consume();
		        		    	}
		        		    	break;

		        		default:
		        			throw new NoViableAltException($this);
		        		} 
		        	}

		        	$this->setState(2648);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 338, $this->ctx);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropLogfileGroup() : Context\DropLogfileGroupContext
		{
		    $localContext = new Context\DropLogfileGroupContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 140, self::RULE_dropLogfileGroup);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2649);
		        $this->match(self::DROP);
		        $this->setState(2650);
		        $this->match(self::LOGFILE);
		        $this->setState(2651);
		        $this->match(self::GROUP);
		        $this->setState(2652);
		        $this->uid();
		        $this->setState(2653);
		        $this->match(self::ENGINE);
		        $this->setState(2654);
		        $this->match(self::EQUAL_SYMBOL);
		        $this->setState(2655);
		        $this->engineName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropProcedure() : Context\DropProcedureContext
		{
		    $localContext = new Context\DropProcedureContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 142, self::RULE_dropProcedure);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2657);
		        $this->match(self::DROP);
		        $this->setState(2658);
		        $this->match(self::PROCEDURE);
		        $this->setState(2660);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IF) {
		        	$this->setState(2659);
		        	$this->ifExists();
		        }
		        $this->setState(2662);
		        $this->fullId();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropFunction() : Context\DropFunctionContext
		{
		    $localContext = new Context\DropFunctionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 144, self::RULE_dropFunction);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2664);
		        $this->match(self::DROP);
		        $this->setState(2665);
		        $this->match(self::FUNCTION);
		        $this->setState(2667);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IF) {
		        	$this->setState(2666);
		        	$this->ifExists();
		        }
		        $this->setState(2669);
		        $this->fullId();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropServer() : Context\DropServerContext
		{
		    $localContext = new Context\DropServerContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 146, self::RULE_dropServer);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2671);
		        $this->match(self::DROP);
		        $this->setState(2672);
		        $this->match(self::SERVER);
		        $this->setState(2674);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IF) {
		        	$this->setState(2673);
		        	$this->ifExists();
		        }
		        $this->setState(2676);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropTable() : Context\DropTableContext
		{
		    $localContext = new Context\DropTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 148, self::RULE_dropTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2678);
		        $this->match(self::DROP);
		        $this->setState(2680);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::TEMPORARY) {
		        	$this->setState(2679);
		        	$this->match(self::TEMPORARY);
		        }
		        $this->setState(2682);
		        $this->match(self::TABLE);
		        $this->setState(2684);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IF) {
		        	$this->setState(2683);
		        	$this->ifExists();
		        }
		        $this->setState(2686);
		        $this->tables();
		        $this->setState(2688);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::CASCADE || $_la === self::RESTRICT) {
		        	$this->setState(2687);

		        	$localContext->dropType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::CASCADE || $_la === self::RESTRICT)) {
		        		    $localContext->dropType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropTablespace() : Context\DropTablespaceContext
		{
		    $localContext = new Context\DropTablespaceContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 150, self::RULE_dropTablespace);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2690);
		        $this->match(self::DROP);
		        $this->setState(2691);
		        $this->match(self::TABLESPACE);
		        $this->setState(2692);
		        $this->uid();
		        $this->setState(2698);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ENGINE) {
		        	$this->setState(2693);
		        	$this->match(self::ENGINE);
		        	$this->setState(2695);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::EQUAL_SYMBOL) {
		        		$this->setState(2694);
		        		$this->match(self::EQUAL_SYMBOL);
		        	}
		        	$this->setState(2697);
		        	$this->engineName();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropTrigger() : Context\DropTriggerContext
		{
		    $localContext = new Context\DropTriggerContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 152, self::RULE_dropTrigger);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2700);
		        $this->match(self::DROP);
		        $this->setState(2701);
		        $this->match(self::TRIGGER);
		        $this->setState(2703);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IF) {
		        	$this->setState(2702);
		        	$this->ifExists();
		        }
		        $this->setState(2705);
		        $this->fullId();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropView() : Context\DropViewContext
		{
		    $localContext = new Context\DropViewContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 154, self::RULE_dropView);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2707);
		        $this->match(self::DROP);
		        $this->setState(2708);
		        $this->match(self::VIEW);
		        $this->setState(2710);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IF) {
		        	$this->setState(2709);
		        	$this->ifExists();
		        }
		        $this->setState(2712);
		        $this->fullId();
		        $this->setState(2717);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(2713);
		        	$this->match(self::COMMA);
		        	$this->setState(2714);
		        	$this->fullId();
		        	$this->setState(2719);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(2721);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::CASCADE || $_la === self::RESTRICT) {
		        	$this->setState(2720);

		        	$localContext->dropType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::CASCADE || $_la === self::RESTRICT)) {
		        		    $localContext->dropType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function renameTable() : Context\RenameTableContext
		{
		    $localContext = new Context\RenameTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 156, self::RULE_renameTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2723);
		        $this->match(self::RENAME);
		        $this->setState(2724);
		        $this->match(self::TABLE);
		        $this->setState(2725);
		        $this->renameTableClause();
		        $this->setState(2730);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(2726);
		        	$this->match(self::COMMA);
		        	$this->setState(2727);
		        	$this->renameTableClause();
		        	$this->setState(2732);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function renameTableClause() : Context\RenameTableClauseContext
		{
		    $localContext = new Context\RenameTableClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 158, self::RULE_renameTableClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2733);
		        $this->tableName();
		        $this->setState(2734);
		        $this->match(self::TO);
		        $this->setState(2735);
		        $this->tableName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function truncateTable() : Context\TruncateTableContext
		{
		    $localContext = new Context\TruncateTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 160, self::RULE_truncateTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2737);
		        $this->match(self::TRUNCATE);
		        $this->setState(2739);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::TABLE) {
		        	$this->setState(2738);
		        	$this->match(self::TABLE);
		        }
		        $this->setState(2741);
		        $this->tableName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function callStatement() : Context\CallStatementContext
		{
		    $localContext = new Context\CallStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 162, self::RULE_callStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2743);
		        $this->match(self::CALL);
		        $this->setState(2744);
		        $this->fullId();
		        $this->setState(2751);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 354, $this->ctx)) {
		            case 1:
		        	    $this->setState(2745);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2748);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 353, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(2746);
		        	    	    $this->constants();
		        	    	break;

		        	        case 2:
		        	    	    $this->setState(2747);
		        	    	    $this->expressions();
		        	    	break;
		        	    }
		        	    $this->setState(2750);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function deleteStatement() : Context\DeleteStatementContext
		{
		    $localContext = new Context\DeleteStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 164, self::RULE_deleteStatement);

		    try {
		        $this->setState(2755);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 355, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(2753);
		        	    $this->singleDeleteStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(2754);
		        	    $this->multipleDeleteStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function doStatement() : Context\DoStatementContext
		{
		    $localContext = new Context\DoStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 166, self::RULE_doStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2757);
		        $this->match(self::DO);
		        $this->setState(2758);
		        $this->expressions();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function handlerStatement() : Context\HandlerStatementContext
		{
		    $localContext = new Context\HandlerStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 168, self::RULE_handlerStatement);

		    try {
		        $this->setState(2764);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 356, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(2760);
		        	    $this->handlerOpenStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(2761);
		        	    $this->handlerReadIndexStatement();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(2762);
		        	    $this->handlerReadStatement();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(2763);
		        	    $this->handlerCloseStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function insertStatement() : Context\InsertStatementContext
		{
		    $localContext = new Context\InsertStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 170, self::RULE_insertStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2766);
		        $this->match(self::INSERT);
		        $this->setState(2768);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ((((($_la - 39)) & ~0x3f) === 0 && ((1 << ($_la - 39)) & ((1 << (self::DELAYED - 39)) | (1 << (self::HIGH_PRIORITY - 39)) | (1 << (self::LOW_PRIORITY - 39)))) !== 0)) {
		        	$this->setState(2767);

		        	$localContext->priority = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!((((($_la - 39)) & ~0x3f) === 0 && ((1 << ($_la - 39)) & ((1 << (self::DELAYED - 39)) | (1 << (self::HIGH_PRIORITY - 39)) | (1 << (self::LOW_PRIORITY - 39)))) !== 0))) {
		        		    $localContext->priority = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(2771);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(2770);
		        	$this->match(self::IGNORE);
		        }
		        $this->setState(2774);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::INTO) {
		        	$this->setState(2773);
		        	$this->match(self::INTO);
		        }
		        $this->setState(2776);
		        $this->tableName();
		        $this->setState(2783);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITION) {
		        	$this->setState(2777);
		        	$this->match(self::PARTITION);
		        	$this->setState(2778);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(2780);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        		$this->setState(2779);
		        		$localContext->partitions = $this->uidList();
		        	}
		        	$this->setState(2782);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(2801);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SELECT:
		            case self::VALUES:
		            case self::VALUE:
		            case self::LR_BRACKET:
		            	$this->setState(2789);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 362, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(2785);
		            		    $this->match(self::LR_BRACKET);
		            		    $this->setState(2786);
		            		    $localContext->columns = $this->uidList();
		            		    $this->setState(2787);
		            		    $this->match(self::RR_BRACKET);
		            		break;
		            	}
		            	$this->setState(2791);
		            	$this->insertStatementValue();
		            	break;

		            case self::SET:
		            	$this->setState(2792);
		            	$this->match(self::SET);
		            	$this->setState(2793);
		            	$localContext->setFirst = $this->updatedElement();
		            	$this->setState(2798);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(2794);
		            		$this->match(self::COMMA);
		            		$this->setState(2795);
		            		$localContext->updatedElement = $this->updatedElement();
		            		$localContext->setElements[] = $localContext->updatedElement;
		            		$this->setState(2800);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		        $this->setState(2815);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ON) {
		        	$this->setState(2803);
		        	$this->match(self::ON);
		        	$this->setState(2804);
		        	$this->match(self::DUPLICATE);
		        	$this->setState(2805);
		        	$this->match(self::KEY);
		        	$this->setState(2806);
		        	$this->match(self::UPDATE);
		        	$this->setState(2807);
		        	$localContext->duplicatedFirst = $this->updatedElement();
		        	$this->setState(2812);
		        	$this->errorHandler->sync($this);

		        	$_la = $this->input->LA(1);
		        	while ($_la === self::COMMA) {
		        		$this->setState(2808);
		        		$this->match(self::COMMA);
		        		$this->setState(2809);
		        		$localContext->updatedElement = $this->updatedElement();
		        		$localContext->duplicatedElements[] = $localContext->updatedElement;
		        		$this->setState(2814);
		        		$this->errorHandler->sync($this);
		        		$_la = $this->input->LA(1);
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function loadDataStatement() : Context\LoadDataStatementContext
		{
		    $localContext = new Context\LoadDataStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 172, self::RULE_loadDataStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2817);
		        $this->match(self::LOAD);
		        $this->setState(2818);
		        $this->match(self::DATA);
		        $this->setState(2820);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOW_PRIORITY || $_la === self::CONCURRENT) {
		        	$this->setState(2819);

		        	$localContext->priority = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::LOW_PRIORITY || $_la === self::CONCURRENT)) {
		        		    $localContext->priority = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(2823);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOCAL) {
		        	$this->setState(2822);
		        	$this->match(self::LOCAL);
		        }
		        $this->setState(2825);
		        $this->match(self::INFILE);
		        $this->setState(2826);
		        $localContext->filename = $this->match(self::STRING_LITERAL);
		        $this->setState(2828);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE || $_la === self::REPLACE) {
		        	$this->setState(2827);

		        	$localContext->violation = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::IGNORE || $_la === self::REPLACE)) {
		        		    $localContext->violation = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(2830);
		        $this->match(self::INTO);
		        $this->setState(2831);
		        $this->match(self::TABLE);
		        $this->setState(2832);
		        $this->tableName();
		        $this->setState(2838);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITION) {
		        	$this->setState(2833);
		        	$this->match(self::PARTITION);
		        	$this->setState(2834);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(2835);
		        	$this->uidList();
		        	$this->setState(2836);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(2843);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::CHARACTER) {
		        	$this->setState(2840);
		        	$this->match(self::CHARACTER);
		        	$this->setState(2841);
		        	$this->match(self::SET);
		        	$this->setState(2842);
		        	$localContext->charset = $this->charsetName();
		        }
		        $this->setState(2851);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::COLUMNS || $_la === self::FIELDS) {
		        	$this->setState(2845);

		        	$localContext->fieldsFormat = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::COLUMNS || $_la === self::FIELDS)) {
		        		    $localContext->fieldsFormat = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        	$this->setState(2847); 
		        	$this->errorHandler->sync($this);

		        	$_la = $this->input->LA(1);
		        	do {
		        		$this->setState(2846);
		        		$this->selectFieldsInto();
		        		$this->setState(2849); 
		        		$this->errorHandler->sync($this);
		        		$_la = $this->input->LA(1);
		        	} while ($_la === self::ENCLOSED || $_la === self::ESCAPED || $_la === self::OPTIONALLY || $_la === self::TERMINATED);
		        }
		        $this->setState(2859);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LINES) {
		        	$this->setState(2853);
		        	$this->match(self::LINES);
		        	$this->setState(2855); 
		        	$this->errorHandler->sync($this);

		        	$_la = $this->input->LA(1);
		        	do {
		        		$this->setState(2854);
		        		$this->selectLinesInto();
		        		$this->setState(2857); 
		        		$this->errorHandler->sync($this);
		        		$_la = $this->input->LA(1);
		        	} while ($_la === self::STARTING || $_la === self::TERMINATED);
		        }
		        $this->setState(2865);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(2861);
		        	$this->match(self::IGNORE);
		        	$this->setState(2862);
		        	$this->decimalLiteral();
		        	$this->setState(2863);

		        	$localContext->linesFormat = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::LINES || $_la === self::ROWS)) {
		        		    $localContext->linesFormat = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(2878);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 378, $this->ctx)) {
		            case 1:
		        	    $this->setState(2867);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2868);
		        	    $this->assignmentField();
		        	    $this->setState(2873);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(2869);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(2870);
		        	    	$this->assignmentField();
		        	    	$this->setState(2875);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2876);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		        $this->setState(2889);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 380, $this->ctx)) {
		            case 1:
		        	    $this->setState(2880);
		        	    $this->match(self::SET);
		        	    $this->setState(2881);
		        	    $this->updatedElement();
		        	    $this->setState(2886);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(2882);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(2883);
		        	    	$this->updatedElement();
		        	    	$this->setState(2888);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function loadXmlStatement() : Context\LoadXmlStatementContext
		{
		    $localContext = new Context\LoadXmlStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 174, self::RULE_loadXmlStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2891);
		        $this->match(self::LOAD);
		        $this->setState(2892);
		        $this->match(self::XML);
		        $this->setState(2894);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOW_PRIORITY || $_la === self::CONCURRENT) {
		        	$this->setState(2893);

		        	$localContext->priority = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::LOW_PRIORITY || $_la === self::CONCURRENT)) {
		        		    $localContext->priority = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(2897);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOCAL) {
		        	$this->setState(2896);
		        	$this->match(self::LOCAL);
		        }
		        $this->setState(2899);
		        $this->match(self::INFILE);
		        $this->setState(2900);
		        $localContext->filename = $this->match(self::STRING_LITERAL);
		        $this->setState(2902);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE || $_la === self::REPLACE) {
		        	$this->setState(2901);

		        	$localContext->violation = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::IGNORE || $_la === self::REPLACE)) {
		        		    $localContext->violation = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(2904);
		        $this->match(self::INTO);
		        $this->setState(2905);
		        $this->match(self::TABLE);
		        $this->setState(2906);
		        $this->tableName();
		        $this->setState(2910);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::CHARACTER) {
		        	$this->setState(2907);
		        	$this->match(self::CHARACTER);
		        	$this->setState(2908);
		        	$this->match(self::SET);
		        	$this->setState(2909);
		        	$localContext->charset = $this->charsetName();
		        }
		        $this->setState(2918);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ROWS) {
		        	$this->setState(2912);
		        	$this->match(self::ROWS);
		        	$this->setState(2913);
		        	$this->match(self::IDENTIFIED);
		        	$this->setState(2914);
		        	$this->match(self::BY);
		        	$this->setState(2915);
		        	$this->match(self::LESS_SYMBOL);
		        	$this->setState(2916);
		        	$localContext->tag = $this->match(self::STRING_LITERAL);
		        	$this->setState(2917);
		        	$this->match(self::GREATER_SYMBOL);
		        }
		        $this->setState(2924);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(2920);
		        	$this->match(self::IGNORE);
		        	$this->setState(2921);
		        	$this->decimalLiteral();
		        	$this->setState(2922);

		        	$localContext->linesFormat = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::LINES || $_la === self::ROWS)) {
		        		    $localContext->linesFormat = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(2937);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 388, $this->ctx)) {
		            case 1:
		        	    $this->setState(2926);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(2927);
		        	    $this->assignmentField();
		        	    $this->setState(2932);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(2928);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(2929);
		        	    	$this->assignmentField();
		        	    	$this->setState(2934);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(2935);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		        $this->setState(2948);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 390, $this->ctx)) {
		            case 1:
		        	    $this->setState(2939);
		        	    $this->match(self::SET);
		        	    $this->setState(2940);
		        	    $this->updatedElement();
		        	    $this->setState(2945);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(2941);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(2942);
		        	    	$this->updatedElement();
		        	    	$this->setState(2947);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function replaceStatement() : Context\ReplaceStatementContext
		{
		    $localContext = new Context\ReplaceStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 176, self::RULE_replaceStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(2950);
		        $this->match(self::REPLACE);
		        $this->setState(2952);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DELAYED || $_la === self::LOW_PRIORITY) {
		        	$this->setState(2951);

		        	$localContext->priority = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::DELAYED || $_la === self::LOW_PRIORITY)) {
		        		    $localContext->priority = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(2955);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::INTO) {
		        	$this->setState(2954);
		        	$this->match(self::INTO);
		        }
		        $this->setState(2957);
		        $this->tableName();
		        $this->setState(2963);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITION) {
		        	$this->setState(2958);
		        	$this->match(self::PARTITION);
		        	$this->setState(2959);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(2960);
		        	$localContext->partitions = $this->uidList();
		        	$this->setState(2961);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(2981);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SELECT:
		            case self::VALUES:
		            case self::VALUE:
		            case self::LR_BRACKET:
		            	$this->setState(2969);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 394, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(2965);
		            		    $this->match(self::LR_BRACKET);
		            		    $this->setState(2966);
		            		    $localContext->columns = $this->uidList();
		            		    $this->setState(2967);
		            		    $this->match(self::RR_BRACKET);
		            		break;
		            	}
		            	$this->setState(2971);
		            	$this->insertStatementValue();
		            	break;

		            case self::SET:
		            	$this->setState(2972);
		            	$this->match(self::SET);
		            	$this->setState(2973);
		            	$localContext->setFirst = $this->updatedElement();
		            	$this->setState(2978);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(2974);
		            		$this->match(self::COMMA);
		            		$this->setState(2975);
		            		$localContext->updatedElement = $this->updatedElement();
		            		$localContext->setElements[] = $localContext->updatedElement;
		            		$this->setState(2980);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function selectStatement() : Context\SelectStatementContext
		{
		    $localContext = new Context\SelectStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 178, self::RULE_selectStatement);

		    try {
		        $this->setState(3038);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 412, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SimpleSelectContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(2983);
		        	    $this->querySpecification();
		        	    $this->setState(2985);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 397, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(2984);
		        	    	    $this->lockClause();
		        	    	break;
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\ParenthesisSelectContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(2987);
		        	    $this->queryExpression();
		        	    $this->setState(2989);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 398, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(2988);
		        	    	    $this->lockClause();
		        	    	break;
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\UnionSelectContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(2991);
		        	    $this->querySpecificationNointo();
		        	    $this->setState(2993); 
		        	    $this->errorHandler->sync($this);

		        	    $alt = 1;

		        	    do {
		        	    	switch ($alt) {
		        	    	case 1:
		        	    		$this->setState(2992);
		        	    		$this->unionStatement();
		        	    		break;
		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}

		        	    	$this->setState(2995); 
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 399, $this->ctx);
		        	    } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        	    $this->setState(3005);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::UNION) {
		        	    	$this->setState(2997);
		        	    	$this->match(self::UNION);
		        	    	$this->setState(2999);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if ($_la === self::ALL || $_la === self::DISTINCT) {
		        	    		$this->setState(2998);

		        	    		$localContext->unionType = $this->input->LT(1);
		        	    		$_la = $this->input->LA(1);

		        	    		if (!($_la === self::ALL || $_la === self::DISTINCT)) {
		        	    			    $localContext->unionType = $this->errorHandler->recoverInline($this);
		        	    		} else {
		        	    			if ($this->input->LA(1) === Token::EOF) {
		        	    			    $this->matchedEOF = true;
		        	    		    }

		        	    			$this->errorHandler->reportMatch($this);
		        	    			$this->consume();
		        	    		}
		        	    	}
		        	    	$this->setState(3003);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->input->LA(1)) {
		        	    	    case self::SELECT:
		        	    	    	$this->setState(3001);
		        	    	    	$this->querySpecification();
		        	    	    	break;

		        	    	    case self::LR_BRACKET:
		        	    	    	$this->setState(3002);
		        	    	    	$this->queryExpression();
		        	    	    	break;

		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}
		        	    }
		        	    $this->setState(3008);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ORDER) {
		        	    	$this->setState(3007);
		        	    	$this->orderByClause();
		        	    }
		        	    $this->setState(3011);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LIMIT) {
		        	    	$this->setState(3010);
		        	    	$this->limitClause();
		        	    }
		        	    $this->setState(3014);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 405, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3013);
		        	    	    $this->lockClause();
		        	    	break;
		        	    }
		        	break;

		        	case 4:
		        	    $localContext = new Context\UnionParenthesisSelectContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(3016);
		        	    $this->queryExpressionNointo();
		        	    $this->setState(3018); 
		        	    $this->errorHandler->sync($this);

		        	    $alt = 1;

		        	    do {
		        	    	switch ($alt) {
		        	    	case 1:
		        	    		$this->setState(3017);
		        	    		$this->unionParenthesis();
		        	    		break;
		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}

		        	    	$this->setState(3020); 
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 406, $this->ctx);
		        	    } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        	    $this->setState(3027);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::UNION) {
		        	    	$this->setState(3022);
		        	    	$this->match(self::UNION);
		        	    	$this->setState(3024);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);

		        	    	if ($_la === self::ALL || $_la === self::DISTINCT) {
		        	    		$this->setState(3023);

		        	    		$localContext->unionType = $this->input->LT(1);
		        	    		$_la = $this->input->LA(1);

		        	    		if (!($_la === self::ALL || $_la === self::DISTINCT)) {
		        	    			    $localContext->unionType = $this->errorHandler->recoverInline($this);
		        	    		} else {
		        	    			if ($this->input->LA(1) === Token::EOF) {
		        	    			    $this->matchedEOF = true;
		        	    		    }

		        	    			$this->errorHandler->reportMatch($this);
		        	    			$this->consume();
		        	    		}
		        	    	}
		        	    	$this->setState(3026);
		        	    	$this->queryExpression();
		        	    }
		        	    $this->setState(3030);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ORDER) {
		        	    	$this->setState(3029);
		        	    	$this->orderByClause();
		        	    }
		        	    $this->setState(3033);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LIMIT) {
		        	    	$this->setState(3032);
		        	    	$this->limitClause();
		        	    }
		        	    $this->setState(3036);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 411, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3035);
		        	    	    $this->lockClause();
		        	    	break;
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function updateStatement() : Context\UpdateStatementContext
		{
		    $localContext = new Context\UpdateStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 180, self::RULE_updateStatement);

		    try {
		        $this->setState(3042);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 413, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3040);
		        	    $this->singleUpdateStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3041);
		        	    $this->multipleUpdateStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function insertStatementValue() : Context\InsertStatementValueContext
		{
		    $localContext = new Context\InsertStatementValueContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 182, self::RULE_insertStatementValue);

		    try {
		        $this->setState(3062);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SELECT:
		            case self::LR_BRACKET:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3044);
		            	$this->selectStatement();
		            	break;

		            case self::VALUES:
		            case self::VALUE:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3045);

		            	$localContext->insertFormat = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::VALUES || $_la === self::VALUE)) {
		            		    $localContext->insertFormat = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(3046);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(3048);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CASE) | (1 << self::CAST) | (1 << self::CONVERT) | (1 << self::CURRENT) | (1 << self::CURRENT_USER) | (1 << self::DATABASE) | (1 << self::DEFAULT) | (1 << self::DIAGNOSTICS) | (1 << self::EXISTS) | (1 << self::FALSE))) !== 0) || (((($_la - 69)) & ~0x3f) === 0 && ((1 << ($_la - 69)) & ((1 << (self::IF - 69)) | (1 << (self::INSERT - 69)) | (1 << (self::INTERVAL - 69)) | (1 << (self::LEFT - 69)) | (1 << (self::NOT - 69)) | (1 << (self::NULL_LITERAL - 69)) | (1 << (self::NUMBER - 69)) | (1 << (self::REPLACE - 69)))) !== 0) || (((($_la - 133)) & ~0x3f) === 0 && ((1 << ($_la - 133)) & ((1 << (self::RIGHT - 133)) | (1 << (self::STACKED - 133)) | (1 << (self::TRUE - 133)) | (1 << (self::VALUES - 133)))) !== 0) || (((($_la - 199)) & ~0x3f) === 0 && ((1 << ($_la - 199)) & ((1 << (self::DATE - 199)) | (1 << (self::TIME - 199)) | (1 << (self::TIMESTAMP - 199)) | (1 << (self::DATETIME - 199)) | (1 << (self::YEAR - 199)) | (1 << (self::CHAR - 199)) | (1 << (self::BINARY - 199)) | (1 << (self::TEXT - 199)) | (1 << (self::ENUM - 199)) | (1 << (self::SERIAL - 199)) | (1 << (self::AVG - 199)) | (1 << (self::BIT_AND - 199)) | (1 << (self::BIT_OR - 199)) | (1 << (self::BIT_XOR - 199)) | (1 << (self::COUNT - 199)) | (1 << (self::GROUP_CONCAT - 199)) | (1 << (self::MAX - 199)) | (1 << (self::MIN - 199)) | (1 << (self::STD - 199)) | (1 << (self::STDDEV - 199)) | (1 << (self::STDDEV_POP - 199)) | (1 << (self::STDDEV_SAMP - 199)) | (1 << (self::SUM - 199)) | (1 << (self::VAR_POP - 199)) | (1 << (self::VAR_SAMP - 199)) | (1 << (self::VARIANCE - 199)) | (1 << (self::CURRENT_DATE - 199)) | (1 << (self::CURRENT_TIME - 199)) | (1 << (self::CURRENT_TIMESTAMP - 199)) | (1 << (self::LOCALTIME - 199)) | (1 << (self::CURDATE - 199)) | (1 << (self::CURTIME - 199)) | (1 << (self::DATE_ADD - 199)) | (1 << (self::DATE_SUB - 199)) | (1 << (self::EXTRACT - 199)) | (1 << (self::LOCALTIMESTAMP - 199)) | (1 << (self::NOW - 199)) | (1 << (self::POSITION - 199)))) !== 0) || (((($_la - 263)) & ~0x3f) === 0 && ((1 << ($_la - 263)) & ((1 << (self::SUBSTR - 263)) | (1 << (self::SUBSTRING - 263)) | (1 << (self::SYSDATE - 263)) | (1 << (self::TRIM - 263)) | (1 << (self::UTC_DATE - 263)) | (1 << (self::UTC_TIME - 263)) | (1 << (self::UTC_TIMESTAMP - 263)) | (1 << (self::ACCOUNT - 263)) | (1 << (self::ACTION - 263)) | (1 << (self::AFTER - 263)) | (1 << (self::AGGREGATE - 263)) | (1 << (self::ALGORITHM - 263)) | (1 << (self::ANY - 263)) | (1 << (self::AT - 263)) | (1 << (self::AUTHORS - 263)) | (1 << (self::AUTOCOMMIT - 263)) | (1 << (self::AUTOEXTEND_SIZE - 263)) | (1 << (self::AUTO_INCREMENT - 263)) | (1 << (self::AVG_ROW_LENGTH - 263)) | (1 << (self::BEGIN - 263)) | (1 << (self::BINLOG - 263)) | (1 << (self::BIT - 263)) | (1 << (self::BLOCK - 263)) | (1 << (self::BOOL - 263)) | (1 << (self::BOOLEAN - 263)) | (1 << (self::BTREE - 263)) | (1 << (self::CACHE - 263)) | (1 << (self::CASCADED - 263)) | (1 << (self::CHAIN - 263)) | (1 << (self::CHANGED - 263)) | (1 << (self::CHANNEL - 263)) | (1 << (self::CHECKSUM - 263)) | (1 << (self::PAGE_CHECKSUM - 263)) | (1 << (self::CIPHER - 263)) | (1 << (self::CLASS_ORIGIN - 263)) | (1 << (self::CLIENT - 263)) | (1 << (self::CLOSE - 263)) | (1 << (self::COALESCE - 263)) | (1 << (self::CODE - 263)) | (1 << (self::COLUMNS - 263)) | (1 << (self::COLUMN_FORMAT - 263)) | (1 << (self::COLUMN_NAME - 263)) | (1 << (self::COMMENT - 263)) | (1 << (self::COMMIT - 263)) | (1 << (self::COMPACT - 263)) | (1 << (self::COMPLETION - 263)) | (1 << (self::COMPRESSED - 263)) | (1 << (self::COMPRESSION - 263)) | (1 << (self::CONCURRENT - 263)) | (1 << (self::CONNECTION - 263)) | (1 << (self::CONSISTENT - 263)) | (1 << (self::CONSTRAINT_CATALOG - 263)) | (1 << (self::CONSTRAINT_SCHEMA - 263)) | (1 << (self::CONSTRAINT_NAME - 263)) | (1 << (self::CONTAINS - 263)) | (1 << (self::CONTEXT - 263)) | (1 << (self::CONTRIBUTORS - 263)) | (1 << (self::COPY - 263)) | (1 << (self::CPU - 263)) | (1 << (self::CURSOR_NAME - 263)) | (1 << (self::DATA - 263)) | (1 << (self::DATAFILE - 263)) | (1 << (self::DEALLOCATE - 263)) | (1 << (self::DEFAULT_AUTH - 263)))) !== 0) || (((($_la - 327)) & ~0x3f) === 0 && ((1 << ($_la - 327)) & ((1 << (self::DEFINER - 327)) | (1 << (self::DELAY_KEY_WRITE - 327)) | (1 << (self::DES_KEY_FILE - 327)) | (1 << (self::DIRECTORY - 327)) | (1 << (self::DISABLE - 327)) | (1 << (self::DISCARD - 327)) | (1 << (self::DISK - 327)) | (1 << (self::DO - 327)) | (1 << (self::DUMPFILE - 327)) | (1 << (self::DUPLICATE - 327)) | (1 << (self::DYNAMIC - 327)) | (1 << (self::ENABLE - 327)) | (1 << (self::ENCRYPTION - 327)) | (1 << (self::END - 327)) | (1 << (self::ENDS - 327)) | (1 << (self::ENGINE - 327)) | (1 << (self::ENGINES - 327)) | (1 << (self::ERROR - 327)) | (1 << (self::ERRORS - 327)) | (1 << (self::ESCAPE - 327)) | (1 << (self::EVEN - 327)) | (1 << (self::EVENT - 327)) | (1 << (self::EVENTS - 327)) | (1 << (self::EVERY - 327)) | (1 << (self::EXCHANGE - 327)) | (1 << (self::EXCLUSIVE - 327)) | (1 << (self::EXPIRE - 327)) | (1 << (self::EXPORT - 327)) | (1 << (self::EXTENDED - 327)) | (1 << (self::EXTENT_SIZE - 327)) | (1 << (self::FAST - 327)) | (1 << (self::FAULTS - 327)) | (1 << (self::FIELDS - 327)) | (1 << (self::FILE_BLOCK_SIZE - 327)) | (1 << (self::FILTER - 327)) | (1 << (self::FIRST - 327)) | (1 << (self::FIXED - 327)) | (1 << (self::FLUSH - 327)) | (1 << (self::FOLLOWS - 327)) | (1 << (self::FOUND - 327)) | (1 << (self::FULL - 327)) | (1 << (self::FUNCTION - 327)) | (1 << (self::GENERAL - 327)) | (1 << (self::GLOBAL - 327)) | (1 << (self::GRANTS - 327)) | (1 << (self::GROUP_REPLICATION - 327)) | (1 << (self::HANDLER - 327)) | (1 << (self::HASH - 327)) | (1 << (self::HELP - 327)) | (1 << (self::HOST - 327)) | (1 << (self::HOSTS - 327)) | (1 << (self::IDENTIFIED - 327)) | (1 << (self::IGNORE_SERVER_IDS - 327)) | (1 << (self::IMPORT - 327)) | (1 << (self::INDEXES - 327)) | (1 << (self::INITIAL_SIZE - 327)) | (1 << (self::INPLACE - 327)) | (1 << (self::INSERT_METHOD - 327)) | (1 << (self::INSTALL - 327)) | (1 << (self::INSTANCE - 327)) | (1 << (self::INVISIBLE - 327)) | (1 << (self::INVOKER - 327)) | (1 << (self::IO - 327)) | (1 << (self::IO_THREAD - 327)))) !== 0) || (((($_la - 391)) & ~0x3f) === 0 && ((1 << ($_la - 391)) & ((1 << (self::IPC - 391)) | (1 << (self::ISOLATION - 391)) | (1 << (self::ISSUER - 391)) | (1 << (self::JSON - 391)) | (1 << (self::KEY_BLOCK_SIZE - 391)) | (1 << (self::LANGUAGE - 391)) | (1 << (self::LAST - 391)) | (1 << (self::LEAVES - 391)) | (1 << (self::LESS - 391)) | (1 << (self::LEVEL - 391)) | (1 << (self::LIST - 391)) | (1 << (self::LOCAL - 391)) | (1 << (self::LOGFILE - 391)) | (1 << (self::LOGS - 391)) | (1 << (self::MASTER - 391)) | (1 << (self::MASTER_AUTO_POSITION - 391)) | (1 << (self::MASTER_CONNECT_RETRY - 391)) | (1 << (self::MASTER_DELAY - 391)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 391)) | (1 << (self::MASTER_HOST - 391)) | (1 << (self::MASTER_LOG_FILE - 391)) | (1 << (self::MASTER_LOG_POS - 391)) | (1 << (self::MASTER_PASSWORD - 391)) | (1 << (self::MASTER_PORT - 391)) | (1 << (self::MASTER_RETRY_COUNT - 391)) | (1 << (self::MASTER_SSL - 391)) | (1 << (self::MASTER_SSL_CA - 391)) | (1 << (self::MASTER_SSL_CAPATH - 391)) | (1 << (self::MASTER_SSL_CERT - 391)) | (1 << (self::MASTER_SSL_CIPHER - 391)) | (1 << (self::MASTER_SSL_CRL - 391)) | (1 << (self::MASTER_SSL_CRLPATH - 391)) | (1 << (self::MASTER_SSL_KEY - 391)) | (1 << (self::MASTER_TLS_VERSION - 391)) | (1 << (self::MASTER_USER - 391)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 391)) | (1 << (self::MAX_QUERIES_PER_HOUR - 391)) | (1 << (self::MAX_ROWS - 391)) | (1 << (self::MAX_SIZE - 391)) | (1 << (self::MAX_UPDATES_PER_HOUR - 391)) | (1 << (self::MAX_USER_CONNECTIONS - 391)) | (1 << (self::MEDIUM - 391)) | (1 << (self::MERGE - 391)) | (1 << (self::MESSAGE_TEXT - 391)) | (1 << (self::MID - 391)) | (1 << (self::MIGRATE - 391)) | (1 << (self::MIN_ROWS - 391)) | (1 << (self::MODE - 391)) | (1 << (self::MODIFY - 391)) | (1 << (self::MUTEX - 391)) | (1 << (self::MYSQL - 391)) | (1 << (self::MYSQL_ERRNO - 391)) | (1 << (self::NAME - 391)) | (1 << (self::NAMES - 391)) | (1 << (self::NCHAR - 391)) | (1 << (self::NEVER - 391)) | (1 << (self::NEXT - 391)) | (1 << (self::NO - 391)) | (1 << (self::NODEGROUP - 391)) | (1 << (self::NONE - 391)) | (1 << (self::OFFLINE - 391)) | (1 << (self::OFFSET - 391)))) !== 0) || (((($_la - 455)) & ~0x3f) === 0 && ((1 << ($_la - 455)) & ((1 << (self::OJ - 455)) | (1 << (self::OLD_PASSWORD - 455)) | (1 << (self::ONE - 455)) | (1 << (self::ONLINE - 455)) | (1 << (self::ONLY - 455)) | (1 << (self::OPEN - 455)) | (1 << (self::OPTIMIZER_COSTS - 455)) | (1 << (self::OPTIONS - 455)) | (1 << (self::OWNER - 455)) | (1 << (self::PACK_KEYS - 455)) | (1 << (self::PAGE - 455)) | (1 << (self::PARSER - 455)) | (1 << (self::PARTIAL - 455)) | (1 << (self::PARTITIONING - 455)) | (1 << (self::PARTITIONS - 455)) | (1 << (self::PASSWORD - 455)) | (1 << (self::PHASE - 455)) | (1 << (self::PLUGIN - 455)) | (1 << (self::PLUGIN_DIR - 455)) | (1 << (self::PLUGINS - 455)) | (1 << (self::PORT - 455)) | (1 << (self::PRECEDES - 455)) | (1 << (self::PREPARE - 455)) | (1 << (self::PRESERVE - 455)) | (1 << (self::PREV - 455)) | (1 << (self::PROCESSLIST - 455)) | (1 << (self::PROFILE - 455)) | (1 << (self::PROFILES - 455)) | (1 << (self::PROXY - 455)) | (1 << (self::QUERY - 455)) | (1 << (self::QUICK - 455)) | (1 << (self::REBUILD - 455)) | (1 << (self::RECOVER - 455)) | (1 << (self::REDO_BUFFER_SIZE - 455)) | (1 << (self::REDUNDANT - 455)) | (1 << (self::RELAY - 455)) | (1 << (self::RELAY_LOG_FILE - 455)) | (1 << (self::RELAY_LOG_POS - 455)) | (1 << (self::RELAYLOG - 455)) | (1 << (self::REMOVE - 455)) | (1 << (self::REORGANIZE - 455)) | (1 << (self::REPAIR - 455)) | (1 << (self::REPLICATE_DO_DB - 455)) | (1 << (self::REPLICATE_DO_TABLE - 455)) | (1 << (self::REPLICATE_IGNORE_DB - 455)) | (1 << (self::REPLICATE_IGNORE_TABLE - 455)) | (1 << (self::REPLICATE_REWRITE_DB - 455)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 455)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 455)) | (1 << (self::REPLICATION - 455)) | (1 << (self::RESET - 455)) | (1 << (self::RESUME - 455)) | (1 << (self::RETURNED_SQLSTATE - 455)) | (1 << (self::RETURNS - 455)) | (1 << (self::ROLLBACK - 455)) | (1 << (self::ROLLUP - 455)) | (1 << (self::ROTATE - 455)) | (1 << (self::ROW - 455)) | (1 << (self::ROWS - 455)) | (1 << (self::ROW_FORMAT - 455)) | (1 << (self::SAVEPOINT - 455)) | (1 << (self::SCHEDULE - 455)) | (1 << (self::SECURITY - 455)))) !== 0) || (((($_la - 519)) & ~0x3f) === 0 && ((1 << ($_la - 519)) & ((1 << (self::SERVER - 519)) | (1 << (self::SESSION - 519)) | (1 << (self::SHARE - 519)) | (1 << (self::SHARED - 519)) | (1 << (self::SIGNED - 519)) | (1 << (self::SIMPLE - 519)) | (1 << (self::SLAVE - 519)) | (1 << (self::SLOW - 519)) | (1 << (self::SNAPSHOT - 519)) | (1 << (self::SOCKET - 519)) | (1 << (self::SOME - 519)) | (1 << (self::SONAME - 519)) | (1 << (self::SOUNDS - 519)) | (1 << (self::SOURCE - 519)) | (1 << (self::SQL_AFTER_GTIDS - 519)) | (1 << (self::SQL_AFTER_MTS_GAPS - 519)) | (1 << (self::SQL_BEFORE_GTIDS - 519)) | (1 << (self::SQL_BUFFER_RESULT - 519)) | (1 << (self::SQL_CACHE - 519)) | (1 << (self::SQL_NO_CACHE - 519)) | (1 << (self::SQL_THREAD - 519)) | (1 << (self::START - 519)) | (1 << (self::STARTS - 519)) | (1 << (self::STATS_AUTO_RECALC - 519)) | (1 << (self::STATS_PERSISTENT - 519)) | (1 << (self::STATS_SAMPLE_PAGES - 519)) | (1 << (self::STATUS - 519)) | (1 << (self::STOP - 519)) | (1 << (self::STORAGE - 519)) | (1 << (self::STRING - 519)) | (1 << (self::SUBCLASS_ORIGIN - 519)) | (1 << (self::SUBJECT - 519)) | (1 << (self::SUBPARTITION - 519)) | (1 << (self::SUBPARTITIONS - 519)) | (1 << (self::SUSPEND - 519)) | (1 << (self::SWAPS - 519)) | (1 << (self::SWITCHES - 519)) | (1 << (self::TABLE_NAME - 519)) | (1 << (self::TABLESPACE - 519)) | (1 << (self::TEMPORARY - 519)) | (1 << (self::TEMPTABLE - 519)) | (1 << (self::THAN - 519)) | (1 << (self::TRADITIONAL - 519)) | (1 << (self::TRANSACTION - 519)) | (1 << (self::TRIGGERS - 519)) | (1 << (self::TRUNCATE - 519)) | (1 << (self::UNDEFINED - 519)) | (1 << (self::UNDOFILE - 519)) | (1 << (self::UNDO_BUFFER_SIZE - 519)) | (1 << (self::UNINSTALL - 519)) | (1 << (self::UNKNOWN - 519)) | (1 << (self::UNTIL - 519)) | (1 << (self::UPGRADE - 519)) | (1 << (self::USER - 519)) | (1 << (self::USE_FRM - 519)) | (1 << (self::USER_RESOURCES - 519)) | (1 << (self::VALIDATION - 519)) | (1 << (self::VALUE - 519)) | (1 << (self::VARIABLES - 519)) | (1 << (self::VIEW - 519)) | (1 << (self::VISIBLE - 519)))) !== 0) || (((($_la - 583)) & ~0x3f) === 0 && ((1 << ($_la - 583)) & ((1 << (self::WAIT - 583)) | (1 << (self::WARNINGS - 583)) | (1 << (self::WITHOUT - 583)) | (1 << (self::WORK - 583)) | (1 << (self::WRAPPER - 583)) | (1 << (self::X509 - 583)) | (1 << (self::XA - 583)) | (1 << (self::XML - 583)) | (1 << (self::INTERNAL - 583)) | (1 << (self::QUARTER - 583)) | (1 << (self::MONTH - 583)) | (1 << (self::DAY - 583)) | (1 << (self::HOUR - 583)) | (1 << (self::MINUTE - 583)) | (1 << (self::WEEK - 583)) | (1 << (self::SECOND - 583)) | (1 << (self::MICROSECOND - 583)) | (1 << (self::TABLES - 583)) | (1 << (self::ROUTINE - 583)) | (1 << (self::EXECUTE - 583)) | (1 << (self::FILE - 583)) | (1 << (self::PROCESS - 583)) | (1 << (self::RELOAD - 583)) | (1 << (self::SHUTDOWN - 583)) | (1 << (self::SUPER - 583)) | (1 << (self::PRIVILEGES - 583)) | (1 << (self::SESSION_VARIABLES_ADMIN - 583)) | (1 << (self::ARMSCII8 - 583)) | (1 << (self::ASCII - 583)) | (1 << (self::BIG5 - 583)) | (1 << (self::CP1250 - 583)) | (1 << (self::CP1251 - 583)) | (1 << (self::CP1256 - 583)) | (1 << (self::CP1257 - 583)) | (1 << (self::CP850 - 583)))) !== 0) || (((($_la - 647)) & ~0x3f) === 0 && ((1 << ($_la - 647)) & ((1 << (self::CP852 - 647)) | (1 << (self::CP866 - 647)) | (1 << (self::CP932 - 647)) | (1 << (self::DEC8 - 647)) | (1 << (self::EUCJPMS - 647)) | (1 << (self::EUCKR - 647)) | (1 << (self::GB2312 - 647)) | (1 << (self::GBK - 647)) | (1 << (self::GEOSTD8 - 647)) | (1 << (self::GREEK - 647)) | (1 << (self::HEBREW - 647)) | (1 << (self::HP8 - 647)) | (1 << (self::KEYBCS2 - 647)) | (1 << (self::KOI8R - 647)) | (1 << (self::KOI8U - 647)) | (1 << (self::LATIN1 - 647)) | (1 << (self::LATIN2 - 647)) | (1 << (self::LATIN5 - 647)) | (1 << (self::LATIN7 - 647)) | (1 << (self::MACCE - 647)) | (1 << (self::MACROMAN - 647)) | (1 << (self::SJIS - 647)) | (1 << (self::SWE7 - 647)) | (1 << (self::TIS620 - 647)) | (1 << (self::UCS2 - 647)) | (1 << (self::UJIS - 647)) | (1 << (self::UTF16 - 647)) | (1 << (self::UTF16LE - 647)) | (1 << (self::UTF32 - 647)) | (1 << (self::UTF8 - 647)) | (1 << (self::UTF8MB3 - 647)) | (1 << (self::UTF8MB4 - 647)) | (1 << (self::ARCHIVE - 647)) | (1 << (self::BLACKHOLE - 647)) | (1 << (self::CSV - 647)) | (1 << (self::FEDERATED - 647)) | (1 << (self::INNODB - 647)) | (1 << (self::MEMORY - 647)) | (1 << (self::MRG_MYISAM - 647)) | (1 << (self::MYISAM - 647)) | (1 << (self::NDB - 647)) | (1 << (self::NDBCLUSTER - 647)) | (1 << (self::PERFORMANCE_SCHEMA - 647)) | (1 << (self::TOKUDB - 647)) | (1 << (self::REPEATABLE - 647)) | (1 << (self::COMMITTED - 647)) | (1 << (self::UNCOMMITTED - 647)) | (1 << (self::SERIALIZABLE - 647)) | (1 << (self::GEOMETRYCOLLECTION - 647)) | (1 << (self::LINESTRING - 647)) | (1 << (self::MULTILINESTRING - 647)) | (1 << (self::MULTIPOINT - 647)) | (1 << (self::MULTIPOLYGON - 647)) | (1 << (self::POINT - 647)) | (1 << (self::POLYGON - 647)) | (1 << (self::ABS - 647)) | (1 << (self::ACOS - 647)) | (1 << (self::ADDDATE - 647)) | (1 << (self::ADDTIME - 647)) | (1 << (self::AES_DECRYPT - 647)) | (1 << (self::AES_ENCRYPT - 647)) | (1 << (self::AREA - 647)))) !== 0) || (((($_la - 711)) & ~0x3f) === 0 && ((1 << ($_la - 711)) & ((1 << (self::ASBINARY - 711)) | (1 << (self::ASIN - 711)) | (1 << (self::ASTEXT - 711)) | (1 << (self::ASWKB - 711)) | (1 << (self::ASWKT - 711)) | (1 << (self::ASYMMETRIC_DECRYPT - 711)) | (1 << (self::ASYMMETRIC_DERIVE - 711)) | (1 << (self::ASYMMETRIC_ENCRYPT - 711)) | (1 << (self::ASYMMETRIC_SIGN - 711)) | (1 << (self::ASYMMETRIC_VERIFY - 711)) | (1 << (self::ATAN - 711)) | (1 << (self::ATAN2 - 711)) | (1 << (self::BENCHMARK - 711)) | (1 << (self::BIN - 711)) | (1 << (self::BIT_COUNT - 711)) | (1 << (self::BIT_LENGTH - 711)) | (1 << (self::BUFFER - 711)) | (1 << (self::CATALOG_NAME - 711)) | (1 << (self::CEIL - 711)) | (1 << (self::CEILING - 711)) | (1 << (self::CENTROID - 711)) | (1 << (self::CHARACTER_LENGTH - 711)) | (1 << (self::CHARSET - 711)) | (1 << (self::CHAR_LENGTH - 711)) | (1 << (self::COERCIBILITY - 711)) | (1 << (self::COLLATION - 711)) | (1 << (self::COMPRESS - 711)) | (1 << (self::CONCAT - 711)) | (1 << (self::CONCAT_WS - 711)) | (1 << (self::CONNECTION_ID - 711)) | (1 << (self::CONV - 711)) | (1 << (self::CONVERT_TZ - 711)) | (1 << (self::COS - 711)) | (1 << (self::COT - 711)) | (1 << (self::CRC32 - 711)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 711)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 711)) | (1 << (self::CREATE_DH_PARAMETERS - 711)) | (1 << (self::CREATE_DIGEST - 711)) | (1 << (self::CROSSES - 711)) | (1 << (self::DATEDIFF - 711)) | (1 << (self::DATE_FORMAT - 711)) | (1 << (self::DAYNAME - 711)) | (1 << (self::DAYOFMONTH - 711)) | (1 << (self::DAYOFWEEK - 711)) | (1 << (self::DAYOFYEAR - 711)) | (1 << (self::DECODE - 711)) | (1 << (self::DEGREES - 711)) | (1 << (self::DES_DECRYPT - 711)) | (1 << (self::DES_ENCRYPT - 711)) | (1 << (self::DIMENSION - 711)) | (1 << (self::DISJOINT - 711)) | (1 << (self::ELT - 711)) | (1 << (self::ENCODE - 711)) | (1 << (self::ENCRYPT - 711)) | (1 << (self::ENDPOINT - 711)) | (1 << (self::ENVELOPE - 711)) | (1 << (self::EQUALS - 711)) | (1 << (self::EXP - 711)) | (1 << (self::EXPORT_SET - 711)) | (1 << (self::EXTERIORRING - 711)) | (1 << (self::EXTRACTVALUE - 711)) | (1 << (self::FIELD - 711)) | (1 << (self::FIND_IN_SET - 711)))) !== 0) || (((($_la - 775)) & ~0x3f) === 0 && ((1 << ($_la - 775)) & ((1 << (self::FLOOR - 775)) | (1 << (self::FORMAT - 775)) | (1 << (self::FOUND_ROWS - 775)) | (1 << (self::FROM_BASE64 - 775)) | (1 << (self::FROM_DAYS - 775)) | (1 << (self::FROM_UNIXTIME - 775)) | (1 << (self::GEOMCOLLFROMTEXT - 775)) | (1 << (self::GEOMCOLLFROMWKB - 775)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 775)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 775)) | (1 << (self::GEOMETRYFROMTEXT - 775)) | (1 << (self::GEOMETRYFROMWKB - 775)) | (1 << (self::GEOMETRYN - 775)) | (1 << (self::GEOMETRYTYPE - 775)) | (1 << (self::GEOMFROMTEXT - 775)) | (1 << (self::GEOMFROMWKB - 775)) | (1 << (self::GET_FORMAT - 775)) | (1 << (self::GET_LOCK - 775)) | (1 << (self::GLENGTH - 775)) | (1 << (self::GREATEST - 775)) | (1 << (self::GTID_SUBSET - 775)) | (1 << (self::GTID_SUBTRACT - 775)) | (1 << (self::HEX - 775)) | (1 << (self::IFNULL - 775)) | (1 << (self::INET6_ATON - 775)) | (1 << (self::INET6_NTOA - 775)) | (1 << (self::INET_ATON - 775)) | (1 << (self::INET_NTOA - 775)) | (1 << (self::INSTR - 775)) | (1 << (self::INTERIORRINGN - 775)) | (1 << (self::INTERSECTS - 775)) | (1 << (self::ISCLOSED - 775)) | (1 << (self::ISEMPTY - 775)) | (1 << (self::ISNULL - 775)) | (1 << (self::ISSIMPLE - 775)) | (1 << (self::IS_FREE_LOCK - 775)) | (1 << (self::IS_IPV4 - 775)) | (1 << (self::IS_IPV4_COMPAT - 775)) | (1 << (self::IS_IPV4_MAPPED - 775)) | (1 << (self::IS_IPV6 - 775)) | (1 << (self::IS_USED_LOCK - 775)) | (1 << (self::LAST_INSERT_ID - 775)) | (1 << (self::LCASE - 775)) | (1 << (self::LEAST - 775)) | (1 << (self::LENGTH - 775)) | (1 << (self::LINEFROMTEXT - 775)) | (1 << (self::LINEFROMWKB - 775)) | (1 << (self::LINESTRINGFROMTEXT - 775)) | (1 << (self::LINESTRINGFROMWKB - 775)) | (1 << (self::LN - 775)) | (1 << (self::LOAD_FILE - 775)) | (1 << (self::LOCATE - 775)) | (1 << (self::LOG - 775)) | (1 << (self::LOG10 - 775)) | (1 << (self::LOG2 - 775)) | (1 << (self::LOWER - 775)) | (1 << (self::LPAD - 775)) | (1 << (self::LTRIM - 775)) | (1 << (self::MAKEDATE - 775)) | (1 << (self::MAKETIME - 775)) | (1 << (self::MAKE_SET - 775)) | (1 << (self::MASTER_POS_WAIT - 775)) | (1 << (self::MBRCONTAINS - 775)) | (1 << (self::MBRDISJOINT - 775)))) !== 0) || (((($_la - 839)) & ~0x3f) === 0 && ((1 << ($_la - 839)) & ((1 << (self::MBREQUAL - 839)) | (1 << (self::MBRINTERSECTS - 839)) | (1 << (self::MBROVERLAPS - 839)) | (1 << (self::MBRTOUCHES - 839)) | (1 << (self::MBRWITHIN - 839)) | (1 << (self::MD5 - 839)) | (1 << (self::MLINEFROMTEXT - 839)) | (1 << (self::MLINEFROMWKB - 839)) | (1 << (self::MONTHNAME - 839)) | (1 << (self::MPOINTFROMTEXT - 839)) | (1 << (self::MPOINTFROMWKB - 839)) | (1 << (self::MPOLYFROMTEXT - 839)) | (1 << (self::MPOLYFROMWKB - 839)) | (1 << (self::MULTILINESTRINGFROMTEXT - 839)) | (1 << (self::MULTILINESTRINGFROMWKB - 839)) | (1 << (self::MULTIPOINTFROMTEXT - 839)) | (1 << (self::MULTIPOINTFROMWKB - 839)) | (1 << (self::MULTIPOLYGONFROMTEXT - 839)) | (1 << (self::MULTIPOLYGONFROMWKB - 839)) | (1 << (self::NAME_CONST - 839)) | (1 << (self::NULLIF - 839)) | (1 << (self::NUMGEOMETRIES - 839)) | (1 << (self::NUMINTERIORRINGS - 839)) | (1 << (self::NUMPOINTS - 839)) | (1 << (self::OCT - 839)) | (1 << (self::OCTET_LENGTH - 839)) | (1 << (self::ORD - 839)) | (1 << (self::OVERLAPS - 839)) | (1 << (self::PERIOD_ADD - 839)) | (1 << (self::PERIOD_DIFF - 839)) | (1 << (self::PI - 839)) | (1 << (self::POINTFROMTEXT - 839)) | (1 << (self::POINTFROMWKB - 839)) | (1 << (self::POINTN - 839)) | (1 << (self::POLYFROMTEXT - 839)) | (1 << (self::POLYFROMWKB - 839)) | (1 << (self::POLYGONFROMTEXT - 839)) | (1 << (self::POLYGONFROMWKB - 839)) | (1 << (self::POW - 839)) | (1 << (self::POWER - 839)) | (1 << (self::QUOTE - 839)) | (1 << (self::RADIANS - 839)) | (1 << (self::RAND - 839)) | (1 << (self::RANDOM_BYTES - 839)) | (1 << (self::RELEASE_LOCK - 839)) | (1 << (self::REVERSE - 839)) | (1 << (self::ROUND - 839)) | (1 << (self::ROW_COUNT - 839)) | (1 << (self::RPAD - 839)) | (1 << (self::RTRIM - 839)) | (1 << (self::SEC_TO_TIME - 839)) | (1 << (self::SESSION_USER - 839)) | (1 << (self::SHA - 839)) | (1 << (self::SHA1 - 839)) | (1 << (self::SHA2 - 839)) | (1 << (self::SCHEMA_NAME - 839)) | (1 << (self::SIGN - 839)) | (1 << (self::SIN - 839)) | (1 << (self::SLEEP - 839)) | (1 << (self::SOUNDEX - 839)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 839)) | (1 << (self::SQRT - 839)) | (1 << (self::SRID - 839)) | (1 << (self::STARTPOINT - 839)))) !== 0) || (((($_la - 903)) & ~0x3f) === 0 && ((1 << ($_la - 903)) & ((1 << (self::STRCMP - 903)) | (1 << (self::STR_TO_DATE - 903)) | (1 << (self::ST_AREA - 903)) | (1 << (self::ST_ASBINARY - 903)) | (1 << (self::ST_ASTEXT - 903)) | (1 << (self::ST_ASWKB - 903)) | (1 << (self::ST_ASWKT - 903)) | (1 << (self::ST_BUFFER - 903)) | (1 << (self::ST_CENTROID - 903)) | (1 << (self::ST_CONTAINS - 903)) | (1 << (self::ST_CROSSES - 903)) | (1 << (self::ST_DIFFERENCE - 903)) | (1 << (self::ST_DIMENSION - 903)) | (1 << (self::ST_DISJOINT - 903)) | (1 << (self::ST_DISTANCE - 903)) | (1 << (self::ST_ENDPOINT - 903)) | (1 << (self::ST_ENVELOPE - 903)) | (1 << (self::ST_EQUALS - 903)) | (1 << (self::ST_EXTERIORRING - 903)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 903)) | (1 << (self::ST_GEOMCOLLFROMTXT - 903)) | (1 << (self::ST_GEOMCOLLFROMWKB - 903)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 903)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 903)) | (1 << (self::ST_GEOMETRYFROMTEXT - 903)) | (1 << (self::ST_GEOMETRYFROMWKB - 903)) | (1 << (self::ST_GEOMETRYN - 903)) | (1 << (self::ST_GEOMETRYTYPE - 903)) | (1 << (self::ST_GEOMFROMTEXT - 903)) | (1 << (self::ST_GEOMFROMWKB - 903)) | (1 << (self::ST_INTERIORRINGN - 903)) | (1 << (self::ST_INTERSECTION - 903)) | (1 << (self::ST_INTERSECTS - 903)) | (1 << (self::ST_ISCLOSED - 903)) | (1 << (self::ST_ISEMPTY - 903)) | (1 << (self::ST_ISSIMPLE - 903)) | (1 << (self::ST_LINEFROMTEXT - 903)) | (1 << (self::ST_LINEFROMWKB - 903)) | (1 << (self::ST_LINESTRINGFROMTEXT - 903)) | (1 << (self::ST_LINESTRINGFROMWKB - 903)) | (1 << (self::ST_NUMGEOMETRIES - 903)) | (1 << (self::ST_NUMINTERIORRING - 903)) | (1 << (self::ST_NUMINTERIORRINGS - 903)) | (1 << (self::ST_NUMPOINTS - 903)) | (1 << (self::ST_OVERLAPS - 903)) | (1 << (self::ST_POINTFROMTEXT - 903)) | (1 << (self::ST_POINTFROMWKB - 903)) | (1 << (self::ST_POINTN - 903)) | (1 << (self::ST_POLYFROMTEXT - 903)) | (1 << (self::ST_POLYFROMWKB - 903)) | (1 << (self::ST_POLYGONFROMTEXT - 903)) | (1 << (self::ST_POLYGONFROMWKB - 903)) | (1 << (self::ST_SRID - 903)) | (1 << (self::ST_STARTPOINT - 903)) | (1 << (self::ST_SYMDIFFERENCE - 903)) | (1 << (self::ST_TOUCHES - 903)) | (1 << (self::ST_UNION - 903)) | (1 << (self::ST_WITHIN - 903)) | (1 << (self::ST_X - 903)) | (1 << (self::ST_Y - 903)) | (1 << (self::SUBDATE - 903)) | (1 << (self::SUBSTRING_INDEX - 903)) | (1 << (self::SUBTIME - 903)) | (1 << (self::SYSTEM_USER - 903)))) !== 0) || (((($_la - 967)) & ~0x3f) === 0 && ((1 << ($_la - 967)) & ((1 << (self::TAN - 967)) | (1 << (self::TIMEDIFF - 967)) | (1 << (self::TIMESTAMPADD - 967)) | (1 << (self::TIMESTAMPDIFF - 967)) | (1 << (self::TIME_FORMAT - 967)) | (1 << (self::TIME_TO_SEC - 967)) | (1 << (self::TOUCHES - 967)) | (1 << (self::TO_BASE64 - 967)) | (1 << (self::TO_DAYS - 967)) | (1 << (self::TO_SECONDS - 967)) | (1 << (self::UCASE - 967)) | (1 << (self::UNCOMPRESS - 967)) | (1 << (self::UNCOMPRESSED_LENGTH - 967)) | (1 << (self::UNHEX - 967)) | (1 << (self::UNIX_TIMESTAMP - 967)) | (1 << (self::UPDATEXML - 967)) | (1 << (self::UPPER - 967)) | (1 << (self::UUID - 967)) | (1 << (self::UUID_SHORT - 967)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 967)) | (1 << (self::VERSION - 967)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 967)) | (1 << (self::WEEKDAY - 967)) | (1 << (self::WEEKOFYEAR - 967)) | (1 << (self::WEIGHT_STRING - 967)) | (1 << (self::WITHIN - 967)) | (1 << (self::YEARWEEK - 967)) | (1 << (self::Y_FUNCTION - 967)) | (1 << (self::X_FUNCTION - 967)) | (1 << (self::PLUS - 967)) | (1 << (self::MINUS - 967)) | (1 << (self::EXCLAMATION_SYMBOL - 967)) | (1 << (self::BIT_NOT_OP - 967)) | (1 << (self::LR_BRACKET - 967)) | (1 << (self::ZERO_DECIMAL - 967)) | (1 << (self::ONE_DECIMAL - 967)) | (1 << (self::TWO_DECIMAL - 967)))) !== 0) || (((($_la - 1034)) & ~0x3f) === 0 && ((1 << ($_la - 1034)) & ((1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (self::START_NATIONAL_STRING_LITERAL - 1034)) | (1 << (self::STRING_LITERAL - 1034)) | (1 << (self::DECIMAL_LITERAL - 1034)) | (1 << (self::HEXADECIMAL_LITERAL - 1034)) | (1 << (self::REAL_LITERAL - 1034)) | (1 << (self::NULL_SPEC_LITERAL - 1034)) | (1 << (self::BIT_STRING - 1034)) | (1 << (self::STRING_CHARSET_NAME - 1034)) | (1 << (self::ID - 1034)) | (1 << (self::REVERSE_QUOTE_ID - 1034)) | (1 << (self::LOCAL_ID - 1034)) | (1 << (self::GLOBAL_ID - 1034)))) !== 0)) {
		            		$this->setState(3047);
		            		$this->expressionsWithDefaults();
		            	}
		            	$this->setState(3050);
		            	$this->match(self::RR_BRACKET);
		            	$this->setState(3059);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(3051);
		            		$this->match(self::COMMA);
		            		$this->setState(3052);
		            		$this->match(self::LR_BRACKET);
		            		$this->setState(3054);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);

		            		if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CASE) | (1 << self::CAST) | (1 << self::CONVERT) | (1 << self::CURRENT) | (1 << self::CURRENT_USER) | (1 << self::DATABASE) | (1 << self::DEFAULT) | (1 << self::DIAGNOSTICS) | (1 << self::EXISTS) | (1 << self::FALSE))) !== 0) || (((($_la - 69)) & ~0x3f) === 0 && ((1 << ($_la - 69)) & ((1 << (self::IF - 69)) | (1 << (self::INSERT - 69)) | (1 << (self::INTERVAL - 69)) | (1 << (self::LEFT - 69)) | (1 << (self::NOT - 69)) | (1 << (self::NULL_LITERAL - 69)) | (1 << (self::NUMBER - 69)) | (1 << (self::REPLACE - 69)))) !== 0) || (((($_la - 133)) & ~0x3f) === 0 && ((1 << ($_la - 133)) & ((1 << (self::RIGHT - 133)) | (1 << (self::STACKED - 133)) | (1 << (self::TRUE - 133)) | (1 << (self::VALUES - 133)))) !== 0) || (((($_la - 199)) & ~0x3f) === 0 && ((1 << ($_la - 199)) & ((1 << (self::DATE - 199)) | (1 << (self::TIME - 199)) | (1 << (self::TIMESTAMP - 199)) | (1 << (self::DATETIME - 199)) | (1 << (self::YEAR - 199)) | (1 << (self::CHAR - 199)) | (1 << (self::BINARY - 199)) | (1 << (self::TEXT - 199)) | (1 << (self::ENUM - 199)) | (1 << (self::SERIAL - 199)) | (1 << (self::AVG - 199)) | (1 << (self::BIT_AND - 199)) | (1 << (self::BIT_OR - 199)) | (1 << (self::BIT_XOR - 199)) | (1 << (self::COUNT - 199)) | (1 << (self::GROUP_CONCAT - 199)) | (1 << (self::MAX - 199)) | (1 << (self::MIN - 199)) | (1 << (self::STD - 199)) | (1 << (self::STDDEV - 199)) | (1 << (self::STDDEV_POP - 199)) | (1 << (self::STDDEV_SAMP - 199)) | (1 << (self::SUM - 199)) | (1 << (self::VAR_POP - 199)) | (1 << (self::VAR_SAMP - 199)) | (1 << (self::VARIANCE - 199)) | (1 << (self::CURRENT_DATE - 199)) | (1 << (self::CURRENT_TIME - 199)) | (1 << (self::CURRENT_TIMESTAMP - 199)) | (1 << (self::LOCALTIME - 199)) | (1 << (self::CURDATE - 199)) | (1 << (self::CURTIME - 199)) | (1 << (self::DATE_ADD - 199)) | (1 << (self::DATE_SUB - 199)) | (1 << (self::EXTRACT - 199)) | (1 << (self::LOCALTIMESTAMP - 199)) | (1 << (self::NOW - 199)) | (1 << (self::POSITION - 199)))) !== 0) || (((($_la - 263)) & ~0x3f) === 0 && ((1 << ($_la - 263)) & ((1 << (self::SUBSTR - 263)) | (1 << (self::SUBSTRING - 263)) | (1 << (self::SYSDATE - 263)) | (1 << (self::TRIM - 263)) | (1 << (self::UTC_DATE - 263)) | (1 << (self::UTC_TIME - 263)) | (1 << (self::UTC_TIMESTAMP - 263)) | (1 << (self::ACCOUNT - 263)) | (1 << (self::ACTION - 263)) | (1 << (self::AFTER - 263)) | (1 << (self::AGGREGATE - 263)) | (1 << (self::ALGORITHM - 263)) | (1 << (self::ANY - 263)) | (1 << (self::AT - 263)) | (1 << (self::AUTHORS - 263)) | (1 << (self::AUTOCOMMIT - 263)) | (1 << (self::AUTOEXTEND_SIZE - 263)) | (1 << (self::AUTO_INCREMENT - 263)) | (1 << (self::AVG_ROW_LENGTH - 263)) | (1 << (self::BEGIN - 263)) | (1 << (self::BINLOG - 263)) | (1 << (self::BIT - 263)) | (1 << (self::BLOCK - 263)) | (1 << (self::BOOL - 263)) | (1 << (self::BOOLEAN - 263)) | (1 << (self::BTREE - 263)) | (1 << (self::CACHE - 263)) | (1 << (self::CASCADED - 263)) | (1 << (self::CHAIN - 263)) | (1 << (self::CHANGED - 263)) | (1 << (self::CHANNEL - 263)) | (1 << (self::CHECKSUM - 263)) | (1 << (self::PAGE_CHECKSUM - 263)) | (1 << (self::CIPHER - 263)) | (1 << (self::CLASS_ORIGIN - 263)) | (1 << (self::CLIENT - 263)) | (1 << (self::CLOSE - 263)) | (1 << (self::COALESCE - 263)) | (1 << (self::CODE - 263)) | (1 << (self::COLUMNS - 263)) | (1 << (self::COLUMN_FORMAT - 263)) | (1 << (self::COLUMN_NAME - 263)) | (1 << (self::COMMENT - 263)) | (1 << (self::COMMIT - 263)) | (1 << (self::COMPACT - 263)) | (1 << (self::COMPLETION - 263)) | (1 << (self::COMPRESSED - 263)) | (1 << (self::COMPRESSION - 263)) | (1 << (self::CONCURRENT - 263)) | (1 << (self::CONNECTION - 263)) | (1 << (self::CONSISTENT - 263)) | (1 << (self::CONSTRAINT_CATALOG - 263)) | (1 << (self::CONSTRAINT_SCHEMA - 263)) | (1 << (self::CONSTRAINT_NAME - 263)) | (1 << (self::CONTAINS - 263)) | (1 << (self::CONTEXT - 263)) | (1 << (self::CONTRIBUTORS - 263)) | (1 << (self::COPY - 263)) | (1 << (self::CPU - 263)) | (1 << (self::CURSOR_NAME - 263)) | (1 << (self::DATA - 263)) | (1 << (self::DATAFILE - 263)) | (1 << (self::DEALLOCATE - 263)) | (1 << (self::DEFAULT_AUTH - 263)))) !== 0) || (((($_la - 327)) & ~0x3f) === 0 && ((1 << ($_la - 327)) & ((1 << (self::DEFINER - 327)) | (1 << (self::DELAY_KEY_WRITE - 327)) | (1 << (self::DES_KEY_FILE - 327)) | (1 << (self::DIRECTORY - 327)) | (1 << (self::DISABLE - 327)) | (1 << (self::DISCARD - 327)) | (1 << (self::DISK - 327)) | (1 << (self::DO - 327)) | (1 << (self::DUMPFILE - 327)) | (1 << (self::DUPLICATE - 327)) | (1 << (self::DYNAMIC - 327)) | (1 << (self::ENABLE - 327)) | (1 << (self::ENCRYPTION - 327)) | (1 << (self::END - 327)) | (1 << (self::ENDS - 327)) | (1 << (self::ENGINE - 327)) | (1 << (self::ENGINES - 327)) | (1 << (self::ERROR - 327)) | (1 << (self::ERRORS - 327)) | (1 << (self::ESCAPE - 327)) | (1 << (self::EVEN - 327)) | (1 << (self::EVENT - 327)) | (1 << (self::EVENTS - 327)) | (1 << (self::EVERY - 327)) | (1 << (self::EXCHANGE - 327)) | (1 << (self::EXCLUSIVE - 327)) | (1 << (self::EXPIRE - 327)) | (1 << (self::EXPORT - 327)) | (1 << (self::EXTENDED - 327)) | (1 << (self::EXTENT_SIZE - 327)) | (1 << (self::FAST - 327)) | (1 << (self::FAULTS - 327)) | (1 << (self::FIELDS - 327)) | (1 << (self::FILE_BLOCK_SIZE - 327)) | (1 << (self::FILTER - 327)) | (1 << (self::FIRST - 327)) | (1 << (self::FIXED - 327)) | (1 << (self::FLUSH - 327)) | (1 << (self::FOLLOWS - 327)) | (1 << (self::FOUND - 327)) | (1 << (self::FULL - 327)) | (1 << (self::FUNCTION - 327)) | (1 << (self::GENERAL - 327)) | (1 << (self::GLOBAL - 327)) | (1 << (self::GRANTS - 327)) | (1 << (self::GROUP_REPLICATION - 327)) | (1 << (self::HANDLER - 327)) | (1 << (self::HASH - 327)) | (1 << (self::HELP - 327)) | (1 << (self::HOST - 327)) | (1 << (self::HOSTS - 327)) | (1 << (self::IDENTIFIED - 327)) | (1 << (self::IGNORE_SERVER_IDS - 327)) | (1 << (self::IMPORT - 327)) | (1 << (self::INDEXES - 327)) | (1 << (self::INITIAL_SIZE - 327)) | (1 << (self::INPLACE - 327)) | (1 << (self::INSERT_METHOD - 327)) | (1 << (self::INSTALL - 327)) | (1 << (self::INSTANCE - 327)) | (1 << (self::INVISIBLE - 327)) | (1 << (self::INVOKER - 327)) | (1 << (self::IO - 327)) | (1 << (self::IO_THREAD - 327)))) !== 0) || (((($_la - 391)) & ~0x3f) === 0 && ((1 << ($_la - 391)) & ((1 << (self::IPC - 391)) | (1 << (self::ISOLATION - 391)) | (1 << (self::ISSUER - 391)) | (1 << (self::JSON - 391)) | (1 << (self::KEY_BLOCK_SIZE - 391)) | (1 << (self::LANGUAGE - 391)) | (1 << (self::LAST - 391)) | (1 << (self::LEAVES - 391)) | (1 << (self::LESS - 391)) | (1 << (self::LEVEL - 391)) | (1 << (self::LIST - 391)) | (1 << (self::LOCAL - 391)) | (1 << (self::LOGFILE - 391)) | (1 << (self::LOGS - 391)) | (1 << (self::MASTER - 391)) | (1 << (self::MASTER_AUTO_POSITION - 391)) | (1 << (self::MASTER_CONNECT_RETRY - 391)) | (1 << (self::MASTER_DELAY - 391)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 391)) | (1 << (self::MASTER_HOST - 391)) | (1 << (self::MASTER_LOG_FILE - 391)) | (1 << (self::MASTER_LOG_POS - 391)) | (1 << (self::MASTER_PASSWORD - 391)) | (1 << (self::MASTER_PORT - 391)) | (1 << (self::MASTER_RETRY_COUNT - 391)) | (1 << (self::MASTER_SSL - 391)) | (1 << (self::MASTER_SSL_CA - 391)) | (1 << (self::MASTER_SSL_CAPATH - 391)) | (1 << (self::MASTER_SSL_CERT - 391)) | (1 << (self::MASTER_SSL_CIPHER - 391)) | (1 << (self::MASTER_SSL_CRL - 391)) | (1 << (self::MASTER_SSL_CRLPATH - 391)) | (1 << (self::MASTER_SSL_KEY - 391)) | (1 << (self::MASTER_TLS_VERSION - 391)) | (1 << (self::MASTER_USER - 391)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 391)) | (1 << (self::MAX_QUERIES_PER_HOUR - 391)) | (1 << (self::MAX_ROWS - 391)) | (1 << (self::MAX_SIZE - 391)) | (1 << (self::MAX_UPDATES_PER_HOUR - 391)) | (1 << (self::MAX_USER_CONNECTIONS - 391)) | (1 << (self::MEDIUM - 391)) | (1 << (self::MERGE - 391)) | (1 << (self::MESSAGE_TEXT - 391)) | (1 << (self::MID - 391)) | (1 << (self::MIGRATE - 391)) | (1 << (self::MIN_ROWS - 391)) | (1 << (self::MODE - 391)) | (1 << (self::MODIFY - 391)) | (1 << (self::MUTEX - 391)) | (1 << (self::MYSQL - 391)) | (1 << (self::MYSQL_ERRNO - 391)) | (1 << (self::NAME - 391)) | (1 << (self::NAMES - 391)) | (1 << (self::NCHAR - 391)) | (1 << (self::NEVER - 391)) | (1 << (self::NEXT - 391)) | (1 << (self::NO - 391)) | (1 << (self::NODEGROUP - 391)) | (1 << (self::NONE - 391)) | (1 << (self::OFFLINE - 391)) | (1 << (self::OFFSET - 391)))) !== 0) || (((($_la - 455)) & ~0x3f) === 0 && ((1 << ($_la - 455)) & ((1 << (self::OJ - 455)) | (1 << (self::OLD_PASSWORD - 455)) | (1 << (self::ONE - 455)) | (1 << (self::ONLINE - 455)) | (1 << (self::ONLY - 455)) | (1 << (self::OPEN - 455)) | (1 << (self::OPTIMIZER_COSTS - 455)) | (1 << (self::OPTIONS - 455)) | (1 << (self::OWNER - 455)) | (1 << (self::PACK_KEYS - 455)) | (1 << (self::PAGE - 455)) | (1 << (self::PARSER - 455)) | (1 << (self::PARTIAL - 455)) | (1 << (self::PARTITIONING - 455)) | (1 << (self::PARTITIONS - 455)) | (1 << (self::PASSWORD - 455)) | (1 << (self::PHASE - 455)) | (1 << (self::PLUGIN - 455)) | (1 << (self::PLUGIN_DIR - 455)) | (1 << (self::PLUGINS - 455)) | (1 << (self::PORT - 455)) | (1 << (self::PRECEDES - 455)) | (1 << (self::PREPARE - 455)) | (1 << (self::PRESERVE - 455)) | (1 << (self::PREV - 455)) | (1 << (self::PROCESSLIST - 455)) | (1 << (self::PROFILE - 455)) | (1 << (self::PROFILES - 455)) | (1 << (self::PROXY - 455)) | (1 << (self::QUERY - 455)) | (1 << (self::QUICK - 455)) | (1 << (self::REBUILD - 455)) | (1 << (self::RECOVER - 455)) | (1 << (self::REDO_BUFFER_SIZE - 455)) | (1 << (self::REDUNDANT - 455)) | (1 << (self::RELAY - 455)) | (1 << (self::RELAY_LOG_FILE - 455)) | (1 << (self::RELAY_LOG_POS - 455)) | (1 << (self::RELAYLOG - 455)) | (1 << (self::REMOVE - 455)) | (1 << (self::REORGANIZE - 455)) | (1 << (self::REPAIR - 455)) | (1 << (self::REPLICATE_DO_DB - 455)) | (1 << (self::REPLICATE_DO_TABLE - 455)) | (1 << (self::REPLICATE_IGNORE_DB - 455)) | (1 << (self::REPLICATE_IGNORE_TABLE - 455)) | (1 << (self::REPLICATE_REWRITE_DB - 455)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 455)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 455)) | (1 << (self::REPLICATION - 455)) | (1 << (self::RESET - 455)) | (1 << (self::RESUME - 455)) | (1 << (self::RETURNED_SQLSTATE - 455)) | (1 << (self::RETURNS - 455)) | (1 << (self::ROLLBACK - 455)) | (1 << (self::ROLLUP - 455)) | (1 << (self::ROTATE - 455)) | (1 << (self::ROW - 455)) | (1 << (self::ROWS - 455)) | (1 << (self::ROW_FORMAT - 455)) | (1 << (self::SAVEPOINT - 455)) | (1 << (self::SCHEDULE - 455)) | (1 << (self::SECURITY - 455)))) !== 0) || (((($_la - 519)) & ~0x3f) === 0 && ((1 << ($_la - 519)) & ((1 << (self::SERVER - 519)) | (1 << (self::SESSION - 519)) | (1 << (self::SHARE - 519)) | (1 << (self::SHARED - 519)) | (1 << (self::SIGNED - 519)) | (1 << (self::SIMPLE - 519)) | (1 << (self::SLAVE - 519)) | (1 << (self::SLOW - 519)) | (1 << (self::SNAPSHOT - 519)) | (1 << (self::SOCKET - 519)) | (1 << (self::SOME - 519)) | (1 << (self::SONAME - 519)) | (1 << (self::SOUNDS - 519)) | (1 << (self::SOURCE - 519)) | (1 << (self::SQL_AFTER_GTIDS - 519)) | (1 << (self::SQL_AFTER_MTS_GAPS - 519)) | (1 << (self::SQL_BEFORE_GTIDS - 519)) | (1 << (self::SQL_BUFFER_RESULT - 519)) | (1 << (self::SQL_CACHE - 519)) | (1 << (self::SQL_NO_CACHE - 519)) | (1 << (self::SQL_THREAD - 519)) | (1 << (self::START - 519)) | (1 << (self::STARTS - 519)) | (1 << (self::STATS_AUTO_RECALC - 519)) | (1 << (self::STATS_PERSISTENT - 519)) | (1 << (self::STATS_SAMPLE_PAGES - 519)) | (1 << (self::STATUS - 519)) | (1 << (self::STOP - 519)) | (1 << (self::STORAGE - 519)) | (1 << (self::STRING - 519)) | (1 << (self::SUBCLASS_ORIGIN - 519)) | (1 << (self::SUBJECT - 519)) | (1 << (self::SUBPARTITION - 519)) | (1 << (self::SUBPARTITIONS - 519)) | (1 << (self::SUSPEND - 519)) | (1 << (self::SWAPS - 519)) | (1 << (self::SWITCHES - 519)) | (1 << (self::TABLE_NAME - 519)) | (1 << (self::TABLESPACE - 519)) | (1 << (self::TEMPORARY - 519)) | (1 << (self::TEMPTABLE - 519)) | (1 << (self::THAN - 519)) | (1 << (self::TRADITIONAL - 519)) | (1 << (self::TRANSACTION - 519)) | (1 << (self::TRIGGERS - 519)) | (1 << (self::TRUNCATE - 519)) | (1 << (self::UNDEFINED - 519)) | (1 << (self::UNDOFILE - 519)) | (1 << (self::UNDO_BUFFER_SIZE - 519)) | (1 << (self::UNINSTALL - 519)) | (1 << (self::UNKNOWN - 519)) | (1 << (self::UNTIL - 519)) | (1 << (self::UPGRADE - 519)) | (1 << (self::USER - 519)) | (1 << (self::USE_FRM - 519)) | (1 << (self::USER_RESOURCES - 519)) | (1 << (self::VALIDATION - 519)) | (1 << (self::VALUE - 519)) | (1 << (self::VARIABLES - 519)) | (1 << (self::VIEW - 519)) | (1 << (self::VISIBLE - 519)))) !== 0) || (((($_la - 583)) & ~0x3f) === 0 && ((1 << ($_la - 583)) & ((1 << (self::WAIT - 583)) | (1 << (self::WARNINGS - 583)) | (1 << (self::WITHOUT - 583)) | (1 << (self::WORK - 583)) | (1 << (self::WRAPPER - 583)) | (1 << (self::X509 - 583)) | (1 << (self::XA - 583)) | (1 << (self::XML - 583)) | (1 << (self::INTERNAL - 583)) | (1 << (self::QUARTER - 583)) | (1 << (self::MONTH - 583)) | (1 << (self::DAY - 583)) | (1 << (self::HOUR - 583)) | (1 << (self::MINUTE - 583)) | (1 << (self::WEEK - 583)) | (1 << (self::SECOND - 583)) | (1 << (self::MICROSECOND - 583)) | (1 << (self::TABLES - 583)) | (1 << (self::ROUTINE - 583)) | (1 << (self::EXECUTE - 583)) | (1 << (self::FILE - 583)) | (1 << (self::PROCESS - 583)) | (1 << (self::RELOAD - 583)) | (1 << (self::SHUTDOWN - 583)) | (1 << (self::SUPER - 583)) | (1 << (self::PRIVILEGES - 583)) | (1 << (self::SESSION_VARIABLES_ADMIN - 583)) | (1 << (self::ARMSCII8 - 583)) | (1 << (self::ASCII - 583)) | (1 << (self::BIG5 - 583)) | (1 << (self::CP1250 - 583)) | (1 << (self::CP1251 - 583)) | (1 << (self::CP1256 - 583)) | (1 << (self::CP1257 - 583)) | (1 << (self::CP850 - 583)))) !== 0) || (((($_la - 647)) & ~0x3f) === 0 && ((1 << ($_la - 647)) & ((1 << (self::CP852 - 647)) | (1 << (self::CP866 - 647)) | (1 << (self::CP932 - 647)) | (1 << (self::DEC8 - 647)) | (1 << (self::EUCJPMS - 647)) | (1 << (self::EUCKR - 647)) | (1 << (self::GB2312 - 647)) | (1 << (self::GBK - 647)) | (1 << (self::GEOSTD8 - 647)) | (1 << (self::GREEK - 647)) | (1 << (self::HEBREW - 647)) | (1 << (self::HP8 - 647)) | (1 << (self::KEYBCS2 - 647)) | (1 << (self::KOI8R - 647)) | (1 << (self::KOI8U - 647)) | (1 << (self::LATIN1 - 647)) | (1 << (self::LATIN2 - 647)) | (1 << (self::LATIN5 - 647)) | (1 << (self::LATIN7 - 647)) | (1 << (self::MACCE - 647)) | (1 << (self::MACROMAN - 647)) | (1 << (self::SJIS - 647)) | (1 << (self::SWE7 - 647)) | (1 << (self::TIS620 - 647)) | (1 << (self::UCS2 - 647)) | (1 << (self::UJIS - 647)) | (1 << (self::UTF16 - 647)) | (1 << (self::UTF16LE - 647)) | (1 << (self::UTF32 - 647)) | (1 << (self::UTF8 - 647)) | (1 << (self::UTF8MB3 - 647)) | (1 << (self::UTF8MB4 - 647)) | (1 << (self::ARCHIVE - 647)) | (1 << (self::BLACKHOLE - 647)) | (1 << (self::CSV - 647)) | (1 << (self::FEDERATED - 647)) | (1 << (self::INNODB - 647)) | (1 << (self::MEMORY - 647)) | (1 << (self::MRG_MYISAM - 647)) | (1 << (self::MYISAM - 647)) | (1 << (self::NDB - 647)) | (1 << (self::NDBCLUSTER - 647)) | (1 << (self::PERFORMANCE_SCHEMA - 647)) | (1 << (self::TOKUDB - 647)) | (1 << (self::REPEATABLE - 647)) | (1 << (self::COMMITTED - 647)) | (1 << (self::UNCOMMITTED - 647)) | (1 << (self::SERIALIZABLE - 647)) | (1 << (self::GEOMETRYCOLLECTION - 647)) | (1 << (self::LINESTRING - 647)) | (1 << (self::MULTILINESTRING - 647)) | (1 << (self::MULTIPOINT - 647)) | (1 << (self::MULTIPOLYGON - 647)) | (1 << (self::POINT - 647)) | (1 << (self::POLYGON - 647)) | (1 << (self::ABS - 647)) | (1 << (self::ACOS - 647)) | (1 << (self::ADDDATE - 647)) | (1 << (self::ADDTIME - 647)) | (1 << (self::AES_DECRYPT - 647)) | (1 << (self::AES_ENCRYPT - 647)) | (1 << (self::AREA - 647)))) !== 0) || (((($_la - 711)) & ~0x3f) === 0 && ((1 << ($_la - 711)) & ((1 << (self::ASBINARY - 711)) | (1 << (self::ASIN - 711)) | (1 << (self::ASTEXT - 711)) | (1 << (self::ASWKB - 711)) | (1 << (self::ASWKT - 711)) | (1 << (self::ASYMMETRIC_DECRYPT - 711)) | (1 << (self::ASYMMETRIC_DERIVE - 711)) | (1 << (self::ASYMMETRIC_ENCRYPT - 711)) | (1 << (self::ASYMMETRIC_SIGN - 711)) | (1 << (self::ASYMMETRIC_VERIFY - 711)) | (1 << (self::ATAN - 711)) | (1 << (self::ATAN2 - 711)) | (1 << (self::BENCHMARK - 711)) | (1 << (self::BIN - 711)) | (1 << (self::BIT_COUNT - 711)) | (1 << (self::BIT_LENGTH - 711)) | (1 << (self::BUFFER - 711)) | (1 << (self::CATALOG_NAME - 711)) | (1 << (self::CEIL - 711)) | (1 << (self::CEILING - 711)) | (1 << (self::CENTROID - 711)) | (1 << (self::CHARACTER_LENGTH - 711)) | (1 << (self::CHARSET - 711)) | (1 << (self::CHAR_LENGTH - 711)) | (1 << (self::COERCIBILITY - 711)) | (1 << (self::COLLATION - 711)) | (1 << (self::COMPRESS - 711)) | (1 << (self::CONCAT - 711)) | (1 << (self::CONCAT_WS - 711)) | (1 << (self::CONNECTION_ID - 711)) | (1 << (self::CONV - 711)) | (1 << (self::CONVERT_TZ - 711)) | (1 << (self::COS - 711)) | (1 << (self::COT - 711)) | (1 << (self::CRC32 - 711)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 711)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 711)) | (1 << (self::CREATE_DH_PARAMETERS - 711)) | (1 << (self::CREATE_DIGEST - 711)) | (1 << (self::CROSSES - 711)) | (1 << (self::DATEDIFF - 711)) | (1 << (self::DATE_FORMAT - 711)) | (1 << (self::DAYNAME - 711)) | (1 << (self::DAYOFMONTH - 711)) | (1 << (self::DAYOFWEEK - 711)) | (1 << (self::DAYOFYEAR - 711)) | (1 << (self::DECODE - 711)) | (1 << (self::DEGREES - 711)) | (1 << (self::DES_DECRYPT - 711)) | (1 << (self::DES_ENCRYPT - 711)) | (1 << (self::DIMENSION - 711)) | (1 << (self::DISJOINT - 711)) | (1 << (self::ELT - 711)) | (1 << (self::ENCODE - 711)) | (1 << (self::ENCRYPT - 711)) | (1 << (self::ENDPOINT - 711)) | (1 << (self::ENVELOPE - 711)) | (1 << (self::EQUALS - 711)) | (1 << (self::EXP - 711)) | (1 << (self::EXPORT_SET - 711)) | (1 << (self::EXTERIORRING - 711)) | (1 << (self::EXTRACTVALUE - 711)) | (1 << (self::FIELD - 711)) | (1 << (self::FIND_IN_SET - 711)))) !== 0) || (((($_la - 775)) & ~0x3f) === 0 && ((1 << ($_la - 775)) & ((1 << (self::FLOOR - 775)) | (1 << (self::FORMAT - 775)) | (1 << (self::FOUND_ROWS - 775)) | (1 << (self::FROM_BASE64 - 775)) | (1 << (self::FROM_DAYS - 775)) | (1 << (self::FROM_UNIXTIME - 775)) | (1 << (self::GEOMCOLLFROMTEXT - 775)) | (1 << (self::GEOMCOLLFROMWKB - 775)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 775)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 775)) | (1 << (self::GEOMETRYFROMTEXT - 775)) | (1 << (self::GEOMETRYFROMWKB - 775)) | (1 << (self::GEOMETRYN - 775)) | (1 << (self::GEOMETRYTYPE - 775)) | (1 << (self::GEOMFROMTEXT - 775)) | (1 << (self::GEOMFROMWKB - 775)) | (1 << (self::GET_FORMAT - 775)) | (1 << (self::GET_LOCK - 775)) | (1 << (self::GLENGTH - 775)) | (1 << (self::GREATEST - 775)) | (1 << (self::GTID_SUBSET - 775)) | (1 << (self::GTID_SUBTRACT - 775)) | (1 << (self::HEX - 775)) | (1 << (self::IFNULL - 775)) | (1 << (self::INET6_ATON - 775)) | (1 << (self::INET6_NTOA - 775)) | (1 << (self::INET_ATON - 775)) | (1 << (self::INET_NTOA - 775)) | (1 << (self::INSTR - 775)) | (1 << (self::INTERIORRINGN - 775)) | (1 << (self::INTERSECTS - 775)) | (1 << (self::ISCLOSED - 775)) | (1 << (self::ISEMPTY - 775)) | (1 << (self::ISNULL - 775)) | (1 << (self::ISSIMPLE - 775)) | (1 << (self::IS_FREE_LOCK - 775)) | (1 << (self::IS_IPV4 - 775)) | (1 << (self::IS_IPV4_COMPAT - 775)) | (1 << (self::IS_IPV4_MAPPED - 775)) | (1 << (self::IS_IPV6 - 775)) | (1 << (self::IS_USED_LOCK - 775)) | (1 << (self::LAST_INSERT_ID - 775)) | (1 << (self::LCASE - 775)) | (1 << (self::LEAST - 775)) | (1 << (self::LENGTH - 775)) | (1 << (self::LINEFROMTEXT - 775)) | (1 << (self::LINEFROMWKB - 775)) | (1 << (self::LINESTRINGFROMTEXT - 775)) | (1 << (self::LINESTRINGFROMWKB - 775)) | (1 << (self::LN - 775)) | (1 << (self::LOAD_FILE - 775)) | (1 << (self::LOCATE - 775)) | (1 << (self::LOG - 775)) | (1 << (self::LOG10 - 775)) | (1 << (self::LOG2 - 775)) | (1 << (self::LOWER - 775)) | (1 << (self::LPAD - 775)) | (1 << (self::LTRIM - 775)) | (1 << (self::MAKEDATE - 775)) | (1 << (self::MAKETIME - 775)) | (1 << (self::MAKE_SET - 775)) | (1 << (self::MASTER_POS_WAIT - 775)) | (1 << (self::MBRCONTAINS - 775)) | (1 << (self::MBRDISJOINT - 775)))) !== 0) || (((($_la - 839)) & ~0x3f) === 0 && ((1 << ($_la - 839)) & ((1 << (self::MBREQUAL - 839)) | (1 << (self::MBRINTERSECTS - 839)) | (1 << (self::MBROVERLAPS - 839)) | (1 << (self::MBRTOUCHES - 839)) | (1 << (self::MBRWITHIN - 839)) | (1 << (self::MD5 - 839)) | (1 << (self::MLINEFROMTEXT - 839)) | (1 << (self::MLINEFROMWKB - 839)) | (1 << (self::MONTHNAME - 839)) | (1 << (self::MPOINTFROMTEXT - 839)) | (1 << (self::MPOINTFROMWKB - 839)) | (1 << (self::MPOLYFROMTEXT - 839)) | (1 << (self::MPOLYFROMWKB - 839)) | (1 << (self::MULTILINESTRINGFROMTEXT - 839)) | (1 << (self::MULTILINESTRINGFROMWKB - 839)) | (1 << (self::MULTIPOINTFROMTEXT - 839)) | (1 << (self::MULTIPOINTFROMWKB - 839)) | (1 << (self::MULTIPOLYGONFROMTEXT - 839)) | (1 << (self::MULTIPOLYGONFROMWKB - 839)) | (1 << (self::NAME_CONST - 839)) | (1 << (self::NULLIF - 839)) | (1 << (self::NUMGEOMETRIES - 839)) | (1 << (self::NUMINTERIORRINGS - 839)) | (1 << (self::NUMPOINTS - 839)) | (1 << (self::OCT - 839)) | (1 << (self::OCTET_LENGTH - 839)) | (1 << (self::ORD - 839)) | (1 << (self::OVERLAPS - 839)) | (1 << (self::PERIOD_ADD - 839)) | (1 << (self::PERIOD_DIFF - 839)) | (1 << (self::PI - 839)) | (1 << (self::POINTFROMTEXT - 839)) | (1 << (self::POINTFROMWKB - 839)) | (1 << (self::POINTN - 839)) | (1 << (self::POLYFROMTEXT - 839)) | (1 << (self::POLYFROMWKB - 839)) | (1 << (self::POLYGONFROMTEXT - 839)) | (1 << (self::POLYGONFROMWKB - 839)) | (1 << (self::POW - 839)) | (1 << (self::POWER - 839)) | (1 << (self::QUOTE - 839)) | (1 << (self::RADIANS - 839)) | (1 << (self::RAND - 839)) | (1 << (self::RANDOM_BYTES - 839)) | (1 << (self::RELEASE_LOCK - 839)) | (1 << (self::REVERSE - 839)) | (1 << (self::ROUND - 839)) | (1 << (self::ROW_COUNT - 839)) | (1 << (self::RPAD - 839)) | (1 << (self::RTRIM - 839)) | (1 << (self::SEC_TO_TIME - 839)) | (1 << (self::SESSION_USER - 839)) | (1 << (self::SHA - 839)) | (1 << (self::SHA1 - 839)) | (1 << (self::SHA2 - 839)) | (1 << (self::SCHEMA_NAME - 839)) | (1 << (self::SIGN - 839)) | (1 << (self::SIN - 839)) | (1 << (self::SLEEP - 839)) | (1 << (self::SOUNDEX - 839)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 839)) | (1 << (self::SQRT - 839)) | (1 << (self::SRID - 839)) | (1 << (self::STARTPOINT - 839)))) !== 0) || (((($_la - 903)) & ~0x3f) === 0 && ((1 << ($_la - 903)) & ((1 << (self::STRCMP - 903)) | (1 << (self::STR_TO_DATE - 903)) | (1 << (self::ST_AREA - 903)) | (1 << (self::ST_ASBINARY - 903)) | (1 << (self::ST_ASTEXT - 903)) | (1 << (self::ST_ASWKB - 903)) | (1 << (self::ST_ASWKT - 903)) | (1 << (self::ST_BUFFER - 903)) | (1 << (self::ST_CENTROID - 903)) | (1 << (self::ST_CONTAINS - 903)) | (1 << (self::ST_CROSSES - 903)) | (1 << (self::ST_DIFFERENCE - 903)) | (1 << (self::ST_DIMENSION - 903)) | (1 << (self::ST_DISJOINT - 903)) | (1 << (self::ST_DISTANCE - 903)) | (1 << (self::ST_ENDPOINT - 903)) | (1 << (self::ST_ENVELOPE - 903)) | (1 << (self::ST_EQUALS - 903)) | (1 << (self::ST_EXTERIORRING - 903)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 903)) | (1 << (self::ST_GEOMCOLLFROMTXT - 903)) | (1 << (self::ST_GEOMCOLLFROMWKB - 903)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 903)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 903)) | (1 << (self::ST_GEOMETRYFROMTEXT - 903)) | (1 << (self::ST_GEOMETRYFROMWKB - 903)) | (1 << (self::ST_GEOMETRYN - 903)) | (1 << (self::ST_GEOMETRYTYPE - 903)) | (1 << (self::ST_GEOMFROMTEXT - 903)) | (1 << (self::ST_GEOMFROMWKB - 903)) | (1 << (self::ST_INTERIORRINGN - 903)) | (1 << (self::ST_INTERSECTION - 903)) | (1 << (self::ST_INTERSECTS - 903)) | (1 << (self::ST_ISCLOSED - 903)) | (1 << (self::ST_ISEMPTY - 903)) | (1 << (self::ST_ISSIMPLE - 903)) | (1 << (self::ST_LINEFROMTEXT - 903)) | (1 << (self::ST_LINEFROMWKB - 903)) | (1 << (self::ST_LINESTRINGFROMTEXT - 903)) | (1 << (self::ST_LINESTRINGFROMWKB - 903)) | (1 << (self::ST_NUMGEOMETRIES - 903)) | (1 << (self::ST_NUMINTERIORRING - 903)) | (1 << (self::ST_NUMINTERIORRINGS - 903)) | (1 << (self::ST_NUMPOINTS - 903)) | (1 << (self::ST_OVERLAPS - 903)) | (1 << (self::ST_POINTFROMTEXT - 903)) | (1 << (self::ST_POINTFROMWKB - 903)) | (1 << (self::ST_POINTN - 903)) | (1 << (self::ST_POLYFROMTEXT - 903)) | (1 << (self::ST_POLYFROMWKB - 903)) | (1 << (self::ST_POLYGONFROMTEXT - 903)) | (1 << (self::ST_POLYGONFROMWKB - 903)) | (1 << (self::ST_SRID - 903)) | (1 << (self::ST_STARTPOINT - 903)) | (1 << (self::ST_SYMDIFFERENCE - 903)) | (1 << (self::ST_TOUCHES - 903)) | (1 << (self::ST_UNION - 903)) | (1 << (self::ST_WITHIN - 903)) | (1 << (self::ST_X - 903)) | (1 << (self::ST_Y - 903)) | (1 << (self::SUBDATE - 903)) | (1 << (self::SUBSTRING_INDEX - 903)) | (1 << (self::SUBTIME - 903)) | (1 << (self::SYSTEM_USER - 903)))) !== 0) || (((($_la - 967)) & ~0x3f) === 0 && ((1 << ($_la - 967)) & ((1 << (self::TAN - 967)) | (1 << (self::TIMEDIFF - 967)) | (1 << (self::TIMESTAMPADD - 967)) | (1 << (self::TIMESTAMPDIFF - 967)) | (1 << (self::TIME_FORMAT - 967)) | (1 << (self::TIME_TO_SEC - 967)) | (1 << (self::TOUCHES - 967)) | (1 << (self::TO_BASE64 - 967)) | (1 << (self::TO_DAYS - 967)) | (1 << (self::TO_SECONDS - 967)) | (1 << (self::UCASE - 967)) | (1 << (self::UNCOMPRESS - 967)) | (1 << (self::UNCOMPRESSED_LENGTH - 967)) | (1 << (self::UNHEX - 967)) | (1 << (self::UNIX_TIMESTAMP - 967)) | (1 << (self::UPDATEXML - 967)) | (1 << (self::UPPER - 967)) | (1 << (self::UUID - 967)) | (1 << (self::UUID_SHORT - 967)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 967)) | (1 << (self::VERSION - 967)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 967)) | (1 << (self::WEEKDAY - 967)) | (1 << (self::WEEKOFYEAR - 967)) | (1 << (self::WEIGHT_STRING - 967)) | (1 << (self::WITHIN - 967)) | (1 << (self::YEARWEEK - 967)) | (1 << (self::Y_FUNCTION - 967)) | (1 << (self::X_FUNCTION - 967)) | (1 << (self::PLUS - 967)) | (1 << (self::MINUS - 967)) | (1 << (self::EXCLAMATION_SYMBOL - 967)) | (1 << (self::BIT_NOT_OP - 967)) | (1 << (self::LR_BRACKET - 967)) | (1 << (self::ZERO_DECIMAL - 967)) | (1 << (self::ONE_DECIMAL - 967)) | (1 << (self::TWO_DECIMAL - 967)))) !== 0) || (((($_la - 1034)) & ~0x3f) === 0 && ((1 << ($_la - 1034)) & ((1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (self::START_NATIONAL_STRING_LITERAL - 1034)) | (1 << (self::STRING_LITERAL - 1034)) | (1 << (self::DECIMAL_LITERAL - 1034)) | (1 << (self::HEXADECIMAL_LITERAL - 1034)) | (1 << (self::REAL_LITERAL - 1034)) | (1 << (self::NULL_SPEC_LITERAL - 1034)) | (1 << (self::BIT_STRING - 1034)) | (1 << (self::STRING_CHARSET_NAME - 1034)) | (1 << (self::ID - 1034)) | (1 << (self::REVERSE_QUOTE_ID - 1034)) | (1 << (self::LOCAL_ID - 1034)) | (1 << (self::GLOBAL_ID - 1034)))) !== 0)) {
		            			$this->setState(3053);
		            			$this->expressionsWithDefaults();
		            		}
		            		$this->setState(3056);
		            		$this->match(self::RR_BRACKET);
		            		$this->setState(3061);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function updatedElement() : Context\UpdatedElementContext
		{
		    $localContext = new Context\UpdatedElementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 184, self::RULE_updatedElement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3064);
		        $this->fullColumnName();
		        $this->setState(3065);
		        $this->match(self::EQUAL_SYMBOL);
		        $this->setState(3068);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CASE:
		            case self::CAST:
		            case self::CONVERT:
		            case self::CURRENT:
		            case self::CURRENT_USER:
		            case self::DATABASE:
		            case self::DIAGNOSTICS:
		            case self::EXISTS:
		            case self::FALSE:
		            case self::IF:
		            case self::INSERT:
		            case self::INTERVAL:
		            case self::LEFT:
		            case self::NOT:
		            case self::NULL_LITERAL:
		            case self::NUMBER:
		            case self::REPLACE:
		            case self::RIGHT:
		            case self::STACKED:
		            case self::TRUE:
		            case self::VALUES:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::CHAR:
		            case self::BINARY:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::AVG:
		            case self::BIT_AND:
		            case self::BIT_OR:
		            case self::BIT_XOR:
		            case self::COUNT:
		            case self::GROUP_CONCAT:
		            case self::MAX:
		            case self::MIN:
		            case self::STD:
		            case self::STDDEV:
		            case self::STDDEV_POP:
		            case self::STDDEV_SAMP:
		            case self::SUM:
		            case self::VAR_POP:
		            case self::VAR_SAMP:
		            case self::VARIANCE:
		            case self::CURRENT_DATE:
		            case self::CURRENT_TIME:
		            case self::CURRENT_TIMESTAMP:
		            case self::LOCALTIME:
		            case self::CURDATE:
		            case self::CURTIME:
		            case self::DATE_ADD:
		            case self::DATE_SUB:
		            case self::EXTRACT:
		            case self::LOCALTIMESTAMP:
		            case self::NOW:
		            case self::POSITION:
		            case self::SUBSTR:
		            case self::SUBSTRING:
		            case self::SYSDATE:
		            case self::TRIM:
		            case self::UTC_DATE:
		            case self::UTC_TIME:
		            case self::UTC_TIMESTAMP:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::TABLES:
		            case self::ROUTINE:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::PRIVILEGES:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::PLUS:
		            case self::MINUS:
		            case self::EXCLAMATION_SYMBOL:
		            case self::BIT_NOT_OP:
		            case self::LR_BRACKET:
		            case self::ZERO_DECIMAL:
		            case self::ONE_DECIMAL:
		            case self::TWO_DECIMAL:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::START_NATIONAL_STRING_LITERAL:
		            case self::STRING_LITERAL:
		            case self::DECIMAL_LITERAL:
		            case self::HEXADECIMAL_LITERAL:
		            case self::REAL_LITERAL:
		            case self::NULL_SPEC_LITERAL:
		            case self::BIT_STRING:
		            case self::STRING_CHARSET_NAME:
		            case self::ID:
		            case self::REVERSE_QUOTE_ID:
		            case self::LOCAL_ID:
		            case self::GLOBAL_ID:
		            	$this->setState(3066);
		            	$this->recursiveExpression(0);
		            	break;

		            case self::DEFAULT:
		            	$this->setState(3067);
		            	$this->match(self::DEFAULT);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function assignmentField() : Context\AssignmentFieldContext
		{
		    $localContext = new Context\AssignmentFieldContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 186, self::RULE_assignmentField);

		    try {
		        $this->setState(3072);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CURRENT:
		            case self::DATABASE:
		            case self::DIAGNOSTICS:
		            case self::LEFT:
		            case self::NUMBER:
		            case self::RIGHT:
		            case self::STACKED:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::COUNT:
		            case self::POSITION:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::TABLES:
		            case self::ROUTINE:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::PRIVILEGES:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::STRING_LITERAL:
		            case self::ID:
		            case self::REVERSE_QUOTE_ID:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3070);
		            	$this->uid();
		            	break;

		            case self::LOCAL_ID:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3071);
		            	$this->match(self::LOCAL_ID);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function lockClause() : Context\LockClauseContext
		{
		    $localContext = new Context\LockClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 188, self::RULE_lockClause);

		    try {
		        $this->setState(3080);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::FOR:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3074);
		            	$this->match(self::FOR);
		            	$this->setState(3075);
		            	$this->match(self::UPDATE);
		            	break;

		            case self::LOCK:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3076);
		            	$this->match(self::LOCK);
		            	$this->setState(3077);
		            	$this->match(self::IN);
		            	$this->setState(3078);
		            	$this->match(self::SHARE);
		            	$this->setState(3079);
		            	$this->match(self::MODE);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function singleDeleteStatement() : Context\SingleDeleteStatementContext
		{
		    $localContext = new Context\SingleDeleteStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 190, self::RULE_singleDeleteStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3082);
		        $this->match(self::DELETE);
		        $this->setState(3084);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOW_PRIORITY) {
		        	$this->setState(3083);
		        	$localContext->priority = $this->match(self::LOW_PRIORITY);
		        }
		        $this->setState(3087);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::QUICK) {
		        	$this->setState(3086);
		        	$this->match(self::QUICK);
		        }
		        $this->setState(3090);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(3089);
		        	$this->match(self::IGNORE);
		        }
		        $this->setState(3092);
		        $this->match(self::FROM);
		        $this->setState(3093);
		        $this->tableName();
		        $this->setState(3099);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITION) {
		        	$this->setState(3094);
		        	$this->match(self::PARTITION);
		        	$this->setState(3095);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(3096);
		        	$this->uidList();
		        	$this->setState(3097);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(3103);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WHERE) {
		        	$this->setState(3101);
		        	$this->match(self::WHERE);
		        	$this->setState(3102);
		        	$this->recursiveExpression(0);
		        }
		        $this->setState(3106);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ORDER) {
		        	$this->setState(3105);
		        	$this->orderByClause();
		        }
		        $this->setState(3110);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LIMIT) {
		        	$this->setState(3108);
		        	$this->match(self::LIMIT);
		        	$this->setState(3109);
		        	$this->limitClauseAtom();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function multipleDeleteStatement() : Context\MultipleDeleteStatementContext
		{
		    $localContext = new Context\MultipleDeleteStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 192, self::RULE_multipleDeleteStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3112);
		        $this->match(self::DELETE);
		        $this->setState(3114);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOW_PRIORITY) {
		        	$this->setState(3113);
		        	$localContext->priority = $this->match(self::LOW_PRIORITY);
		        }
		        $this->setState(3117);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 429, $this->ctx)) {
		            case 1:
		        	    $this->setState(3116);
		        	    $this->match(self::QUICK);
		        	break;
		        }
		        $this->setState(3120);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(3119);
		        	$this->match(self::IGNORE);
		        }
		        $this->setState(3161);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CURRENT:
		            case self::DATABASE:
		            case self::DIAGNOSTICS:
		            case self::LEFT:
		            case self::NUMBER:
		            case self::RIGHT:
		            case self::STACKED:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::COUNT:
		            case self::POSITION:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::TABLES:
		            case self::ROUTINE:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::PRIVILEGES:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::STRING_LITERAL:
		            case self::ID:
		            case self::REVERSE_QUOTE_ID:
		            	$this->setState(3122);
		            	$this->tableName();
		            	$this->setState(3125);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::DOT) {
		            		$this->setState(3123);
		            		$this->match(self::DOT);
		            		$this->setState(3124);
		            		$this->match(self::STAR);
		            	}
		            	$this->setState(3135);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(3127);
		            		$this->match(self::COMMA);
		            		$this->setState(3128);
		            		$this->tableName();
		            		$this->setState(3131);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);

		            		if ($_la === self::DOT) {
		            			$this->setState(3129);
		            			$this->match(self::DOT);
		            			$this->setState(3130);
		            			$this->match(self::STAR);
		            		}
		            		$this->setState(3137);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	$this->setState(3138);
		            	$this->match(self::FROM);
		            	$this->setState(3139);
		            	$this->tableSources();
		            	break;

		            case self::FROM:
		            	$this->setState(3141);
		            	$this->match(self::FROM);
		            	$this->setState(3142);
		            	$this->tableName();
		            	$this->setState(3145);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::DOT) {
		            		$this->setState(3143);
		            		$this->match(self::DOT);
		            		$this->setState(3144);
		            		$this->match(self::STAR);
		            	}
		            	$this->setState(3155);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(3147);
		            		$this->match(self::COMMA);
		            		$this->setState(3148);
		            		$this->tableName();
		            		$this->setState(3151);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);

		            		if ($_la === self::DOT) {
		            			$this->setState(3149);
		            			$this->match(self::DOT);
		            			$this->setState(3150);
		            			$this->match(self::STAR);
		            		}
		            		$this->setState(3157);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	$this->setState(3158);
		            	$this->match(self::USING);
		            	$this->setState(3159);
		            	$this->tableSources();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		        $this->setState(3165);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WHERE) {
		        	$this->setState(3163);
		        	$this->match(self::WHERE);
		        	$this->setState(3164);
		        	$this->recursiveExpression(0);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function handlerOpenStatement() : Context\HandlerOpenStatementContext
		{
		    $localContext = new Context\HandlerOpenStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 194, self::RULE_handlerOpenStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3167);
		        $this->match(self::HANDLER);
		        $this->setState(3168);
		        $this->tableName();
		        $this->setState(3169);
		        $this->match(self::OPEN);
		        $this->setState(3174);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 440, $this->ctx)) {
		            case 1:
		        	    $this->setState(3171);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::AS) {
		        	    	$this->setState(3170);
		        	    	$this->match(self::AS);
		        	    }
		        	    $this->setState(3173);
		        	    $this->uid();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function handlerReadIndexStatement() : Context\HandlerReadIndexStatementContext
		{
		    $localContext = new Context\HandlerReadIndexStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 196, self::RULE_handlerReadIndexStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3176);
		        $this->match(self::HANDLER);
		        $this->setState(3177);
		        $this->tableName();
		        $this->setState(3178);
		        $this->match(self::READ);
		        $this->setState(3179);
		        $localContext->index = $this->uid();
		        $this->setState(3186);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::EQUAL_SYMBOL:
		            case self::GREATER_SYMBOL:
		            case self::LESS_SYMBOL:
		            case self::EXCLAMATION_SYMBOL:
		            	$this->setState(3180);
		            	$this->comparisonOperator();
		            	$this->setState(3181);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(3182);
		            	$this->constants();
		            	$this->setState(3183);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::FIRST:
		            case self::LAST:
		            case self::NEXT:
		            case self::PREV:
		            	$this->setState(3185);

		            	$localContext->moveOrder = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::FIRST || $_la === self::LAST || $_la === self::NEXT || $_la === self::PREV)) {
		            		    $localContext->moveOrder = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		        $this->setState(3190);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WHERE) {
		        	$this->setState(3188);
		        	$this->match(self::WHERE);
		        	$this->setState(3189);
		        	$this->recursiveExpression(0);
		        }
		        $this->setState(3194);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LIMIT) {
		        	$this->setState(3192);
		        	$this->match(self::LIMIT);
		        	$this->setState(3193);
		        	$this->limitClauseAtom();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function handlerReadStatement() : Context\HandlerReadStatementContext
		{
		    $localContext = new Context\HandlerReadStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 198, self::RULE_handlerReadStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3196);
		        $this->match(self::HANDLER);
		        $this->setState(3197);
		        $this->tableName();
		        $this->setState(3198);
		        $this->match(self::READ);
		        $this->setState(3199);

		        $localContext->moveOrder = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::FIRST || $_la === self::NEXT)) {
		        	    $localContext->moveOrder = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(3202);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WHERE) {
		        	$this->setState(3200);
		        	$this->match(self::WHERE);
		        	$this->setState(3201);
		        	$this->recursiveExpression(0);
		        }
		        $this->setState(3206);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LIMIT) {
		        	$this->setState(3204);
		        	$this->match(self::LIMIT);
		        	$this->setState(3205);
		        	$this->limitClauseAtom();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function handlerCloseStatement() : Context\HandlerCloseStatementContext
		{
		    $localContext = new Context\HandlerCloseStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 200, self::RULE_handlerCloseStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3208);
		        $this->match(self::HANDLER);
		        $this->setState(3209);
		        $this->tableName();
		        $this->setState(3210);
		        $this->match(self::CLOSE);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function singleUpdateStatement() : Context\SingleUpdateStatementContext
		{
		    $localContext = new Context\SingleUpdateStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 202, self::RULE_singleUpdateStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3212);
		        $this->match(self::UPDATE);
		        $this->setState(3214);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOW_PRIORITY) {
		        	$this->setState(3213);
		        	$localContext->priority = $this->match(self::LOW_PRIORITY);
		        }
		        $this->setState(3217);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(3216);
		        	$this->match(self::IGNORE);
		        }
		        $this->setState(3219);
		        $this->tableName();
		        $this->setState(3224);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::AS) | (1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	$this->setState(3221);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::AS) {
		        		$this->setState(3220);
		        		$this->match(self::AS);
		        	}
		        	$this->setState(3223);
		        	$this->uid();
		        }
		        $this->setState(3226);
		        $this->match(self::SET);
		        $this->setState(3227);
		        $this->updatedElement();
		        $this->setState(3232);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(3228);
		        	$this->match(self::COMMA);
		        	$this->setState(3229);
		        	$this->updatedElement();
		        	$this->setState(3234);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(3237);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WHERE) {
		        	$this->setState(3235);
		        	$this->match(self::WHERE);
		        	$this->setState(3236);
		        	$this->recursiveExpressionForUpdate(0);
		        }
		        $this->setState(3240);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ORDER) {
		        	$this->setState(3239);
		        	$this->orderByClause();
		        }
		        $this->setState(3243);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LIMIT) {
		        	$this->setState(3242);
		        	$this->limitClause();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function multipleUpdateStatement() : Context\MultipleUpdateStatementContext
		{
		    $localContext = new Context\MultipleUpdateStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 204, self::RULE_multipleUpdateStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3245);
		        $this->match(self::UPDATE);
		        $this->setState(3247);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LOW_PRIORITY) {
		        	$this->setState(3246);
		        	$localContext->priority = $this->match(self::LOW_PRIORITY);
		        }
		        $this->setState(3250);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(3249);
		        	$this->match(self::IGNORE);
		        }
		        $this->setState(3252);
		        $this->tableSources();
		        $this->setState(3253);
		        $this->match(self::SET);
		        $this->setState(3254);
		        $this->updatedElement();
		        $this->setState(3259);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(3255);
		        	$this->match(self::COMMA);
		        	$this->setState(3256);
		        	$this->updatedElement();
		        	$this->setState(3261);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(3264);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WHERE) {
		        	$this->setState(3262);
		        	$this->match(self::WHERE);
		        	$this->setState(3263);
		        	$this->recursiveExpression(0);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function orderByClause() : Context\OrderByClauseContext
		{
		    $localContext = new Context\OrderByClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 206, self::RULE_orderByClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3266);
		        $this->match(self::ORDER);
		        $this->setState(3267);
		        $this->match(self::BY);
		        $this->setState(3268);
		        $this->orderByExpression();
		        $this->setState(3273);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(3269);
		        	$this->match(self::COMMA);
		        	$this->setState(3270);
		        	$this->orderByExpression();
		        	$this->setState(3275);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function orderByExpression() : Context\OrderByExpressionContext
		{
		    $localContext = new Context\OrderByExpressionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 208, self::RULE_orderByExpression);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3276);
		        $this->recursiveExpression(0);
		        $this->setState(3278);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 459, $this->ctx)) {
		            case 1:
		        	    $this->setState(3277);

		        	    $localContext->order = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::ASC || $_la === self::DESC)) {
		        	    	    $localContext->order = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableSources() : Context\TableSourcesContext
		{
		    $localContext = new Context\TableSourcesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 210, self::RULE_tableSources);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3280);
		        $this->tableSource();
		        $this->setState(3285);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(3281);
		        	$this->match(self::COMMA);
		        	$this->setState(3282);
		        	$this->tableSource();
		        	$this->setState(3287);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableSource() : Context\TableSourceContext
		{
		    $localContext = new Context\TableSourceContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 212, self::RULE_tableSource);

		    try {
		        $this->setState(3305);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 463, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\TableSourceBaseContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3288);
		        	    $this->tableSourceItem();
		        	    $this->setState(3292);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 461, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(3289);
		        	    		$this->joinPart(); 
		        	    	}

		        	    	$this->setState(3294);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 461, $this->ctx);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\TableSourceNestedContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3295);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(3296);
		        	    $this->tableSourceItem();
		        	    $this->setState(3300);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ((((($_la - 31)) & ~0x3f) === 0 && ((1 << ($_la - 31)) & ((1 << (self::CROSS - 31)) | (1 << (self::INNER - 31)) | (1 << (self::JOIN - 31)) | (1 << (self::LEFT - 31)))) !== 0) || (((($_la - 101)) & ~0x3f) === 0 && ((1 << ($_la - 101)) & ((1 << (self::NATURAL - 101)) | (1 << (self::RIGHT - 101)) | (1 << (self::STRAIGHT_JOIN - 101)))) !== 0)) {
		        	    	$this->setState(3297);
		        	    	$this->joinPart();
		        	    	$this->setState(3302);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(3303);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableSourceItem() : Context\TableSourceItemContext
		{
		    $localContext = new Context\TableSourceItemContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 214, self::RULE_tableSourceItem);

		    try {
		        $this->setState(3347);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 471, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\AtomTableItemContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3307);
		        	    $this->tableName();
		        	    $this->setState(3313);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::PARTITION) {
		        	    	$this->setState(3308);
		        	    	$this->match(self::PARTITION);
		        	    	$this->setState(3309);
		        	    	$this->match(self::LR_BRACKET);
		        	    	$this->setState(3310);
		        	    	$this->uidList();
		        	    	$this->setState(3311);
		        	    	$this->match(self::RR_BRACKET);
		        	    }
		        	    $this->setState(3319);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 466, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3316);
		        	    	    $this->errorHandler->sync($this);
		        	    	    $_la = $this->input->LA(1);

		        	    	    if ($_la === self::AS) {
		        	    	    	$this->setState(3315);
		        	    	    	$this->match(self::AS);
		        	    	    }
		        	    	    $this->setState(3318);
		        	    	    $localContext->alias = $this->uid();
		        	    	break;
		        	    }
		        	    $this->setState(3329);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 468, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3321);
		        	    	    $this->indexHint();
		        	    	    $this->setState(3326);
		        	    	    $this->errorHandler->sync($this);

		        	    	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 467, $this->ctx);

		        	    	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	    	if ($alt === 1) {
		        	    	    		$this->setState(3322);
		        	    	    		$this->match(self::COMMA);
		        	    	    		$this->setState(3323);
		        	    	    		$this->indexHint(); 
		        	    	    	}

		        	    	    	$this->setState(3328);
		        	    	    	$this->errorHandler->sync($this);

		        	    	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 467, $this->ctx);
		        	    	    }
		        	    	break;
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\SubqueryTableItemContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3336);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 469, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(3331);
		        	    	    $this->selectStatement();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(3332);
		        	    	    $this->match(self::LR_BRACKET);
		        	    	    $this->setState(3333);
		        	    	    $localContext->parenthesisSubquery = $this->selectStatement();
		        	    	    $this->setState(3334);
		        	    	    $this->match(self::RR_BRACKET);
		        	    	break;
		        	    }
		        	    $this->setState(3339);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::AS) {
		        	    	$this->setState(3338);
		        	    	$this->match(self::AS);
		        	    }
		        	    $this->setState(3341);
		        	    $localContext->alias = $this->uid();
		        	break;

		        	case 3:
		        	    $localContext = new Context\TableSourcesItemContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(3343);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(3344);
		        	    $this->tableSources();
		        	    $this->setState(3345);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function indexHint() : Context\IndexHintContext
		{
		    $localContext = new Context\IndexHintContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 216, self::RULE_indexHint);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3349);

		        $localContext->indexHintAction = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::FORCE || $_la === self::IGNORE || $_la === self::USE)) {
		        	    $localContext->indexHintAction = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(3350);

		        $localContext->keyFormat = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    $localContext->keyFormat = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(3353);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FOR) {
		        	$this->setState(3351);
		        	$this->match(self::FOR);
		        	$this->setState(3352);
		        	$this->indexHintType();
		        }
		        $this->setState(3355);
		        $this->match(self::LR_BRACKET);
		        $this->setState(3356);
		        $this->uidList();
		        $this->setState(3357);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function indexHintType() : Context\IndexHintTypeContext
		{
		    $localContext = new Context\IndexHintTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 218, self::RULE_indexHintType);

		    try {
		        $this->setState(3364);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::JOIN:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3359);
		            	$this->match(self::JOIN);
		            	break;

		            case self::ORDER:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3360);
		            	$this->match(self::ORDER);
		            	$this->setState(3361);
		            	$this->match(self::BY);
		            	break;

		            case self::GROUP:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(3362);
		            	$this->match(self::GROUP);
		            	$this->setState(3363);
		            	$this->match(self::BY);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function joinPart() : Context\JoinPartContext
		{
		    $localContext = new Context\JoinPartContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 220, self::RULE_joinPart);

		    try {
		        $this->setState(3410);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CROSS:
		            case self::INNER:
		            case self::JOIN:
		            	$localContext = new Context\InnerJoinContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3367);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::CROSS || $_la === self::INNER) {
		            		$this->setState(3366);

		            		$_la = $this->input->LA(1);

		            		if (!($_la === self::CROSS || $_la === self::INNER)) {
		            		$this->errorHandler->recoverInline($this);
		            		} else {
		            			if ($this->input->LA(1) === Token::EOF) {
		            			    $this->matchedEOF = true;
		            		    }

		            			$this->errorHandler->reportMatch($this);
		            			$this->consume();
		            		}
		            	}
		            	$this->setState(3369);
		            	$this->match(self::JOIN);
		            	$this->setState(3370);
		            	$this->tableSourceItem();
		            	$this->setState(3378);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 475, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(3371);
		            		    $this->match(self::ON);
		            		    $this->setState(3372);
		            		    $this->recursiveExpression(0);
		            		break;

		            	    case 2:
		            		    $this->setState(3373);
		            		    $this->match(self::USING);
		            		    $this->setState(3374);
		            		    $this->match(self::LR_BRACKET);
		            		    $this->setState(3375);
		            		    $this->uidList();
		            		    $this->setState(3376);
		            		    $this->match(self::RR_BRACKET);
		            		break;
		            	}
		            	break;

		            case self::STRAIGHT_JOIN:
		            	$localContext = new Context\StraightJoinContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3380);
		            	$this->match(self::STRAIGHT_JOIN);
		            	$this->setState(3381);
		            	$this->tableSourceItem();
		            	$this->setState(3384);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 476, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(3382);
		            		    $this->match(self::ON);
		            		    $this->setState(3383);
		            		    $this->recursiveExpression(0);
		            		break;
		            	}
		            	break;

		            case self::LEFT:
		            case self::RIGHT:
		            	$localContext = new Context\OuterJoinContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(3386);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::LEFT || $_la === self::RIGHT)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(3388);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::OUTER) {
		            		$this->setState(3387);
		            		$this->match(self::OUTER);
		            	}
		            	$this->setState(3390);
		            	$this->match(self::JOIN);
		            	$this->setState(3391);
		            	$this->tableSourceItem();
		            	$this->setState(3399);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::ON:
		            	    	$this->setState(3392);
		            	    	$this->match(self::ON);
		            	    	$this->setState(3393);
		            	    	$this->recursiveExpression(0);
		            	    	break;

		            	    case self::USING:
		            	    	$this->setState(3394);
		            	    	$this->match(self::USING);
		            	    	$this->setState(3395);
		            	    	$this->match(self::LR_BRACKET);
		            	    	$this->setState(3396);
		            	    	$this->uidList();
		            	    	$this->setState(3397);
		            	    	$this->match(self::RR_BRACKET);
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	break;

		            case self::NATURAL:
		            	$localContext = new Context\NaturalJoinContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(3401);
		            	$this->match(self::NATURAL);
		            	$this->setState(3406);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::LEFT || $_la === self::RIGHT) {
		            		$this->setState(3402);

		            		$_la = $this->input->LA(1);

		            		if (!($_la === self::LEFT || $_la === self::RIGHT)) {
		            		$this->errorHandler->recoverInline($this);
		            		} else {
		            			if ($this->input->LA(1) === Token::EOF) {
		            			    $this->matchedEOF = true;
		            		    }

		            			$this->errorHandler->reportMatch($this);
		            			$this->consume();
		            		}
		            		$this->setState(3404);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);

		            		if ($_la === self::OUTER) {
		            			$this->setState(3403);
		            			$this->match(self::OUTER);
		            		}
		            	}
		            	$this->setState(3408);
		            	$this->match(self::JOIN);
		            	$this->setState(3409);
		            	$this->tableSourceItem();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function queryExpression() : Context\QueryExpressionContext
		{
		    $localContext = new Context\QueryExpressionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 222, self::RULE_queryExpression);

		    try {
		        $this->setState(3420);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 482, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3412);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(3413);
		        	    $this->querySpecification();
		        	    $this->setState(3414);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3416);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(3417);
		        	    $this->queryExpression();
		        	    $this->setState(3418);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function queryExpressionNointo() : Context\QueryExpressionNointoContext
		{
		    $localContext = new Context\QueryExpressionNointoContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 224, self::RULE_queryExpressionNointo);

		    try {
		        $this->setState(3430);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 483, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3422);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(3423);
		        	    $this->querySpecificationNointo();
		        	    $this->setState(3424);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3426);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(3427);
		        	    $this->queryExpressionNointo();
		        	    $this->setState(3428);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function querySpecification() : Context\QuerySpecificationContext
		{
		    $localContext = new Context\QuerySpecificationContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 226, self::RULE_querySpecification);

		    try {
		        $this->setState(3472);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 494, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3432);
		        	    $this->match(self::SELECT);
		        	    $this->setState(3436);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 484, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(3433);
		        	    		$this->selectSpec(); 
		        	    	}

		        	    	$this->setState(3438);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 484, $this->ctx);
		        	    }
		        	    $this->setState(3439);
		        	    $this->selectElements();
		        	    $this->setState(3441);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::INTO) {
		        	    	$this->setState(3440);
		        	    	$this->selectIntoExpression();
		        	    }
		        	    $this->setState(3444);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FROM) {
		        	    	$this->setState(3443);
		        	    	$this->fromClause();
		        	    }
		        	    $this->setState(3447);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 487, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3446);
		        	    	    $this->orderByClause();
		        	    	break;
		        	    }
		        	    $this->setState(3450);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 488, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3449);
		        	    	    $this->limitClause();
		        	    	break;
		        	    }
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3452);
		        	    $this->match(self::SELECT);
		        	    $this->setState(3456);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 489, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(3453);
		        	    		$this->selectSpec(); 
		        	    	}

		        	    	$this->setState(3458);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 489, $this->ctx);
		        	    }
		        	    $this->setState(3459);
		        	    $this->selectElements();
		        	    $this->setState(3461);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FROM) {
		        	    	$this->setState(3460);
		        	    	$this->fromClause();
		        	    }
		        	    $this->setState(3464);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 491, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3463);
		        	    	    $this->orderByClause();
		        	    	break;
		        	    }
		        	    $this->setState(3467);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 492, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3466);
		        	    	    $this->limitClause();
		        	    	break;
		        	    }
		        	    $this->setState(3470);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::INTO) {
		        	    	$this->setState(3469);
		        	    	$this->selectIntoExpression();
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function querySpecificationNointo() : Context\QuerySpecificationNointoContext
		{
		    $localContext = new Context\QuerySpecificationNointoContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 228, self::RULE_querySpecificationNointo);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3474);
		        $this->match(self::SELECT);
		        $this->setState(3478);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 495, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(3475);
		        		$this->selectSpec(); 
		        	}

		        	$this->setState(3480);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 495, $this->ctx);
		        }
		        $this->setState(3481);
		        $this->selectElements();
		        $this->setState(3483);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FROM) {
		        	$this->setState(3482);
		        	$this->fromClause();
		        }
		        $this->setState(3486);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 497, $this->ctx)) {
		            case 1:
		        	    $this->setState(3485);
		        	    $this->orderByClause();
		        	break;
		        }
		        $this->setState(3489);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 498, $this->ctx)) {
		            case 1:
		        	    $this->setState(3488);
		        	    $this->limitClause();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function unionParenthesis() : Context\UnionParenthesisContext
		{
		    $localContext = new Context\UnionParenthesisContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 230, self::RULE_unionParenthesis);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3491);
		        $this->match(self::UNION);
		        $this->setState(3493);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ALL || $_la === self::DISTINCT) {
		        	$this->setState(3492);

		        	$localContext->unionType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::ALL || $_la === self::DISTINCT)) {
		        		    $localContext->unionType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(3495);
		        $this->queryExpressionNointo();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function unionStatement() : Context\UnionStatementContext
		{
		    $localContext = new Context\UnionStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 232, self::RULE_unionStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3497);
		        $this->match(self::UNION);
		        $this->setState(3499);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ALL || $_la === self::DISTINCT) {
		        	$this->setState(3498);

		        	$localContext->unionType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::ALL || $_la === self::DISTINCT)) {
		        		    $localContext->unionType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(3503);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SELECT:
		            	$this->setState(3501);
		            	$this->querySpecificationNointo();
		            	break;

		            case self::LR_BRACKET:
		            	$this->setState(3502);
		            	$this->queryExpressionNointo();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function selectSpec() : Context\SelectSpecContext
		{
		    $localContext = new Context\SelectSpecContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 234, self::RULE_selectSpec);

		    try {
		        $this->setState(3513);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ALL:
		            case self::DISTINCT:
		            case self::DISTINCTROW:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3505);

		            	$_la = $this->input->LA(1);

		            	if (!(((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::ALL) | (1 << self::DISTINCT) | (1 << self::DISTINCTROW))) !== 0))) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		            case self::HIGH_PRIORITY:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3506);
		            	$this->match(self::HIGH_PRIORITY);
		            	break;

		            case self::STRAIGHT_JOIN:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(3507);
		            	$this->match(self::STRAIGHT_JOIN);
		            	break;

		            case self::SQL_SMALL_RESULT:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(3508);
		            	$this->match(self::SQL_SMALL_RESULT);
		            	break;

		            case self::SQL_BIG_RESULT:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(3509);
		            	$this->match(self::SQL_BIG_RESULT);
		            	break;

		            case self::SQL_BUFFER_RESULT:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(3510);
		            	$this->match(self::SQL_BUFFER_RESULT);
		            	break;

		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(3511);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::SQL_CACHE || $_la === self::SQL_NO_CACHE)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		            case self::SQL_CALC_FOUND_ROWS:
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(3512);
		            	$this->match(self::SQL_CALC_FOUND_ROWS);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function selectElements() : Context\SelectElementsContext
		{
		    $localContext = new Context\SelectElementsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 236, self::RULE_selectElements);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3517);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::STAR:
		            	$this->setState(3515);
		            	$localContext->star = $this->match(self::STAR);
		            	break;

		            case self::CASE:
		            case self::CAST:
		            case self::CONVERT:
		            case self::CURRENT:
		            case self::CURRENT_USER:
		            case self::DATABASE:
		            case self::DIAGNOSTICS:
		            case self::EXISTS:
		            case self::FALSE:
		            case self::IF:
		            case self::INSERT:
		            case self::INTERVAL:
		            case self::LEFT:
		            case self::NOT:
		            case self::NULL_LITERAL:
		            case self::NUMBER:
		            case self::REPLACE:
		            case self::RIGHT:
		            case self::STACKED:
		            case self::TRUE:
		            case self::VALUES:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::CHAR:
		            case self::BINARY:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::AVG:
		            case self::BIT_AND:
		            case self::BIT_OR:
		            case self::BIT_XOR:
		            case self::COUNT:
		            case self::GROUP_CONCAT:
		            case self::MAX:
		            case self::MIN:
		            case self::STD:
		            case self::STDDEV:
		            case self::STDDEV_POP:
		            case self::STDDEV_SAMP:
		            case self::SUM:
		            case self::VAR_POP:
		            case self::VAR_SAMP:
		            case self::VARIANCE:
		            case self::CURRENT_DATE:
		            case self::CURRENT_TIME:
		            case self::CURRENT_TIMESTAMP:
		            case self::LOCALTIME:
		            case self::CURDATE:
		            case self::CURTIME:
		            case self::DATE_ADD:
		            case self::DATE_SUB:
		            case self::EXTRACT:
		            case self::LOCALTIMESTAMP:
		            case self::NOW:
		            case self::POSITION:
		            case self::SUBSTR:
		            case self::SUBSTRING:
		            case self::SYSDATE:
		            case self::TRIM:
		            case self::UTC_DATE:
		            case self::UTC_TIME:
		            case self::UTC_TIMESTAMP:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::TABLES:
		            case self::ROUTINE:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::PRIVILEGES:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::PLUS:
		            case self::MINUS:
		            case self::EXCLAMATION_SYMBOL:
		            case self::BIT_NOT_OP:
		            case self::LR_BRACKET:
		            case self::ZERO_DECIMAL:
		            case self::ONE_DECIMAL:
		            case self::TWO_DECIMAL:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::START_NATIONAL_STRING_LITERAL:
		            case self::STRING_LITERAL:
		            case self::DECIMAL_LITERAL:
		            case self::HEXADECIMAL_LITERAL:
		            case self::REAL_LITERAL:
		            case self::NULL_SPEC_LITERAL:
		            case self::BIT_STRING:
		            case self::STRING_CHARSET_NAME:
		            case self::ID:
		            case self::REVERSE_QUOTE_ID:
		            case self::LOCAL_ID:
		            case self::GLOBAL_ID:
		            	$this->setState(3516);
		            	$this->selectElement();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		        $this->setState(3523);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(3519);
		        	$this->match(self::COMMA);
		        	$this->setState(3520);
		        	$this->selectElement();
		        	$this->setState(3525);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function selectElement() : Context\SelectElementContext
		{
		    $localContext = new Context\SelectElementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 238, self::RULE_selectElement);

		    try {
		        $this->setState(3555);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 512, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SelectStarElementContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3526);
		        	    $this->fullId();
		        	    $this->setState(3527);
		        	    $this->match(self::DOT);
		        	    $this->setState(3528);
		        	    $this->match(self::STAR);
		        	break;

		        	case 2:
		        	    $localContext = new Context\SelectColumnElementContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3530);
		        	    $this->fullColumnName();
		        	    $this->setState(3535);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 506, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3532);
		        	    	    $this->errorHandler->sync($this);
		        	    	    $_la = $this->input->LA(1);

		        	    	    if ($_la === self::AS) {
		        	    	    	$this->setState(3531);
		        	    	    	$this->match(self::AS);
		        	    	    }
		        	    	    $this->setState(3534);
		        	    	    $this->uid();
		        	    	break;
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\SelectFunctionElementContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(3537);
		        	    $this->functionCall();
		        	    $this->setState(3542);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 508, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3539);
		        	    	    $this->errorHandler->sync($this);
		        	    	    $_la = $this->input->LA(1);

		        	    	    if ($_la === self::AS) {
		        	    	    	$this->setState(3538);
		        	    	    	$this->match(self::AS);
		        	    	    }
		        	    	    $this->setState(3541);
		        	    	    $this->uid();
		        	    	break;
		        	    }
		        	break;

		        	case 4:
		        	    $localContext = new Context\SelectExpressionElementContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(3546);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 509, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3544);
		        	    	    $this->match(self::LOCAL_ID);
		        	    	    $this->setState(3545);
		        	    	    $this->match(self::VAR_ASSIGN);
		        	    	break;
		        	    }
		        	    $this->setState(3548);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(3553);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 511, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3550);
		        	    	    $this->errorHandler->sync($this);
		        	    	    $_la = $this->input->LA(1);

		        	    	    if ($_la === self::AS) {
		        	    	    	$this->setState(3549);
		        	    	    	$this->match(self::AS);
		        	    	    }
		        	    	    $this->setState(3552);
		        	    	    $this->uid();
		        	    	break;
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function selectIntoExpression() : Context\SelectIntoExpressionContext
		{
		    $localContext = new Context\SelectIntoExpressionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 240, self::RULE_selectIntoExpression);

		    try {
		        $this->setState(3593);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 519, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SelectIntoVariablesContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3557);
		        	    $this->match(self::INTO);
		        	    $this->setState(3558);
		        	    $this->assignmentField();
		        	    $this->setState(3563);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(3559);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(3560);
		        	    	$this->assignmentField();
		        	    	$this->setState(3565);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\SelectIntoDumpFileContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3566);
		        	    $this->match(self::INTO);
		        	    $this->setState(3567);
		        	    $this->match(self::DUMPFILE);
		        	    $this->setState(3568);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 3:
		        	    $localContext = new Context\SelectIntoTextFileContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(3569);
		        	    $this->match(self::INTO);
		        	    $this->setState(3570);
		        	    $this->match(self::OUTFILE);
		        	    $this->setState(3571);
		        	    $localContext->filename = $this->match(self::STRING_LITERAL);
		        	    $this->setState(3575);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::CHARACTER) {
		        	    	$this->setState(3572);
		        	    	$this->match(self::CHARACTER);
		        	    	$this->setState(3573);
		        	    	$this->match(self::SET);
		        	    	$this->setState(3574);
		        	    	$localContext->charset = $this->charsetName();
		        	    }
		        	    $this->setState(3583);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 516, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3577);

		        	    	    $localContext->fieldsFormat = $this->input->LT(1);
		        	    	    $_la = $this->input->LA(1);

		        	    	    if (!($_la === self::COLUMNS || $_la === self::FIELDS)) {
		        	    	    	    $localContext->fieldsFormat = $this->errorHandler->recoverInline($this);
		        	    	    } else {
		        	    	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    	    $this->matchedEOF = true;
		        	    	        }

		        	    	    	$this->errorHandler->reportMatch($this);
		        	    	    	$this->consume();
		        	    	    }
		        	    	    $this->setState(3579); 
		        	    	    $this->errorHandler->sync($this);

		        	    	    $_la = $this->input->LA(1);
		        	    	    do {
		        	    	    	$this->setState(3578);
		        	    	    	$this->selectFieldsInto();
		        	    	    	$this->setState(3581); 
		        	    	    	$this->errorHandler->sync($this);
		        	    	    	$_la = $this->input->LA(1);
		        	    	    } while ($_la === self::ENCLOSED || $_la === self::ESCAPED || $_la === self::OPTIONALLY || $_la === self::TERMINATED);
		        	    	break;
		        	    }
		        	    $this->setState(3591);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LINES) {
		        	    	$this->setState(3585);
		        	    	$this->match(self::LINES);
		        	    	$this->setState(3587); 
		        	    	$this->errorHandler->sync($this);

		        	    	$_la = $this->input->LA(1);
		        	    	do {
		        	    		$this->setState(3586);
		        	    		$this->selectLinesInto();
		        	    		$this->setState(3589); 
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);
		        	    	} while ($_la === self::STARTING || $_la === self::TERMINATED);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function selectFieldsInto() : Context\SelectFieldsIntoContext
		{
		    $localContext = new Context\SelectFieldsIntoContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 242, self::RULE_selectFieldsInto);

		    try {
		        $this->setState(3607);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::TERMINATED:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3595);
		            	$this->match(self::TERMINATED);
		            	$this->setState(3596);
		            	$this->match(self::BY);
		            	$this->setState(3597);
		            	$localContext->terminationField = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::ENCLOSED:
		            case self::OPTIONALLY:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3599);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::OPTIONALLY) {
		            		$this->setState(3598);
		            		$this->match(self::OPTIONALLY);
		            	}
		            	$this->setState(3601);
		            	$this->match(self::ENCLOSED);
		            	$this->setState(3602);
		            	$this->match(self::BY);
		            	$this->setState(3603);
		            	$localContext->enclosion = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::ESCAPED:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(3604);
		            	$this->match(self::ESCAPED);
		            	$this->setState(3605);
		            	$this->match(self::BY);
		            	$this->setState(3606);
		            	$localContext->escaping = $this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function selectLinesInto() : Context\SelectLinesIntoContext
		{
		    $localContext = new Context\SelectLinesIntoContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 244, self::RULE_selectLinesInto);

		    try {
		        $this->setState(3615);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::STARTING:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3609);
		            	$this->match(self::STARTING);
		            	$this->setState(3610);
		            	$this->match(self::BY);
		            	$this->setState(3611);
		            	$localContext->starting = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::TERMINATED:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3612);
		            	$this->match(self::TERMINATED);
		            	$this->setState(3613);
		            	$this->match(self::BY);
		            	$this->setState(3614);
		            	$localContext->terminationLine = $this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function fromClause() : Context\FromClauseContext
		{
		    $localContext = new Context\FromClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 246, self::RULE_fromClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3617);
		        $this->match(self::FROM);
		        $this->setState(3618);
		        $this->tableSources();
		        $this->setState(3621);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WHERE) {
		        	$this->setState(3619);
		        	$this->match(self::WHERE);
		        	$this->setState(3620);
		        	$localContext->whereExpr = $this->recursiveExpression(0);
		        }
		        $this->setState(3637);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::GROUP) {
		        	$this->setState(3623);
		        	$this->match(self::GROUP);
		        	$this->setState(3624);
		        	$this->match(self::BY);
		        	$this->setState(3625);
		        	$this->groupByItem();
		        	$this->setState(3630);
		        	$this->errorHandler->sync($this);

		        	$_la = $this->input->LA(1);
		        	while ($_la === self::COMMA) {
		        		$this->setState(3626);
		        		$this->match(self::COMMA);
		        		$this->setState(3627);
		        		$this->groupByItem();
		        		$this->setState(3632);
		        		$this->errorHandler->sync($this);
		        		$_la = $this->input->LA(1);
		        	}
		        	$this->setState(3635);
		        	$this->errorHandler->sync($this);

		        	switch ($this->getInterpreter()->adaptivePredict($this->input, 525, $this->ctx)) {
		        	    case 1:
		        		    $this->setState(3633);
		        		    $this->match(self::WITH);
		        		    $this->setState(3634);
		        		    $this->match(self::ROLLUP);
		        		break;
		        	}
		        }
		        $this->setState(3641);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::HAVING) {
		        	$this->setState(3639);
		        	$this->match(self::HAVING);
		        	$this->setState(3640);
		        	$localContext->havingExpr = $this->recursiveExpression(0);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function groupByItem() : Context\GroupByItemContext
		{
		    $localContext = new Context\GroupByItemContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 248, self::RULE_groupByItem);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3643);
		        $this->recursiveExpression(0);
		        $this->setState(3645);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 528, $this->ctx)) {
		            case 1:
		        	    $this->setState(3644);

		        	    $localContext->order = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::ASC || $_la === self::DESC)) {
		        	    	    $localContext->order = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function limitClause() : Context\LimitClauseContext
		{
		    $localContext = new Context\LimitClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 250, self::RULE_limitClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3647);
		        $this->match(self::LIMIT);
		        $this->setState(3658);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 530, $this->ctx)) {
		        	case 1:
		        	    $this->setState(3651);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 529, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(3648);
		        	    	    $localContext->offset = $this->limitClauseAtom();
		        	    	    $this->setState(3649);
		        	    	    $this->match(self::COMMA);
		        	    	break;
		        	    }
		        	    $this->setState(3653);
		        	    $localContext->limit = $this->limitClauseAtom();
		        	break;

		        	case 2:
		        	    $this->setState(3654);
		        	    $localContext->limit = $this->limitClauseAtom();
		        	    $this->setState(3655);
		        	    $this->match(self::OFFSET);
		        	    $this->setState(3656);
		        	    $localContext->offset = $this->limitClauseAtom();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function limitClauseAtom() : Context\LimitClauseAtomContext
		{
		    $localContext = new Context\LimitClauseAtomContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 252, self::RULE_limitClauseAtom);

		    try {
		        $this->setState(3662);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ZERO_DECIMAL:
		            case self::ONE_DECIMAL:
		            case self::TWO_DECIMAL:
		            case self::DECIMAL_LITERAL:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3660);
		            	$this->decimalLiteral();
		            	break;

		            case self::LOCAL_ID:
		            case self::GLOBAL_ID:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3661);
		            	$this->mysqlVariable();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function startTransaction() : Context\StartTransactionContext
		{
		    $localContext = new Context\StartTransactionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 254, self::RULE_startTransaction);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3664);
		        $this->match(self::START);
		        $this->setState(3665);
		        $this->match(self::TRANSACTION);
		        $this->setState(3674);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::READ || $_la === self::WITH) {
		        	$this->setState(3666);
		        	$this->transactionMode();
		        	$this->setState(3671);
		        	$this->errorHandler->sync($this);

		        	$_la = $this->input->LA(1);
		        	while ($_la === self::COMMA) {
		        		$this->setState(3667);
		        		$this->match(self::COMMA);
		        		$this->setState(3668);
		        		$this->transactionMode();
		        		$this->setState(3673);
		        		$this->errorHandler->sync($this);
		        		$_la = $this->input->LA(1);
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function beginWork() : Context\BeginWorkContext
		{
		    $localContext = new Context\BeginWorkContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 256, self::RULE_beginWork);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3676);
		        $this->match(self::BEGIN);
		        $this->setState(3678);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WORK) {
		        	$this->setState(3677);
		        	$this->match(self::WORK);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function commitWork() : Context\CommitWorkContext
		{
		    $localContext = new Context\CommitWorkContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 258, self::RULE_commitWork);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3680);
		        $this->match(self::COMMIT);
		        $this->setState(3682);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WORK) {
		        	$this->setState(3681);
		        	$this->match(self::WORK);
		        }
		        $this->setState(3689);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::AND) {
		        	$this->setState(3684);
		        	$this->match(self::AND);
		        	$this->setState(3686);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::NO) {
		        		$this->setState(3685);
		        		$localContext->nochain = $this->match(self::NO);
		        	}
		        	$this->setState(3688);
		        	$this->match(self::CHAIN);
		        }
		        $this->setState(3695);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 539, $this->ctx)) {
		            case 1:
		        	    $this->setState(3692);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::NO) {
		        	    	$this->setState(3691);
		        	    	$localContext->norelease = $this->match(self::NO);
		        	    }
		        	    $this->setState(3694);
		        	    $this->match(self::RELEASE);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function rollbackWork() : Context\RollbackWorkContext
		{
		    $localContext = new Context\RollbackWorkContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 260, self::RULE_rollbackWork);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3697);
		        $this->match(self::ROLLBACK);
		        $this->setState(3699);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WORK) {
		        	$this->setState(3698);
		        	$this->match(self::WORK);
		        }
		        $this->setState(3706);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::AND) {
		        	$this->setState(3701);
		        	$this->match(self::AND);
		        	$this->setState(3703);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::NO) {
		        		$this->setState(3702);
		        		$localContext->nochain = $this->match(self::NO);
		        	}
		        	$this->setState(3705);
		        	$this->match(self::CHAIN);
		        }
		        $this->setState(3712);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 544, $this->ctx)) {
		            case 1:
		        	    $this->setState(3709);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::NO) {
		        	    	$this->setState(3708);
		        	    	$localContext->norelease = $this->match(self::NO);
		        	    }
		        	    $this->setState(3711);
		        	    $this->match(self::RELEASE);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function savepointStatement() : Context\SavepointStatementContext
		{
		    $localContext = new Context\SavepointStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 262, self::RULE_savepointStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3714);
		        $this->match(self::SAVEPOINT);
		        $this->setState(3715);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function rollbackStatement() : Context\RollbackStatementContext
		{
		    $localContext = new Context\RollbackStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 264, self::RULE_rollbackStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3717);
		        $this->match(self::ROLLBACK);
		        $this->setState(3719);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WORK) {
		        	$this->setState(3718);
		        	$this->match(self::WORK);
		        }
		        $this->setState(3721);
		        $this->match(self::TO);
		        $this->setState(3723);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 546, $this->ctx)) {
		            case 1:
		        	    $this->setState(3722);
		        	    $this->match(self::SAVEPOINT);
		        	break;
		        }
		        $this->setState(3725);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function releaseStatement() : Context\ReleaseStatementContext
		{
		    $localContext = new Context\ReleaseStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 266, self::RULE_releaseStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3727);
		        $this->match(self::RELEASE);
		        $this->setState(3728);
		        $this->match(self::SAVEPOINT);
		        $this->setState(3729);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function lockTables() : Context\LockTablesContext
		{
		    $localContext = new Context\LockTablesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 268, self::RULE_lockTables);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3731);
		        $this->match(self::LOCK);
		        $this->setState(3732);
		        $this->match(self::TABLES);
		        $this->setState(3733);
		        $this->lockTableElement();
		        $this->setState(3738);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(3734);
		        	$this->match(self::COMMA);
		        	$this->setState(3735);
		        	$this->lockTableElement();
		        	$this->setState(3740);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function unlockTables() : Context\UnlockTablesContext
		{
		    $localContext = new Context\UnlockTablesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 270, self::RULE_unlockTables);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3741);
		        $this->match(self::UNLOCK);
		        $this->setState(3742);
		        $this->match(self::TABLES);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function setAutocommitStatement() : Context\SetAutocommitStatementContext
		{
		    $localContext = new Context\SetAutocommitStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 272, self::RULE_setAutocommitStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3744);
		        $this->match(self::SET);
		        $this->setState(3745);
		        $this->match(self::AUTOCOMMIT);
		        $this->setState(3746);
		        $this->match(self::EQUAL_SYMBOL);
		        $this->setState(3747);

		        $localContext->autocommitValue = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		        	    $localContext->autocommitValue = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function setTransactionStatement() : Context\SetTransactionStatementContext
		{
		    $localContext = new Context\SetTransactionStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 274, self::RULE_setTransactionStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3749);
		        $this->match(self::SET);
		        $this->setState(3751);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::GLOBAL || $_la === self::SESSION) {
		        	$this->setState(3750);

		        	$localContext->transactionContext = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::GLOBAL || $_la === self::SESSION)) {
		        		    $localContext->transactionContext = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(3753);
		        $this->match(self::TRANSACTION);
		        $this->setState(3754);
		        $this->transactionOption();
		        $this->setState(3759);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(3755);
		        	$this->match(self::COMMA);
		        	$this->setState(3756);
		        	$this->transactionOption();
		        	$this->setState(3761);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function transactionMode() : Context\TransactionModeContext
		{
		    $localContext = new Context\TransactionModeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 276, self::RULE_transactionMode);

		    try {
		        $this->setState(3769);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 550, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3762);
		        	    $this->match(self::WITH);
		        	    $this->setState(3763);
		        	    $this->match(self::CONSISTENT);
		        	    $this->setState(3764);
		        	    $this->match(self::SNAPSHOT);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3765);
		        	    $this->match(self::READ);
		        	    $this->setState(3766);
		        	    $this->match(self::WRITE);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(3767);
		        	    $this->match(self::READ);
		        	    $this->setState(3768);
		        	    $this->match(self::ONLY);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function lockTableElement() : Context\LockTableElementContext
		{
		    $localContext = new Context\LockTableElementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 278, self::RULE_lockTableElement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3771);
		        $this->tableName();
		        $this->setState(3776);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::AS) | (1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	$this->setState(3773);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::AS) {
		        		$this->setState(3772);
		        		$this->match(self::AS);
		        	}
		        	$this->setState(3775);
		        	$this->uid();
		        }
		        $this->setState(3778);
		        $this->lockAction();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function lockAction() : Context\LockActionContext
		{
		    $localContext = new Context\LockActionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 280, self::RULE_lockAction);

		    try {
		        $this->setState(3788);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::READ:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3780);
		            	$this->match(self::READ);
		            	$this->setState(3782);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::LOCAL) {
		            		$this->setState(3781);
		            		$this->match(self::LOCAL);
		            	}
		            	break;

		            case self::LOW_PRIORITY:
		            case self::WRITE:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3785);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::LOW_PRIORITY) {
		            		$this->setState(3784);
		            		$this->match(self::LOW_PRIORITY);
		            	}
		            	$this->setState(3787);
		            	$this->match(self::WRITE);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function transactionOption() : Context\TransactionOptionContext
		{
		    $localContext = new Context\TransactionOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 282, self::RULE_transactionOption);

		    try {
		        $this->setState(3797);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 556, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3790);
		        	    $this->match(self::ISOLATION);
		        	    $this->setState(3791);
		        	    $this->match(self::LEVEL);
		        	    $this->setState(3792);
		        	    $this->transactionLevel();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3793);
		        	    $this->match(self::READ);
		        	    $this->setState(3794);
		        	    $this->match(self::WRITE);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(3795);
		        	    $this->match(self::READ);
		        	    $this->setState(3796);
		        	    $this->match(self::ONLY);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function transactionLevel() : Context\TransactionLevelContext
		{
		    $localContext = new Context\TransactionLevelContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 284, self::RULE_transactionLevel);

		    try {
		        $this->setState(3806);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 557, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(3799);
		        	    $this->match(self::REPEATABLE);
		        	    $this->setState(3800);
		        	    $this->match(self::READ);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(3801);
		        	    $this->match(self::READ);
		        	    $this->setState(3802);
		        	    $this->match(self::COMMITTED);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(3803);
		        	    $this->match(self::READ);
		        	    $this->setState(3804);
		        	    $this->match(self::UNCOMMITTED);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(3805);
		        	    $this->match(self::SERIALIZABLE);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function changeMaster() : Context\ChangeMasterContext
		{
		    $localContext = new Context\ChangeMasterContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 286, self::RULE_changeMaster);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3808);
		        $this->match(self::CHANGE);
		        $this->setState(3809);
		        $this->match(self::MASTER);
		        $this->setState(3810);
		        $this->match(self::TO);
		        $this->setState(3811);
		        $this->masterOption();
		        $this->setState(3816);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(3812);
		        	$this->match(self::COMMA);
		        	$this->setState(3813);
		        	$this->masterOption();
		        	$this->setState(3818);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(3820);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FOR) {
		        	$this->setState(3819);
		        	$this->channelOption();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function changeReplicationFilter() : Context\ChangeReplicationFilterContext
		{
		    $localContext = new Context\ChangeReplicationFilterContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 288, self::RULE_changeReplicationFilter);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3822);
		        $this->match(self::CHANGE);
		        $this->setState(3823);
		        $this->match(self::REPLICATION);
		        $this->setState(3824);
		        $this->match(self::FILTER);
		        $this->setState(3825);
		        $this->replicationFilter();
		        $this->setState(3830);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(3826);
		        	$this->match(self::COMMA);
		        	$this->setState(3827);
		        	$this->replicationFilter();
		        	$this->setState(3832);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function purgeBinaryLogs() : Context\PurgeBinaryLogsContext
		{
		    $localContext = new Context\PurgeBinaryLogsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 290, self::RULE_purgeBinaryLogs);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3833);
		        $this->match(self::PURGE);
		        $this->setState(3834);

		        $localContext->purgeFormat = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::BINARY || $_la === self::MASTER)) {
		        	    $localContext->purgeFormat = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(3835);
		        $this->match(self::LOGS);
		        $this->setState(3840);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::TO:
		            	$this->setState(3836);
		            	$this->match(self::TO);
		            	$this->setState(3837);
		            	$localContext->fileName = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::BEFORE:
		            	$this->setState(3838);
		            	$this->match(self::BEFORE);
		            	$this->setState(3839);
		            	$localContext->timeValue = $this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function resetMaster() : Context\ResetMasterContext
		{
		    $localContext = new Context\ResetMasterContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 292, self::RULE_resetMaster);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3842);
		        $this->match(self::RESET);
		        $this->setState(3843);
		        $this->match(self::MASTER);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function resetSlave() : Context\ResetSlaveContext
		{
		    $localContext = new Context\ResetSlaveContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 294, self::RULE_resetSlave);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3845);
		        $this->match(self::RESET);
		        $this->setState(3846);
		        $this->match(self::SLAVE);
		        $this->setState(3848);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ALL) {
		        	$this->setState(3847);
		        	$this->match(self::ALL);
		        }
		        $this->setState(3851);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FOR) {
		        	$this->setState(3850);
		        	$this->channelOption();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function startSlave() : Context\StartSlaveContext
		{
		    $localContext = new Context\StartSlaveContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 296, self::RULE_startSlave);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3853);
		        $this->match(self::START);
		        $this->setState(3854);
		        $this->match(self::SLAVE);
		        $this->setState(3863);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IO_THREAD || $_la === self::SQL_THREAD) {
		        	$this->setState(3855);
		        	$this->threadType();
		        	$this->setState(3860);
		        	$this->errorHandler->sync($this);

		        	$_la = $this->input->LA(1);
		        	while ($_la === self::COMMA) {
		        		$this->setState(3856);
		        		$this->match(self::COMMA);
		        		$this->setState(3857);
		        		$this->threadType();
		        		$this->setState(3862);
		        		$this->errorHandler->sync($this);
		        		$_la = $this->input->LA(1);
		        	}
		        }
		        $this->setState(3867);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::UNTIL) {
		        	$this->setState(3865);
		        	$this->match(self::UNTIL);
		        	$this->setState(3866);
		        	$this->untilOption();
		        }
		        $this->setState(3872);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::DEFAULT_AUTH || $_la === self::PASSWORD || $_la === self::PLUGIN_DIR || $_la === self::USER) {
		        	$this->setState(3869);
		        	$this->connectionOption();
		        	$this->setState(3874);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(3876);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FOR) {
		        	$this->setState(3875);
		        	$this->channelOption();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function stopSlave() : Context\StopSlaveContext
		{
		    $localContext = new Context\StopSlaveContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 298, self::RULE_stopSlave);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3878);
		        $this->match(self::STOP);
		        $this->setState(3879);
		        $this->match(self::SLAVE);
		        $this->setState(3888);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IO_THREAD || $_la === self::SQL_THREAD) {
		        	$this->setState(3880);
		        	$this->threadType();
		        	$this->setState(3885);
		        	$this->errorHandler->sync($this);

		        	$_la = $this->input->LA(1);
		        	while ($_la === self::COMMA) {
		        		$this->setState(3881);
		        		$this->match(self::COMMA);
		        		$this->setState(3882);
		        		$this->threadType();
		        		$this->setState(3887);
		        		$this->errorHandler->sync($this);
		        		$_la = $this->input->LA(1);
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function startGroupReplication() : Context\StartGroupReplicationContext
		{
		    $localContext = new Context\StartGroupReplicationContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 300, self::RULE_startGroupReplication);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3890);
		        $this->match(self::START);
		        $this->setState(3891);
		        $this->match(self::GROUP_REPLICATION);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function stopGroupReplication() : Context\StopGroupReplicationContext
		{
		    $localContext = new Context\StopGroupReplicationContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 302, self::RULE_stopGroupReplication);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3893);
		        $this->match(self::STOP);
		        $this->setState(3894);
		        $this->match(self::GROUP_REPLICATION);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function masterOption() : Context\MasterOptionContext
		{
		    $localContext = new Context\MasterOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 304, self::RULE_masterOption);

		    try {
		        $this->setState(3925);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::MASTER_BIND:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::RELAY_LOG_FILE:
		            	$localContext = new Context\MasterStringOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3896);
		            	$this->stringMasterOption();
		            	$this->setState(3897);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(3898);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::RELAY_LOG_POS:
		            	$localContext = new Context\MasterDecimalOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3900);
		            	$this->decimalMasterOption();
		            	$this->setState(3901);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(3902);
		            	$this->decimalLiteral();
		            	break;

		            case self::MASTER_SSL_VERIFY_SERVER_CERT:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_SSL:
		            	$localContext = new Context\MasterBoolOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(3904);
		            	$this->boolMasterOption();
		            	$this->setState(3905);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(3906);

		            	$localContext->boolVal = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
		            		    $localContext->boolVal = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		            case self::MASTER_HEARTBEAT_PERIOD:
		            	$localContext = new Context\MasterRealOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(3908);
		            	$this->match(self::MASTER_HEARTBEAT_PERIOD);
		            	$this->setState(3909);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(3910);
		            	$this->match(self::REAL_LITERAL);
		            	break;

		            case self::IGNORE_SERVER_IDS:
		            	$localContext = new Context\MasterUidListOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(3911);
		            	$this->match(self::IGNORE_SERVER_IDS);
		            	$this->setState(3912);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(3913);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(3922);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		            		$this->setState(3914);
		            		$this->uid();
		            		$this->setState(3919);
		            		$this->errorHandler->sync($this);

		            		$_la = $this->input->LA(1);
		            		while ($_la === self::COMMA) {
		            			$this->setState(3915);
		            			$this->match(self::COMMA);
		            			$this->setState(3916);
		            			$this->uid();
		            			$this->setState(3921);
		            			$this->errorHandler->sync($this);
		            			$_la = $this->input->LA(1);
		            		}
		            	}
		            	$this->setState(3924);
		            	$this->match(self::RR_BRACKET);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function stringMasterOption() : Context\StringMasterOptionContext
		{
		    $localContext = new Context\StringMasterOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 306, self::RULE_stringMasterOption);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3927);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::MASTER_BIND || (((($_la - 410)) & ~0x3f) === 0 && ((1 << ($_la - 410)) & ((1 << (self::MASTER_HOST - 410)) | (1 << (self::MASTER_LOG_FILE - 410)) | (1 << (self::MASTER_PASSWORD - 410)) | (1 << (self::MASTER_SSL_CA - 410)) | (1 << (self::MASTER_SSL_CAPATH - 410)) | (1 << (self::MASTER_SSL_CERT - 410)) | (1 << (self::MASTER_SSL_CIPHER - 410)) | (1 << (self::MASTER_SSL_CRL - 410)) | (1 << (self::MASTER_SSL_CRLPATH - 410)) | (1 << (self::MASTER_SSL_KEY - 410)) | (1 << (self::MASTER_TLS_VERSION - 410)) | (1 << (self::MASTER_USER - 410)))) !== 0) || $_la === self::RELAY_LOG_FILE)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function decimalMasterOption() : Context\DecimalMasterOptionContext
		{
		    $localContext = new Context\DecimalMasterOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 308, self::RULE_decimalMasterOption);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3929);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 407)) & ~0x3f) === 0 && ((1 << ($_la - 407)) & ((1 << (self::MASTER_CONNECT_RETRY - 407)) | (1 << (self::MASTER_DELAY - 407)) | (1 << (self::MASTER_LOG_POS - 407)) | (1 << (self::MASTER_PORT - 407)) | (1 << (self::MASTER_RETRY_COUNT - 407)))) !== 0) || $_la === self::RELAY_LOG_POS)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function boolMasterOption() : Context\BoolMasterOptionContext
		{
		    $localContext = new Context\BoolMasterOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 310, self::RULE_boolMasterOption);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3931);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::MASTER_SSL_VERIFY_SERVER_CERT || $_la === self::MASTER_AUTO_POSITION || $_la === self::MASTER_SSL)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function channelOption() : Context\ChannelOptionContext
		{
		    $localContext = new Context\ChannelOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 312, self::RULE_channelOption);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3933);
		        $this->match(self::FOR);
		        $this->setState(3934);
		        $this->match(self::CHANNEL);
		        $this->setState(3935);
		        $this->match(self::STRING_LITERAL);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function replicationFilter() : Context\ReplicationFilterContext
		{
		    $localContext = new Context\ReplicationFilterContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 314, self::RULE_replicationFilter);

		    try {
		        $this->setState(3986);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::REPLICATE_DO_DB:
		            	$localContext = new Context\DoDbReplicationContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3937);
		            	$this->match(self::REPLICATE_DO_DB);
		            	$this->setState(3938);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(3939);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(3940);
		            	$this->uidList();
		            	$this->setState(3941);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::REPLICATE_IGNORE_DB:
		            	$localContext = new Context\IgnoreDbReplicationContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3943);
		            	$this->match(self::REPLICATE_IGNORE_DB);
		            	$this->setState(3944);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(3945);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(3946);
		            	$this->uidList();
		            	$this->setState(3947);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::REPLICATE_DO_TABLE:
		            	$localContext = new Context\DoTableReplicationContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(3949);
		            	$this->match(self::REPLICATE_DO_TABLE);
		            	$this->setState(3950);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(3951);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(3952);
		            	$this->tables();
		            	$this->setState(3953);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::REPLICATE_IGNORE_TABLE:
		            	$localContext = new Context\IgnoreTableReplicationContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(3955);
		            	$this->match(self::REPLICATE_IGNORE_TABLE);
		            	$this->setState(3956);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(3957);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(3958);
		            	$this->tables();
		            	$this->setState(3959);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::REPLICATE_WILD_DO_TABLE:
		            	$localContext = new Context\WildDoTableReplicationContext($localContext);
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(3961);
		            	$this->match(self::REPLICATE_WILD_DO_TABLE);
		            	$this->setState(3962);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(3963);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(3964);
		            	$this->simpleStrings();
		            	$this->setState(3965);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            	$localContext = new Context\WildIgnoreTableReplicationContext($localContext);
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(3967);
		            	$this->match(self::REPLICATE_WILD_IGNORE_TABLE);
		            	$this->setState(3968);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(3969);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(3970);
		            	$this->simpleStrings();
		            	$this->setState(3971);
		            	$this->match(self::RR_BRACKET);
		            	break;

		            case self::REPLICATE_REWRITE_DB:
		            	$localContext = new Context\RewriteDbReplicationContext($localContext);
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(3973);
		            	$this->match(self::REPLICATE_REWRITE_DB);
		            	$this->setState(3974);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(3975);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(3976);
		            	$this->tablePair();
		            	$this->setState(3981);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(3977);
		            		$this->match(self::COMMA);
		            		$this->setState(3978);
		            		$this->tablePair();
		            		$this->setState(3983);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	$this->setState(3984);
		            	$this->match(self::RR_BRACKET);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tablePair() : Context\TablePairContext
		{
		    $localContext = new Context\TablePairContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 316, self::RULE_tablePair);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3988);
		        $this->match(self::LR_BRACKET);
		        $this->setState(3989);
		        $localContext->firstTable = $this->tableName();
		        $this->setState(3990);
		        $this->match(self::COMMA);
		        $this->setState(3991);
		        $localContext->secondTable = $this->tableName();
		        $this->setState(3992);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function threadType() : Context\ThreadTypeContext
		{
		    $localContext = new Context\ThreadTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 318, self::RULE_threadType);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(3994);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::IO_THREAD || $_la === self::SQL_THREAD)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function untilOption() : Context\UntilOptionContext
		{
		    $localContext = new Context\UntilOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 320, self::RULE_untilOption);

		    try {
		        $this->setState(4014);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_BEFORE_GTIDS:
		            	$localContext = new Context\GtidsUntilOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(3996);

		            	$localContext->gtids = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::SQL_AFTER_GTIDS || $_la === self::SQL_BEFORE_GTIDS)) {
		            		    $localContext->gtids = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(3997);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(3998);
		            	$this->gtuidSet();
		            	break;

		            case self::MASTER_LOG_FILE:
		            	$localContext = new Context\MasterLogUntilOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(3999);
		            	$this->match(self::MASTER_LOG_FILE);
		            	$this->setState(4000);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4001);
		            	$this->match(self::STRING_LITERAL);
		            	$this->setState(4002);
		            	$this->match(self::COMMA);
		            	$this->setState(4003);
		            	$this->match(self::MASTER_LOG_POS);
		            	$this->setState(4004);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4005);
		            	$this->decimalLiteral();
		            	break;

		            case self::RELAY_LOG_FILE:
		            	$localContext = new Context\RelayLogUntilOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4006);
		            	$this->match(self::RELAY_LOG_FILE);
		            	$this->setState(4007);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4008);
		            	$this->match(self::STRING_LITERAL);
		            	$this->setState(4009);
		            	$this->match(self::COMMA);
		            	$this->setState(4010);
		            	$this->match(self::RELAY_LOG_POS);
		            	$this->setState(4011);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4012);
		            	$this->decimalLiteral();
		            	break;

		            case self::SQL_AFTER_MTS_GAPS:
		            	$localContext = new Context\SqlGapsUntilOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(4013);
		            	$this->match(self::SQL_AFTER_MTS_GAPS);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function connectionOption() : Context\ConnectionOptionContext
		{
		    $localContext = new Context\ConnectionOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 322, self::RULE_connectionOption);

		    try {
		        $this->setState(4028);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::USER:
		            	$localContext = new Context\UserConnectionOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4016);
		            	$this->match(self::USER);
		            	$this->setState(4017);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4018);
		            	$localContext->conOptUser = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::PASSWORD:
		            	$localContext = new Context\PasswordConnectionOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4019);
		            	$this->match(self::PASSWORD);
		            	$this->setState(4020);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4021);
		            	$localContext->conOptPassword = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::DEFAULT_AUTH:
		            	$localContext = new Context\DefaultAuthConnectionOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4022);
		            	$this->match(self::DEFAULT_AUTH);
		            	$this->setState(4023);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4024);
		            	$localContext->conOptDefAuth = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::PLUGIN_DIR:
		            	$localContext = new Context\PluginDirConnectionOptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(4025);
		            	$this->match(self::PLUGIN_DIR);
		            	$this->setState(4026);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(4027);
		            	$localContext->conOptPluginDir = $this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function gtuidSet() : Context\GtuidSetContext
		{
		    $localContext = new Context\GtuidSetContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 324, self::RULE_gtuidSet);

		    try {
		        $this->setState(4039);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ZERO_DECIMAL:
		            case self::ONE_DECIMAL:
		            case self::TWO_DECIMAL:
		            case self::DECIMAL_LITERAL:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4030);
		            	$this->uuidSet();
		            	$this->setState(4035);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(4031);
		            		$this->match(self::COMMA);
		            		$this->setState(4032);
		            		$this->uuidSet();
		            		$this->setState(4037);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		            case self::STRING_LITERAL:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4038);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xaStartTransaction() : Context\XaStartTransactionContext
		{
		    $localContext = new Context\XaStartTransactionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 326, self::RULE_xaStartTransaction);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4041);
		        $this->match(self::XA);
		        $this->setState(4042);

		        $localContext->xaStart = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::BEGIN || $_la === self::START)) {
		        	    $localContext->xaStart = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(4043);
		        $this->xid();
		        $this->setState(4045);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::JOIN || $_la === self::RESUME) {
		        	$this->setState(4044);

		        	$localContext->xaAction = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::JOIN || $_la === self::RESUME)) {
		        		    $localContext->xaAction = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xaEndTransaction() : Context\XaEndTransactionContext
		{
		    $localContext = new Context\XaEndTransactionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 328, self::RULE_xaEndTransaction);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4047);
		        $this->match(self::XA);
		        $this->setState(4048);
		        $this->match(self::END);
		        $this->setState(4049);
		        $this->xid();
		        $this->setState(4055);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::SUSPEND) {
		        	$this->setState(4050);
		        	$this->match(self::SUSPEND);
		        	$this->setState(4053);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::FOR) {
		        		$this->setState(4051);
		        		$this->match(self::FOR);
		        		$this->setState(4052);
		        		$this->match(self::MIGRATE);
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xaPrepareStatement() : Context\XaPrepareStatementContext
		{
		    $localContext = new Context\XaPrepareStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 330, self::RULE_xaPrepareStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4057);
		        $this->match(self::XA);
		        $this->setState(4058);
		        $this->match(self::PREPARE);
		        $this->setState(4059);
		        $this->xid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xaCommitWork() : Context\XaCommitWorkContext
		{
		    $localContext = new Context\XaCommitWorkContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 332, self::RULE_xaCommitWork);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4061);
		        $this->match(self::XA);
		        $this->setState(4062);
		        $this->match(self::COMMIT);
		        $this->setState(4063);
		        $this->xid();
		        $this->setState(4066);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ONE) {
		        	$this->setState(4064);
		        	$this->match(self::ONE);
		        	$this->setState(4065);
		        	$this->match(self::PHASE);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xaRollbackWork() : Context\XaRollbackWorkContext
		{
		    $localContext = new Context\XaRollbackWorkContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 334, self::RULE_xaRollbackWork);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4068);
		        $this->match(self::XA);
		        $this->setState(4069);
		        $this->match(self::ROLLBACK);
		        $this->setState(4070);
		        $this->xid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xaRecoverWork() : Context\XaRecoverWorkContext
		{
		    $localContext = new Context\XaRecoverWorkContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 336, self::RULE_xaRecoverWork);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4072);
		        $this->match(self::XA);
		        $this->setState(4073);
		        $this->match(self::RECOVER);
		        $this->setState(4076);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::CONVERT) {
		        	$this->setState(4074);
		        	$this->match(self::CONVERT);
		        	$this->setState(4075);
		        	$this->xid();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function prepareStatement() : Context\PrepareStatementContext
		{
		    $localContext = new Context\PrepareStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 338, self::RULE_prepareStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4078);
		        $this->match(self::PREPARE);
		        $this->setState(4079);
		        $this->uid();
		        $this->setState(4080);
		        $this->match(self::FROM);
		        $this->setState(4083);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::STRING_LITERAL:
		            	$this->setState(4081);
		            	$localContext->query = $this->match(self::STRING_LITERAL);
		            	break;

		            case self::LOCAL_ID:
		            	$this->setState(4082);
		            	$localContext->variable = $this->match(self::LOCAL_ID);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function executeStatement() : Context\ExecuteStatementContext
		{
		    $localContext = new Context\ExecuteStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 340, self::RULE_executeStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4085);
		        $this->match(self::EXECUTE);
		        $this->setState(4086);
		        $this->uid();
		        $this->setState(4089);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::USING) {
		        	$this->setState(4087);
		        	$this->match(self::USING);
		        	$this->setState(4088);
		        	$this->userVariables();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function deallocatePrepare() : Context\DeallocatePrepareContext
		{
		    $localContext = new Context\DeallocatePrepareContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 342, self::RULE_deallocatePrepare);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4091);

		        $localContext->dropFormat = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::DROP || $_la === self::DEALLOCATE)) {
		        	    $localContext->dropFormat = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(4092);
		        $this->match(self::PREPARE);
		        $this->setState(4093);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function routineBody() : Context\RoutineBodyContext
		{
		    $localContext = new Context\RoutineBodyContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 344, self::RULE_routineBody);

		    try {
		        $this->setState(4097);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 587, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4095);
		        	    $this->blockStatement();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4096);
		        	    $this->sqlStatement();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function blockStatement() : Context\BlockStatementContext
		{
		    $localContext = new Context\BlockStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 346, self::RULE_blockStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4102);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 588, $this->ctx)) {
		            case 1:
		        	    $this->setState(4099);
		        	    $this->uid();
		        	    $this->setState(4100);
		        	    $this->match(self::COLON_SYMB);
		        	break;
		        }
		        $this->setState(4104);
		        $this->match(self::BEGIN);
		        $this->setState(4143);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 594, $this->ctx)) {
		            case 1:
		        	    $this->setState(4110);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 589, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(4105);
		        	    		$this->declareVariable();
		        	    		$this->setState(4106);
		        	    		$this->match(self::SEMI); 
		        	    	}

		        	    	$this->setState(4112);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 589, $this->ctx);
		        	    }
		        	    $this->setState(4118);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 590, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(4113);
		        	    		$this->declareCondition();
		        	    		$this->setState(4114);
		        	    		$this->match(self::SEMI); 
		        	    	}

		        	    	$this->setState(4120);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 590, $this->ctx);
		        	    }
		        	    $this->setState(4126);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 591, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(4121);
		        	    		$this->declareCursor();
		        	    		$this->setState(4122);
		        	    		$this->match(self::SEMI); 
		        	    	}

		        	    	$this->setState(4128);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 591, $this->ctx);
		        	    }
		        	    $this->setState(4134);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::DECLARE) {
		        	    	$this->setState(4129);
		        	    	$this->declareHandler();
		        	    	$this->setState(4130);
		        	    	$this->match(self::SEMI);
		        	    	$this->setState(4136);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(4140);
		        	    $this->errorHandler->sync($this);

		        	    $alt = $this->getInterpreter()->adaptivePredict($this->input, 593, $this->ctx);

		        	    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	    	if ($alt === 1) {
		        	    		$this->setState(4137);
		        	    		$this->procedureSqlStatement(); 
		        	    	}

		        	    	$this->setState(4142);
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 593, $this->ctx);
		        	    }
		        	break;
		        }
		        $this->setState(4145);
		        $this->match(self::END);
		        $this->setState(4147);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 595, $this->ctx)) {
		            case 1:
		        	    $this->setState(4146);
		        	    $this->uid();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function caseStatement() : Context\CaseStatementContext
		{
		    $localContext = new Context\CaseStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 348, self::RULE_caseStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4149);
		        $this->match(self::CASE);
		        $this->setState(4152);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 596, $this->ctx)) {
		            case 1:
		        	    $this->setState(4150);
		        	    $this->uid();
		        	break;

		            case 2:
		        	    $this->setState(4151);
		        	    $this->recursiveExpression(0);
		        	break;
		        }
		        $this->setState(4155); 
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        do {
		        	$this->setState(4154);
		        	$this->caseAlternative();
		        	$this->setState(4157); 
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        } while ($_la === self::WHEN);
		        $this->setState(4165);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ELSE) {
		        	$this->setState(4159);
		        	$this->match(self::ELSE);
		        	$this->setState(4161); 
		        	$this->errorHandler->sync($this);

		        	$alt = 1;

		        	do {
		        		switch ($alt) {
		        		case 1:
		        			$this->setState(4160);
		        			$this->procedureSqlStatement();
		        			break;
		        		default:
		        			throw new NoViableAltException($this);
		        		}

		        		$this->setState(4163); 
		        		$this->errorHandler->sync($this);

		        		$alt = $this->getInterpreter()->adaptivePredict($this->input, 598, $this->ctx);
		        	} while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        }
		        $this->setState(4167);
		        $this->match(self::END);
		        $this->setState(4168);
		        $this->match(self::CASE);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function ifStatement() : Context\IfStatementContext
		{
		    $localContext = new Context\IfStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 350, self::RULE_ifStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4170);
		        $this->match(self::IF);
		        $this->setState(4171);
		        $this->recursiveExpression(0);
		        $this->setState(4172);
		        $this->match(self::THEN);
		        $this->setState(4174); 
		        $this->errorHandler->sync($this);

		        $alt = 1;

		        do {
		        	switch ($alt) {
		        	case 1:
		        		$this->setState(4173);
		        		$localContext->procedureSqlStatement = $this->procedureSqlStatement();
		        		$localContext->thenStatements[] = $localContext->procedureSqlStatement;
		        		break;
		        	default:
		        		throw new NoViableAltException($this);
		        	}

		        	$this->setState(4176); 
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 600, $this->ctx);
		        } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        $this->setState(4181);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::ELSEIF) {
		        	$this->setState(4178);
		        	$this->elifAlternative();
		        	$this->setState(4183);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(4190);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ELSE) {
		        	$this->setState(4184);
		        	$this->match(self::ELSE);
		        	$this->setState(4186); 
		        	$this->errorHandler->sync($this);

		        	$alt = 1;

		        	do {
		        		switch ($alt) {
		        		case 1:
		        			$this->setState(4185);
		        			$localContext->procedureSqlStatement = $this->procedureSqlStatement();
		        			$localContext->elseStatements[] = $localContext->procedureSqlStatement;
		        			break;
		        		default:
		        			throw new NoViableAltException($this);
		        		}

		        		$this->setState(4188); 
		        		$this->errorHandler->sync($this);

		        		$alt = $this->getInterpreter()->adaptivePredict($this->input, 602, $this->ctx);
		        	} while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        }
		        $this->setState(4192);
		        $this->match(self::END);
		        $this->setState(4193);
		        $this->match(self::IF);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function iterateStatement() : Context\IterateStatementContext
		{
		    $localContext = new Context\IterateStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 352, self::RULE_iterateStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4195);
		        $this->match(self::ITERATE);
		        $this->setState(4196);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function leaveStatement() : Context\LeaveStatementContext
		{
		    $localContext = new Context\LeaveStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 354, self::RULE_leaveStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4198);
		        $this->match(self::LEAVE);
		        $this->setState(4199);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function loopStatement() : Context\LoopStatementContext
		{
		    $localContext = new Context\LoopStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 356, self::RULE_loopStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4204);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	$this->setState(4201);
		        	$this->uid();
		        	$this->setState(4202);
		        	$this->match(self::COLON_SYMB);
		        }
		        $this->setState(4206);
		        $this->match(self::LOOP);
		        $this->setState(4208); 
		        $this->errorHandler->sync($this);

		        $alt = 1;

		        do {
		        	switch ($alt) {
		        	case 1:
		        		$this->setState(4207);
		        		$this->procedureSqlStatement();
		        		break;
		        	default:
		        		throw new NoViableAltException($this);
		        	}

		        	$this->setState(4210); 
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 605, $this->ctx);
		        } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        $this->setState(4212);
		        $this->match(self::END);
		        $this->setState(4213);
		        $this->match(self::LOOP);
		        $this->setState(4215);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	$this->setState(4214);
		        	$this->uid();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function repeatStatement() : Context\RepeatStatementContext
		{
		    $localContext = new Context\RepeatStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 358, self::RULE_repeatStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4220);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	$this->setState(4217);
		        	$this->uid();
		        	$this->setState(4218);
		        	$this->match(self::COLON_SYMB);
		        }
		        $this->setState(4222);
		        $this->match(self::REPEAT);
		        $this->setState(4224); 
		        $this->errorHandler->sync($this);

		        $alt = 1;

		        do {
		        	switch ($alt) {
		        	case 1:
		        		$this->setState(4223);
		        		$this->procedureSqlStatement();
		        		break;
		        	default:
		        		throw new NoViableAltException($this);
		        	}

		        	$this->setState(4226); 
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 608, $this->ctx);
		        } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        $this->setState(4228);
		        $this->match(self::UNTIL);
		        $this->setState(4229);
		        $this->recursiveExpression(0);
		        $this->setState(4230);
		        $this->match(self::END);
		        $this->setState(4231);
		        $this->match(self::REPEAT);
		        $this->setState(4233);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	$this->setState(4232);
		        	$this->uid();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function returnStatement() : Context\ReturnStatementContext
		{
		    $localContext = new Context\ReturnStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 360, self::RULE_returnStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4235);
		        $this->match(self::RETURN);
		        $this->setState(4236);
		        $this->recursiveExpression(0);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function whileStatement() : Context\WhileStatementContext
		{
		    $localContext = new Context\WhileStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 362, self::RULE_whileStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4241);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	$this->setState(4238);
		        	$this->uid();
		        	$this->setState(4239);
		        	$this->match(self::COLON_SYMB);
		        }
		        $this->setState(4243);
		        $this->match(self::WHILE);
		        $this->setState(4244);
		        $this->recursiveExpression(0);
		        $this->setState(4245);
		        $this->match(self::DO);
		        $this->setState(4247); 
		        $this->errorHandler->sync($this);

		        $alt = 1;

		        do {
		        	switch ($alt) {
		        	case 1:
		        		$this->setState(4246);
		        		$this->procedureSqlStatement();
		        		break;
		        	default:
		        		throw new NoViableAltException($this);
		        	}

		        	$this->setState(4249); 
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 611, $this->ctx);
		        } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        $this->setState(4251);
		        $this->match(self::END);
		        $this->setState(4252);
		        $this->match(self::WHILE);
		        $this->setState(4254);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CURRENT) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS))) !== 0) || (((($_la - 87)) & ~0x3f) === 0 && ((1 << ($_la - 87)) & ((1 << (self::LEFT - 87)) | (1 << (self::NUMBER - 87)) | (1 << (self::RIGHT - 87)))) !== 0) || (((($_la - 151)) & ~0x3f) === 0 && ((1 << ($_la - 151)) & ((1 << (self::STACKED - 151)) | (1 << (self::DATE - 151)) | (1 << (self::TIME - 151)) | (1 << (self::TIMESTAMP - 151)) | (1 << (self::DATETIME - 151)) | (1 << (self::YEAR - 151)))) !== 0) || (((($_la - 216)) & ~0x3f) === 0 && ((1 << ($_la - 216)) & ((1 << (self::TEXT - 216)) | (1 << (self::ENUM - 216)) | (1 << (self::SERIAL - 216)) | (1 << (self::COUNT - 216)) | (1 << (self::POSITION - 216)) | (1 << (self::ACCOUNT - 216)) | (1 << (self::ACTION - 216)) | (1 << (self::AFTER - 216)) | (1 << (self::AGGREGATE - 216)) | (1 << (self::ALGORITHM - 216)) | (1 << (self::ANY - 216)) | (1 << (self::AT - 216)) | (1 << (self::AUTHORS - 216)) | (1 << (self::AUTOCOMMIT - 216)) | (1 << (self::AUTOEXTEND_SIZE - 216)))) !== 0) || (((($_la - 280)) & ~0x3f) === 0 && ((1 << ($_la - 280)) & ((1 << (self::AUTO_INCREMENT - 280)) | (1 << (self::AVG_ROW_LENGTH - 280)) | (1 << (self::BEGIN - 280)) | (1 << (self::BINLOG - 280)) | (1 << (self::BIT - 280)) | (1 << (self::BLOCK - 280)) | (1 << (self::BOOL - 280)) | (1 << (self::BOOLEAN - 280)) | (1 << (self::BTREE - 280)) | (1 << (self::CACHE - 280)) | (1 << (self::CASCADED - 280)) | (1 << (self::CHAIN - 280)) | (1 << (self::CHANGED - 280)) | (1 << (self::CHANNEL - 280)) | (1 << (self::CHECKSUM - 280)) | (1 << (self::PAGE_CHECKSUM - 280)) | (1 << (self::CIPHER - 280)) | (1 << (self::CLASS_ORIGIN - 280)) | (1 << (self::CLIENT - 280)) | (1 << (self::CLOSE - 280)) | (1 << (self::COALESCE - 280)) | (1 << (self::CODE - 280)) | (1 << (self::COLUMNS - 280)) | (1 << (self::COLUMN_FORMAT - 280)) | (1 << (self::COLUMN_NAME - 280)) | (1 << (self::COMMENT - 280)) | (1 << (self::COMMIT - 280)) | (1 << (self::COMPACT - 280)) | (1 << (self::COMPLETION - 280)) | (1 << (self::COMPRESSED - 280)) | (1 << (self::COMPRESSION - 280)) | (1 << (self::CONCURRENT - 280)) | (1 << (self::CONNECTION - 280)) | (1 << (self::CONSISTENT - 280)) | (1 << (self::CONSTRAINT_CATALOG - 280)) | (1 << (self::CONSTRAINT_SCHEMA - 280)) | (1 << (self::CONSTRAINT_NAME - 280)) | (1 << (self::CONTAINS - 280)) | (1 << (self::CONTEXT - 280)) | (1 << (self::CONTRIBUTORS - 280)) | (1 << (self::COPY - 280)) | (1 << (self::CPU - 280)) | (1 << (self::CURSOR_NAME - 280)) | (1 << (self::DATA - 280)) | (1 << (self::DATAFILE - 280)) | (1 << (self::DEALLOCATE - 280)) | (1 << (self::DEFAULT_AUTH - 280)) | (1 << (self::DEFINER - 280)) | (1 << (self::DELAY_KEY_WRITE - 280)) | (1 << (self::DES_KEY_FILE - 280)) | (1 << (self::DIRECTORY - 280)) | (1 << (self::DISABLE - 280)) | (1 << (self::DISCARD - 280)) | (1 << (self::DISK - 280)) | (1 << (self::DO - 280)) | (1 << (self::DUMPFILE - 280)) | (1 << (self::DUPLICATE - 280)) | (1 << (self::DYNAMIC - 280)) | (1 << (self::ENABLE - 280)) | (1 << (self::ENCRYPTION - 280)) | (1 << (self::END - 280)) | (1 << (self::ENDS - 280)) | (1 << (self::ENGINE - 280)) | (1 << (self::ENGINES - 280)))) !== 0) || (((($_la - 344)) & ~0x3f) === 0 && ((1 << ($_la - 344)) & ((1 << (self::ERROR - 344)) | (1 << (self::ERRORS - 344)) | (1 << (self::ESCAPE - 344)) | (1 << (self::EVEN - 344)) | (1 << (self::EVENT - 344)) | (1 << (self::EVENTS - 344)) | (1 << (self::EVERY - 344)) | (1 << (self::EXCHANGE - 344)) | (1 << (self::EXCLUSIVE - 344)) | (1 << (self::EXPIRE - 344)) | (1 << (self::EXPORT - 344)) | (1 << (self::EXTENDED - 344)) | (1 << (self::EXTENT_SIZE - 344)) | (1 << (self::FAST - 344)) | (1 << (self::FAULTS - 344)) | (1 << (self::FIELDS - 344)) | (1 << (self::FILE_BLOCK_SIZE - 344)) | (1 << (self::FILTER - 344)) | (1 << (self::FIRST - 344)) | (1 << (self::FIXED - 344)) | (1 << (self::FLUSH - 344)) | (1 << (self::FOLLOWS - 344)) | (1 << (self::FOUND - 344)) | (1 << (self::FULL - 344)) | (1 << (self::FUNCTION - 344)) | (1 << (self::GENERAL - 344)) | (1 << (self::GLOBAL - 344)) | (1 << (self::GRANTS - 344)) | (1 << (self::GROUP_REPLICATION - 344)) | (1 << (self::HANDLER - 344)) | (1 << (self::HASH - 344)) | (1 << (self::HELP - 344)) | (1 << (self::HOST - 344)) | (1 << (self::HOSTS - 344)) | (1 << (self::IDENTIFIED - 344)) | (1 << (self::IGNORE_SERVER_IDS - 344)) | (1 << (self::IMPORT - 344)) | (1 << (self::INDEXES - 344)) | (1 << (self::INITIAL_SIZE - 344)) | (1 << (self::INPLACE - 344)) | (1 << (self::INSERT_METHOD - 344)) | (1 << (self::INSTALL - 344)) | (1 << (self::INSTANCE - 344)) | (1 << (self::INVISIBLE - 344)) | (1 << (self::INVOKER - 344)) | (1 << (self::IO - 344)) | (1 << (self::IO_THREAD - 344)) | (1 << (self::IPC - 344)) | (1 << (self::ISOLATION - 344)) | (1 << (self::ISSUER - 344)) | (1 << (self::JSON - 344)) | (1 << (self::KEY_BLOCK_SIZE - 344)) | (1 << (self::LANGUAGE - 344)) | (1 << (self::LAST - 344)) | (1 << (self::LEAVES - 344)) | (1 << (self::LESS - 344)) | (1 << (self::LEVEL - 344)) | (1 << (self::LIST - 344)) | (1 << (self::LOCAL - 344)) | (1 << (self::LOGFILE - 344)) | (1 << (self::LOGS - 344)) | (1 << (self::MASTER - 344)) | (1 << (self::MASTER_AUTO_POSITION - 344)) | (1 << (self::MASTER_CONNECT_RETRY - 344)))) !== 0) || (((($_la - 408)) & ~0x3f) === 0 && ((1 << ($_la - 408)) & ((1 << (self::MASTER_DELAY - 408)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 408)) | (1 << (self::MASTER_HOST - 408)) | (1 << (self::MASTER_LOG_FILE - 408)) | (1 << (self::MASTER_LOG_POS - 408)) | (1 << (self::MASTER_PASSWORD - 408)) | (1 << (self::MASTER_PORT - 408)) | (1 << (self::MASTER_RETRY_COUNT - 408)) | (1 << (self::MASTER_SSL - 408)) | (1 << (self::MASTER_SSL_CA - 408)) | (1 << (self::MASTER_SSL_CAPATH - 408)) | (1 << (self::MASTER_SSL_CERT - 408)) | (1 << (self::MASTER_SSL_CIPHER - 408)) | (1 << (self::MASTER_SSL_CRL - 408)) | (1 << (self::MASTER_SSL_CRLPATH - 408)) | (1 << (self::MASTER_SSL_KEY - 408)) | (1 << (self::MASTER_TLS_VERSION - 408)) | (1 << (self::MASTER_USER - 408)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 408)) | (1 << (self::MAX_QUERIES_PER_HOUR - 408)) | (1 << (self::MAX_ROWS - 408)) | (1 << (self::MAX_SIZE - 408)) | (1 << (self::MAX_UPDATES_PER_HOUR - 408)) | (1 << (self::MAX_USER_CONNECTIONS - 408)) | (1 << (self::MEDIUM - 408)) | (1 << (self::MERGE - 408)) | (1 << (self::MESSAGE_TEXT - 408)) | (1 << (self::MID - 408)) | (1 << (self::MIGRATE - 408)) | (1 << (self::MIN_ROWS - 408)) | (1 << (self::MODE - 408)) | (1 << (self::MODIFY - 408)) | (1 << (self::MUTEX - 408)) | (1 << (self::MYSQL - 408)) | (1 << (self::MYSQL_ERRNO - 408)) | (1 << (self::NAME - 408)) | (1 << (self::NAMES - 408)) | (1 << (self::NCHAR - 408)) | (1 << (self::NEVER - 408)) | (1 << (self::NEXT - 408)) | (1 << (self::NO - 408)) | (1 << (self::NODEGROUP - 408)) | (1 << (self::NONE - 408)) | (1 << (self::OFFLINE - 408)) | (1 << (self::OFFSET - 408)) | (1 << (self::OJ - 408)) | (1 << (self::OLD_PASSWORD - 408)) | (1 << (self::ONE - 408)) | (1 << (self::ONLINE - 408)) | (1 << (self::ONLY - 408)) | (1 << (self::OPEN - 408)) | (1 << (self::OPTIMIZER_COSTS - 408)) | (1 << (self::OPTIONS - 408)) | (1 << (self::OWNER - 408)) | (1 << (self::PACK_KEYS - 408)) | (1 << (self::PAGE - 408)) | (1 << (self::PARSER - 408)) | (1 << (self::PARTIAL - 408)) | (1 << (self::PARTITIONING - 408)) | (1 << (self::PARTITIONS - 408)) | (1 << (self::PASSWORD - 408)) | (1 << (self::PHASE - 408)))) !== 0) || (((($_la - 472)) & ~0x3f) === 0 && ((1 << ($_la - 472)) & ((1 << (self::PLUGIN - 472)) | (1 << (self::PLUGIN_DIR - 472)) | (1 << (self::PLUGINS - 472)) | (1 << (self::PORT - 472)) | (1 << (self::PRECEDES - 472)) | (1 << (self::PREPARE - 472)) | (1 << (self::PRESERVE - 472)) | (1 << (self::PREV - 472)) | (1 << (self::PROCESSLIST - 472)) | (1 << (self::PROFILE - 472)) | (1 << (self::PROFILES - 472)) | (1 << (self::PROXY - 472)) | (1 << (self::QUERY - 472)) | (1 << (self::QUICK - 472)) | (1 << (self::REBUILD - 472)) | (1 << (self::RECOVER - 472)) | (1 << (self::REDO_BUFFER_SIZE - 472)) | (1 << (self::REDUNDANT - 472)) | (1 << (self::RELAY - 472)) | (1 << (self::RELAY_LOG_FILE - 472)) | (1 << (self::RELAY_LOG_POS - 472)) | (1 << (self::RELAYLOG - 472)) | (1 << (self::REMOVE - 472)) | (1 << (self::REORGANIZE - 472)) | (1 << (self::REPAIR - 472)) | (1 << (self::REPLICATE_DO_DB - 472)) | (1 << (self::REPLICATE_DO_TABLE - 472)) | (1 << (self::REPLICATE_IGNORE_DB - 472)) | (1 << (self::REPLICATE_IGNORE_TABLE - 472)) | (1 << (self::REPLICATE_REWRITE_DB - 472)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 472)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 472)) | (1 << (self::REPLICATION - 472)) | (1 << (self::RESET - 472)) | (1 << (self::RESUME - 472)) | (1 << (self::RETURNED_SQLSTATE - 472)) | (1 << (self::RETURNS - 472)) | (1 << (self::ROLLBACK - 472)) | (1 << (self::ROLLUP - 472)) | (1 << (self::ROTATE - 472)) | (1 << (self::ROW - 472)) | (1 << (self::ROWS - 472)) | (1 << (self::ROW_FORMAT - 472)) | (1 << (self::SAVEPOINT - 472)) | (1 << (self::SCHEDULE - 472)) | (1 << (self::SECURITY - 472)) | (1 << (self::SERVER - 472)) | (1 << (self::SESSION - 472)) | (1 << (self::SHARE - 472)) | (1 << (self::SHARED - 472)) | (1 << (self::SIGNED - 472)) | (1 << (self::SIMPLE - 472)) | (1 << (self::SLAVE - 472)) | (1 << (self::SLOW - 472)) | (1 << (self::SNAPSHOT - 472)) | (1 << (self::SOCKET - 472)) | (1 << (self::SOME - 472)) | (1 << (self::SONAME - 472)) | (1 << (self::SOUNDS - 472)) | (1 << (self::SOURCE - 472)) | (1 << (self::SQL_AFTER_GTIDS - 472)) | (1 << (self::SQL_AFTER_MTS_GAPS - 472)) | (1 << (self::SQL_BEFORE_GTIDS - 472)))) !== 0) || (((($_la - 536)) & ~0x3f) === 0 && ((1 << ($_la - 536)) & ((1 << (self::SQL_BUFFER_RESULT - 536)) | (1 << (self::SQL_CACHE - 536)) | (1 << (self::SQL_NO_CACHE - 536)) | (1 << (self::SQL_THREAD - 536)) | (1 << (self::START - 536)) | (1 << (self::STARTS - 536)) | (1 << (self::STATS_AUTO_RECALC - 536)) | (1 << (self::STATS_PERSISTENT - 536)) | (1 << (self::STATS_SAMPLE_PAGES - 536)) | (1 << (self::STATUS - 536)) | (1 << (self::STOP - 536)) | (1 << (self::STORAGE - 536)) | (1 << (self::STRING - 536)) | (1 << (self::SUBCLASS_ORIGIN - 536)) | (1 << (self::SUBJECT - 536)) | (1 << (self::SUBPARTITION - 536)) | (1 << (self::SUBPARTITIONS - 536)) | (1 << (self::SUSPEND - 536)) | (1 << (self::SWAPS - 536)) | (1 << (self::SWITCHES - 536)) | (1 << (self::TABLE_NAME - 536)) | (1 << (self::TABLESPACE - 536)) | (1 << (self::TEMPORARY - 536)) | (1 << (self::TEMPTABLE - 536)) | (1 << (self::THAN - 536)) | (1 << (self::TRADITIONAL - 536)) | (1 << (self::TRANSACTION - 536)) | (1 << (self::TRIGGERS - 536)) | (1 << (self::TRUNCATE - 536)) | (1 << (self::UNDEFINED - 536)) | (1 << (self::UNDOFILE - 536)) | (1 << (self::UNDO_BUFFER_SIZE - 536)) | (1 << (self::UNINSTALL - 536)) | (1 << (self::UNKNOWN - 536)) | (1 << (self::UNTIL - 536)) | (1 << (self::UPGRADE - 536)) | (1 << (self::USER - 536)) | (1 << (self::USE_FRM - 536)) | (1 << (self::USER_RESOURCES - 536)) | (1 << (self::VALIDATION - 536)) | (1 << (self::VALUE - 536)) | (1 << (self::VARIABLES - 536)) | (1 << (self::VIEW - 536)) | (1 << (self::VISIBLE - 536)) | (1 << (self::WAIT - 536)) | (1 << (self::WARNINGS - 536)) | (1 << (self::WITHOUT - 536)) | (1 << (self::WORK - 536)) | (1 << (self::WRAPPER - 536)) | (1 << (self::X509 - 536)) | (1 << (self::XA - 536)) | (1 << (self::XML - 536)) | (1 << (self::INTERNAL - 536)) | (1 << (self::QUARTER - 536)) | (1 << (self::MONTH - 536)) | (1 << (self::DAY - 536)) | (1 << (self::HOUR - 536)))) !== 0) || (((($_la - 600)) & ~0x3f) === 0 && ((1 << ($_la - 600)) & ((1 << (self::MINUTE - 600)) | (1 << (self::WEEK - 600)) | (1 << (self::SECOND - 600)) | (1 << (self::MICROSECOND - 600)) | (1 << (self::TABLES - 600)) | (1 << (self::ROUTINE - 600)) | (1 << (self::EXECUTE - 600)) | (1 << (self::FILE - 600)) | (1 << (self::PROCESS - 600)) | (1 << (self::RELOAD - 600)) | (1 << (self::SHUTDOWN - 600)) | (1 << (self::SUPER - 600)) | (1 << (self::PRIVILEGES - 600)) | (1 << (self::SESSION_VARIABLES_ADMIN - 600)) | (1 << (self::ARMSCII8 - 600)) | (1 << (self::ASCII - 600)) | (1 << (self::BIG5 - 600)) | (1 << (self::CP1250 - 600)) | (1 << (self::CP1251 - 600)) | (1 << (self::CP1256 - 600)) | (1 << (self::CP1257 - 600)) | (1 << (self::CP850 - 600)) | (1 << (self::CP852 - 600)) | (1 << (self::CP866 - 600)) | (1 << (self::CP932 - 600)) | (1 << (self::DEC8 - 600)) | (1 << (self::EUCJPMS - 600)) | (1 << (self::EUCKR - 600)) | (1 << (self::GB2312 - 600)) | (1 << (self::GBK - 600)) | (1 << (self::GEOSTD8 - 600)) | (1 << (self::GREEK - 600)) | (1 << (self::HEBREW - 600)) | (1 << (self::HP8 - 600)) | (1 << (self::KEYBCS2 - 600)) | (1 << (self::KOI8R - 600)) | (1 << (self::KOI8U - 600)) | (1 << (self::LATIN1 - 600)) | (1 << (self::LATIN2 - 600)))) !== 0) || (((($_la - 664)) & ~0x3f) === 0 && ((1 << ($_la - 664)) & ((1 << (self::LATIN5 - 664)) | (1 << (self::LATIN7 - 664)) | (1 << (self::MACCE - 664)) | (1 << (self::MACROMAN - 664)) | (1 << (self::SJIS - 664)) | (1 << (self::SWE7 - 664)) | (1 << (self::TIS620 - 664)) | (1 << (self::UCS2 - 664)) | (1 << (self::UJIS - 664)) | (1 << (self::UTF16 - 664)) | (1 << (self::UTF16LE - 664)) | (1 << (self::UTF32 - 664)) | (1 << (self::UTF8 - 664)) | (1 << (self::UTF8MB3 - 664)) | (1 << (self::UTF8MB4 - 664)) | (1 << (self::ARCHIVE - 664)) | (1 << (self::BLACKHOLE - 664)) | (1 << (self::CSV - 664)) | (1 << (self::FEDERATED - 664)) | (1 << (self::INNODB - 664)) | (1 << (self::MEMORY - 664)) | (1 << (self::MRG_MYISAM - 664)) | (1 << (self::MYISAM - 664)) | (1 << (self::NDB - 664)) | (1 << (self::NDBCLUSTER - 664)) | (1 << (self::PERFORMANCE_SCHEMA - 664)) | (1 << (self::TOKUDB - 664)) | (1 << (self::REPEATABLE - 664)) | (1 << (self::COMMITTED - 664)) | (1 << (self::UNCOMMITTED - 664)) | (1 << (self::SERIALIZABLE - 664)) | (1 << (self::GEOMETRYCOLLECTION - 664)) | (1 << (self::LINESTRING - 664)) | (1 << (self::MULTILINESTRING - 664)) | (1 << (self::MULTIPOINT - 664)) | (1 << (self::MULTIPOLYGON - 664)) | (1 << (self::POINT - 664)) | (1 << (self::POLYGON - 664)) | (1 << (self::ABS - 664)) | (1 << (self::ACOS - 664)) | (1 << (self::ADDDATE - 664)) | (1 << (self::ADDTIME - 664)) | (1 << (self::AES_DECRYPT - 664)) | (1 << (self::AES_ENCRYPT - 664)) | (1 << (self::AREA - 664)) | (1 << (self::ASBINARY - 664)) | (1 << (self::ASIN - 664)) | (1 << (self::ASTEXT - 664)) | (1 << (self::ASWKB - 664)) | (1 << (self::ASWKT - 664)) | (1 << (self::ASYMMETRIC_DECRYPT - 664)) | (1 << (self::ASYMMETRIC_DERIVE - 664)) | (1 << (self::ASYMMETRIC_ENCRYPT - 664)) | (1 << (self::ASYMMETRIC_SIGN - 664)) | (1 << (self::ASYMMETRIC_VERIFY - 664)) | (1 << (self::ATAN - 664)) | (1 << (self::ATAN2 - 664)) | (1 << (self::BENCHMARK - 664)) | (1 << (self::BIN - 664)) | (1 << (self::BIT_COUNT - 664)) | (1 << (self::BIT_LENGTH - 664)) | (1 << (self::BUFFER - 664)))) !== 0) || (((($_la - 728)) & ~0x3f) === 0 && ((1 << ($_la - 728)) & ((1 << (self::CATALOG_NAME - 728)) | (1 << (self::CEIL - 728)) | (1 << (self::CEILING - 728)) | (1 << (self::CENTROID - 728)) | (1 << (self::CHARACTER_LENGTH - 728)) | (1 << (self::CHARSET - 728)) | (1 << (self::CHAR_LENGTH - 728)) | (1 << (self::COERCIBILITY - 728)) | (1 << (self::COLLATION - 728)) | (1 << (self::COMPRESS - 728)) | (1 << (self::CONCAT - 728)) | (1 << (self::CONCAT_WS - 728)) | (1 << (self::CONNECTION_ID - 728)) | (1 << (self::CONV - 728)) | (1 << (self::CONVERT_TZ - 728)) | (1 << (self::COS - 728)) | (1 << (self::COT - 728)) | (1 << (self::CRC32 - 728)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 728)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 728)) | (1 << (self::CREATE_DH_PARAMETERS - 728)) | (1 << (self::CREATE_DIGEST - 728)) | (1 << (self::CROSSES - 728)) | (1 << (self::DATEDIFF - 728)) | (1 << (self::DATE_FORMAT - 728)) | (1 << (self::DAYNAME - 728)) | (1 << (self::DAYOFMONTH - 728)) | (1 << (self::DAYOFWEEK - 728)) | (1 << (self::DAYOFYEAR - 728)) | (1 << (self::DECODE - 728)) | (1 << (self::DEGREES - 728)) | (1 << (self::DES_DECRYPT - 728)) | (1 << (self::DES_ENCRYPT - 728)) | (1 << (self::DIMENSION - 728)) | (1 << (self::DISJOINT - 728)) | (1 << (self::ELT - 728)) | (1 << (self::ENCODE - 728)) | (1 << (self::ENCRYPT - 728)) | (1 << (self::ENDPOINT - 728)) | (1 << (self::ENVELOPE - 728)) | (1 << (self::EQUALS - 728)) | (1 << (self::EXP - 728)) | (1 << (self::EXPORT_SET - 728)) | (1 << (self::EXTERIORRING - 728)) | (1 << (self::EXTRACTVALUE - 728)) | (1 << (self::FIELD - 728)) | (1 << (self::FIND_IN_SET - 728)) | (1 << (self::FLOOR - 728)) | (1 << (self::FORMAT - 728)) | (1 << (self::FOUND_ROWS - 728)) | (1 << (self::FROM_BASE64 - 728)) | (1 << (self::FROM_DAYS - 728)) | (1 << (self::FROM_UNIXTIME - 728)) | (1 << (self::GEOMCOLLFROMTEXT - 728)) | (1 << (self::GEOMCOLLFROMWKB - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 728)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 728)) | (1 << (self::GEOMETRYFROMTEXT - 728)) | (1 << (self::GEOMETRYFROMWKB - 728)) | (1 << (self::GEOMETRYN - 728)) | (1 << (self::GEOMETRYTYPE - 728)) | (1 << (self::GEOMFROMTEXT - 728)) | (1 << (self::GEOMFROMWKB - 728)) | (1 << (self::GET_FORMAT - 728)))) !== 0) || (((($_la - 792)) & ~0x3f) === 0 && ((1 << ($_la - 792)) & ((1 << (self::GET_LOCK - 792)) | (1 << (self::GLENGTH - 792)) | (1 << (self::GREATEST - 792)) | (1 << (self::GTID_SUBSET - 792)) | (1 << (self::GTID_SUBTRACT - 792)) | (1 << (self::HEX - 792)) | (1 << (self::IFNULL - 792)) | (1 << (self::INET6_ATON - 792)) | (1 << (self::INET6_NTOA - 792)) | (1 << (self::INET_ATON - 792)) | (1 << (self::INET_NTOA - 792)) | (1 << (self::INSTR - 792)) | (1 << (self::INTERIORRINGN - 792)) | (1 << (self::INTERSECTS - 792)) | (1 << (self::ISCLOSED - 792)) | (1 << (self::ISEMPTY - 792)) | (1 << (self::ISNULL - 792)) | (1 << (self::ISSIMPLE - 792)) | (1 << (self::IS_FREE_LOCK - 792)) | (1 << (self::IS_IPV4 - 792)) | (1 << (self::IS_IPV4_COMPAT - 792)) | (1 << (self::IS_IPV4_MAPPED - 792)) | (1 << (self::IS_IPV6 - 792)) | (1 << (self::IS_USED_LOCK - 792)) | (1 << (self::LAST_INSERT_ID - 792)) | (1 << (self::LCASE - 792)) | (1 << (self::LEAST - 792)) | (1 << (self::LENGTH - 792)) | (1 << (self::LINEFROMTEXT - 792)) | (1 << (self::LINEFROMWKB - 792)) | (1 << (self::LINESTRINGFROMTEXT - 792)) | (1 << (self::LINESTRINGFROMWKB - 792)) | (1 << (self::LN - 792)) | (1 << (self::LOAD_FILE - 792)) | (1 << (self::LOCATE - 792)) | (1 << (self::LOG - 792)) | (1 << (self::LOG10 - 792)) | (1 << (self::LOG2 - 792)) | (1 << (self::LOWER - 792)) | (1 << (self::LPAD - 792)) | (1 << (self::LTRIM - 792)) | (1 << (self::MAKEDATE - 792)) | (1 << (self::MAKETIME - 792)) | (1 << (self::MAKE_SET - 792)) | (1 << (self::MASTER_POS_WAIT - 792)) | (1 << (self::MBRCONTAINS - 792)) | (1 << (self::MBRDISJOINT - 792)) | (1 << (self::MBREQUAL - 792)) | (1 << (self::MBRINTERSECTS - 792)) | (1 << (self::MBROVERLAPS - 792)) | (1 << (self::MBRTOUCHES - 792)) | (1 << (self::MBRWITHIN - 792)) | (1 << (self::MD5 - 792)) | (1 << (self::MLINEFROMTEXT - 792)) | (1 << (self::MLINEFROMWKB - 792)) | (1 << (self::MONTHNAME - 792)) | (1 << (self::MPOINTFROMTEXT - 792)) | (1 << (self::MPOINTFROMWKB - 792)) | (1 << (self::MPOLYFROMTEXT - 792)) | (1 << (self::MPOLYFROMWKB - 792)) | (1 << (self::MULTILINESTRINGFROMTEXT - 792)) | (1 << (self::MULTILINESTRINGFROMWKB - 792)) | (1 << (self::MULTIPOINTFROMTEXT - 792)) | (1 << (self::MULTIPOINTFROMWKB - 792)))) !== 0) || (((($_la - 856)) & ~0x3f) === 0 && ((1 << ($_la - 856)) & ((1 << (self::MULTIPOLYGONFROMTEXT - 856)) | (1 << (self::MULTIPOLYGONFROMWKB - 856)) | (1 << (self::NAME_CONST - 856)) | (1 << (self::NULLIF - 856)) | (1 << (self::NUMGEOMETRIES - 856)) | (1 << (self::NUMINTERIORRINGS - 856)) | (1 << (self::NUMPOINTS - 856)) | (1 << (self::OCT - 856)) | (1 << (self::OCTET_LENGTH - 856)) | (1 << (self::ORD - 856)) | (1 << (self::OVERLAPS - 856)) | (1 << (self::PERIOD_ADD - 856)) | (1 << (self::PERIOD_DIFF - 856)) | (1 << (self::PI - 856)) | (1 << (self::POINTFROMTEXT - 856)) | (1 << (self::POINTFROMWKB - 856)) | (1 << (self::POINTN - 856)) | (1 << (self::POLYFROMTEXT - 856)) | (1 << (self::POLYFROMWKB - 856)) | (1 << (self::POLYGONFROMTEXT - 856)) | (1 << (self::POLYGONFROMWKB - 856)) | (1 << (self::POW - 856)) | (1 << (self::POWER - 856)) | (1 << (self::QUOTE - 856)) | (1 << (self::RADIANS - 856)) | (1 << (self::RAND - 856)) | (1 << (self::RANDOM_BYTES - 856)) | (1 << (self::RELEASE_LOCK - 856)) | (1 << (self::REVERSE - 856)) | (1 << (self::ROUND - 856)) | (1 << (self::ROW_COUNT - 856)) | (1 << (self::RPAD - 856)) | (1 << (self::RTRIM - 856)) | (1 << (self::SEC_TO_TIME - 856)) | (1 << (self::SESSION_USER - 856)) | (1 << (self::SHA - 856)) | (1 << (self::SHA1 - 856)) | (1 << (self::SHA2 - 856)) | (1 << (self::SCHEMA_NAME - 856)) | (1 << (self::SIGN - 856)) | (1 << (self::SIN - 856)) | (1 << (self::SLEEP - 856)) | (1 << (self::SOUNDEX - 856)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 856)) | (1 << (self::SQRT - 856)) | (1 << (self::SRID - 856)) | (1 << (self::STARTPOINT - 856)) | (1 << (self::STRCMP - 856)) | (1 << (self::STR_TO_DATE - 856)) | (1 << (self::ST_AREA - 856)) | (1 << (self::ST_ASBINARY - 856)) | (1 << (self::ST_ASTEXT - 856)) | (1 << (self::ST_ASWKB - 856)) | (1 << (self::ST_ASWKT - 856)) | (1 << (self::ST_BUFFER - 856)) | (1 << (self::ST_CENTROID - 856)) | (1 << (self::ST_CONTAINS - 856)) | (1 << (self::ST_CROSSES - 856)) | (1 << (self::ST_DIFFERENCE - 856)) | (1 << (self::ST_DIMENSION - 856)) | (1 << (self::ST_DISJOINT - 856)) | (1 << (self::ST_DISTANCE - 856)) | (1 << (self::ST_ENDPOINT - 856)) | (1 << (self::ST_ENVELOPE - 856)))) !== 0) || (((($_la - 920)) & ~0x3f) === 0 && ((1 << ($_la - 920)) & ((1 << (self::ST_EQUALS - 920)) | (1 << (self::ST_EXTERIORRING - 920)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 920)) | (1 << (self::ST_GEOMCOLLFROMTXT - 920)) | (1 << (self::ST_GEOMCOLLFROMWKB - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 920)) | (1 << (self::ST_GEOMETRYFROMTEXT - 920)) | (1 << (self::ST_GEOMETRYFROMWKB - 920)) | (1 << (self::ST_GEOMETRYN - 920)) | (1 << (self::ST_GEOMETRYTYPE - 920)) | (1 << (self::ST_GEOMFROMTEXT - 920)) | (1 << (self::ST_GEOMFROMWKB - 920)) | (1 << (self::ST_INTERIORRINGN - 920)) | (1 << (self::ST_INTERSECTION - 920)) | (1 << (self::ST_INTERSECTS - 920)) | (1 << (self::ST_ISCLOSED - 920)) | (1 << (self::ST_ISEMPTY - 920)) | (1 << (self::ST_ISSIMPLE - 920)) | (1 << (self::ST_LINEFROMTEXT - 920)) | (1 << (self::ST_LINEFROMWKB - 920)) | (1 << (self::ST_LINESTRINGFROMTEXT - 920)) | (1 << (self::ST_LINESTRINGFROMWKB - 920)) | (1 << (self::ST_NUMGEOMETRIES - 920)) | (1 << (self::ST_NUMINTERIORRING - 920)) | (1 << (self::ST_NUMINTERIORRINGS - 920)) | (1 << (self::ST_NUMPOINTS - 920)) | (1 << (self::ST_OVERLAPS - 920)) | (1 << (self::ST_POINTFROMTEXT - 920)) | (1 << (self::ST_POINTFROMWKB - 920)) | (1 << (self::ST_POINTN - 920)) | (1 << (self::ST_POLYFROMTEXT - 920)) | (1 << (self::ST_POLYFROMWKB - 920)) | (1 << (self::ST_POLYGONFROMTEXT - 920)) | (1 << (self::ST_POLYGONFROMWKB - 920)) | (1 << (self::ST_SRID - 920)) | (1 << (self::ST_STARTPOINT - 920)) | (1 << (self::ST_SYMDIFFERENCE - 920)) | (1 << (self::ST_TOUCHES - 920)) | (1 << (self::ST_UNION - 920)) | (1 << (self::ST_WITHIN - 920)) | (1 << (self::ST_X - 920)) | (1 << (self::ST_Y - 920)) | (1 << (self::SUBDATE - 920)) | (1 << (self::SUBSTRING_INDEX - 920)) | (1 << (self::SUBTIME - 920)) | (1 << (self::SYSTEM_USER - 920)) | (1 << (self::TAN - 920)) | (1 << (self::TIMEDIFF - 920)) | (1 << (self::TIMESTAMPADD - 920)) | (1 << (self::TIMESTAMPDIFF - 920)) | (1 << (self::TIME_FORMAT - 920)) | (1 << (self::TIME_TO_SEC - 920)) | (1 << (self::TOUCHES - 920)) | (1 << (self::TO_BASE64 - 920)) | (1 << (self::TO_DAYS - 920)) | (1 << (self::TO_SECONDS - 920)) | (1 << (self::UCASE - 920)) | (1 << (self::UNCOMPRESS - 920)) | (1 << (self::UNCOMPRESSED_LENGTH - 920)) | (1 << (self::UNHEX - 920)) | (1 << (self::UNIX_TIMESTAMP - 920)) | (1 << (self::UPDATEXML - 920)) | (1 << (self::UPPER - 920)))) !== 0) || (((($_la - 984)) & ~0x3f) === 0 && ((1 << ($_la - 984)) & ((1 << (self::UUID - 984)) | (1 << (self::UUID_SHORT - 984)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 984)) | (1 << (self::VERSION - 984)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 984)) | (1 << (self::WEEKDAY - 984)) | (1 << (self::WEEKOFYEAR - 984)) | (1 << (self::WEIGHT_STRING - 984)) | (1 << (self::WITHIN - 984)) | (1 << (self::YEARWEEK - 984)) | (1 << (self::Y_FUNCTION - 984)) | (1 << (self::X_FUNCTION - 984)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 984)) | (1 << (self::STRING_LITERAL - 984)) | (1 << (self::ID - 984)) | (1 << (self::REVERSE_QUOTE_ID - 984)))) !== 0)) {
		        	$this->setState(4253);
		        	$this->uid();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function cursorStatement() : Context\CursorStatementContext
		{
		    $localContext = new Context\CursorStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 364, self::RULE_cursorStatement);

		    try {
		        $this->setState(4271);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CLOSE:
		            	$localContext = new Context\CloseCursorContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4256);
		            	$this->match(self::CLOSE);
		            	$this->setState(4257);
		            	$this->uid();
		            	break;

		            case self::FETCH:
		            	$localContext = new Context\FetchCursorContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4258);
		            	$this->match(self::FETCH);
		            	$this->setState(4263);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 614, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(4260);
		            		    $this->errorHandler->sync($this);
		            		    $_la = $this->input->LA(1);

		            		    if ($_la === self::NEXT) {
		            		    	$this->setState(4259);
		            		    	$this->match(self::NEXT);
		            		    }
		            		    $this->setState(4262);
		            		    $this->match(self::FROM);
		            		break;
		            	}
		            	$this->setState(4265);
		            	$this->uid();
		            	$this->setState(4266);
		            	$this->match(self::INTO);
		            	$this->setState(4267);
		            	$this->uidList();
		            	break;

		            case self::OPEN:
		            	$localContext = new Context\OpenCursorContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4269);
		            	$this->match(self::OPEN);
		            	$this->setState(4270);
		            	$this->uid();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function declareVariable() : Context\DeclareVariableContext
		{
		    $localContext = new Context\DeclareVariableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 366, self::RULE_declareVariable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4273);
		        $this->match(self::DECLARE);
		        $this->setState(4274);
		        $this->uidList();
		        $this->setState(4275);
		        $this->dataType();
		        $this->setState(4278);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::DEFAULT) {
		        	$this->setState(4276);
		        	$this->match(self::DEFAULT);
		        	$this->setState(4277);
		        	$this->defaultValue();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function declareCondition() : Context\DeclareConditionContext
		{
		    $localContext = new Context\DeclareConditionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 368, self::RULE_declareCondition);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4280);
		        $this->match(self::DECLARE);
		        $this->setState(4281);
		        $this->uid();
		        $this->setState(4282);
		        $this->match(self::CONDITION);
		        $this->setState(4283);
		        $this->match(self::FOR);
		        $this->setState(4290);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ZERO_DECIMAL:
		            case self::ONE_DECIMAL:
		            case self::TWO_DECIMAL:
		            case self::DECIMAL_LITERAL:
		            	$this->setState(4284);
		            	$this->decimalLiteral();
		            	break;

		            case self::SQLSTATE:
		            	$this->setState(4285);
		            	$this->match(self::SQLSTATE);
		            	$this->setState(4287);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::VALUE) {
		            		$this->setState(4286);
		            		$this->match(self::VALUE);
		            	}
		            	$this->setState(4289);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function declareCursor() : Context\DeclareCursorContext
		{
		    $localContext = new Context\DeclareCursorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 370, self::RULE_declareCursor);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4292);
		        $this->match(self::DECLARE);
		        $this->setState(4293);
		        $this->uid();
		        $this->setState(4294);
		        $this->match(self::CURSOR);
		        $this->setState(4295);
		        $this->match(self::FOR);
		        $this->setState(4296);
		        $this->selectStatement();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function declareHandler() : Context\DeclareHandlerContext
		{
		    $localContext = new Context\DeclareHandlerContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 372, self::RULE_declareHandler);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4298);
		        $this->match(self::DECLARE);
		        $this->setState(4299);

		        $localContext->handlerAction = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::CONTINUE || $_la === self::EXIT || $_la === self::UNDO)) {
		        	    $localContext->handlerAction = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(4300);
		        $this->match(self::HANDLER);
		        $this->setState(4301);
		        $this->match(self::FOR);
		        $this->setState(4302);
		        $this->handlerConditionValue();
		        $this->setState(4307);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(4303);
		        	$this->match(self::COMMA);
		        	$this->setState(4304);
		        	$this->handlerConditionValue();
		        	$this->setState(4309);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(4310);
		        $this->routineBody();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function handlerConditionValue() : Context\HandlerConditionValueContext
		{
		    $localContext = new Context\HandlerConditionValueContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 374, self::RULE_handlerConditionValue);

		    try {
		        $this->setState(4323);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ZERO_DECIMAL:
		            case self::ONE_DECIMAL:
		            case self::TWO_DECIMAL:
		            case self::DECIMAL_LITERAL:
		            	$localContext = new Context\HandlerConditionCodeContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4312);
		            	$this->decimalLiteral();
		            	break;

		            case self::SQLSTATE:
		            	$localContext = new Context\HandlerConditionStateContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4313);
		            	$this->match(self::SQLSTATE);
		            	$this->setState(4315);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::VALUE) {
		            		$this->setState(4314);
		            		$this->match(self::VALUE);
		            	}
		            	$this->setState(4317);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::CURRENT:
		            case self::DATABASE:
		            case self::DIAGNOSTICS:
		            case self::LEFT:
		            case self::NUMBER:
		            case self::RIGHT:
		            case self::STACKED:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::COUNT:
		            case self::POSITION:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::TABLES:
		            case self::ROUTINE:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::PRIVILEGES:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::STRING_LITERAL:
		            case self::ID:
		            case self::REVERSE_QUOTE_ID:
		            	$localContext = new Context\HandlerConditionNameContext($localContext);
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4318);
		            	$this->uid();
		            	break;

		            case self::SQLWARNING:
		            	$localContext = new Context\HandlerConditionWarningContext($localContext);
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(4319);
		            	$this->match(self::SQLWARNING);
		            	break;

		            case self::NOT:
		            	$localContext = new Context\HandlerConditionNotfoundContext($localContext);
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(4320);
		            	$this->match(self::NOT);
		            	$this->setState(4321);
		            	$this->match(self::FOUND);
		            	break;

		            case self::SQLEXCEPTION:
		            	$localContext = new Context\HandlerConditionExceptionContext($localContext);
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(4322);
		            	$this->match(self::SQLEXCEPTION);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function procedureSqlStatement() : Context\ProcedureSqlStatementContext
		{
		    $localContext = new Context\ProcedureSqlStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 376, self::RULE_procedureSqlStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4327);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 622, $this->ctx)) {
		        	case 1:
		        	    $this->setState(4325);
		        	    $this->compoundStatement();
		        	break;

		        	case 2:
		        	    $this->setState(4326);
		        	    $this->sqlStatement();
		        	break;
		        }
		        $this->setState(4329);
		        $this->match(self::SEMI);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function caseAlternative() : Context\CaseAlternativeContext
		{
		    $localContext = new Context\CaseAlternativeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 378, self::RULE_caseAlternative);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4331);
		        $this->match(self::WHEN);
		        $this->setState(4334);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 623, $this->ctx)) {
		        	case 1:
		        	    $this->setState(4332);
		        	    $this->constant();
		        	break;

		        	case 2:
		        	    $this->setState(4333);
		        	    $this->recursiveExpression(0);
		        	break;
		        }
		        $this->setState(4336);
		        $this->match(self::THEN);
		        $this->setState(4338); 
		        $this->errorHandler->sync($this);

		        $alt = 1;

		        do {
		        	switch ($alt) {
		        	case 1:
		        		$this->setState(4337);
		        		$this->procedureSqlStatement();
		        		break;
		        	default:
		        		throw new NoViableAltException($this);
		        	}

		        	$this->setState(4340); 
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 624, $this->ctx);
		        } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function elifAlternative() : Context\ElifAlternativeContext
		{
		    $localContext = new Context\ElifAlternativeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 380, self::RULE_elifAlternative);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4342);
		        $this->match(self::ELSEIF);
		        $this->setState(4343);
		        $this->recursiveExpression(0);
		        $this->setState(4344);
		        $this->match(self::THEN);
		        $this->setState(4346); 
		        $this->errorHandler->sync($this);

		        $alt = 1;

		        do {
		        	switch ($alt) {
		        	case 1:
		        		$this->setState(4345);
		        		$this->procedureSqlStatement();
		        		break;
		        	default:
		        		throw new NoViableAltException($this);
		        	}

		        	$this->setState(4348); 
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 625, $this->ctx);
		        } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function alterUser() : Context\AlterUserContext
		{
		    $localContext = new Context\AlterUserContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 382, self::RULE_alterUser);

		    try {
		        $this->setState(4404);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 637, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\AlterUserMysqlV56Context($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4350);
		        	    $this->match(self::ALTER);
		        	    $this->setState(4351);
		        	    $this->match(self::USER);
		        	    $this->setState(4352);
		        	    $this->userSpecification();
		        	    $this->setState(4357);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(4353);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(4354);
		        	    	$this->userSpecification();
		        	    	$this->setState(4359);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\AlterUserMysqlV57Context($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4360);
		        	    $this->match(self::ALTER);
		        	    $this->setState(4361);
		        	    $this->match(self::USER);
		        	    $this->setState(4363);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::IF) {
		        	    	$this->setState(4362);
		        	    	$this->ifExists();
		        	    }
		        	    $this->setState(4365);
		        	    $this->userAuthOption();
		        	    $this->setState(4370);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(4366);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(4367);
		        	    	$this->userAuthOption();
		        	    	$this->setState(4372);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(4387);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::REQUIRE) {
		        	    	$this->setState(4373);
		        	    	$this->match(self::REQUIRE);
		        	    	$this->setState(4385);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->input->LA(1)) {
		        	    	    case self::NONE:
		        	    	    	$this->setState(4374);
		        	    	    	$localContext->tlsNone = $this->match(self::NONE);
		        	    	    	break;

		        	    	    case self::SSL:
		        	    	    case self::CIPHER:
		        	    	    case self::ISSUER:
		        	    	    case self::SUBJECT:
		        	    	    case self::X509:
		        	    	    	$this->setState(4375);
		        	    	    	$this->tlsOption();
		        	    	    	$this->setState(4382);
		        	    	    	$this->errorHandler->sync($this);

		        	    	    	$_la = $this->input->LA(1);
		        	    	    	while ($_la === self::AND || $_la === self::SSL || $_la === self::CIPHER || $_la === self::ISSUER || $_la === self::SUBJECT || $_la === self::X509) {
		        	    	    		$this->setState(4377);
		        	    	    		$this->errorHandler->sync($this);
		        	    	    		$_la = $this->input->LA(1);

		        	    	    		if ($_la === self::AND) {
		        	    	    			$this->setState(4376);
		        	    	    			$this->match(self::AND);
		        	    	    		}
		        	    	    		$this->setState(4379);
		        	    	    		$this->tlsOption();
		        	    	    		$this->setState(4384);
		        	    	    		$this->errorHandler->sync($this);
		        	    	    		$_la = $this->input->LA(1);
		        	    	    	}
		        	    	    	break;

		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}
		        	    }
		        	    $this->setState(4395);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::WITH) {
		        	    	$this->setState(4389);
		        	    	$this->match(self::WITH);
		        	    	$this->setState(4391); 
		        	    	$this->errorHandler->sync($this);

		        	    	$_la = $this->input->LA(1);
		        	    	do {
		        	    		$this->setState(4390);
		        	    		$this->userResourceOption();
		        	    		$this->setState(4393); 
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);
		        	    	} while ((((($_la - 426)) & ~0x3f) === 0 && ((1 << ($_la - 426)) & ((1 << (self::MAX_CONNECTIONS_PER_HOUR - 426)) | (1 << (self::MAX_QUERIES_PER_HOUR - 426)) | (1 << (self::MAX_UPDATES_PER_HOUR - 426)) | (1 << (self::MAX_USER_CONNECTIONS - 426)))) !== 0));
		        	    }
		        	    $this->setState(4401);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::ACCOUNT || $_la === self::PASSWORD) {
		        	    	$this->setState(4399);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->input->LA(1)) {
		        	    	    case self::PASSWORD:
		        	    	    	$this->setState(4397);
		        	    	    	$this->userPasswordOption();
		        	    	    	break;

		        	    	    case self::ACCOUNT:
		        	    	    	$this->setState(4398);
		        	    	    	$this->userLockOption();
		        	    	    	break;

		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}
		        	    	$this->setState(4403);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createUser() : Context\CreateUserContext
		{
		    $localContext = new Context\CreateUserContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 384, self::RULE_createUser);

		    try {
		        $this->setState(4460);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 649, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\CreateUserMysqlV56Context($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4406);
		        	    $this->match(self::CREATE);
		        	    $this->setState(4407);
		        	    $this->match(self::USER);
		        	    $this->setState(4408);
		        	    $this->userAuthOption();
		        	    $this->setState(4413);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(4409);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(4410);
		        	    	$this->userAuthOption();
		        	    	$this->setState(4415);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\CreateUserMysqlV57Context($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4416);
		        	    $this->match(self::CREATE);
		        	    $this->setState(4417);
		        	    $this->match(self::USER);
		        	    $this->setState(4419);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::IF) {
		        	    	$this->setState(4418);
		        	    	$this->ifNotExists();
		        	    }
		        	    $this->setState(4421);
		        	    $this->userAuthOption();
		        	    $this->setState(4426);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(4422);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(4423);
		        	    	$this->userAuthOption();
		        	    	$this->setState(4428);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(4443);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::REQUIRE) {
		        	    	$this->setState(4429);
		        	    	$this->match(self::REQUIRE);
		        	    	$this->setState(4441);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->input->LA(1)) {
		        	    	    case self::NONE:
		        	    	    	$this->setState(4430);
		        	    	    	$localContext->tlsNone = $this->match(self::NONE);
		        	    	    	break;

		        	    	    case self::SSL:
		        	    	    case self::CIPHER:
		        	    	    case self::ISSUER:
		        	    	    case self::SUBJECT:
		        	    	    case self::X509:
		        	    	    	$this->setState(4431);
		        	    	    	$this->tlsOption();
		        	    	    	$this->setState(4438);
		        	    	    	$this->errorHandler->sync($this);

		        	    	    	$_la = $this->input->LA(1);
		        	    	    	while ($_la === self::AND || $_la === self::SSL || $_la === self::CIPHER || $_la === self::ISSUER || $_la === self::SUBJECT || $_la === self::X509) {
		        	    	    		$this->setState(4433);
		        	    	    		$this->errorHandler->sync($this);
		        	    	    		$_la = $this->input->LA(1);

		        	    	    		if ($_la === self::AND) {
		        	    	    			$this->setState(4432);
		        	    	    			$this->match(self::AND);
		        	    	    		}
		        	    	    		$this->setState(4435);
		        	    	    		$this->tlsOption();
		        	    	    		$this->setState(4440);
		        	    	    		$this->errorHandler->sync($this);
		        	    	    		$_la = $this->input->LA(1);
		        	    	    	}
		        	    	    	break;

		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}
		        	    }
		        	    $this->setState(4451);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::WITH) {
		        	    	$this->setState(4445);
		        	    	$this->match(self::WITH);
		        	    	$this->setState(4447); 
		        	    	$this->errorHandler->sync($this);

		        	    	$_la = $this->input->LA(1);
		        	    	do {
		        	    		$this->setState(4446);
		        	    		$this->userResourceOption();
		        	    		$this->setState(4449); 
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);
		        	    	} while ((((($_la - 426)) & ~0x3f) === 0 && ((1 << ($_la - 426)) & ((1 << (self::MAX_CONNECTIONS_PER_HOUR - 426)) | (1 << (self::MAX_QUERIES_PER_HOUR - 426)) | (1 << (self::MAX_UPDATES_PER_HOUR - 426)) | (1 << (self::MAX_USER_CONNECTIONS - 426)))) !== 0));
		        	    }
		        	    $this->setState(4457);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::ACCOUNT || $_la === self::PASSWORD) {
		        	    	$this->setState(4455);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->input->LA(1)) {
		        	    	    case self::PASSWORD:
		        	    	    	$this->setState(4453);
		        	    	    	$this->userPasswordOption();
		        	    	    	break;

		        	    	    case self::ACCOUNT:
		        	    	    	$this->setState(4454);
		        	    	    	$this->userLockOption();
		        	    	    	break;

		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}
		        	    	$this->setState(4459);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dropUser() : Context\DropUserContext
		{
		    $localContext = new Context\DropUserContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 386, self::RULE_dropUser);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4462);
		        $this->match(self::DROP);
		        $this->setState(4463);
		        $this->match(self::USER);
		        $this->setState(4465);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IF) {
		        	$this->setState(4464);
		        	$this->ifExists();
		        }
		        $this->setState(4467);
		        $this->userName();
		        $this->setState(4472);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(4468);
		        	$this->match(self::COMMA);
		        	$this->setState(4469);
		        	$this->userName();
		        	$this->setState(4474);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function grantStatement() : Context\GrantStatementContext
		{
		    $localContext = new Context\GrantStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 388, self::RULE_grantStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4475);
		        $this->match(self::GRANT);
		        $this->setState(4476);
		        $this->privelegeClause();
		        $this->setState(4481);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(4477);
		        	$this->match(self::COMMA);
		        	$this->setState(4478);
		        	$this->privelegeClause();
		        	$this->setState(4483);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(4484);
		        $this->match(self::ON);
		        $this->setState(4486);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 653, $this->ctx)) {
		            case 1:
		        	    $this->setState(4485);

		        	    $localContext->privilegeObject = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::PROCEDURE || $_la === self::TABLE || $_la === self::FUNCTION)) {
		        	    	    $localContext->privilegeObject = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;
		        }
		        $this->setState(4488);
		        $this->privilegeLevel();
		        $this->setState(4489);
		        $this->match(self::TO);
		        $this->setState(4490);
		        $this->userAuthOption();
		        $this->setState(4495);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(4491);
		        	$this->match(self::COMMA);
		        	$this->setState(4492);
		        	$this->userAuthOption();
		        	$this->setState(4497);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(4512);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::REQUIRE) {
		        	$this->setState(4498);
		        	$this->match(self::REQUIRE);
		        	$this->setState(4510);
		        	$this->errorHandler->sync($this);

		        	switch ($this->input->LA(1)) {
		        	    case self::NONE:
		        	    	$this->setState(4499);
		        	    	$localContext->tlsNone = $this->match(self::NONE);
		        	    	break;

		        	    case self::SSL:
		        	    case self::CIPHER:
		        	    case self::ISSUER:
		        	    case self::SUBJECT:
		        	    case self::X509:
		        	    	$this->setState(4500);
		        	    	$this->tlsOption();
		        	    	$this->setState(4507);
		        	    	$this->errorHandler->sync($this);

		        	    	$_la = $this->input->LA(1);
		        	    	while ($_la === self::AND || $_la === self::SSL || $_la === self::CIPHER || $_la === self::ISSUER || $_la === self::SUBJECT || $_la === self::X509) {
		        	    		$this->setState(4502);
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);

		        	    		if ($_la === self::AND) {
		        	    			$this->setState(4501);
		        	    			$this->match(self::AND);
		        	    		}
		        	    		$this->setState(4504);
		        	    		$this->tlsOption();
		        	    		$this->setState(4509);
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);
		        	    	}
		        	    	break;

		        	default:
		        		throw new NoViableAltException($this);
		        	}
		        }
		        $this->setState(4523);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WITH) {
		        	$this->setState(4514);
		        	$this->match(self::WITH);
		        	$this->setState(4520);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 660, $this->ctx);

		        	while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        		if ($alt === 1) {
		        			$this->setState(4518);
		        			$this->errorHandler->sync($this);

		        			switch ($this->input->LA(1)) {
		        			    case self::GRANT:
		        			    	$this->setState(4515);
		        			    	$this->match(self::GRANT);
		        			    	$this->setState(4516);
		        			    	$this->match(self::OPTION);
		        			    	break;

		        			    case self::MAX_CONNECTIONS_PER_HOUR:
		        			    case self::MAX_QUERIES_PER_HOUR:
		        			    case self::MAX_UPDATES_PER_HOUR:
		        			    case self::MAX_USER_CONNECTIONS:
		        			    	$this->setState(4517);
		        			    	$this->userResourceOption();
		        			    	break;

		        			default:
		        				throw new NoViableAltException($this);
		        			} 
		        		}

		        		$this->setState(4522);
		        		$this->errorHandler->sync($this);

		        		$alt = $this->getInterpreter()->adaptivePredict($this->input, 660, $this->ctx);
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function grantProxy() : Context\GrantProxyContext
		{
		    $localContext = new Context\GrantProxyContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 390, self::RULE_grantProxy);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4525);
		        $this->match(self::GRANT);
		        $this->setState(4526);
		        $this->match(self::PROXY);
		        $this->setState(4527);
		        $this->match(self::ON);
		        $this->setState(4528);
		        $localContext->fromFirst = $this->userName();
		        $this->setState(4529);
		        $this->match(self::TO);
		        $this->setState(4530);
		        $localContext->toFirst = $this->userName();
		        $this->setState(4535);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(4531);
		        	$this->match(self::COMMA);
		        	$this->setState(4532);
		        	$localContext->userName = $this->userName();
		        	$localContext->toOther[] = $localContext->userName;
		        	$this->setState(4537);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(4541);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::WITH) {
		        	$this->setState(4538);
		        	$this->match(self::WITH);
		        	$this->setState(4539);
		        	$this->match(self::GRANT);
		        	$this->setState(4540);
		        	$this->match(self::OPTION);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function renameUser() : Context\RenameUserContext
		{
		    $localContext = new Context\RenameUserContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 392, self::RULE_renameUser);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4543);
		        $this->match(self::RENAME);
		        $this->setState(4544);
		        $this->match(self::USER);
		        $this->setState(4545);
		        $this->renameUserClause();
		        $this->setState(4550);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(4546);
		        	$this->match(self::COMMA);
		        	$this->setState(4547);
		        	$this->renameUserClause();
		        	$this->setState(4552);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function revokeStatement() : Context\RevokeStatementContext
		{
		    $localContext = new Context\RevokeStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 394, self::RULE_revokeStatement);

		    try {
		        $this->setState(4593);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 670, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\DetailRevokeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4553);
		        	    $this->match(self::REVOKE);
		        	    $this->setState(4554);
		        	    $this->privelegeClause();
		        	    $this->setState(4559);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(4555);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(4556);
		        	    	$this->privelegeClause();
		        	    	$this->setState(4561);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(4562);
		        	    $this->match(self::ON);
		        	    $this->setState(4564);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 666, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(4563);

		        	    	    $localContext->privilegeObject = $this->input->LT(1);
		        	    	    $_la = $this->input->LA(1);

		        	    	    if (!($_la === self::PROCEDURE || $_la === self::TABLE || $_la === self::FUNCTION)) {
		        	    	    	    $localContext->privilegeObject = $this->errorHandler->recoverInline($this);
		        	    	    } else {
		        	    	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    	    $this->matchedEOF = true;
		        	    	        }

		        	    	    	$this->errorHandler->reportMatch($this);
		        	    	    	$this->consume();
		        	    	    }
		        	    	break;
		        	    }
		        	    $this->setState(4566);
		        	    $this->privilegeLevel();
		        	    $this->setState(4567);
		        	    $this->match(self::FROM);
		        	    $this->setState(4568);
		        	    $this->userName();
		        	    $this->setState(4573);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(4569);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(4570);
		        	    	$this->userName();
		        	    	$this->setState(4575);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\ShortRevokeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4576);
		        	    $this->match(self::REVOKE);
		        	    $this->setState(4577);
		        	    $this->match(self::ALL);
		        	    $this->setState(4579);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::PRIVILEGES) {
		        	    	$this->setState(4578);
		        	    	$this->match(self::PRIVILEGES);
		        	    }
		        	    $this->setState(4581);
		        	    $this->match(self::COMMA);
		        	    $this->setState(4582);
		        	    $this->match(self::GRANT);
		        	    $this->setState(4583);
		        	    $this->match(self::OPTION);
		        	    $this->setState(4584);
		        	    $this->match(self::FROM);
		        	    $this->setState(4585);
		        	    $this->userName();
		        	    $this->setState(4590);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(4586);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(4587);
		        	    	$this->userName();
		        	    	$this->setState(4592);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function revokeProxy() : Context\RevokeProxyContext
		{
		    $localContext = new Context\RevokeProxyContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 396, self::RULE_revokeProxy);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4595);
		        $this->match(self::REVOKE);
		        $this->setState(4596);
		        $this->match(self::PROXY);
		        $this->setState(4597);
		        $this->match(self::ON);
		        $this->setState(4598);
		        $localContext->onUser = $this->userName();
		        $this->setState(4599);
		        $this->match(self::FROM);
		        $this->setState(4600);
		        $localContext->fromFirst = $this->userName();
		        $this->setState(4605);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(4601);
		        	$this->match(self::COMMA);
		        	$this->setState(4602);
		        	$localContext->userName = $this->userName();
		        	$localContext->fromOther[] = $localContext->userName;
		        	$this->setState(4607);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function setPasswordStatement() : Context\SetPasswordStatementContext
		{
		    $localContext = new Context\SetPasswordStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 398, self::RULE_setPasswordStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4608);
		        $this->match(self::SET);
		        $this->setState(4609);
		        $this->match(self::PASSWORD);
		        $this->setState(4612);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::FOR) {
		        	$this->setState(4610);
		        	$this->match(self::FOR);
		        	$this->setState(4611);
		        	$this->userName();
		        }
		        $this->setState(4614);
		        $this->match(self::EQUAL_SYMBOL);
		        $this->setState(4617);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::OLD_PASSWORD:
		            case self::PASSWORD:
		            	$this->setState(4615);
		            	$this->passwordFunctionClause();
		            	break;

		            case self::STRING_LITERAL:
		            	$this->setState(4616);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function userSpecification() : Context\UserSpecificationContext
		{
		    $localContext = new Context\UserSpecificationContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 400, self::RULE_userSpecification);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4619);
		        $this->userName();
		        $this->setState(4620);
		        $this->userPasswordOption();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function userAuthOption() : Context\UserAuthOptionContext
		{
		    $localContext = new Context\UserAuthOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 402, self::RULE_userAuthOption);

		    try {
		        $this->setState(4646);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 676, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\PasswordAuthOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4622);
		        	    $this->userName();
		        	    $this->setState(4623);
		        	    $this->match(self::IDENTIFIED);
		        	    $this->setState(4624);
		        	    $this->match(self::BY);
		        	    $this->setState(4625);
		        	    $this->match(self::PASSWORD);
		        	    $this->setState(4626);
		        	    $localContext->hashed = $this->match(self::STRING_LITERAL);
		        	break;

		        	case 2:
		        	    $localContext = new Context\StringAuthOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4628);
		        	    $this->userName();
		        	    $this->setState(4629);
		        	    $this->match(self::IDENTIFIED);
		        	    $this->setState(4632);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::WITH) {
		        	    	$this->setState(4630);
		        	    	$this->match(self::WITH);
		        	    	$this->setState(4631);
		        	    	$this->authPlugin();
		        	    }
		        	    $this->setState(4634);
		        	    $this->match(self::BY);
		        	    $this->setState(4635);
		        	    $this->match(self::STRING_LITERAL);
		        	break;

		        	case 3:
		        	    $localContext = new Context\HashAuthOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(4637);
		        	    $this->userName();
		        	    $this->setState(4638);
		        	    $this->match(self::IDENTIFIED);
		        	    $this->setState(4639);
		        	    $this->match(self::WITH);
		        	    $this->setState(4640);
		        	    $this->authPlugin();
		        	    $this->setState(4643);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::AS) {
		        	    	$this->setState(4641);
		        	    	$this->match(self::AS);
		        	    	$this->setState(4642);
		        	    	$this->match(self::STRING_LITERAL);
		        	    }
		        	break;

		        	case 4:
		        	    $localContext = new Context\SimpleAuthOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(4645);
		        	    $this->userName();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tlsOption() : Context\TlsOptionContext
		{
		    $localContext = new Context\TlsOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 404, self::RULE_tlsOption);

		    try {
		        $this->setState(4656);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SSL:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4648);
		            	$this->match(self::SSL);
		            	break;

		            case self::X509:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4649);
		            	$this->match(self::X509);
		            	break;

		            case self::CIPHER:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4650);
		            	$this->match(self::CIPHER);
		            	$this->setState(4651);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::ISSUER:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(4652);
		            	$this->match(self::ISSUER);
		            	$this->setState(4653);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::SUBJECT:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(4654);
		            	$this->match(self::SUBJECT);
		            	$this->setState(4655);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function userResourceOption() : Context\UserResourceOptionContext
		{
		    $localContext = new Context\UserResourceOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 406, self::RULE_userResourceOption);

		    try {
		        $this->setState(4666);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::MAX_QUERIES_PER_HOUR:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4658);
		            	$this->match(self::MAX_QUERIES_PER_HOUR);
		            	$this->setState(4659);
		            	$this->decimalLiteral();
		            	break;

		            case self::MAX_UPDATES_PER_HOUR:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4660);
		            	$this->match(self::MAX_UPDATES_PER_HOUR);
		            	$this->setState(4661);
		            	$this->decimalLiteral();
		            	break;

		            case self::MAX_CONNECTIONS_PER_HOUR:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4662);
		            	$this->match(self::MAX_CONNECTIONS_PER_HOUR);
		            	$this->setState(4663);
		            	$this->decimalLiteral();
		            	break;

		            case self::MAX_USER_CONNECTIONS:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(4664);
		            	$this->match(self::MAX_USER_CONNECTIONS);
		            	$this->setState(4665);
		            	$this->decimalLiteral();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function userPasswordOption() : Context\UserPasswordOptionContext
		{
		    $localContext = new Context\UserPasswordOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 408, self::RULE_userPasswordOption);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4668);
		        $this->match(self::PASSWORD);
		        $this->setState(4669);
		        $this->match(self::EXPIRE);
		        $this->setState(4676);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::DEFAULT:
		            	$this->setState(4670);
		            	$localContext->expireType = $this->match(self::DEFAULT);
		            	break;

		            case self::NEVER:
		            	$this->setState(4671);
		            	$localContext->expireType = $this->match(self::NEVER);
		            	break;

		            case self::INTERVAL:
		            	$this->setState(4672);
		            	$localContext->expireType = $this->match(self::INTERVAL);
		            	$this->setState(4673);
		            	$this->decimalLiteral();
		            	$this->setState(4674);
		            	$this->match(self::DAY);
		            	break;

		            case self::EOF:
		            case self::ALTER:
		            case self::ANALYZE:
		            case self::CALL:
		            case self::CHANGE:
		            case self::CHECK:
		            case self::CREATE:
		            case self::DELETE:
		            case self::DESC:
		            case self::DESCRIBE:
		            case self::DROP:
		            case self::EXPLAIN:
		            case self::GET:
		            case self::GRANT:
		            case self::INSERT:
		            case self::KILL:
		            case self::LOAD:
		            case self::LOCK:
		            case self::OPTIMIZE:
		            case self::PURGE:
		            case self::RELEASE:
		            case self::RENAME:
		            case self::REPLACE:
		            case self::RESIGNAL:
		            case self::REVOKE:
		            case self::SELECT:
		            case self::SET:
		            case self::SHOW:
		            case self::SIGNAL:
		            case self::UNLOCK:
		            case self::UPDATE:
		            case self::USE:
		            case self::ACCOUNT:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::CACHE:
		            case self::CHECKSUM:
		            case self::COMMIT:
		            case self::DEALLOCATE:
		            case self::DO:
		            case self::FLUSH:
		            case self::HANDLER:
		            case self::HELP:
		            case self::INSTALL:
		            case self::PASSWORD:
		            case self::PREPARE:
		            case self::REPAIR:
		            case self::RESET:
		            case self::ROLLBACK:
		            case self::SAVEPOINT:
		            case self::START:
		            case self::STOP:
		            case self::TRUNCATE:
		            case self::UNINSTALL:
		            case self::XA:
		            case self::EXECUTE:
		            case self::SHUTDOWN:
		            case self::MINUSMINUS:
		            case self::LR_BRACKET:
		            case self::COMMA:
		            case self::SEMI:
		            	break;

		        default:
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function userLockOption() : Context\UserLockOptionContext
		{
		    $localContext = new Context\UserLockOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 410, self::RULE_userLockOption);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4678);
		        $this->match(self::ACCOUNT);
		        $this->setState(4679);

		        $localContext->lockType = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::LOCK || $_la === self::UNLOCK)) {
		        	    $localContext->lockType = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function privelegeClause() : Context\PrivelegeClauseContext
		{
		    $localContext = new Context\PrivelegeClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 412, self::RULE_privelegeClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4681);
		        $this->privilege();
		        $this->setState(4686);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LR_BRACKET) {
		        	$this->setState(4682);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(4683);
		        	$this->uidList();
		        	$this->setState(4684);
		        	$this->match(self::RR_BRACKET);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function privilege() : Context\PrivilegeContext
		{
		    $localContext = new Context\PrivilegeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 414, self::RULE_privilege);

		    try {
		        $this->setState(4731);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ALL:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4688);
		            	$this->match(self::ALL);
		            	$this->setState(4690);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::PRIVILEGES) {
		            		$this->setState(4689);
		            		$this->match(self::PRIVILEGES);
		            	}
		            	break;

		            case self::ALTER:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4692);
		            	$this->match(self::ALTER);
		            	$this->setState(4694);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::ROUTINE) {
		            		$this->setState(4693);
		            		$this->match(self::ROUTINE);
		            	}
		            	break;

		            case self::CREATE:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4696);
		            	$this->match(self::CREATE);
		            	$this->setState(4703);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::TEMPORARY:
		            	    	$this->setState(4697);
		            	    	$this->match(self::TEMPORARY);
		            	    	$this->setState(4698);
		            	    	$this->match(self::TABLES);
		            	    	break;

		            	    case self::ROUTINE:
		            	    	$this->setState(4699);
		            	    	$this->match(self::ROUTINE);
		            	    	break;

		            	    case self::VIEW:
		            	    	$this->setState(4700);
		            	    	$this->match(self::VIEW);
		            	    	break;

		            	    case self::USER:
		            	    	$this->setState(4701);
		            	    	$this->match(self::USER);
		            	    	break;

		            	    case self::TABLESPACE:
		            	    	$this->setState(4702);
		            	    	$this->match(self::TABLESPACE);
		            	    	break;

		            	    case self::ON:
		            	    case self::LR_BRACKET:
		            	    case self::COMMA:
		            	    	break;

		            	default:
		            		break;
		            	}
		            	break;

		            case self::DELETE:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(4705);
		            	$this->match(self::DELETE);
		            	break;

		            case self::DROP:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(4706);
		            	$this->match(self::DROP);
		            	break;

		            case self::EVENT:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(4707);
		            	$this->match(self::EVENT);
		            	break;

		            case self::EXECUTE:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(4708);
		            	$this->match(self::EXECUTE);
		            	break;

		            case self::FILE:
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(4709);
		            	$this->match(self::FILE);
		            	break;

		            case self::GRANT:
		            	$this->enterOuterAlt($localContext, 9);
		            	$this->setState(4710);
		            	$this->match(self::GRANT);
		            	$this->setState(4711);
		            	$this->match(self::OPTION);
		            	break;

		            case self::INDEX:
		            	$this->enterOuterAlt($localContext, 10);
		            	$this->setState(4712);
		            	$this->match(self::INDEX);
		            	break;

		            case self::INSERT:
		            	$this->enterOuterAlt($localContext, 11);
		            	$this->setState(4713);
		            	$this->match(self::INSERT);
		            	break;

		            case self::LOCK:
		            	$this->enterOuterAlt($localContext, 12);
		            	$this->setState(4714);
		            	$this->match(self::LOCK);
		            	$this->setState(4715);
		            	$this->match(self::TABLES);
		            	break;

		            case self::PROCESS:
		            	$this->enterOuterAlt($localContext, 13);
		            	$this->setState(4716);
		            	$this->match(self::PROCESS);
		            	break;

		            case self::PROXY:
		            	$this->enterOuterAlt($localContext, 14);
		            	$this->setState(4717);
		            	$this->match(self::PROXY);
		            	break;

		            case self::REFERENCES:
		            	$this->enterOuterAlt($localContext, 15);
		            	$this->setState(4718);
		            	$this->match(self::REFERENCES);
		            	break;

		            case self::RELOAD:
		            	$this->enterOuterAlt($localContext, 16);
		            	$this->setState(4719);
		            	$this->match(self::RELOAD);
		            	break;

		            case self::REPLICATION:
		            	$this->enterOuterAlt($localContext, 17);
		            	$this->setState(4720);
		            	$this->match(self::REPLICATION);
		            	$this->setState(4721);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::CLIENT || $_la === self::SLAVE)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		            case self::SELECT:
		            	$this->enterOuterAlt($localContext, 18);
		            	$this->setState(4722);
		            	$this->match(self::SELECT);
		            	break;

		            case self::SHOW:
		            	$this->enterOuterAlt($localContext, 19);
		            	$this->setState(4723);
		            	$this->match(self::SHOW);
		            	$this->setState(4724);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::DATABASES || $_la === self::VIEW)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		            case self::SHUTDOWN:
		            	$this->enterOuterAlt($localContext, 20);
		            	$this->setState(4725);
		            	$this->match(self::SHUTDOWN);
		            	break;

		            case self::SUPER:
		            	$this->enterOuterAlt($localContext, 21);
		            	$this->setState(4726);
		            	$this->match(self::SUPER);
		            	break;

		            case self::TRIGGER:
		            	$this->enterOuterAlt($localContext, 22);
		            	$this->setState(4727);
		            	$this->match(self::TRIGGER);
		            	break;

		            case self::UPDATE:
		            	$this->enterOuterAlt($localContext, 23);
		            	$this->setState(4728);
		            	$this->match(self::UPDATE);
		            	break;

		            case self::USAGE:
		            	$this->enterOuterAlt($localContext, 24);
		            	$this->setState(4729);
		            	$this->match(self::USAGE);
		            	break;

		            case self::SESSION_VARIABLES_ADMIN:
		            	$this->enterOuterAlt($localContext, 25);
		            	$this->setState(4730);
		            	$this->match(self::SESSION_VARIABLES_ADMIN);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function privilegeLevel() : Context\PrivilegeLevelContext
		{
		    $localContext = new Context\PrivilegeLevelContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 416, self::RULE_privilegeLevel);

		    try {
		        $this->setState(4749);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 685, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\CurrentSchemaPriviLevelContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4733);
		        	    $this->match(self::STAR);
		        	break;

		        	case 2:
		        	    $localContext = new Context\GlobalPrivLevelContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4734);
		        	    $this->match(self::STAR);
		        	    $this->setState(4735);
		        	    $this->match(self::DOT);
		        	    $this->setState(4736);
		        	    $this->match(self::STAR);
		        	break;

		        	case 3:
		        	    $localContext = new Context\DefiniteSchemaPrivLevelContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(4737);
		        	    $this->uid();
		        	    $this->setState(4738);
		        	    $this->match(self::DOT);
		        	    $this->setState(4739);
		        	    $this->match(self::STAR);
		        	break;

		        	case 4:
		        	    $localContext = new Context\DefiniteFullTablePrivLevelContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(4741);
		        	    $this->uid();
		        	    $this->setState(4742);
		        	    $this->match(self::DOT);
		        	    $this->setState(4743);
		        	    $this->uid();
		        	break;

		        	case 5:
		        	    $localContext = new Context\DefiniteFullTablePrivLevel2Context($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(4745);
		        	    $this->uid();
		        	    $this->setState(4746);
		        	    $this->dottedId();
		        	break;

		        	case 6:
		        	    $localContext = new Context\DefiniteTablePrivLevelContext($localContext);
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(4748);
		        	    $this->uid();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function renameUserClause() : Context\RenameUserClauseContext
		{
		    $localContext = new Context\RenameUserClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 418, self::RULE_renameUserClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4751);
		        $localContext->fromFirst = $this->userName();
		        $this->setState(4752);
		        $this->match(self::TO);
		        $this->setState(4753);
		        $localContext->toFirst = $this->userName();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function analyzeTable() : Context\AnalyzeTableContext
		{
		    $localContext = new Context\AnalyzeTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 420, self::RULE_analyzeTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4755);
		        $this->match(self::ANALYZE);
		        $this->setState(4757);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL) {
		        	$this->setState(4756);

		        	$localContext->actionOption = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL)) {
		        		    $localContext->actionOption = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(4759);
		        $this->match(self::TABLE);
		        $this->setState(4760);
		        $this->tables();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function checkTable() : Context\CheckTableContext
		{
		    $localContext = new Context\CheckTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 422, self::RULE_checkTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4762);
		        $this->match(self::CHECK);
		        $this->setState(4763);
		        $this->match(self::TABLE);
		        $this->setState(4764);
		        $this->tables();
		        $this->setState(4768);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::FOR || $_la === self::CHANGED || $_la === self::EXTENDED || $_la === self::FAST || $_la === self::MEDIUM || $_la === self::QUICK) {
		        	$this->setState(4765);
		        	$this->checkTableOption();
		        	$this->setState(4770);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function checksumTable() : Context\ChecksumTableContext
		{
		    $localContext = new Context\ChecksumTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 424, self::RULE_checksumTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4771);
		        $this->match(self::CHECKSUM);
		        $this->setState(4772);
		        $this->match(self::TABLE);
		        $this->setState(4773);
		        $this->tables();
		        $this->setState(4775);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EXTENDED || $_la === self::QUICK) {
		        	$this->setState(4774);

		        	$localContext->actionOption = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::EXTENDED || $_la === self::QUICK)) {
		        		    $localContext->actionOption = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function optimizeTable() : Context\OptimizeTableContext
		{
		    $localContext = new Context\OptimizeTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 426, self::RULE_optimizeTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4777);
		        $this->match(self::OPTIMIZE);
		        $this->setState(4779);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL) {
		        	$this->setState(4778);

		        	$localContext->actionOption = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL)) {
		        		    $localContext->actionOption = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(4781);
		        $this->match(self::TABLE);
		        $this->setState(4782);
		        $this->tables();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function repairTable() : Context\RepairTableContext
		{
		    $localContext = new Context\RepairTableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 428, self::RULE_repairTable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4784);
		        $this->match(self::REPAIR);
		        $this->setState(4786);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL) {
		        	$this->setState(4785);

		        	$localContext->actionOption = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL)) {
		        		    $localContext->actionOption = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(4788);
		        $this->match(self::TABLE);
		        $this->setState(4789);
		        $this->tables();
		        $this->setState(4791);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::QUICK) {
		        	$this->setState(4790);
		        	$this->match(self::QUICK);
		        }
		        $this->setState(4794);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EXTENDED) {
		        	$this->setState(4793);
		        	$this->match(self::EXTENDED);
		        }
		        $this->setState(4797);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::USE_FRM) {
		        	$this->setState(4796);
		        	$this->match(self::USE_FRM);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function checkTableOption() : Context\CheckTableOptionContext
		{
		    $localContext = new Context\CheckTableOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 430, self::RULE_checkTableOption);

		    try {
		        $this->setState(4806);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::FOR:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(4799);
		            	$this->match(self::FOR);
		            	$this->setState(4800);
		            	$this->match(self::UPGRADE);
		            	break;

		            case self::QUICK:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(4801);
		            	$this->match(self::QUICK);
		            	break;

		            case self::FAST:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(4802);
		            	$this->match(self::FAST);
		            	break;

		            case self::MEDIUM:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(4803);
		            	$this->match(self::MEDIUM);
		            	break;

		            case self::EXTENDED:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(4804);
		            	$this->match(self::EXTENDED);
		            	break;

		            case self::CHANGED:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(4805);
		            	$this->match(self::CHANGED);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function createUdfunction() : Context\CreateUdfunctionContext
		{
		    $localContext = new Context\CreateUdfunctionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 432, self::RULE_createUdfunction);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4808);
		        $this->match(self::CREATE);
		        $this->setState(4810);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::AGGREGATE) {
		        	$this->setState(4809);
		        	$this->match(self::AGGREGATE);
		        }
		        $this->setState(4812);
		        $this->match(self::FUNCTION);
		        $this->setState(4813);
		        $this->uid();
		        $this->setState(4814);
		        $this->match(self::RETURNS);
		        $this->setState(4815);

		        $localContext->returnType = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!((((($_la - 188)) & ~0x3f) === 0 && ((1 << ($_la - 188)) & ((1 << (self::INTEGER - 188)) | (1 << (self::REAL - 188)) | (1 << (self::DECIMAL - 188)))) !== 0) || $_la === self::STRING)) {
		        	    $localContext->returnType = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(4816);
		        $this->match(self::SONAME);
		        $this->setState(4817);
		        $this->match(self::STRING_LITERAL);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function installPlugin() : Context\InstallPluginContext
		{
		    $localContext = new Context\InstallPluginContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 434, self::RULE_installPlugin);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4819);
		        $this->match(self::INSTALL);
		        $this->setState(4820);
		        $this->match(self::PLUGIN);
		        $this->setState(4821);
		        $this->uid();
		        $this->setState(4822);
		        $this->match(self::SONAME);
		        $this->setState(4823);
		        $this->match(self::STRING_LITERAL);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function uninstallPlugin() : Context\UninstallPluginContext
		{
		    $localContext = new Context\UninstallPluginContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 436, self::RULE_uninstallPlugin);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(4825);
		        $this->match(self::UNINSTALL);
		        $this->setState(4826);
		        $this->match(self::PLUGIN);
		        $this->setState(4827);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function setStatement() : Context\SetStatementContext
		{
		    $localContext = new Context\SetStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 438, self::RULE_setStatement);

		    try {
		        $this->setState(4880);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 702, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SetVariableContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4829);
		        	    $this->match(self::SET);
		        	    $this->setState(4830);
		        	    $this->variableClause();
		        	    $this->setState(4831);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::VAR_ASSIGN || $_la === self::EQUAL_SYMBOL)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(4832);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(4840);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(4833);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(4834);
		        	    	$this->variableClause();
		        	    	$this->setState(4835);

		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::VAR_ASSIGN || $_la === self::EQUAL_SYMBOL)) {
		        	    	$this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(4836);
		        	    	$this->recursiveExpression(0);
		        	    	$this->setState(4842);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\SetCharsetContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4843);
		        	    $this->match(self::SET);
		        	    $this->setState(4847);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::CHARACTER:
		        	        	$this->setState(4844);
		        	        	$this->match(self::CHARACTER);
		        	        	$this->setState(4845);
		        	        	$this->match(self::SET);
		        	        	break;

		        	        case self::CHARSET:
		        	        	$this->setState(4846);
		        	        	$this->match(self::CHARSET);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	    $this->setState(4851);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::BINARY:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        	$this->setState(4849);
		        	        	$this->charsetName();
		        	        	break;

		        	        case self::DEFAULT:
		        	        	$this->setState(4850);
		        	        	$this->match(self::DEFAULT);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\SetNamesContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(4853);
		        	    $this->match(self::SET);
		        	    $this->setState(4854);
		        	    $this->match(self::NAMES);
		        	    $this->setState(4861);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::BINARY:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::STRING_LITERAL:
		        	        	$this->setState(4855);
		        	        	$this->charsetName();
		        	        	$this->setState(4858);
		        	        	$this->errorHandler->sync($this);
		        	        	$_la = $this->input->LA(1);

		        	        	if ($_la === self::COLLATE) {
		        	        		$this->setState(4856);
		        	        		$this->match(self::COLLATE);
		        	        		$this->setState(4857);
		        	        		$this->collationName();
		        	        	}
		        	        	break;

		        	        case self::DEFAULT:
		        	        	$this->setState(4860);
		        	        	$this->match(self::DEFAULT);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 4:
		        	    $localContext = new Context\SetPasswordContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(4863);
		        	    $this->setPasswordStatement();
		        	break;

		        	case 5:
		        	    $localContext = new Context\SetTransactionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(4864);
		        	    $this->setTransactionStatement();
		        	break;

		        	case 6:
		        	    $localContext = new Context\SetAutocommitContext($localContext);
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(4865);
		        	    $this->setAutocommitStatement();
		        	break;

		        	case 7:
		        	    $localContext = new Context\SetNewValueInsideTriggerContext($localContext);
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(4866);
		        	    $this->match(self::SET);
		        	    $this->setState(4867);
		        	    $this->fullId();
		        	    $this->setState(4868);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::VAR_ASSIGN || $_la === self::EQUAL_SYMBOL)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(4869);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(4877);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(4870);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(4871);
		        	    	$this->fullId();
		        	    	$this->setState(4872);

		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::VAR_ASSIGN || $_la === self::EQUAL_SYMBOL)) {
		        	    	$this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(4873);
		        	    	$this->recursiveExpression(0);
		        	    	$this->setState(4879);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function showStatement() : Context\ShowStatementContext
		{
		    $localContext = new Context\ShowStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 440, self::RULE_showStatement);

		    try {
		        $this->setState(5033);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 724, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\ShowMasterLogsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(4882);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4883);

		        	    $localContext->logFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::BINARY || $_la === self::MASTER)) {
		        	    	    $localContext->logFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(4884);
		        	    $this->match(self::LOGS);
		        	break;

		        	case 2:
		        	    $localContext = new Context\ShowLogEventsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(4885);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4886);

		        	    $localContext->logFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::BINLOG || $_la === self::RELAYLOG)) {
		        	    	    $localContext->logFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(4887);
		        	    $this->match(self::EVENTS);
		        	    $this->setState(4890);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::IN) {
		        	    	$this->setState(4888);
		        	    	$this->match(self::IN);
		        	    	$this->setState(4889);
		        	    	$localContext->filename = $this->match(self::STRING_LITERAL);
		        	    }
		        	    $this->setState(4894);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FROM) {
		        	    	$this->setState(4892);
		        	    	$this->match(self::FROM);
		        	    	$this->setState(4893);
		        	    	$localContext->fromPosition = $this->decimalLiteral();
		        	    }
		        	    $this->setState(4903);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LIMIT) {
		        	    	$this->setState(4896);
		        	    	$this->match(self::LIMIT);
		        	    	$this->setState(4900);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->getInterpreter()->adaptivePredict($this->input, 705, $this->ctx)) {
		        	    	    case 1:
		        	    		    $this->setState(4897);
		        	    		    $localContext->offset = $this->decimalLiteral();
		        	    		    $this->setState(4898);
		        	    		    $this->match(self::COMMA);
		        	    		break;
		        	    	}
		        	    	$this->setState(4902);
		        	    	$localContext->rowCount = $this->decimalLiteral();
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\ShowObjectFilterContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(4905);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4906);
		        	    $this->showCommonEntity();
		        	    $this->setState(4908);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LIKE || $_la === self::WHERE) {
		        	    	$this->setState(4907);
		        	    	$this->showFilter();
		        	    }
		        	break;

		        	case 4:
		        	    $localContext = new Context\ShowColumnsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(4910);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4912);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FULL) {
		        	    	$this->setState(4911);
		        	    	$this->match(self::FULL);
		        	    }
		        	    $this->setState(4914);

		        	    $localContext->columnsFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::COLUMNS || $_la === self::FIELDS)) {
		        	    	    $localContext->columnsFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(4915);

		        	    $localContext->tableFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::FROM || $_la === self::IN)) {
		        	    	    $localContext->tableFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(4916);
		        	    $this->tableName();
		        	    $this->setState(4919);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FROM || $_la === self::IN) {
		        	    	$this->setState(4917);

		        	    	$localContext->schemaFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::FROM || $_la === self::IN)) {
		        	    		    $localContext->schemaFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(4918);
		        	    	$this->uid();
		        	    }
		        	    $this->setState(4922);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LIKE || $_la === self::WHERE) {
		        	    	$this->setState(4921);
		        	    	$this->showFilter();
		        	    }
		        	break;

		        	case 5:
		        	    $localContext = new Context\ShowCreateDbContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(4924);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4925);
		        	    $this->match(self::CREATE);
		        	    $this->setState(4926);

		        	    $localContext->schemaFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::DATABASE || $_la === self::SCHEMA)) {
		        	    	    $localContext->schemaFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(4928);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::IF) {
		        	    	$this->setState(4927);
		        	    	$this->ifNotExists();
		        	    }
		        	    $this->setState(4930);
		        	    $this->uid();
		        	break;

		        	case 6:
		        	    $localContext = new Context\ShowCreateFullIdObjectContext($localContext);
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(4931);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4932);
		        	    $this->match(self::CREATE);
		        	    $this->setState(4933);

		        	    $localContext->namedEntity = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!((((($_la - 117)) & ~0x3f) === 0 && ((1 << ($_la - 117)) & ((1 << (self::PROCEDURE - 117)) | (1 << (self::TABLE - 117)) | (1 << (self::TRIGGER - 117)))) !== 0) || $_la === self::EVENT || $_la === self::FUNCTION || $_la === self::VIEW)) {
		        	    	    $localContext->namedEntity = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(4934);
		        	    $this->fullId();
		        	break;

		        	case 7:
		        	    $localContext = new Context\ShowCreateUserContext($localContext);
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(4935);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4936);
		        	    $this->match(self::CREATE);
		        	    $this->setState(4937);
		        	    $this->match(self::USER);
		        	    $this->setState(4938);
		        	    $this->userName();
		        	break;

		        	case 8:
		        	    $localContext = new Context\ShowEngineContext($localContext);
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(4939);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4940);
		        	    $this->match(self::ENGINE);
		        	    $this->setState(4941);
		        	    $this->engineName();
		        	    $this->setState(4942);

		        	    $localContext->engineOption = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::MUTEX || $_la === self::STATUS)) {
		        	    	    $localContext->engineOption = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 9:
		        	    $localContext = new Context\ShowGlobalInfoContext($localContext);
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(4944);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4945);
		        	    $this->showGlobalInfoClause();
		        	break;

		        	case 10:
		        	    $localContext = new Context\ShowErrorsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(4946);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4947);

		        	    $localContext->errorFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::ERRORS || $_la === self::WARNINGS)) {
		        	    	    $localContext->errorFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }

		        	    $this->setState(4948);
		        	    $this->match(self::LIMIT);
		        	    $this->setState(4952);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 712, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(4949);
		        	    	    $localContext->offset = $this->decimalLiteral();
		        	    	    $this->setState(4950);
		        	    	    $this->match(self::COMMA);
		        	    	break;
		        	    }
		        	    $this->setState(4954);
		        	    $localContext->rowCount = $this->decimalLiteral();
		        	break;

		        	case 11:
		        	    $localContext = new Context\ShowCountErrorsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(4955);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4956);
		        	    $this->match(self::COUNT);
		        	    $this->setState(4957);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(4958);
		        	    $this->match(self::STAR);
		        	    $this->setState(4959);
		        	    $this->match(self::RR_BRACKET);
		        	    $this->setState(4960);

		        	    $localContext->errorFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::ERRORS || $_la === self::WARNINGS)) {
		        	    	    $localContext->errorFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 12:
		        	    $localContext = new Context\ShowSchemaFilterContext($localContext);
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(4961);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4962);
		        	    $this->showSchemaEntity();
		        	    $this->setState(4965);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FROM || $_la === self::IN) {
		        	    	$this->setState(4963);

		        	    	$localContext->schemaFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::FROM || $_la === self::IN)) {
		        	    		    $localContext->schemaFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(4964);
		        	    	$this->uid();
		        	    }
		        	    $this->setState(4968);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LIKE || $_la === self::WHERE) {
		        	    	$this->setState(4967);
		        	    	$this->showFilter();
		        	    }
		        	break;

		        	case 13:
		        	    $localContext = new Context\ShowRoutineContext($localContext);
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(4970);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4971);

		        	    $localContext->routine = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::PROCEDURE || $_la === self::FUNCTION)) {
		        	    	    $localContext->routine = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(4972);
		        	    $this->match(self::CODE);
		        	    $this->setState(4973);
		        	    $this->fullId();
		        	break;

		        	case 14:
		        	    $localContext = new Context\ShowGrantsContext($localContext);
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(4974);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4975);
		        	    $this->match(self::GRANTS);
		        	    $this->setState(4978);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FOR) {
		        	    	$this->setState(4976);
		        	    	$this->match(self::FOR);
		        	    	$this->setState(4977);
		        	    	$this->userName();
		        	    }
		        	break;

		        	case 15:
		        	    $localContext = new Context\ShowIndexesContext($localContext);
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(4980);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4981);

		        	    $localContext->indexFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::INDEX || $_la === self::KEYS || $_la === self::INDEXES)) {
		        	    	    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(4982);

		        	    $localContext->tableFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::FROM || $_la === self::IN)) {
		        	    	    $localContext->tableFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(4983);
		        	    $this->tableName();
		        	    $this->setState(4986);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FROM || $_la === self::IN) {
		        	    	$this->setState(4984);

		        	    	$localContext->schemaFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::FROM || $_la === self::IN)) {
		        	    		    $localContext->schemaFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(4985);
		        	    	$this->uid();
		        	    }
		        	    $this->setState(4990);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::WHERE) {
		        	    	$this->setState(4988);
		        	    	$this->match(self::WHERE);
		        	    	$this->setState(4989);
		        	    	$this->recursiveExpression(0);
		        	    }
		        	break;

		        	case 16:
		        	    $localContext = new Context\ShowOpenTablesContext($localContext);
		        	    $this->enterOuterAlt($localContext, 16);
		        	    $this->setState(4992);
		        	    $this->match(self::SHOW);
		        	    $this->setState(4993);
		        	    $this->match(self::OPEN);
		        	    $this->setState(4994);
		        	    $this->match(self::TABLES);
		        	    $this->setState(4997);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FROM || $_la === self::IN) {
		        	    	$this->setState(4995);

		        	    	$localContext->schemaFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::FROM || $_la === self::IN)) {
		        	    		    $localContext->schemaFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(4996);
		        	    	$this->uid();
		        	    }
		        	    $this->setState(5000);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LIKE || $_la === self::WHERE) {
		        	    	$this->setState(4999);
		        	    	$this->showFilter();
		        	    }
		        	break;

		        	case 17:
		        	    $localContext = new Context\ShowProfileContext($localContext);
		        	    $this->enterOuterAlt($localContext, 17);
		        	    $this->setState(5002);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5003);
		        	    $this->match(self::PROFILE);
		        	    $this->setState(5004);
		        	    $this->showProfileType();
		        	    $this->setState(5009);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5005);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5006);
		        	    	$this->showProfileType();
		        	    	$this->setState(5011);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	    $this->setState(5015);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FOR) {
		        	    	$this->setState(5012);
		        	    	$this->match(self::FOR);
		        	    	$this->setState(5013);
		        	    	$this->match(self::QUERY);
		        	    	$this->setState(5014);
		        	    	$localContext->queryCount = $this->decimalLiteral();
		        	    }

		        	    $this->setState(5017);
		        	    $this->match(self::LIMIT);
		        	    $this->setState(5021);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 722, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5018);
		        	    	    $localContext->offset = $this->decimalLiteral();
		        	    	    $this->setState(5019);
		        	    	    $this->match(self::COMMA);
		        	    	break;
		        	    }
		        	    $this->setState(5023);
		        	    $localContext->rowCount = $this->decimalLiteral();
		        	break;

		        	case 18:
		        	    $localContext = new Context\ShowSlaveStatusContext($localContext);
		        	    $this->enterOuterAlt($localContext, 18);
		        	    $this->setState(5025);
		        	    $this->match(self::SHOW);
		        	    $this->setState(5026);
		        	    $this->match(self::SLAVE);
		        	    $this->setState(5027);
		        	    $this->match(self::STATUS);
		        	    $this->setState(5031);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FOR) {
		        	    	$this->setState(5028);
		        	    	$this->match(self::FOR);
		        	    	$this->setState(5029);
		        	    	$this->match(self::CHANNEL);
		        	    	$this->setState(5030);
		        	    	$this->match(self::STRING_LITERAL);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function variableClause() : Context\VariableClauseContext
		{
		    $localContext = new Context\VariableClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 442, self::RULE_variableClause);

		    try {
		        $this->setState(5045);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::LOCAL_ID:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5035);
		            	$this->match(self::LOCAL_ID);
		            	break;

		            case self::GLOBAL_ID:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5036);
		            	$this->match(self::GLOBAL_ID);
		            	break;

		            case self::CURRENT:
		            case self::DATABASE:
		            case self::DIAGNOSTICS:
		            case self::LEFT:
		            case self::NUMBER:
		            case self::RIGHT:
		            case self::STACKED:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::COUNT:
		            case self::POSITION:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::TABLES:
		            case self::ROUTINE:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::PRIVILEGES:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::AT_SIGN:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::STRING_LITERAL:
		            case self::ID:
		            case self::REVERSE_QUOTE_ID:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5042);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 726, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(5039);
		            		    $this->errorHandler->sync($this);
		            		    $_la = $this->input->LA(1);

		            		    if ($_la === self::AT_SIGN) {
		            		    	$this->setState(5037);
		            		    	$this->match(self::AT_SIGN);
		            		    	$this->setState(5038);
		            		    	$this->match(self::AT_SIGN);
		            		    }
		            		    $this->setState(5041);

		            		    $_la = $this->input->LA(1);

		            		    if (!($_la === self::GLOBAL || $_la === self::LOCAL || $_la === self::SESSION)) {
		            		    $this->errorHandler->recoverInline($this);
		            		    } else {
		            		    	if ($this->input->LA(1) === Token::EOF) {
		            		    	    $this->matchedEOF = true;
		            		        }

		            		    	$this->errorHandler->reportMatch($this);
		            		    	$this->consume();
		            		    }
		            		break;
		            	}
		            	$this->setState(5044);
		            	$this->uid();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function showCommonEntity() : Context\ShowCommonEntityContext
		{
		    $localContext = new Context\ShowCommonEntityContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 444, self::RULE_showCommonEntity);

		    try {
		        $this->setState(5060);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CHARACTER:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5047);
		            	$this->match(self::CHARACTER);
		            	$this->setState(5048);
		            	$this->match(self::SET);
		            	break;

		            case self::COLLATION:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5049);
		            	$this->match(self::COLLATION);
		            	break;

		            case self::DATABASES:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5050);
		            	$this->match(self::DATABASES);
		            	break;

		            case self::SCHEMAS:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(5051);
		            	$this->match(self::SCHEMAS);
		            	break;

		            case self::FUNCTION:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(5052);
		            	$this->match(self::FUNCTION);
		            	$this->setState(5053);
		            	$this->match(self::STATUS);
		            	break;

		            case self::PROCEDURE:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(5054);
		            	$this->match(self::PROCEDURE);
		            	$this->setState(5055);
		            	$this->match(self::STATUS);
		            	break;

		            case self::GLOBAL:
		            case self::SESSION:
		            case self::STATUS:
		            case self::VARIABLES:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(5057);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::GLOBAL || $_la === self::SESSION) {
		            		$this->setState(5056);

		            		$_la = $this->input->LA(1);

		            		if (!($_la === self::GLOBAL || $_la === self::SESSION)) {
		            		$this->errorHandler->recoverInline($this);
		            		} else {
		            			if ($this->input->LA(1) === Token::EOF) {
		            			    $this->matchedEOF = true;
		            		    }

		            			$this->errorHandler->reportMatch($this);
		            			$this->consume();
		            		}
		            	}
		            	$this->setState(5059);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::STATUS || $_la === self::VARIABLES)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function showFilter() : Context\ShowFilterContext
		{
		    $localContext = new Context\ShowFilterContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 446, self::RULE_showFilter);

		    try {
		        $this->setState(5066);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::LIKE:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5062);
		            	$this->match(self::LIKE);
		            	$this->setState(5063);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::WHERE:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5064);
		            	$this->match(self::WHERE);
		            	$this->setState(5065);
		            	$this->recursiveExpression(0);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function showGlobalInfoClause() : Context\ShowGlobalInfoClauseContext
		{
		    $localContext = new Context\ShowGlobalInfoClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 448, self::RULE_showGlobalInfoClause);

		    try {
		        $this->setState(5085);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ENGINES:
		            case self::STORAGE:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5069);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::STORAGE) {
		            		$this->setState(5068);
		            		$this->match(self::STORAGE);
		            	}
		            	$this->setState(5071);
		            	$this->match(self::ENGINES);
		            	break;

		            case self::MASTER:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5072);
		            	$this->match(self::MASTER);
		            	$this->setState(5073);
		            	$this->match(self::STATUS);
		            	break;

		            case self::PLUGINS:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5074);
		            	$this->match(self::PLUGINS);
		            	break;

		            case self::PRIVILEGES:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(5075);
		            	$this->match(self::PRIVILEGES);
		            	break;

		            case self::FULL:
		            case self::PROCESSLIST:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(5077);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::FULL) {
		            		$this->setState(5076);
		            		$this->match(self::FULL);
		            	}
		            	$this->setState(5079);
		            	$this->match(self::PROCESSLIST);
		            	break;

		            case self::PROFILES:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(5080);
		            	$this->match(self::PROFILES);
		            	break;

		            case self::SLAVE:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(5081);
		            	$this->match(self::SLAVE);
		            	$this->setState(5082);
		            	$this->match(self::HOSTS);
		            	break;

		            case self::AUTHORS:
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(5083);
		            	$this->match(self::AUTHORS);
		            	break;

		            case self::CONTRIBUTORS:
		            	$this->enterOuterAlt($localContext, 9);
		            	$this->setState(5084);
		            	$this->match(self::CONTRIBUTORS);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function showSchemaEntity() : Context\ShowSchemaEntityContext
		{
		    $localContext = new Context\ShowSchemaEntityContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 450, self::RULE_showSchemaEntity);

		    try {
		        $this->setState(5095);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::EVENTS:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5087);
		            	$this->match(self::EVENTS);
		            	break;

		            case self::TABLE:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5088);
		            	$this->match(self::TABLE);
		            	$this->setState(5089);
		            	$this->match(self::STATUS);
		            	break;

		            case self::FULL:
		            case self::TABLES:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5091);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::FULL) {
		            		$this->setState(5090);
		            		$this->match(self::FULL);
		            	}
		            	$this->setState(5093);
		            	$this->match(self::TABLES);
		            	break;

		            case self::TRIGGERS:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(5094);
		            	$this->match(self::TRIGGERS);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function showProfileType() : Context\ShowProfileTypeContext
		{
		    $localContext = new Context\ShowProfileTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 452, self::RULE_showProfileType);

		    try {
		        $this->setState(5109);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::ALL:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5097);
		            	$this->match(self::ALL);
		            	break;

		            case self::BLOCK:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5098);
		            	$this->match(self::BLOCK);
		            	$this->setState(5099);
		            	$this->match(self::IO);
		            	break;

		            case self::CONTEXT:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5100);
		            	$this->match(self::CONTEXT);
		            	$this->setState(5101);
		            	$this->match(self::SWITCHES);
		            	break;

		            case self::CPU:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(5102);
		            	$this->match(self::CPU);
		            	break;

		            case self::IPC:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(5103);
		            	$this->match(self::IPC);
		            	break;

		            case self::MEMORY:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(5104);
		            	$this->match(self::MEMORY);
		            	break;

		            case self::PAGE:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(5105);
		            	$this->match(self::PAGE);
		            	$this->setState(5106);
		            	$this->match(self::FAULTS);
		            	break;

		            case self::SOURCE:
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(5107);
		            	$this->match(self::SOURCE);
		            	break;

		            case self::SWAPS:
		            	$this->enterOuterAlt($localContext, 9);
		            	$this->setState(5108);
		            	$this->match(self::SWAPS);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function binlogStatement() : Context\BinlogStatementContext
		{
		    $localContext = new Context\BinlogStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 454, self::RULE_binlogStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5111);
		        $this->match(self::BINLOG);
		        $this->setState(5112);
		        $this->match(self::STRING_LITERAL);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function cacheIndexStatement() : Context\CacheIndexStatementContext
		{
		    $localContext = new Context\CacheIndexStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 456, self::RULE_cacheIndexStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5114);
		        $this->match(self::CACHE);
		        $this->setState(5115);
		        $this->match(self::INDEX);
		        $this->setState(5116);
		        $this->tableIndexes();
		        $this->setState(5121);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5117);
		        	$this->match(self::COMMA);
		        	$this->setState(5118);
		        	$this->tableIndexes();
		        	$this->setState(5123);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(5131);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITION) {
		        	$this->setState(5124);
		        	$this->match(self::PARTITION);
		        	$this->setState(5125);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(5128);
		        	$this->errorHandler->sync($this);

		        	switch ($this->input->LA(1)) {
		        	    case self::CURRENT:
		        	    case self::DATABASE:
		        	    case self::DIAGNOSTICS:
		        	    case self::LEFT:
		        	    case self::NUMBER:
		        	    case self::RIGHT:
		        	    case self::STACKED:
		        	    case self::DATE:
		        	    case self::TIME:
		        	    case self::TIMESTAMP:
		        	    case self::DATETIME:
		        	    case self::YEAR:
		        	    case self::TEXT:
		        	    case self::ENUM:
		        	    case self::SERIAL:
		        	    case self::COUNT:
		        	    case self::POSITION:
		        	    case self::ACCOUNT:
		        	    case self::ACTION:
		        	    case self::AFTER:
		        	    case self::AGGREGATE:
		        	    case self::ALGORITHM:
		        	    case self::ANY:
		        	    case self::AT:
		        	    case self::AUTHORS:
		        	    case self::AUTOCOMMIT:
		        	    case self::AUTOEXTEND_SIZE:
		        	    case self::AUTO_INCREMENT:
		        	    case self::AVG_ROW_LENGTH:
		        	    case self::BEGIN:
		        	    case self::BINLOG:
		        	    case self::BIT:
		        	    case self::BLOCK:
		        	    case self::BOOL:
		        	    case self::BOOLEAN:
		        	    case self::BTREE:
		        	    case self::CACHE:
		        	    case self::CASCADED:
		        	    case self::CHAIN:
		        	    case self::CHANGED:
		        	    case self::CHANNEL:
		        	    case self::CHECKSUM:
		        	    case self::PAGE_CHECKSUM:
		        	    case self::CIPHER:
		        	    case self::CLASS_ORIGIN:
		        	    case self::CLIENT:
		        	    case self::CLOSE:
		        	    case self::COALESCE:
		        	    case self::CODE:
		        	    case self::COLUMNS:
		        	    case self::COLUMN_FORMAT:
		        	    case self::COLUMN_NAME:
		        	    case self::COMMENT:
		        	    case self::COMMIT:
		        	    case self::COMPACT:
		        	    case self::COMPLETION:
		        	    case self::COMPRESSED:
		        	    case self::COMPRESSION:
		        	    case self::CONCURRENT:
		        	    case self::CONNECTION:
		        	    case self::CONSISTENT:
		        	    case self::CONSTRAINT_CATALOG:
		        	    case self::CONSTRAINT_SCHEMA:
		        	    case self::CONSTRAINT_NAME:
		        	    case self::CONTAINS:
		        	    case self::CONTEXT:
		        	    case self::CONTRIBUTORS:
		        	    case self::COPY:
		        	    case self::CPU:
		        	    case self::CURSOR_NAME:
		        	    case self::DATA:
		        	    case self::DATAFILE:
		        	    case self::DEALLOCATE:
		        	    case self::DEFAULT_AUTH:
		        	    case self::DEFINER:
		        	    case self::DELAY_KEY_WRITE:
		        	    case self::DES_KEY_FILE:
		        	    case self::DIRECTORY:
		        	    case self::DISABLE:
		        	    case self::DISCARD:
		        	    case self::DISK:
		        	    case self::DO:
		        	    case self::DUMPFILE:
		        	    case self::DUPLICATE:
		        	    case self::DYNAMIC:
		        	    case self::ENABLE:
		        	    case self::ENCRYPTION:
		        	    case self::END:
		        	    case self::ENDS:
		        	    case self::ENGINE:
		        	    case self::ENGINES:
		        	    case self::ERROR:
		        	    case self::ERRORS:
		        	    case self::ESCAPE:
		        	    case self::EVEN:
		        	    case self::EVENT:
		        	    case self::EVENTS:
		        	    case self::EVERY:
		        	    case self::EXCHANGE:
		        	    case self::EXCLUSIVE:
		        	    case self::EXPIRE:
		        	    case self::EXPORT:
		        	    case self::EXTENDED:
		        	    case self::EXTENT_SIZE:
		        	    case self::FAST:
		        	    case self::FAULTS:
		        	    case self::FIELDS:
		        	    case self::FILE_BLOCK_SIZE:
		        	    case self::FILTER:
		        	    case self::FIRST:
		        	    case self::FIXED:
		        	    case self::FLUSH:
		        	    case self::FOLLOWS:
		        	    case self::FOUND:
		        	    case self::FULL:
		        	    case self::FUNCTION:
		        	    case self::GENERAL:
		        	    case self::GLOBAL:
		        	    case self::GRANTS:
		        	    case self::GROUP_REPLICATION:
		        	    case self::HANDLER:
		        	    case self::HASH:
		        	    case self::HELP:
		        	    case self::HOST:
		        	    case self::HOSTS:
		        	    case self::IDENTIFIED:
		        	    case self::IGNORE_SERVER_IDS:
		        	    case self::IMPORT:
		        	    case self::INDEXES:
		        	    case self::INITIAL_SIZE:
		        	    case self::INPLACE:
		        	    case self::INSERT_METHOD:
		        	    case self::INSTALL:
		        	    case self::INSTANCE:
		        	    case self::INVISIBLE:
		        	    case self::INVOKER:
		        	    case self::IO:
		        	    case self::IO_THREAD:
		        	    case self::IPC:
		        	    case self::ISOLATION:
		        	    case self::ISSUER:
		        	    case self::JSON:
		        	    case self::KEY_BLOCK_SIZE:
		        	    case self::LANGUAGE:
		        	    case self::LAST:
		        	    case self::LEAVES:
		        	    case self::LESS:
		        	    case self::LEVEL:
		        	    case self::LIST:
		        	    case self::LOCAL:
		        	    case self::LOGFILE:
		        	    case self::LOGS:
		        	    case self::MASTER:
		        	    case self::MASTER_AUTO_POSITION:
		        	    case self::MASTER_CONNECT_RETRY:
		        	    case self::MASTER_DELAY:
		        	    case self::MASTER_HEARTBEAT_PERIOD:
		        	    case self::MASTER_HOST:
		        	    case self::MASTER_LOG_FILE:
		        	    case self::MASTER_LOG_POS:
		        	    case self::MASTER_PASSWORD:
		        	    case self::MASTER_PORT:
		        	    case self::MASTER_RETRY_COUNT:
		        	    case self::MASTER_SSL:
		        	    case self::MASTER_SSL_CA:
		        	    case self::MASTER_SSL_CAPATH:
		        	    case self::MASTER_SSL_CERT:
		        	    case self::MASTER_SSL_CIPHER:
		        	    case self::MASTER_SSL_CRL:
		        	    case self::MASTER_SSL_CRLPATH:
		        	    case self::MASTER_SSL_KEY:
		        	    case self::MASTER_TLS_VERSION:
		        	    case self::MASTER_USER:
		        	    case self::MAX_CONNECTIONS_PER_HOUR:
		        	    case self::MAX_QUERIES_PER_HOUR:
		        	    case self::MAX_ROWS:
		        	    case self::MAX_SIZE:
		        	    case self::MAX_UPDATES_PER_HOUR:
		        	    case self::MAX_USER_CONNECTIONS:
		        	    case self::MEDIUM:
		        	    case self::MERGE:
		        	    case self::MESSAGE_TEXT:
		        	    case self::MID:
		        	    case self::MIGRATE:
		        	    case self::MIN_ROWS:
		        	    case self::MODE:
		        	    case self::MODIFY:
		        	    case self::MUTEX:
		        	    case self::MYSQL:
		        	    case self::MYSQL_ERRNO:
		        	    case self::NAME:
		        	    case self::NAMES:
		        	    case self::NCHAR:
		        	    case self::NEVER:
		        	    case self::NEXT:
		        	    case self::NO:
		        	    case self::NODEGROUP:
		        	    case self::NONE:
		        	    case self::OFFLINE:
		        	    case self::OFFSET:
		        	    case self::OJ:
		        	    case self::OLD_PASSWORD:
		        	    case self::ONE:
		        	    case self::ONLINE:
		        	    case self::ONLY:
		        	    case self::OPEN:
		        	    case self::OPTIMIZER_COSTS:
		        	    case self::OPTIONS:
		        	    case self::OWNER:
		        	    case self::PACK_KEYS:
		        	    case self::PAGE:
		        	    case self::PARSER:
		        	    case self::PARTIAL:
		        	    case self::PARTITIONING:
		        	    case self::PARTITIONS:
		        	    case self::PASSWORD:
		        	    case self::PHASE:
		        	    case self::PLUGIN:
		        	    case self::PLUGIN_DIR:
		        	    case self::PLUGINS:
		        	    case self::PORT:
		        	    case self::PRECEDES:
		        	    case self::PREPARE:
		        	    case self::PRESERVE:
		        	    case self::PREV:
		        	    case self::PROCESSLIST:
		        	    case self::PROFILE:
		        	    case self::PROFILES:
		        	    case self::PROXY:
		        	    case self::QUERY:
		        	    case self::QUICK:
		        	    case self::REBUILD:
		        	    case self::RECOVER:
		        	    case self::REDO_BUFFER_SIZE:
		        	    case self::REDUNDANT:
		        	    case self::RELAY:
		        	    case self::RELAY_LOG_FILE:
		        	    case self::RELAY_LOG_POS:
		        	    case self::RELAYLOG:
		        	    case self::REMOVE:
		        	    case self::REORGANIZE:
		        	    case self::REPAIR:
		        	    case self::REPLICATE_DO_DB:
		        	    case self::REPLICATE_DO_TABLE:
		        	    case self::REPLICATE_IGNORE_DB:
		        	    case self::REPLICATE_IGNORE_TABLE:
		        	    case self::REPLICATE_REWRITE_DB:
		        	    case self::REPLICATE_WILD_DO_TABLE:
		        	    case self::REPLICATE_WILD_IGNORE_TABLE:
		        	    case self::REPLICATION:
		        	    case self::RESET:
		        	    case self::RESUME:
		        	    case self::RETURNED_SQLSTATE:
		        	    case self::RETURNS:
		        	    case self::ROLLBACK:
		        	    case self::ROLLUP:
		        	    case self::ROTATE:
		        	    case self::ROW:
		        	    case self::ROWS:
		        	    case self::ROW_FORMAT:
		        	    case self::SAVEPOINT:
		        	    case self::SCHEDULE:
		        	    case self::SECURITY:
		        	    case self::SERVER:
		        	    case self::SESSION:
		        	    case self::SHARE:
		        	    case self::SHARED:
		        	    case self::SIGNED:
		        	    case self::SIMPLE:
		        	    case self::SLAVE:
		        	    case self::SLOW:
		        	    case self::SNAPSHOT:
		        	    case self::SOCKET:
		        	    case self::SOME:
		        	    case self::SONAME:
		        	    case self::SOUNDS:
		        	    case self::SOURCE:
		        	    case self::SQL_AFTER_GTIDS:
		        	    case self::SQL_AFTER_MTS_GAPS:
		        	    case self::SQL_BEFORE_GTIDS:
		        	    case self::SQL_BUFFER_RESULT:
		        	    case self::SQL_CACHE:
		        	    case self::SQL_NO_CACHE:
		        	    case self::SQL_THREAD:
		        	    case self::START:
		        	    case self::STARTS:
		        	    case self::STATS_AUTO_RECALC:
		        	    case self::STATS_PERSISTENT:
		        	    case self::STATS_SAMPLE_PAGES:
		        	    case self::STATUS:
		        	    case self::STOP:
		        	    case self::STORAGE:
		        	    case self::STRING:
		        	    case self::SUBCLASS_ORIGIN:
		        	    case self::SUBJECT:
		        	    case self::SUBPARTITION:
		        	    case self::SUBPARTITIONS:
		        	    case self::SUSPEND:
		        	    case self::SWAPS:
		        	    case self::SWITCHES:
		        	    case self::TABLE_NAME:
		        	    case self::TABLESPACE:
		        	    case self::TEMPORARY:
		        	    case self::TEMPTABLE:
		        	    case self::THAN:
		        	    case self::TRADITIONAL:
		        	    case self::TRANSACTION:
		        	    case self::TRIGGERS:
		        	    case self::TRUNCATE:
		        	    case self::UNDEFINED:
		        	    case self::UNDOFILE:
		        	    case self::UNDO_BUFFER_SIZE:
		        	    case self::UNINSTALL:
		        	    case self::UNKNOWN:
		        	    case self::UNTIL:
		        	    case self::UPGRADE:
		        	    case self::USER:
		        	    case self::USE_FRM:
		        	    case self::USER_RESOURCES:
		        	    case self::VALIDATION:
		        	    case self::VALUE:
		        	    case self::VARIABLES:
		        	    case self::VIEW:
		        	    case self::VISIBLE:
		        	    case self::WAIT:
		        	    case self::WARNINGS:
		        	    case self::WITHOUT:
		        	    case self::WORK:
		        	    case self::WRAPPER:
		        	    case self::X509:
		        	    case self::XA:
		        	    case self::XML:
		        	    case self::INTERNAL:
		        	    case self::QUARTER:
		        	    case self::MONTH:
		        	    case self::DAY:
		        	    case self::HOUR:
		        	    case self::MINUTE:
		        	    case self::WEEK:
		        	    case self::SECOND:
		        	    case self::MICROSECOND:
		        	    case self::TABLES:
		        	    case self::ROUTINE:
		        	    case self::EXECUTE:
		        	    case self::FILE:
		        	    case self::PROCESS:
		        	    case self::RELOAD:
		        	    case self::SHUTDOWN:
		        	    case self::SUPER:
		        	    case self::PRIVILEGES:
		        	    case self::SESSION_VARIABLES_ADMIN:
		        	    case self::ARMSCII8:
		        	    case self::ASCII:
		        	    case self::BIG5:
		        	    case self::CP1250:
		        	    case self::CP1251:
		        	    case self::CP1256:
		        	    case self::CP1257:
		        	    case self::CP850:
		        	    case self::CP852:
		        	    case self::CP866:
		        	    case self::CP932:
		        	    case self::DEC8:
		        	    case self::EUCJPMS:
		        	    case self::EUCKR:
		        	    case self::GB2312:
		        	    case self::GBK:
		        	    case self::GEOSTD8:
		        	    case self::GREEK:
		        	    case self::HEBREW:
		        	    case self::HP8:
		        	    case self::KEYBCS2:
		        	    case self::KOI8R:
		        	    case self::KOI8U:
		        	    case self::LATIN1:
		        	    case self::LATIN2:
		        	    case self::LATIN5:
		        	    case self::LATIN7:
		        	    case self::MACCE:
		        	    case self::MACROMAN:
		        	    case self::SJIS:
		        	    case self::SWE7:
		        	    case self::TIS620:
		        	    case self::UCS2:
		        	    case self::UJIS:
		        	    case self::UTF16:
		        	    case self::UTF16LE:
		        	    case self::UTF32:
		        	    case self::UTF8:
		        	    case self::UTF8MB3:
		        	    case self::UTF8MB4:
		        	    case self::ARCHIVE:
		        	    case self::BLACKHOLE:
		        	    case self::CSV:
		        	    case self::FEDERATED:
		        	    case self::INNODB:
		        	    case self::MEMORY:
		        	    case self::MRG_MYISAM:
		        	    case self::MYISAM:
		        	    case self::NDB:
		        	    case self::NDBCLUSTER:
		        	    case self::PERFORMANCE_SCHEMA:
		        	    case self::TOKUDB:
		        	    case self::REPEATABLE:
		        	    case self::COMMITTED:
		        	    case self::UNCOMMITTED:
		        	    case self::SERIALIZABLE:
		        	    case self::GEOMETRYCOLLECTION:
		        	    case self::LINESTRING:
		        	    case self::MULTILINESTRING:
		        	    case self::MULTIPOINT:
		        	    case self::MULTIPOLYGON:
		        	    case self::POINT:
		        	    case self::POLYGON:
		        	    case self::ABS:
		        	    case self::ACOS:
		        	    case self::ADDDATE:
		        	    case self::ADDTIME:
		        	    case self::AES_DECRYPT:
		        	    case self::AES_ENCRYPT:
		        	    case self::AREA:
		        	    case self::ASBINARY:
		        	    case self::ASIN:
		        	    case self::ASTEXT:
		        	    case self::ASWKB:
		        	    case self::ASWKT:
		        	    case self::ASYMMETRIC_DECRYPT:
		        	    case self::ASYMMETRIC_DERIVE:
		        	    case self::ASYMMETRIC_ENCRYPT:
		        	    case self::ASYMMETRIC_SIGN:
		        	    case self::ASYMMETRIC_VERIFY:
		        	    case self::ATAN:
		        	    case self::ATAN2:
		        	    case self::BENCHMARK:
		        	    case self::BIN:
		        	    case self::BIT_COUNT:
		        	    case self::BIT_LENGTH:
		        	    case self::BUFFER:
		        	    case self::CATALOG_NAME:
		        	    case self::CEIL:
		        	    case self::CEILING:
		        	    case self::CENTROID:
		        	    case self::CHARACTER_LENGTH:
		        	    case self::CHARSET:
		        	    case self::CHAR_LENGTH:
		        	    case self::COERCIBILITY:
		        	    case self::COLLATION:
		        	    case self::COMPRESS:
		        	    case self::CONCAT:
		        	    case self::CONCAT_WS:
		        	    case self::CONNECTION_ID:
		        	    case self::CONV:
		        	    case self::CONVERT_TZ:
		        	    case self::COS:
		        	    case self::COT:
		        	    case self::CRC32:
		        	    case self::CREATE_ASYMMETRIC_PRIV_KEY:
		        	    case self::CREATE_ASYMMETRIC_PUB_KEY:
		        	    case self::CREATE_DH_PARAMETERS:
		        	    case self::CREATE_DIGEST:
		        	    case self::CROSSES:
		        	    case self::DATEDIFF:
		        	    case self::DATE_FORMAT:
		        	    case self::DAYNAME:
		        	    case self::DAYOFMONTH:
		        	    case self::DAYOFWEEK:
		        	    case self::DAYOFYEAR:
		        	    case self::DECODE:
		        	    case self::DEGREES:
		        	    case self::DES_DECRYPT:
		        	    case self::DES_ENCRYPT:
		        	    case self::DIMENSION:
		        	    case self::DISJOINT:
		        	    case self::ELT:
		        	    case self::ENCODE:
		        	    case self::ENCRYPT:
		        	    case self::ENDPOINT:
		        	    case self::ENVELOPE:
		        	    case self::EQUALS:
		        	    case self::EXP:
		        	    case self::EXPORT_SET:
		        	    case self::EXTERIORRING:
		        	    case self::EXTRACTVALUE:
		        	    case self::FIELD:
		        	    case self::FIND_IN_SET:
		        	    case self::FLOOR:
		        	    case self::FORMAT:
		        	    case self::FOUND_ROWS:
		        	    case self::FROM_BASE64:
		        	    case self::FROM_DAYS:
		        	    case self::FROM_UNIXTIME:
		        	    case self::GEOMCOLLFROMTEXT:
		        	    case self::GEOMCOLLFROMWKB:
		        	    case self::GEOMETRYCOLLECTIONFROMTEXT:
		        	    case self::GEOMETRYCOLLECTIONFROMWKB:
		        	    case self::GEOMETRYFROMTEXT:
		        	    case self::GEOMETRYFROMWKB:
		        	    case self::GEOMETRYN:
		        	    case self::GEOMETRYTYPE:
		        	    case self::GEOMFROMTEXT:
		        	    case self::GEOMFROMWKB:
		        	    case self::GET_FORMAT:
		        	    case self::GET_LOCK:
		        	    case self::GLENGTH:
		        	    case self::GREATEST:
		        	    case self::GTID_SUBSET:
		        	    case self::GTID_SUBTRACT:
		        	    case self::HEX:
		        	    case self::IFNULL:
		        	    case self::INET6_ATON:
		        	    case self::INET6_NTOA:
		        	    case self::INET_ATON:
		        	    case self::INET_NTOA:
		        	    case self::INSTR:
		        	    case self::INTERIORRINGN:
		        	    case self::INTERSECTS:
		        	    case self::ISCLOSED:
		        	    case self::ISEMPTY:
		        	    case self::ISNULL:
		        	    case self::ISSIMPLE:
		        	    case self::IS_FREE_LOCK:
		        	    case self::IS_IPV4:
		        	    case self::IS_IPV4_COMPAT:
		        	    case self::IS_IPV4_MAPPED:
		        	    case self::IS_IPV6:
		        	    case self::IS_USED_LOCK:
		        	    case self::LAST_INSERT_ID:
		        	    case self::LCASE:
		        	    case self::LEAST:
		        	    case self::LENGTH:
		        	    case self::LINEFROMTEXT:
		        	    case self::LINEFROMWKB:
		        	    case self::LINESTRINGFROMTEXT:
		        	    case self::LINESTRINGFROMWKB:
		        	    case self::LN:
		        	    case self::LOAD_FILE:
		        	    case self::LOCATE:
		        	    case self::LOG:
		        	    case self::LOG10:
		        	    case self::LOG2:
		        	    case self::LOWER:
		        	    case self::LPAD:
		        	    case self::LTRIM:
		        	    case self::MAKEDATE:
		        	    case self::MAKETIME:
		        	    case self::MAKE_SET:
		        	    case self::MASTER_POS_WAIT:
		        	    case self::MBRCONTAINS:
		        	    case self::MBRDISJOINT:
		        	    case self::MBREQUAL:
		        	    case self::MBRINTERSECTS:
		        	    case self::MBROVERLAPS:
		        	    case self::MBRTOUCHES:
		        	    case self::MBRWITHIN:
		        	    case self::MD5:
		        	    case self::MLINEFROMTEXT:
		        	    case self::MLINEFROMWKB:
		        	    case self::MONTHNAME:
		        	    case self::MPOINTFROMTEXT:
		        	    case self::MPOINTFROMWKB:
		        	    case self::MPOLYFROMTEXT:
		        	    case self::MPOLYFROMWKB:
		        	    case self::MULTILINESTRINGFROMTEXT:
		        	    case self::MULTILINESTRINGFROMWKB:
		        	    case self::MULTIPOINTFROMTEXT:
		        	    case self::MULTIPOINTFROMWKB:
		        	    case self::MULTIPOLYGONFROMTEXT:
		        	    case self::MULTIPOLYGONFROMWKB:
		        	    case self::NAME_CONST:
		        	    case self::NULLIF:
		        	    case self::NUMGEOMETRIES:
		        	    case self::NUMINTERIORRINGS:
		        	    case self::NUMPOINTS:
		        	    case self::OCT:
		        	    case self::OCTET_LENGTH:
		        	    case self::ORD:
		        	    case self::OVERLAPS:
		        	    case self::PERIOD_ADD:
		        	    case self::PERIOD_DIFF:
		        	    case self::PI:
		        	    case self::POINTFROMTEXT:
		        	    case self::POINTFROMWKB:
		        	    case self::POINTN:
		        	    case self::POLYFROMTEXT:
		        	    case self::POLYFROMWKB:
		        	    case self::POLYGONFROMTEXT:
		        	    case self::POLYGONFROMWKB:
		        	    case self::POW:
		        	    case self::POWER:
		        	    case self::QUOTE:
		        	    case self::RADIANS:
		        	    case self::RAND:
		        	    case self::RANDOM_BYTES:
		        	    case self::RELEASE_LOCK:
		        	    case self::REVERSE:
		        	    case self::ROUND:
		        	    case self::ROW_COUNT:
		        	    case self::RPAD:
		        	    case self::RTRIM:
		        	    case self::SEC_TO_TIME:
		        	    case self::SESSION_USER:
		        	    case self::SHA:
		        	    case self::SHA1:
		        	    case self::SHA2:
		        	    case self::SCHEMA_NAME:
		        	    case self::SIGN:
		        	    case self::SIN:
		        	    case self::SLEEP:
		        	    case self::SOUNDEX:
		        	    case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		        	    case self::SQRT:
		        	    case self::SRID:
		        	    case self::STARTPOINT:
		        	    case self::STRCMP:
		        	    case self::STR_TO_DATE:
		        	    case self::ST_AREA:
		        	    case self::ST_ASBINARY:
		        	    case self::ST_ASTEXT:
		        	    case self::ST_ASWKB:
		        	    case self::ST_ASWKT:
		        	    case self::ST_BUFFER:
		        	    case self::ST_CENTROID:
		        	    case self::ST_CONTAINS:
		        	    case self::ST_CROSSES:
		        	    case self::ST_DIFFERENCE:
		        	    case self::ST_DIMENSION:
		        	    case self::ST_DISJOINT:
		        	    case self::ST_DISTANCE:
		        	    case self::ST_ENDPOINT:
		        	    case self::ST_ENVELOPE:
		        	    case self::ST_EQUALS:
		        	    case self::ST_EXTERIORRING:
		        	    case self::ST_GEOMCOLLFROMTEXT:
		        	    case self::ST_GEOMCOLLFROMTXT:
		        	    case self::ST_GEOMCOLLFROMWKB:
		        	    case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		        	    case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		        	    case self::ST_GEOMETRYFROMTEXT:
		        	    case self::ST_GEOMETRYFROMWKB:
		        	    case self::ST_GEOMETRYN:
		        	    case self::ST_GEOMETRYTYPE:
		        	    case self::ST_GEOMFROMTEXT:
		        	    case self::ST_GEOMFROMWKB:
		        	    case self::ST_INTERIORRINGN:
		        	    case self::ST_INTERSECTION:
		        	    case self::ST_INTERSECTS:
		        	    case self::ST_ISCLOSED:
		        	    case self::ST_ISEMPTY:
		        	    case self::ST_ISSIMPLE:
		        	    case self::ST_LINEFROMTEXT:
		        	    case self::ST_LINEFROMWKB:
		        	    case self::ST_LINESTRINGFROMTEXT:
		        	    case self::ST_LINESTRINGFROMWKB:
		        	    case self::ST_NUMGEOMETRIES:
		        	    case self::ST_NUMINTERIORRING:
		        	    case self::ST_NUMINTERIORRINGS:
		        	    case self::ST_NUMPOINTS:
		        	    case self::ST_OVERLAPS:
		        	    case self::ST_POINTFROMTEXT:
		        	    case self::ST_POINTFROMWKB:
		        	    case self::ST_POINTN:
		        	    case self::ST_POLYFROMTEXT:
		        	    case self::ST_POLYFROMWKB:
		        	    case self::ST_POLYGONFROMTEXT:
		        	    case self::ST_POLYGONFROMWKB:
		        	    case self::ST_SRID:
		        	    case self::ST_STARTPOINT:
		        	    case self::ST_SYMDIFFERENCE:
		        	    case self::ST_TOUCHES:
		        	    case self::ST_UNION:
		        	    case self::ST_WITHIN:
		        	    case self::ST_X:
		        	    case self::ST_Y:
		        	    case self::SUBDATE:
		        	    case self::SUBSTRING_INDEX:
		        	    case self::SUBTIME:
		        	    case self::SYSTEM_USER:
		        	    case self::TAN:
		        	    case self::TIMEDIFF:
		        	    case self::TIMESTAMPADD:
		        	    case self::TIMESTAMPDIFF:
		        	    case self::TIME_FORMAT:
		        	    case self::TIME_TO_SEC:
		        	    case self::TOUCHES:
		        	    case self::TO_BASE64:
		        	    case self::TO_DAYS:
		        	    case self::TO_SECONDS:
		        	    case self::UCASE:
		        	    case self::UNCOMPRESS:
		        	    case self::UNCOMPRESSED_LENGTH:
		        	    case self::UNHEX:
		        	    case self::UNIX_TIMESTAMP:
		        	    case self::UPDATEXML:
		        	    case self::UPPER:
		        	    case self::UUID:
		        	    case self::UUID_SHORT:
		        	    case self::VALIDATE_PASSWORD_STRENGTH:
		        	    case self::VERSION:
		        	    case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		        	    case self::WEEKDAY:
		        	    case self::WEEKOFYEAR:
		        	    case self::WEIGHT_STRING:
		        	    case self::WITHIN:
		        	    case self::YEARWEEK:
		        	    case self::Y_FUNCTION:
		        	    case self::X_FUNCTION:
		        	    case self::CHARSET_REVERSE_QOUTE_STRING:
		        	    case self::STRING_LITERAL:
		        	    case self::ID:
		        	    case self::REVERSE_QUOTE_ID:
		        	    	$this->setState(5126);
		        	    	$this->uidList();
		        	    	break;

		        	    case self::ALL:
		        	    	$this->setState(5127);
		        	    	$this->match(self::ALL);
		        	    	break;

		        	default:
		        		throw new NoViableAltException($this);
		        	}
		        	$this->setState(5130);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(5133);
		        $this->match(self::IN);
		        $this->setState(5134);
		        $localContext->schema = $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function flushStatement() : Context\FlushStatementContext
		{
		    $localContext = new Context\FlushStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 458, self::RULE_flushStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5136);
		        $this->match(self::FLUSH);
		        $this->setState(5138);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL) {
		        	$this->setState(5137);

		        	$localContext->flushFormat = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL)) {
		        		    $localContext->flushFormat = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(5140);
		        $this->flushOption();
		        $this->setState(5145);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5141);
		        	$this->match(self::COMMA);
		        	$this->setState(5142);
		        	$this->flushOption();
		        	$this->setState(5147);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function killStatement() : Context\KillStatementContext
		{
		    $localContext = new Context\KillStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 460, self::RULE_killStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5148);
		        $this->match(self::KILL);
		        $this->setState(5150);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::CONNECTION || $_la === self::QUERY) {
		        	$this->setState(5149);

		        	$localContext->connectionFormat = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::CONNECTION || $_la === self::QUERY)) {
		        		    $localContext->connectionFormat = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(5153); 
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        do {
		        	$this->setState(5152);
		        	$this->decimalLiteral();
		        	$this->setState(5155); 
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        } while ((((($_la - 1027)) & ~0x3f) === 0 && ((1 << ($_la - 1027)) & ((1 << (self::ZERO_DECIMAL - 1027)) | (1 << (self::ONE_DECIMAL - 1027)) | (1 << (self::TWO_DECIMAL - 1027)) | (1 << (self::DECIMAL_LITERAL - 1027)))) !== 0));
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function loadIndexIntoCache() : Context\LoadIndexIntoCacheContext
		{
		    $localContext = new Context\LoadIndexIntoCacheContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 462, self::RULE_loadIndexIntoCache);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5157);
		        $this->match(self::LOAD);
		        $this->setState(5158);
		        $this->match(self::INDEX);
		        $this->setState(5159);
		        $this->match(self::INTO);
		        $this->setState(5160);
		        $this->match(self::CACHE);
		        $this->setState(5161);
		        $this->loadedTableIndexes();
		        $this->setState(5166);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5162);
		        	$this->match(self::COMMA);
		        	$this->setState(5163);
		        	$this->loadedTableIndexes();
		        	$this->setState(5168);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function resetStatement() : Context\ResetStatementContext
		{
		    $localContext = new Context\ResetStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 464, self::RULE_resetStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5169);
		        $this->match(self::RESET);
		        $this->setState(5170);
		        $this->match(self::QUERY);
		        $this->setState(5171);
		        $this->match(self::CACHE);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function shutdownStatement() : Context\ShutdownStatementContext
		{
		    $localContext = new Context\ShutdownStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 466, self::RULE_shutdownStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5173);
		        $this->match(self::SHUTDOWN);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableIndexes() : Context\TableIndexesContext
		{
		    $localContext = new Context\TableIndexesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 468, self::RULE_tableIndexes);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5175);
		        $this->tableName();
		        $this->setState(5183);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::INDEX || $_la === self::KEY || $_la === self::LR_BRACKET) {
		        	$this->setState(5177);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::INDEX || $_la === self::KEY) {
		        		$this->setState(5176);

		        		$localContext->indexFormat = $this->input->LT(1);
		        		$_la = $this->input->LA(1);

		        		if (!($_la === self::INDEX || $_la === self::KEY)) {
		        			    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        		} else {
		        			if ($this->input->LA(1) === Token::EOF) {
		        			    $this->matchedEOF = true;
		        		    }

		        			$this->errorHandler->reportMatch($this);
		        			$this->consume();
		        		}
		        	}
		        	$this->setState(5179);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(5180);
		        	$this->uidList();
		        	$this->setState(5181);
		        	$this->match(self::RR_BRACKET);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function flushOption() : Context\FlushOptionContext
		{
		    $localContext = new Context\FlushOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 470, self::RULE_flushOption);

		    try {
		        $this->setState(5215);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 752, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SimpleFlushOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5203);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::DES_KEY_FILE:
		        	        	$this->setState(5185);
		        	        	$this->match(self::DES_KEY_FILE);
		        	        	break;

		        	        case self::HOSTS:
		        	        	$this->setState(5186);
		        	        	$this->match(self::HOSTS);
		        	        	break;

		        	        case self::BINARY:
		        	        case self::ENGINE:
		        	        case self::ERROR:
		        	        case self::GENERAL:
		        	        case self::LOGS:
		        	        case self::RELAY:
		        	        case self::SLOW:
		        	        	$this->setState(5188);
		        	        	$this->errorHandler->sync($this);
		        	        	$_la = $this->input->LA(1);

		        	        	if ($_la === self::BINARY || (((($_la - 342)) & ~0x3f) === 0 && ((1 << ($_la - 342)) & ((1 << (self::ENGINE - 342)) | (1 << (self::ERROR - 342)) | (1 << (self::GENERAL - 342)))) !== 0) || $_la === self::RELAY || $_la === self::SLOW) {
		        	        		$this->setState(5187);

		        	        		$_la = $this->input->LA(1);

		        	        		if (!($_la === self::BINARY || (((($_la - 342)) & ~0x3f) === 0 && ((1 << ($_la - 342)) & ((1 << (self::ENGINE - 342)) | (1 << (self::ERROR - 342)) | (1 << (self::GENERAL - 342)))) !== 0) || $_la === self::RELAY || $_la === self::SLOW)) {
		        	        		$this->errorHandler->recoverInline($this);
		        	        		} else {
		        	        			if ($this->input->LA(1) === Token::EOF) {
		        	        			    $this->matchedEOF = true;
		        	        		    }

		        	        			$this->errorHandler->reportMatch($this);
		        	        			$this->consume();
		        	        		}
		        	        	}
		        	        	$this->setState(5190);
		        	        	$this->match(self::LOGS);
		        	        	break;

		        	        case self::OPTIMIZER_COSTS:
		        	        	$this->setState(5191);
		        	        	$this->match(self::OPTIMIZER_COSTS);
		        	        	break;

		        	        case self::PRIVILEGES:
		        	        	$this->setState(5192);
		        	        	$this->match(self::PRIVILEGES);
		        	        	break;

		        	        case self::QUERY:
		        	        	$this->setState(5193);
		        	        	$this->match(self::QUERY);
		        	        	$this->setState(5194);
		        	        	$this->match(self::CACHE);
		        	        	break;

		        	        case self::STATUS:
		        	        	$this->setState(5195);
		        	        	$this->match(self::STATUS);
		        	        	break;

		        	        case self::USER_RESOURCES:
		        	        	$this->setState(5196);
		        	        	$this->match(self::USER_RESOURCES);
		        	        	break;

		        	        case self::TABLES:
		        	        	$this->setState(5197);
		        	        	$this->match(self::TABLES);
		        	        	$this->setState(5201);
		        	        	$this->errorHandler->sync($this);
		        	        	$_la = $this->input->LA(1);

		        	        	if ($_la === self::WITH) {
		        	        		$this->setState(5198);
		        	        		$this->match(self::WITH);
		        	        		$this->setState(5199);
		        	        		$this->match(self::READ);
		        	        		$this->setState(5200);
		        	        		$this->match(self::LOCK);
		        	        	}
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\ChannelFlushOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5205);
		        	    $this->match(self::RELAY);
		        	    $this->setState(5206);
		        	    $this->match(self::LOGS);
		        	    $this->setState(5208);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FOR) {
		        	    	$this->setState(5207);
		        	    	$this->channelOption();
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\TableFlushOptionContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5210);
		        	    $this->match(self::TABLES);
		        	    $this->setState(5211);
		        	    $this->tables();
		        	    $this->setState(5213);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FOR || $_la === self::WITH) {
		        	    	$this->setState(5212);
		        	    	$this->flushTableOption();
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function flushTableOption() : Context\FlushTableOptionContext
		{
		    $localContext = new Context\FlushTableOptionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 472, self::RULE_flushTableOption);

		    try {
		        $this->setState(5222);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::WITH:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5217);
		            	$this->match(self::WITH);
		            	$this->setState(5218);
		            	$this->match(self::READ);
		            	$this->setState(5219);
		            	$this->match(self::LOCK);
		            	break;

		            case self::FOR:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5220);
		            	$this->match(self::FOR);
		            	$this->setState(5221);
		            	$this->match(self::EXPORT);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function loadedTableIndexes() : Context\LoadedTableIndexesContext
		{
		    $localContext = new Context\LoadedTableIndexesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 474, self::RULE_loadedTableIndexes);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5224);
		        $this->tableName();
		        $this->setState(5232);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::PARTITION) {
		        	$this->setState(5225);
		        	$this->match(self::PARTITION);
		        	$this->setState(5226);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(5229);
		        	$this->errorHandler->sync($this);

		        	switch ($this->input->LA(1)) {
		        	    case self::CURRENT:
		        	    case self::DATABASE:
		        	    case self::DIAGNOSTICS:
		        	    case self::LEFT:
		        	    case self::NUMBER:
		        	    case self::RIGHT:
		        	    case self::STACKED:
		        	    case self::DATE:
		        	    case self::TIME:
		        	    case self::TIMESTAMP:
		        	    case self::DATETIME:
		        	    case self::YEAR:
		        	    case self::TEXT:
		        	    case self::ENUM:
		        	    case self::SERIAL:
		        	    case self::COUNT:
		        	    case self::POSITION:
		        	    case self::ACCOUNT:
		        	    case self::ACTION:
		        	    case self::AFTER:
		        	    case self::AGGREGATE:
		        	    case self::ALGORITHM:
		        	    case self::ANY:
		        	    case self::AT:
		        	    case self::AUTHORS:
		        	    case self::AUTOCOMMIT:
		        	    case self::AUTOEXTEND_SIZE:
		        	    case self::AUTO_INCREMENT:
		        	    case self::AVG_ROW_LENGTH:
		        	    case self::BEGIN:
		        	    case self::BINLOG:
		        	    case self::BIT:
		        	    case self::BLOCK:
		        	    case self::BOOL:
		        	    case self::BOOLEAN:
		        	    case self::BTREE:
		        	    case self::CACHE:
		        	    case self::CASCADED:
		        	    case self::CHAIN:
		        	    case self::CHANGED:
		        	    case self::CHANNEL:
		        	    case self::CHECKSUM:
		        	    case self::PAGE_CHECKSUM:
		        	    case self::CIPHER:
		        	    case self::CLASS_ORIGIN:
		        	    case self::CLIENT:
		        	    case self::CLOSE:
		        	    case self::COALESCE:
		        	    case self::CODE:
		        	    case self::COLUMNS:
		        	    case self::COLUMN_FORMAT:
		        	    case self::COLUMN_NAME:
		        	    case self::COMMENT:
		        	    case self::COMMIT:
		        	    case self::COMPACT:
		        	    case self::COMPLETION:
		        	    case self::COMPRESSED:
		        	    case self::COMPRESSION:
		        	    case self::CONCURRENT:
		        	    case self::CONNECTION:
		        	    case self::CONSISTENT:
		        	    case self::CONSTRAINT_CATALOG:
		        	    case self::CONSTRAINT_SCHEMA:
		        	    case self::CONSTRAINT_NAME:
		        	    case self::CONTAINS:
		        	    case self::CONTEXT:
		        	    case self::CONTRIBUTORS:
		        	    case self::COPY:
		        	    case self::CPU:
		        	    case self::CURSOR_NAME:
		        	    case self::DATA:
		        	    case self::DATAFILE:
		        	    case self::DEALLOCATE:
		        	    case self::DEFAULT_AUTH:
		        	    case self::DEFINER:
		        	    case self::DELAY_KEY_WRITE:
		        	    case self::DES_KEY_FILE:
		        	    case self::DIRECTORY:
		        	    case self::DISABLE:
		        	    case self::DISCARD:
		        	    case self::DISK:
		        	    case self::DO:
		        	    case self::DUMPFILE:
		        	    case self::DUPLICATE:
		        	    case self::DYNAMIC:
		        	    case self::ENABLE:
		        	    case self::ENCRYPTION:
		        	    case self::END:
		        	    case self::ENDS:
		        	    case self::ENGINE:
		        	    case self::ENGINES:
		        	    case self::ERROR:
		        	    case self::ERRORS:
		        	    case self::ESCAPE:
		        	    case self::EVEN:
		        	    case self::EVENT:
		        	    case self::EVENTS:
		        	    case self::EVERY:
		        	    case self::EXCHANGE:
		        	    case self::EXCLUSIVE:
		        	    case self::EXPIRE:
		        	    case self::EXPORT:
		        	    case self::EXTENDED:
		        	    case self::EXTENT_SIZE:
		        	    case self::FAST:
		        	    case self::FAULTS:
		        	    case self::FIELDS:
		        	    case self::FILE_BLOCK_SIZE:
		        	    case self::FILTER:
		        	    case self::FIRST:
		        	    case self::FIXED:
		        	    case self::FLUSH:
		        	    case self::FOLLOWS:
		        	    case self::FOUND:
		        	    case self::FULL:
		        	    case self::FUNCTION:
		        	    case self::GENERAL:
		        	    case self::GLOBAL:
		        	    case self::GRANTS:
		        	    case self::GROUP_REPLICATION:
		        	    case self::HANDLER:
		        	    case self::HASH:
		        	    case self::HELP:
		        	    case self::HOST:
		        	    case self::HOSTS:
		        	    case self::IDENTIFIED:
		        	    case self::IGNORE_SERVER_IDS:
		        	    case self::IMPORT:
		        	    case self::INDEXES:
		        	    case self::INITIAL_SIZE:
		        	    case self::INPLACE:
		        	    case self::INSERT_METHOD:
		        	    case self::INSTALL:
		        	    case self::INSTANCE:
		        	    case self::INVISIBLE:
		        	    case self::INVOKER:
		        	    case self::IO:
		        	    case self::IO_THREAD:
		        	    case self::IPC:
		        	    case self::ISOLATION:
		        	    case self::ISSUER:
		        	    case self::JSON:
		        	    case self::KEY_BLOCK_SIZE:
		        	    case self::LANGUAGE:
		        	    case self::LAST:
		        	    case self::LEAVES:
		        	    case self::LESS:
		        	    case self::LEVEL:
		        	    case self::LIST:
		        	    case self::LOCAL:
		        	    case self::LOGFILE:
		        	    case self::LOGS:
		        	    case self::MASTER:
		        	    case self::MASTER_AUTO_POSITION:
		        	    case self::MASTER_CONNECT_RETRY:
		        	    case self::MASTER_DELAY:
		        	    case self::MASTER_HEARTBEAT_PERIOD:
		        	    case self::MASTER_HOST:
		        	    case self::MASTER_LOG_FILE:
		        	    case self::MASTER_LOG_POS:
		        	    case self::MASTER_PASSWORD:
		        	    case self::MASTER_PORT:
		        	    case self::MASTER_RETRY_COUNT:
		        	    case self::MASTER_SSL:
		        	    case self::MASTER_SSL_CA:
		        	    case self::MASTER_SSL_CAPATH:
		        	    case self::MASTER_SSL_CERT:
		        	    case self::MASTER_SSL_CIPHER:
		        	    case self::MASTER_SSL_CRL:
		        	    case self::MASTER_SSL_CRLPATH:
		        	    case self::MASTER_SSL_KEY:
		        	    case self::MASTER_TLS_VERSION:
		        	    case self::MASTER_USER:
		        	    case self::MAX_CONNECTIONS_PER_HOUR:
		        	    case self::MAX_QUERIES_PER_HOUR:
		        	    case self::MAX_ROWS:
		        	    case self::MAX_SIZE:
		        	    case self::MAX_UPDATES_PER_HOUR:
		        	    case self::MAX_USER_CONNECTIONS:
		        	    case self::MEDIUM:
		        	    case self::MERGE:
		        	    case self::MESSAGE_TEXT:
		        	    case self::MID:
		        	    case self::MIGRATE:
		        	    case self::MIN_ROWS:
		        	    case self::MODE:
		        	    case self::MODIFY:
		        	    case self::MUTEX:
		        	    case self::MYSQL:
		        	    case self::MYSQL_ERRNO:
		        	    case self::NAME:
		        	    case self::NAMES:
		        	    case self::NCHAR:
		        	    case self::NEVER:
		        	    case self::NEXT:
		        	    case self::NO:
		        	    case self::NODEGROUP:
		        	    case self::NONE:
		        	    case self::OFFLINE:
		        	    case self::OFFSET:
		        	    case self::OJ:
		        	    case self::OLD_PASSWORD:
		        	    case self::ONE:
		        	    case self::ONLINE:
		        	    case self::ONLY:
		        	    case self::OPEN:
		        	    case self::OPTIMIZER_COSTS:
		        	    case self::OPTIONS:
		        	    case self::OWNER:
		        	    case self::PACK_KEYS:
		        	    case self::PAGE:
		        	    case self::PARSER:
		        	    case self::PARTIAL:
		        	    case self::PARTITIONING:
		        	    case self::PARTITIONS:
		        	    case self::PASSWORD:
		        	    case self::PHASE:
		        	    case self::PLUGIN:
		        	    case self::PLUGIN_DIR:
		        	    case self::PLUGINS:
		        	    case self::PORT:
		        	    case self::PRECEDES:
		        	    case self::PREPARE:
		        	    case self::PRESERVE:
		        	    case self::PREV:
		        	    case self::PROCESSLIST:
		        	    case self::PROFILE:
		        	    case self::PROFILES:
		        	    case self::PROXY:
		        	    case self::QUERY:
		        	    case self::QUICK:
		        	    case self::REBUILD:
		        	    case self::RECOVER:
		        	    case self::REDO_BUFFER_SIZE:
		        	    case self::REDUNDANT:
		        	    case self::RELAY:
		        	    case self::RELAY_LOG_FILE:
		        	    case self::RELAY_LOG_POS:
		        	    case self::RELAYLOG:
		        	    case self::REMOVE:
		        	    case self::REORGANIZE:
		        	    case self::REPAIR:
		        	    case self::REPLICATE_DO_DB:
		        	    case self::REPLICATE_DO_TABLE:
		        	    case self::REPLICATE_IGNORE_DB:
		        	    case self::REPLICATE_IGNORE_TABLE:
		        	    case self::REPLICATE_REWRITE_DB:
		        	    case self::REPLICATE_WILD_DO_TABLE:
		        	    case self::REPLICATE_WILD_IGNORE_TABLE:
		        	    case self::REPLICATION:
		        	    case self::RESET:
		        	    case self::RESUME:
		        	    case self::RETURNED_SQLSTATE:
		        	    case self::RETURNS:
		        	    case self::ROLLBACK:
		        	    case self::ROLLUP:
		        	    case self::ROTATE:
		        	    case self::ROW:
		        	    case self::ROWS:
		        	    case self::ROW_FORMAT:
		        	    case self::SAVEPOINT:
		        	    case self::SCHEDULE:
		        	    case self::SECURITY:
		        	    case self::SERVER:
		        	    case self::SESSION:
		        	    case self::SHARE:
		        	    case self::SHARED:
		        	    case self::SIGNED:
		        	    case self::SIMPLE:
		        	    case self::SLAVE:
		        	    case self::SLOW:
		        	    case self::SNAPSHOT:
		        	    case self::SOCKET:
		        	    case self::SOME:
		        	    case self::SONAME:
		        	    case self::SOUNDS:
		        	    case self::SOURCE:
		        	    case self::SQL_AFTER_GTIDS:
		        	    case self::SQL_AFTER_MTS_GAPS:
		        	    case self::SQL_BEFORE_GTIDS:
		        	    case self::SQL_BUFFER_RESULT:
		        	    case self::SQL_CACHE:
		        	    case self::SQL_NO_CACHE:
		        	    case self::SQL_THREAD:
		        	    case self::START:
		        	    case self::STARTS:
		        	    case self::STATS_AUTO_RECALC:
		        	    case self::STATS_PERSISTENT:
		        	    case self::STATS_SAMPLE_PAGES:
		        	    case self::STATUS:
		        	    case self::STOP:
		        	    case self::STORAGE:
		        	    case self::STRING:
		        	    case self::SUBCLASS_ORIGIN:
		        	    case self::SUBJECT:
		        	    case self::SUBPARTITION:
		        	    case self::SUBPARTITIONS:
		        	    case self::SUSPEND:
		        	    case self::SWAPS:
		        	    case self::SWITCHES:
		        	    case self::TABLE_NAME:
		        	    case self::TABLESPACE:
		        	    case self::TEMPORARY:
		        	    case self::TEMPTABLE:
		        	    case self::THAN:
		        	    case self::TRADITIONAL:
		        	    case self::TRANSACTION:
		        	    case self::TRIGGERS:
		        	    case self::TRUNCATE:
		        	    case self::UNDEFINED:
		        	    case self::UNDOFILE:
		        	    case self::UNDO_BUFFER_SIZE:
		        	    case self::UNINSTALL:
		        	    case self::UNKNOWN:
		        	    case self::UNTIL:
		        	    case self::UPGRADE:
		        	    case self::USER:
		        	    case self::USE_FRM:
		        	    case self::USER_RESOURCES:
		        	    case self::VALIDATION:
		        	    case self::VALUE:
		        	    case self::VARIABLES:
		        	    case self::VIEW:
		        	    case self::VISIBLE:
		        	    case self::WAIT:
		        	    case self::WARNINGS:
		        	    case self::WITHOUT:
		        	    case self::WORK:
		        	    case self::WRAPPER:
		        	    case self::X509:
		        	    case self::XA:
		        	    case self::XML:
		        	    case self::INTERNAL:
		        	    case self::QUARTER:
		        	    case self::MONTH:
		        	    case self::DAY:
		        	    case self::HOUR:
		        	    case self::MINUTE:
		        	    case self::WEEK:
		        	    case self::SECOND:
		        	    case self::MICROSECOND:
		        	    case self::TABLES:
		        	    case self::ROUTINE:
		        	    case self::EXECUTE:
		        	    case self::FILE:
		        	    case self::PROCESS:
		        	    case self::RELOAD:
		        	    case self::SHUTDOWN:
		        	    case self::SUPER:
		        	    case self::PRIVILEGES:
		        	    case self::SESSION_VARIABLES_ADMIN:
		        	    case self::ARMSCII8:
		        	    case self::ASCII:
		        	    case self::BIG5:
		        	    case self::CP1250:
		        	    case self::CP1251:
		        	    case self::CP1256:
		        	    case self::CP1257:
		        	    case self::CP850:
		        	    case self::CP852:
		        	    case self::CP866:
		        	    case self::CP932:
		        	    case self::DEC8:
		        	    case self::EUCJPMS:
		        	    case self::EUCKR:
		        	    case self::GB2312:
		        	    case self::GBK:
		        	    case self::GEOSTD8:
		        	    case self::GREEK:
		        	    case self::HEBREW:
		        	    case self::HP8:
		        	    case self::KEYBCS2:
		        	    case self::KOI8R:
		        	    case self::KOI8U:
		        	    case self::LATIN1:
		        	    case self::LATIN2:
		        	    case self::LATIN5:
		        	    case self::LATIN7:
		        	    case self::MACCE:
		        	    case self::MACROMAN:
		        	    case self::SJIS:
		        	    case self::SWE7:
		        	    case self::TIS620:
		        	    case self::UCS2:
		        	    case self::UJIS:
		        	    case self::UTF16:
		        	    case self::UTF16LE:
		        	    case self::UTF32:
		        	    case self::UTF8:
		        	    case self::UTF8MB3:
		        	    case self::UTF8MB4:
		        	    case self::ARCHIVE:
		        	    case self::BLACKHOLE:
		        	    case self::CSV:
		        	    case self::FEDERATED:
		        	    case self::INNODB:
		        	    case self::MEMORY:
		        	    case self::MRG_MYISAM:
		        	    case self::MYISAM:
		        	    case self::NDB:
		        	    case self::NDBCLUSTER:
		        	    case self::PERFORMANCE_SCHEMA:
		        	    case self::TOKUDB:
		        	    case self::REPEATABLE:
		        	    case self::COMMITTED:
		        	    case self::UNCOMMITTED:
		        	    case self::SERIALIZABLE:
		        	    case self::GEOMETRYCOLLECTION:
		        	    case self::LINESTRING:
		        	    case self::MULTILINESTRING:
		        	    case self::MULTIPOINT:
		        	    case self::MULTIPOLYGON:
		        	    case self::POINT:
		        	    case self::POLYGON:
		        	    case self::ABS:
		        	    case self::ACOS:
		        	    case self::ADDDATE:
		        	    case self::ADDTIME:
		        	    case self::AES_DECRYPT:
		        	    case self::AES_ENCRYPT:
		        	    case self::AREA:
		        	    case self::ASBINARY:
		        	    case self::ASIN:
		        	    case self::ASTEXT:
		        	    case self::ASWKB:
		        	    case self::ASWKT:
		        	    case self::ASYMMETRIC_DECRYPT:
		        	    case self::ASYMMETRIC_DERIVE:
		        	    case self::ASYMMETRIC_ENCRYPT:
		        	    case self::ASYMMETRIC_SIGN:
		        	    case self::ASYMMETRIC_VERIFY:
		        	    case self::ATAN:
		        	    case self::ATAN2:
		        	    case self::BENCHMARK:
		        	    case self::BIN:
		        	    case self::BIT_COUNT:
		        	    case self::BIT_LENGTH:
		        	    case self::BUFFER:
		        	    case self::CATALOG_NAME:
		        	    case self::CEIL:
		        	    case self::CEILING:
		        	    case self::CENTROID:
		        	    case self::CHARACTER_LENGTH:
		        	    case self::CHARSET:
		        	    case self::CHAR_LENGTH:
		        	    case self::COERCIBILITY:
		        	    case self::COLLATION:
		        	    case self::COMPRESS:
		        	    case self::CONCAT:
		        	    case self::CONCAT_WS:
		        	    case self::CONNECTION_ID:
		        	    case self::CONV:
		        	    case self::CONVERT_TZ:
		        	    case self::COS:
		        	    case self::COT:
		        	    case self::CRC32:
		        	    case self::CREATE_ASYMMETRIC_PRIV_KEY:
		        	    case self::CREATE_ASYMMETRIC_PUB_KEY:
		        	    case self::CREATE_DH_PARAMETERS:
		        	    case self::CREATE_DIGEST:
		        	    case self::CROSSES:
		        	    case self::DATEDIFF:
		        	    case self::DATE_FORMAT:
		        	    case self::DAYNAME:
		        	    case self::DAYOFMONTH:
		        	    case self::DAYOFWEEK:
		        	    case self::DAYOFYEAR:
		        	    case self::DECODE:
		        	    case self::DEGREES:
		        	    case self::DES_DECRYPT:
		        	    case self::DES_ENCRYPT:
		        	    case self::DIMENSION:
		        	    case self::DISJOINT:
		        	    case self::ELT:
		        	    case self::ENCODE:
		        	    case self::ENCRYPT:
		        	    case self::ENDPOINT:
		        	    case self::ENVELOPE:
		        	    case self::EQUALS:
		        	    case self::EXP:
		        	    case self::EXPORT_SET:
		        	    case self::EXTERIORRING:
		        	    case self::EXTRACTVALUE:
		        	    case self::FIELD:
		        	    case self::FIND_IN_SET:
		        	    case self::FLOOR:
		        	    case self::FORMAT:
		        	    case self::FOUND_ROWS:
		        	    case self::FROM_BASE64:
		        	    case self::FROM_DAYS:
		        	    case self::FROM_UNIXTIME:
		        	    case self::GEOMCOLLFROMTEXT:
		        	    case self::GEOMCOLLFROMWKB:
		        	    case self::GEOMETRYCOLLECTIONFROMTEXT:
		        	    case self::GEOMETRYCOLLECTIONFROMWKB:
		        	    case self::GEOMETRYFROMTEXT:
		        	    case self::GEOMETRYFROMWKB:
		        	    case self::GEOMETRYN:
		        	    case self::GEOMETRYTYPE:
		        	    case self::GEOMFROMTEXT:
		        	    case self::GEOMFROMWKB:
		        	    case self::GET_FORMAT:
		        	    case self::GET_LOCK:
		        	    case self::GLENGTH:
		        	    case self::GREATEST:
		        	    case self::GTID_SUBSET:
		        	    case self::GTID_SUBTRACT:
		        	    case self::HEX:
		        	    case self::IFNULL:
		        	    case self::INET6_ATON:
		        	    case self::INET6_NTOA:
		        	    case self::INET_ATON:
		        	    case self::INET_NTOA:
		        	    case self::INSTR:
		        	    case self::INTERIORRINGN:
		        	    case self::INTERSECTS:
		        	    case self::ISCLOSED:
		        	    case self::ISEMPTY:
		        	    case self::ISNULL:
		        	    case self::ISSIMPLE:
		        	    case self::IS_FREE_LOCK:
		        	    case self::IS_IPV4:
		        	    case self::IS_IPV4_COMPAT:
		        	    case self::IS_IPV4_MAPPED:
		        	    case self::IS_IPV6:
		        	    case self::IS_USED_LOCK:
		        	    case self::LAST_INSERT_ID:
		        	    case self::LCASE:
		        	    case self::LEAST:
		        	    case self::LENGTH:
		        	    case self::LINEFROMTEXT:
		        	    case self::LINEFROMWKB:
		        	    case self::LINESTRINGFROMTEXT:
		        	    case self::LINESTRINGFROMWKB:
		        	    case self::LN:
		        	    case self::LOAD_FILE:
		        	    case self::LOCATE:
		        	    case self::LOG:
		        	    case self::LOG10:
		        	    case self::LOG2:
		        	    case self::LOWER:
		        	    case self::LPAD:
		        	    case self::LTRIM:
		        	    case self::MAKEDATE:
		        	    case self::MAKETIME:
		        	    case self::MAKE_SET:
		        	    case self::MASTER_POS_WAIT:
		        	    case self::MBRCONTAINS:
		        	    case self::MBRDISJOINT:
		        	    case self::MBREQUAL:
		        	    case self::MBRINTERSECTS:
		        	    case self::MBROVERLAPS:
		        	    case self::MBRTOUCHES:
		        	    case self::MBRWITHIN:
		        	    case self::MD5:
		        	    case self::MLINEFROMTEXT:
		        	    case self::MLINEFROMWKB:
		        	    case self::MONTHNAME:
		        	    case self::MPOINTFROMTEXT:
		        	    case self::MPOINTFROMWKB:
		        	    case self::MPOLYFROMTEXT:
		        	    case self::MPOLYFROMWKB:
		        	    case self::MULTILINESTRINGFROMTEXT:
		        	    case self::MULTILINESTRINGFROMWKB:
		        	    case self::MULTIPOINTFROMTEXT:
		        	    case self::MULTIPOINTFROMWKB:
		        	    case self::MULTIPOLYGONFROMTEXT:
		        	    case self::MULTIPOLYGONFROMWKB:
		        	    case self::NAME_CONST:
		        	    case self::NULLIF:
		        	    case self::NUMGEOMETRIES:
		        	    case self::NUMINTERIORRINGS:
		        	    case self::NUMPOINTS:
		        	    case self::OCT:
		        	    case self::OCTET_LENGTH:
		        	    case self::ORD:
		        	    case self::OVERLAPS:
		        	    case self::PERIOD_ADD:
		        	    case self::PERIOD_DIFF:
		        	    case self::PI:
		        	    case self::POINTFROMTEXT:
		        	    case self::POINTFROMWKB:
		        	    case self::POINTN:
		        	    case self::POLYFROMTEXT:
		        	    case self::POLYFROMWKB:
		        	    case self::POLYGONFROMTEXT:
		        	    case self::POLYGONFROMWKB:
		        	    case self::POW:
		        	    case self::POWER:
		        	    case self::QUOTE:
		        	    case self::RADIANS:
		        	    case self::RAND:
		        	    case self::RANDOM_BYTES:
		        	    case self::RELEASE_LOCK:
		        	    case self::REVERSE:
		        	    case self::ROUND:
		        	    case self::ROW_COUNT:
		        	    case self::RPAD:
		        	    case self::RTRIM:
		        	    case self::SEC_TO_TIME:
		        	    case self::SESSION_USER:
		        	    case self::SHA:
		        	    case self::SHA1:
		        	    case self::SHA2:
		        	    case self::SCHEMA_NAME:
		        	    case self::SIGN:
		        	    case self::SIN:
		        	    case self::SLEEP:
		        	    case self::SOUNDEX:
		        	    case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		        	    case self::SQRT:
		        	    case self::SRID:
		        	    case self::STARTPOINT:
		        	    case self::STRCMP:
		        	    case self::STR_TO_DATE:
		        	    case self::ST_AREA:
		        	    case self::ST_ASBINARY:
		        	    case self::ST_ASTEXT:
		        	    case self::ST_ASWKB:
		        	    case self::ST_ASWKT:
		        	    case self::ST_BUFFER:
		        	    case self::ST_CENTROID:
		        	    case self::ST_CONTAINS:
		        	    case self::ST_CROSSES:
		        	    case self::ST_DIFFERENCE:
		        	    case self::ST_DIMENSION:
		        	    case self::ST_DISJOINT:
		        	    case self::ST_DISTANCE:
		        	    case self::ST_ENDPOINT:
		        	    case self::ST_ENVELOPE:
		        	    case self::ST_EQUALS:
		        	    case self::ST_EXTERIORRING:
		        	    case self::ST_GEOMCOLLFROMTEXT:
		        	    case self::ST_GEOMCOLLFROMTXT:
		        	    case self::ST_GEOMCOLLFROMWKB:
		        	    case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		        	    case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		        	    case self::ST_GEOMETRYFROMTEXT:
		        	    case self::ST_GEOMETRYFROMWKB:
		        	    case self::ST_GEOMETRYN:
		        	    case self::ST_GEOMETRYTYPE:
		        	    case self::ST_GEOMFROMTEXT:
		        	    case self::ST_GEOMFROMWKB:
		        	    case self::ST_INTERIORRINGN:
		        	    case self::ST_INTERSECTION:
		        	    case self::ST_INTERSECTS:
		        	    case self::ST_ISCLOSED:
		        	    case self::ST_ISEMPTY:
		        	    case self::ST_ISSIMPLE:
		        	    case self::ST_LINEFROMTEXT:
		        	    case self::ST_LINEFROMWKB:
		        	    case self::ST_LINESTRINGFROMTEXT:
		        	    case self::ST_LINESTRINGFROMWKB:
		        	    case self::ST_NUMGEOMETRIES:
		        	    case self::ST_NUMINTERIORRING:
		        	    case self::ST_NUMINTERIORRINGS:
		        	    case self::ST_NUMPOINTS:
		        	    case self::ST_OVERLAPS:
		        	    case self::ST_POINTFROMTEXT:
		        	    case self::ST_POINTFROMWKB:
		        	    case self::ST_POINTN:
		        	    case self::ST_POLYFROMTEXT:
		        	    case self::ST_POLYFROMWKB:
		        	    case self::ST_POLYGONFROMTEXT:
		        	    case self::ST_POLYGONFROMWKB:
		        	    case self::ST_SRID:
		        	    case self::ST_STARTPOINT:
		        	    case self::ST_SYMDIFFERENCE:
		        	    case self::ST_TOUCHES:
		        	    case self::ST_UNION:
		        	    case self::ST_WITHIN:
		        	    case self::ST_X:
		        	    case self::ST_Y:
		        	    case self::SUBDATE:
		        	    case self::SUBSTRING_INDEX:
		        	    case self::SUBTIME:
		        	    case self::SYSTEM_USER:
		        	    case self::TAN:
		        	    case self::TIMEDIFF:
		        	    case self::TIMESTAMPADD:
		        	    case self::TIMESTAMPDIFF:
		        	    case self::TIME_FORMAT:
		        	    case self::TIME_TO_SEC:
		        	    case self::TOUCHES:
		        	    case self::TO_BASE64:
		        	    case self::TO_DAYS:
		        	    case self::TO_SECONDS:
		        	    case self::UCASE:
		        	    case self::UNCOMPRESS:
		        	    case self::UNCOMPRESSED_LENGTH:
		        	    case self::UNHEX:
		        	    case self::UNIX_TIMESTAMP:
		        	    case self::UPDATEXML:
		        	    case self::UPPER:
		        	    case self::UUID:
		        	    case self::UUID_SHORT:
		        	    case self::VALIDATE_PASSWORD_STRENGTH:
		        	    case self::VERSION:
		        	    case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		        	    case self::WEEKDAY:
		        	    case self::WEEKOFYEAR:
		        	    case self::WEIGHT_STRING:
		        	    case self::WITHIN:
		        	    case self::YEARWEEK:
		        	    case self::Y_FUNCTION:
		        	    case self::X_FUNCTION:
		        	    case self::CHARSET_REVERSE_QOUTE_STRING:
		        	    case self::STRING_LITERAL:
		        	    case self::ID:
		        	    case self::REVERSE_QUOTE_ID:
		        	    	$this->setState(5227);
		        	    	$localContext->partitionList = $this->uidList();
		        	    	break;

		        	    case self::ALL:
		        	    	$this->setState(5228);
		        	    	$this->match(self::ALL);
		        	    	break;

		        	default:
		        		throw new NoViableAltException($this);
		        	}
		        	$this->setState(5231);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(5241);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 757, $this->ctx)) {
		            case 1:
		        	    $this->setState(5235);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::INDEX || $_la === self::KEY) {
		        	    	$this->setState(5234);

		        	    	$localContext->indexFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::INDEX || $_la === self::KEY)) {
		        	    		    $localContext->indexFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(5237);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5238);
		        	    $localContext->indexList = $this->uidList();
		        	    $this->setState(5239);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		        $this->setState(5245);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::IGNORE) {
		        	$this->setState(5243);
		        	$this->match(self::IGNORE);
		        	$this->setState(5244);
		        	$this->match(self::LEAVES);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function simpleDescribeStatement() : Context\SimpleDescribeStatementContext
		{
		    $localContext = new Context\SimpleDescribeStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 476, self::RULE_simpleDescribeStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5247);

		        $localContext->command = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!(((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::DESC) | (1 << self::DESCRIBE) | (1 << self::EXPLAIN))) !== 0))) {
		        	    $localContext->command = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(5248);
		        $this->tableName();
		        $this->setState(5251);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 759, $this->ctx)) {
		            case 1:
		        	    $this->setState(5249);
		        	    $localContext->column = $this->uid();
		        	break;

		            case 2:
		        	    $this->setState(5250);
		        	    $localContext->pattern = $this->match(self::STRING_LITERAL);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function fullDescribeStatement() : Context\FullDescribeStatementContext
		{
		    $localContext = new Context\FullDescribeStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 478, self::RULE_fullDescribeStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5253);

		        $localContext->command = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!(((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::DESC) | (1 << self::DESCRIBE) | (1 << self::EXPLAIN))) !== 0))) {
		        	    $localContext->command = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(5257);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::EXTENDED || $_la === self::PARTITIONS || $_la === self::FORMAT) {
		        	$this->setState(5254);

		        	$localContext->formatType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::EXTENDED || $_la === self::PARTITIONS || $_la === self::FORMAT)) {
		        		    $localContext->formatType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        	$this->setState(5255);
		        	$this->match(self::EQUAL_SYMBOL);
		        	$this->setState(5256);

		        	$localContext->formatValue = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::JSON || $_la === self::TRADITIONAL)) {
		        		    $localContext->formatValue = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(5259);
		        $this->describeObjectClause();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function helpStatement() : Context\HelpStatementContext
		{
		    $localContext = new Context\HelpStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 480, self::RULE_helpStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5261);
		        $this->match(self::HELP);
		        $this->setState(5262);
		        $this->match(self::STRING_LITERAL);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function useStatement() : Context\UseStatementContext
		{
		    $localContext = new Context\UseStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 482, self::RULE_useStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5264);
		        $this->match(self::USE);
		        $this->setState(5265);
		        $this->uid();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function signalStatement() : Context\SignalStatementContext
		{
		    $localContext = new Context\SignalStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 484, self::RULE_signalStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5267);
		        $this->match(self::SIGNAL);
		        $this->setState(5275);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SQLSTATE:
		            	$this->setState(5268);
		            	$this->match(self::SQLSTATE);
		            	$this->setState(5270);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::VALUE) {
		            		$this->setState(5269);
		            		$this->match(self::VALUE);
		            	}
		            	$this->setState(5272);
		            	$this->stringLiteral();
		            	break;

		            case self::ID:
		            	$this->setState(5273);
		            	$this->match(self::ID);
		            	break;

		            case self::REVERSE_QUOTE_ID:
		            	$this->setState(5274);
		            	$this->match(self::REVERSE_QUOTE_ID);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		        $this->setState(5286);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 764, $this->ctx)) {
		            case 1:
		        	    $this->setState(5277);
		        	    $this->match(self::SET);
		        	    $this->setState(5278);
		        	    $this->signalConditionInformation();
		        	    $this->setState(5283);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5279);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5280);
		        	    	$this->signalConditionInformation();
		        	    	$this->setState(5285);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function resignalStatement() : Context\ResignalStatementContext
		{
		    $localContext = new Context\ResignalStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 486, self::RULE_resignalStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5288);
		        $this->match(self::RESIGNAL);
		        $this->setState(5296);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::SQLSTATE:
		            	$this->setState(5289);
		            	$this->match(self::SQLSTATE);
		            	$this->setState(5291);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::VALUE) {
		            		$this->setState(5290);
		            		$this->match(self::VALUE);
		            	}
		            	$this->setState(5293);
		            	$this->stringLiteral();
		            	break;

		            case self::ID:
		            	$this->setState(5294);
		            	$this->match(self::ID);
		            	break;

		            case self::REVERSE_QUOTE_ID:
		            	$this->setState(5295);
		            	$this->match(self::REVERSE_QUOTE_ID);
		            	break;

		            case self::EOF:
		            case self::ALTER:
		            case self::ANALYZE:
		            case self::CALL:
		            case self::CHANGE:
		            case self::CHECK:
		            case self::CREATE:
		            case self::DELETE:
		            case self::DESC:
		            case self::DESCRIBE:
		            case self::DROP:
		            case self::EXPLAIN:
		            case self::GET:
		            case self::GRANT:
		            case self::INSERT:
		            case self::KILL:
		            case self::LOAD:
		            case self::LOCK:
		            case self::OPTIMIZE:
		            case self::PURGE:
		            case self::RELEASE:
		            case self::RENAME:
		            case self::REPLACE:
		            case self::RESIGNAL:
		            case self::REVOKE:
		            case self::SELECT:
		            case self::SET:
		            case self::SHOW:
		            case self::SIGNAL:
		            case self::UNLOCK:
		            case self::UPDATE:
		            case self::USE:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::CACHE:
		            case self::CHECKSUM:
		            case self::COMMIT:
		            case self::DEALLOCATE:
		            case self::DO:
		            case self::FLUSH:
		            case self::HANDLER:
		            case self::HELP:
		            case self::INSTALL:
		            case self::PREPARE:
		            case self::REPAIR:
		            case self::RESET:
		            case self::ROLLBACK:
		            case self::SAVEPOINT:
		            case self::START:
		            case self::STOP:
		            case self::TRUNCATE:
		            case self::UNINSTALL:
		            case self::XA:
		            case self::EXECUTE:
		            case self::SHUTDOWN:
		            case self::MINUSMINUS:
		            case self::LR_BRACKET:
		            case self::SEMI:
		            	break;

		        default:
		        	break;
		        }
		        $this->setState(5307);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 768, $this->ctx)) {
		            case 1:
		        	    $this->setState(5298);
		        	    $this->match(self::SET);
		        	    $this->setState(5299);
		        	    $this->signalConditionInformation();
		        	    $this->setState(5304);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5300);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5301);
		        	    	$this->signalConditionInformation();
		        	    	$this->setState(5306);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function signalConditionInformation() : Context\SignalConditionInformationContext
		{
		    $localContext = new Context\SignalConditionInformationContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 488, self::RULE_signalConditionInformation);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5309);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 297)) & ~0x3f) === 0 && ((1 << ($_la - 297)) & ((1 << (self::CLASS_ORIGIN - 297)) | (1 << (self::COLUMN_NAME - 297)) | (1 << (self::CONSTRAINT_CATALOG - 297)) | (1 << (self::CONSTRAINT_SCHEMA - 297)) | (1 << (self::CONSTRAINT_NAME - 297)) | (1 << (self::CURSOR_NAME - 297)))) !== 0) || $_la === self::MESSAGE_TEXT || $_la === self::MYSQL_ERRNO || $_la === self::SUBCLASS_ORIGIN || $_la === self::TABLE_NAME || $_la === self::CATALOG_NAME || $_la === self::SCHEMA_NAME)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(5310);
		        $this->match(self::EQUAL_SYMBOL);
		        $this->setState(5313);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::START_NATIONAL_STRING_LITERAL:
		            case self::STRING_LITERAL:
		            case self::STRING_CHARSET_NAME:
		            	$this->setState(5311);
		            	$this->stringLiteral();
		            	break;

		            case self::DECIMAL_LITERAL:
		            	$this->setState(5312);
		            	$this->match(self::DECIMAL_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function diagnosticsStatement() : Context\DiagnosticsStatementContext
		{
		    $localContext = new Context\DiagnosticsStatementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 490, self::RULE_diagnosticsStatement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5315);
		        $this->match(self::GET);
		        $this->setState(5317);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::CURRENT || $_la === self::STACKED) {
		        	$this->setState(5316);

		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::CURRENT || $_la === self::STACKED)) {
		        	$this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		        $this->setState(5319);
		        $this->match(self::DIAGNOSTICS);
		        $this->setState(5351);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CURRENT:
		            case self::DATABASE:
		            case self::DIAGNOSTICS:
		            case self::LEFT:
		            case self::NUMBER:
		            case self::RIGHT:
		            case self::STACKED:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::COUNT:
		            case self::POSITION:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::TABLES:
		            case self::ROUTINE:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::PRIVILEGES:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::AT_SIGN:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::STRING_LITERAL:
		            case self::ID:
		            case self::REVERSE_QUOTE_ID:
		            case self::LOCAL_ID:
		            case self::GLOBAL_ID:
		            	$this->setState(5320);
		            	$this->variableClause();
		            	$this->setState(5321);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(5322);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::NUMBER || $_la === self::ROW_COUNT)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(5330);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(5323);
		            		$this->match(self::COMMA);
		            		$this->setState(5324);
		            		$this->variableClause();
		            		$this->setState(5325);
		            		$this->match(self::EQUAL_SYMBOL);
		            		$this->setState(5326);

		            		$_la = $this->input->LA(1);

		            		if (!($_la === self::NUMBER || $_la === self::ROW_COUNT)) {
		            		$this->errorHandler->recoverInline($this);
		            		} else {
		            			if ($this->input->LA(1) === Token::EOF) {
		            			    $this->matchedEOF = true;
		            		    }

		            			$this->errorHandler->reportMatch($this);
		            			$this->consume();
		            		}
		            		$this->setState(5332);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		            case self::CONDITION:
		            	$this->setState(5333);
		            	$this->match(self::CONDITION);
		            	$this->setState(5336);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::ZERO_DECIMAL:
		            	    case self::ONE_DECIMAL:
		            	    case self::TWO_DECIMAL:
		            	    case self::DECIMAL_LITERAL:
		            	    	$this->setState(5334);
		            	    	$this->decimalLiteral();
		            	    	break;

		            	    case self::CURRENT:
		            	    case self::DATABASE:
		            	    case self::DIAGNOSTICS:
		            	    case self::LEFT:
		            	    case self::NUMBER:
		            	    case self::RIGHT:
		            	    case self::STACKED:
		            	    case self::DATE:
		            	    case self::TIME:
		            	    case self::TIMESTAMP:
		            	    case self::DATETIME:
		            	    case self::YEAR:
		            	    case self::TEXT:
		            	    case self::ENUM:
		            	    case self::SERIAL:
		            	    case self::COUNT:
		            	    case self::POSITION:
		            	    case self::ACCOUNT:
		            	    case self::ACTION:
		            	    case self::AFTER:
		            	    case self::AGGREGATE:
		            	    case self::ALGORITHM:
		            	    case self::ANY:
		            	    case self::AT:
		            	    case self::AUTHORS:
		            	    case self::AUTOCOMMIT:
		            	    case self::AUTOEXTEND_SIZE:
		            	    case self::AUTO_INCREMENT:
		            	    case self::AVG_ROW_LENGTH:
		            	    case self::BEGIN:
		            	    case self::BINLOG:
		            	    case self::BIT:
		            	    case self::BLOCK:
		            	    case self::BOOL:
		            	    case self::BOOLEAN:
		            	    case self::BTREE:
		            	    case self::CACHE:
		            	    case self::CASCADED:
		            	    case self::CHAIN:
		            	    case self::CHANGED:
		            	    case self::CHANNEL:
		            	    case self::CHECKSUM:
		            	    case self::PAGE_CHECKSUM:
		            	    case self::CIPHER:
		            	    case self::CLASS_ORIGIN:
		            	    case self::CLIENT:
		            	    case self::CLOSE:
		            	    case self::COALESCE:
		            	    case self::CODE:
		            	    case self::COLUMNS:
		            	    case self::COLUMN_FORMAT:
		            	    case self::COLUMN_NAME:
		            	    case self::COMMENT:
		            	    case self::COMMIT:
		            	    case self::COMPACT:
		            	    case self::COMPLETION:
		            	    case self::COMPRESSED:
		            	    case self::COMPRESSION:
		            	    case self::CONCURRENT:
		            	    case self::CONNECTION:
		            	    case self::CONSISTENT:
		            	    case self::CONSTRAINT_CATALOG:
		            	    case self::CONSTRAINT_SCHEMA:
		            	    case self::CONSTRAINT_NAME:
		            	    case self::CONTAINS:
		            	    case self::CONTEXT:
		            	    case self::CONTRIBUTORS:
		            	    case self::COPY:
		            	    case self::CPU:
		            	    case self::CURSOR_NAME:
		            	    case self::DATA:
		            	    case self::DATAFILE:
		            	    case self::DEALLOCATE:
		            	    case self::DEFAULT_AUTH:
		            	    case self::DEFINER:
		            	    case self::DELAY_KEY_WRITE:
		            	    case self::DES_KEY_FILE:
		            	    case self::DIRECTORY:
		            	    case self::DISABLE:
		            	    case self::DISCARD:
		            	    case self::DISK:
		            	    case self::DO:
		            	    case self::DUMPFILE:
		            	    case self::DUPLICATE:
		            	    case self::DYNAMIC:
		            	    case self::ENABLE:
		            	    case self::ENCRYPTION:
		            	    case self::END:
		            	    case self::ENDS:
		            	    case self::ENGINE:
		            	    case self::ENGINES:
		            	    case self::ERROR:
		            	    case self::ERRORS:
		            	    case self::ESCAPE:
		            	    case self::EVEN:
		            	    case self::EVENT:
		            	    case self::EVENTS:
		            	    case self::EVERY:
		            	    case self::EXCHANGE:
		            	    case self::EXCLUSIVE:
		            	    case self::EXPIRE:
		            	    case self::EXPORT:
		            	    case self::EXTENDED:
		            	    case self::EXTENT_SIZE:
		            	    case self::FAST:
		            	    case self::FAULTS:
		            	    case self::FIELDS:
		            	    case self::FILE_BLOCK_SIZE:
		            	    case self::FILTER:
		            	    case self::FIRST:
		            	    case self::FIXED:
		            	    case self::FLUSH:
		            	    case self::FOLLOWS:
		            	    case self::FOUND:
		            	    case self::FULL:
		            	    case self::FUNCTION:
		            	    case self::GENERAL:
		            	    case self::GLOBAL:
		            	    case self::GRANTS:
		            	    case self::GROUP_REPLICATION:
		            	    case self::HANDLER:
		            	    case self::HASH:
		            	    case self::HELP:
		            	    case self::HOST:
		            	    case self::HOSTS:
		            	    case self::IDENTIFIED:
		            	    case self::IGNORE_SERVER_IDS:
		            	    case self::IMPORT:
		            	    case self::INDEXES:
		            	    case self::INITIAL_SIZE:
		            	    case self::INPLACE:
		            	    case self::INSERT_METHOD:
		            	    case self::INSTALL:
		            	    case self::INSTANCE:
		            	    case self::INVISIBLE:
		            	    case self::INVOKER:
		            	    case self::IO:
		            	    case self::IO_THREAD:
		            	    case self::IPC:
		            	    case self::ISOLATION:
		            	    case self::ISSUER:
		            	    case self::JSON:
		            	    case self::KEY_BLOCK_SIZE:
		            	    case self::LANGUAGE:
		            	    case self::LAST:
		            	    case self::LEAVES:
		            	    case self::LESS:
		            	    case self::LEVEL:
		            	    case self::LIST:
		            	    case self::LOCAL:
		            	    case self::LOGFILE:
		            	    case self::LOGS:
		            	    case self::MASTER:
		            	    case self::MASTER_AUTO_POSITION:
		            	    case self::MASTER_CONNECT_RETRY:
		            	    case self::MASTER_DELAY:
		            	    case self::MASTER_HEARTBEAT_PERIOD:
		            	    case self::MASTER_HOST:
		            	    case self::MASTER_LOG_FILE:
		            	    case self::MASTER_LOG_POS:
		            	    case self::MASTER_PASSWORD:
		            	    case self::MASTER_PORT:
		            	    case self::MASTER_RETRY_COUNT:
		            	    case self::MASTER_SSL:
		            	    case self::MASTER_SSL_CA:
		            	    case self::MASTER_SSL_CAPATH:
		            	    case self::MASTER_SSL_CERT:
		            	    case self::MASTER_SSL_CIPHER:
		            	    case self::MASTER_SSL_CRL:
		            	    case self::MASTER_SSL_CRLPATH:
		            	    case self::MASTER_SSL_KEY:
		            	    case self::MASTER_TLS_VERSION:
		            	    case self::MASTER_USER:
		            	    case self::MAX_CONNECTIONS_PER_HOUR:
		            	    case self::MAX_QUERIES_PER_HOUR:
		            	    case self::MAX_ROWS:
		            	    case self::MAX_SIZE:
		            	    case self::MAX_UPDATES_PER_HOUR:
		            	    case self::MAX_USER_CONNECTIONS:
		            	    case self::MEDIUM:
		            	    case self::MERGE:
		            	    case self::MESSAGE_TEXT:
		            	    case self::MID:
		            	    case self::MIGRATE:
		            	    case self::MIN_ROWS:
		            	    case self::MODE:
		            	    case self::MODIFY:
		            	    case self::MUTEX:
		            	    case self::MYSQL:
		            	    case self::MYSQL_ERRNO:
		            	    case self::NAME:
		            	    case self::NAMES:
		            	    case self::NCHAR:
		            	    case self::NEVER:
		            	    case self::NEXT:
		            	    case self::NO:
		            	    case self::NODEGROUP:
		            	    case self::NONE:
		            	    case self::OFFLINE:
		            	    case self::OFFSET:
		            	    case self::OJ:
		            	    case self::OLD_PASSWORD:
		            	    case self::ONE:
		            	    case self::ONLINE:
		            	    case self::ONLY:
		            	    case self::OPEN:
		            	    case self::OPTIMIZER_COSTS:
		            	    case self::OPTIONS:
		            	    case self::OWNER:
		            	    case self::PACK_KEYS:
		            	    case self::PAGE:
		            	    case self::PARSER:
		            	    case self::PARTIAL:
		            	    case self::PARTITIONING:
		            	    case self::PARTITIONS:
		            	    case self::PASSWORD:
		            	    case self::PHASE:
		            	    case self::PLUGIN:
		            	    case self::PLUGIN_DIR:
		            	    case self::PLUGINS:
		            	    case self::PORT:
		            	    case self::PRECEDES:
		            	    case self::PREPARE:
		            	    case self::PRESERVE:
		            	    case self::PREV:
		            	    case self::PROCESSLIST:
		            	    case self::PROFILE:
		            	    case self::PROFILES:
		            	    case self::PROXY:
		            	    case self::QUERY:
		            	    case self::QUICK:
		            	    case self::REBUILD:
		            	    case self::RECOVER:
		            	    case self::REDO_BUFFER_SIZE:
		            	    case self::REDUNDANT:
		            	    case self::RELAY:
		            	    case self::RELAY_LOG_FILE:
		            	    case self::RELAY_LOG_POS:
		            	    case self::RELAYLOG:
		            	    case self::REMOVE:
		            	    case self::REORGANIZE:
		            	    case self::REPAIR:
		            	    case self::REPLICATE_DO_DB:
		            	    case self::REPLICATE_DO_TABLE:
		            	    case self::REPLICATE_IGNORE_DB:
		            	    case self::REPLICATE_IGNORE_TABLE:
		            	    case self::REPLICATE_REWRITE_DB:
		            	    case self::REPLICATE_WILD_DO_TABLE:
		            	    case self::REPLICATE_WILD_IGNORE_TABLE:
		            	    case self::REPLICATION:
		            	    case self::RESET:
		            	    case self::RESUME:
		            	    case self::RETURNED_SQLSTATE:
		            	    case self::RETURNS:
		            	    case self::ROLLBACK:
		            	    case self::ROLLUP:
		            	    case self::ROTATE:
		            	    case self::ROW:
		            	    case self::ROWS:
		            	    case self::ROW_FORMAT:
		            	    case self::SAVEPOINT:
		            	    case self::SCHEDULE:
		            	    case self::SECURITY:
		            	    case self::SERVER:
		            	    case self::SESSION:
		            	    case self::SHARE:
		            	    case self::SHARED:
		            	    case self::SIGNED:
		            	    case self::SIMPLE:
		            	    case self::SLAVE:
		            	    case self::SLOW:
		            	    case self::SNAPSHOT:
		            	    case self::SOCKET:
		            	    case self::SOME:
		            	    case self::SONAME:
		            	    case self::SOUNDS:
		            	    case self::SOURCE:
		            	    case self::SQL_AFTER_GTIDS:
		            	    case self::SQL_AFTER_MTS_GAPS:
		            	    case self::SQL_BEFORE_GTIDS:
		            	    case self::SQL_BUFFER_RESULT:
		            	    case self::SQL_CACHE:
		            	    case self::SQL_NO_CACHE:
		            	    case self::SQL_THREAD:
		            	    case self::START:
		            	    case self::STARTS:
		            	    case self::STATS_AUTO_RECALC:
		            	    case self::STATS_PERSISTENT:
		            	    case self::STATS_SAMPLE_PAGES:
		            	    case self::STATUS:
		            	    case self::STOP:
		            	    case self::STORAGE:
		            	    case self::STRING:
		            	    case self::SUBCLASS_ORIGIN:
		            	    case self::SUBJECT:
		            	    case self::SUBPARTITION:
		            	    case self::SUBPARTITIONS:
		            	    case self::SUSPEND:
		            	    case self::SWAPS:
		            	    case self::SWITCHES:
		            	    case self::TABLE_NAME:
		            	    case self::TABLESPACE:
		            	    case self::TEMPORARY:
		            	    case self::TEMPTABLE:
		            	    case self::THAN:
		            	    case self::TRADITIONAL:
		            	    case self::TRANSACTION:
		            	    case self::TRIGGERS:
		            	    case self::TRUNCATE:
		            	    case self::UNDEFINED:
		            	    case self::UNDOFILE:
		            	    case self::UNDO_BUFFER_SIZE:
		            	    case self::UNINSTALL:
		            	    case self::UNKNOWN:
		            	    case self::UNTIL:
		            	    case self::UPGRADE:
		            	    case self::USER:
		            	    case self::USE_FRM:
		            	    case self::USER_RESOURCES:
		            	    case self::VALIDATION:
		            	    case self::VALUE:
		            	    case self::VARIABLES:
		            	    case self::VIEW:
		            	    case self::VISIBLE:
		            	    case self::WAIT:
		            	    case self::WARNINGS:
		            	    case self::WITHOUT:
		            	    case self::WORK:
		            	    case self::WRAPPER:
		            	    case self::X509:
		            	    case self::XA:
		            	    case self::XML:
		            	    case self::INTERNAL:
		            	    case self::QUARTER:
		            	    case self::MONTH:
		            	    case self::DAY:
		            	    case self::HOUR:
		            	    case self::MINUTE:
		            	    case self::WEEK:
		            	    case self::SECOND:
		            	    case self::MICROSECOND:
		            	    case self::TABLES:
		            	    case self::ROUTINE:
		            	    case self::EXECUTE:
		            	    case self::FILE:
		            	    case self::PROCESS:
		            	    case self::RELOAD:
		            	    case self::SHUTDOWN:
		            	    case self::SUPER:
		            	    case self::PRIVILEGES:
		            	    case self::SESSION_VARIABLES_ADMIN:
		            	    case self::ARMSCII8:
		            	    case self::ASCII:
		            	    case self::BIG5:
		            	    case self::CP1250:
		            	    case self::CP1251:
		            	    case self::CP1256:
		            	    case self::CP1257:
		            	    case self::CP850:
		            	    case self::CP852:
		            	    case self::CP866:
		            	    case self::CP932:
		            	    case self::DEC8:
		            	    case self::EUCJPMS:
		            	    case self::EUCKR:
		            	    case self::GB2312:
		            	    case self::GBK:
		            	    case self::GEOSTD8:
		            	    case self::GREEK:
		            	    case self::HEBREW:
		            	    case self::HP8:
		            	    case self::KEYBCS2:
		            	    case self::KOI8R:
		            	    case self::KOI8U:
		            	    case self::LATIN1:
		            	    case self::LATIN2:
		            	    case self::LATIN5:
		            	    case self::LATIN7:
		            	    case self::MACCE:
		            	    case self::MACROMAN:
		            	    case self::SJIS:
		            	    case self::SWE7:
		            	    case self::TIS620:
		            	    case self::UCS2:
		            	    case self::UJIS:
		            	    case self::UTF16:
		            	    case self::UTF16LE:
		            	    case self::UTF32:
		            	    case self::UTF8:
		            	    case self::UTF8MB3:
		            	    case self::UTF8MB4:
		            	    case self::ARCHIVE:
		            	    case self::BLACKHOLE:
		            	    case self::CSV:
		            	    case self::FEDERATED:
		            	    case self::INNODB:
		            	    case self::MEMORY:
		            	    case self::MRG_MYISAM:
		            	    case self::MYISAM:
		            	    case self::NDB:
		            	    case self::NDBCLUSTER:
		            	    case self::PERFORMANCE_SCHEMA:
		            	    case self::TOKUDB:
		            	    case self::REPEATABLE:
		            	    case self::COMMITTED:
		            	    case self::UNCOMMITTED:
		            	    case self::SERIALIZABLE:
		            	    case self::GEOMETRYCOLLECTION:
		            	    case self::LINESTRING:
		            	    case self::MULTILINESTRING:
		            	    case self::MULTIPOINT:
		            	    case self::MULTIPOLYGON:
		            	    case self::POINT:
		            	    case self::POLYGON:
		            	    case self::ABS:
		            	    case self::ACOS:
		            	    case self::ADDDATE:
		            	    case self::ADDTIME:
		            	    case self::AES_DECRYPT:
		            	    case self::AES_ENCRYPT:
		            	    case self::AREA:
		            	    case self::ASBINARY:
		            	    case self::ASIN:
		            	    case self::ASTEXT:
		            	    case self::ASWKB:
		            	    case self::ASWKT:
		            	    case self::ASYMMETRIC_DECRYPT:
		            	    case self::ASYMMETRIC_DERIVE:
		            	    case self::ASYMMETRIC_ENCRYPT:
		            	    case self::ASYMMETRIC_SIGN:
		            	    case self::ASYMMETRIC_VERIFY:
		            	    case self::ATAN:
		            	    case self::ATAN2:
		            	    case self::BENCHMARK:
		            	    case self::BIN:
		            	    case self::BIT_COUNT:
		            	    case self::BIT_LENGTH:
		            	    case self::BUFFER:
		            	    case self::CATALOG_NAME:
		            	    case self::CEIL:
		            	    case self::CEILING:
		            	    case self::CENTROID:
		            	    case self::CHARACTER_LENGTH:
		            	    case self::CHARSET:
		            	    case self::CHAR_LENGTH:
		            	    case self::COERCIBILITY:
		            	    case self::COLLATION:
		            	    case self::COMPRESS:
		            	    case self::CONCAT:
		            	    case self::CONCAT_WS:
		            	    case self::CONNECTION_ID:
		            	    case self::CONV:
		            	    case self::CONVERT_TZ:
		            	    case self::COS:
		            	    case self::COT:
		            	    case self::CRC32:
		            	    case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            	    case self::CREATE_ASYMMETRIC_PUB_KEY:
		            	    case self::CREATE_DH_PARAMETERS:
		            	    case self::CREATE_DIGEST:
		            	    case self::CROSSES:
		            	    case self::DATEDIFF:
		            	    case self::DATE_FORMAT:
		            	    case self::DAYNAME:
		            	    case self::DAYOFMONTH:
		            	    case self::DAYOFWEEK:
		            	    case self::DAYOFYEAR:
		            	    case self::DECODE:
		            	    case self::DEGREES:
		            	    case self::DES_DECRYPT:
		            	    case self::DES_ENCRYPT:
		            	    case self::DIMENSION:
		            	    case self::DISJOINT:
		            	    case self::ELT:
		            	    case self::ENCODE:
		            	    case self::ENCRYPT:
		            	    case self::ENDPOINT:
		            	    case self::ENVELOPE:
		            	    case self::EQUALS:
		            	    case self::EXP:
		            	    case self::EXPORT_SET:
		            	    case self::EXTERIORRING:
		            	    case self::EXTRACTVALUE:
		            	    case self::FIELD:
		            	    case self::FIND_IN_SET:
		            	    case self::FLOOR:
		            	    case self::FORMAT:
		            	    case self::FOUND_ROWS:
		            	    case self::FROM_BASE64:
		            	    case self::FROM_DAYS:
		            	    case self::FROM_UNIXTIME:
		            	    case self::GEOMCOLLFROMTEXT:
		            	    case self::GEOMCOLLFROMWKB:
		            	    case self::GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::GEOMETRYFROMTEXT:
		            	    case self::GEOMETRYFROMWKB:
		            	    case self::GEOMETRYN:
		            	    case self::GEOMETRYTYPE:
		            	    case self::GEOMFROMTEXT:
		            	    case self::GEOMFROMWKB:
		            	    case self::GET_FORMAT:
		            	    case self::GET_LOCK:
		            	    case self::GLENGTH:
		            	    case self::GREATEST:
		            	    case self::GTID_SUBSET:
		            	    case self::GTID_SUBTRACT:
		            	    case self::HEX:
		            	    case self::IFNULL:
		            	    case self::INET6_ATON:
		            	    case self::INET6_NTOA:
		            	    case self::INET_ATON:
		            	    case self::INET_NTOA:
		            	    case self::INSTR:
		            	    case self::INTERIORRINGN:
		            	    case self::INTERSECTS:
		            	    case self::ISCLOSED:
		            	    case self::ISEMPTY:
		            	    case self::ISNULL:
		            	    case self::ISSIMPLE:
		            	    case self::IS_FREE_LOCK:
		            	    case self::IS_IPV4:
		            	    case self::IS_IPV4_COMPAT:
		            	    case self::IS_IPV4_MAPPED:
		            	    case self::IS_IPV6:
		            	    case self::IS_USED_LOCK:
		            	    case self::LAST_INSERT_ID:
		            	    case self::LCASE:
		            	    case self::LEAST:
		            	    case self::LENGTH:
		            	    case self::LINEFROMTEXT:
		            	    case self::LINEFROMWKB:
		            	    case self::LINESTRINGFROMTEXT:
		            	    case self::LINESTRINGFROMWKB:
		            	    case self::LN:
		            	    case self::LOAD_FILE:
		            	    case self::LOCATE:
		            	    case self::LOG:
		            	    case self::LOG10:
		            	    case self::LOG2:
		            	    case self::LOWER:
		            	    case self::LPAD:
		            	    case self::LTRIM:
		            	    case self::MAKEDATE:
		            	    case self::MAKETIME:
		            	    case self::MAKE_SET:
		            	    case self::MASTER_POS_WAIT:
		            	    case self::MBRCONTAINS:
		            	    case self::MBRDISJOINT:
		            	    case self::MBREQUAL:
		            	    case self::MBRINTERSECTS:
		            	    case self::MBROVERLAPS:
		            	    case self::MBRTOUCHES:
		            	    case self::MBRWITHIN:
		            	    case self::MD5:
		            	    case self::MLINEFROMTEXT:
		            	    case self::MLINEFROMWKB:
		            	    case self::MONTHNAME:
		            	    case self::MPOINTFROMTEXT:
		            	    case self::MPOINTFROMWKB:
		            	    case self::MPOLYFROMTEXT:
		            	    case self::MPOLYFROMWKB:
		            	    case self::MULTILINESTRINGFROMTEXT:
		            	    case self::MULTILINESTRINGFROMWKB:
		            	    case self::MULTIPOINTFROMTEXT:
		            	    case self::MULTIPOINTFROMWKB:
		            	    case self::MULTIPOLYGONFROMTEXT:
		            	    case self::MULTIPOLYGONFROMWKB:
		            	    case self::NAME_CONST:
		            	    case self::NULLIF:
		            	    case self::NUMGEOMETRIES:
		            	    case self::NUMINTERIORRINGS:
		            	    case self::NUMPOINTS:
		            	    case self::OCT:
		            	    case self::OCTET_LENGTH:
		            	    case self::ORD:
		            	    case self::OVERLAPS:
		            	    case self::PERIOD_ADD:
		            	    case self::PERIOD_DIFF:
		            	    case self::PI:
		            	    case self::POINTFROMTEXT:
		            	    case self::POINTFROMWKB:
		            	    case self::POINTN:
		            	    case self::POLYFROMTEXT:
		            	    case self::POLYFROMWKB:
		            	    case self::POLYGONFROMTEXT:
		            	    case self::POLYGONFROMWKB:
		            	    case self::POW:
		            	    case self::POWER:
		            	    case self::QUOTE:
		            	    case self::RADIANS:
		            	    case self::RAND:
		            	    case self::RANDOM_BYTES:
		            	    case self::RELEASE_LOCK:
		            	    case self::REVERSE:
		            	    case self::ROUND:
		            	    case self::ROW_COUNT:
		            	    case self::RPAD:
		            	    case self::RTRIM:
		            	    case self::SEC_TO_TIME:
		            	    case self::SESSION_USER:
		            	    case self::SHA:
		            	    case self::SHA1:
		            	    case self::SHA2:
		            	    case self::SCHEMA_NAME:
		            	    case self::SIGN:
		            	    case self::SIN:
		            	    case self::SLEEP:
		            	    case self::SOUNDEX:
		            	    case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            	    case self::SQRT:
		            	    case self::SRID:
		            	    case self::STARTPOINT:
		            	    case self::STRCMP:
		            	    case self::STR_TO_DATE:
		            	    case self::ST_AREA:
		            	    case self::ST_ASBINARY:
		            	    case self::ST_ASTEXT:
		            	    case self::ST_ASWKB:
		            	    case self::ST_ASWKT:
		            	    case self::ST_BUFFER:
		            	    case self::ST_CENTROID:
		            	    case self::ST_CONTAINS:
		            	    case self::ST_CROSSES:
		            	    case self::ST_DIFFERENCE:
		            	    case self::ST_DIMENSION:
		            	    case self::ST_DISJOINT:
		            	    case self::ST_DISTANCE:
		            	    case self::ST_ENDPOINT:
		            	    case self::ST_ENVELOPE:
		            	    case self::ST_EQUALS:
		            	    case self::ST_EXTERIORRING:
		            	    case self::ST_GEOMCOLLFROMTEXT:
		            	    case self::ST_GEOMCOLLFROMTXT:
		            	    case self::ST_GEOMCOLLFROMWKB:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            	    case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            	    case self::ST_GEOMETRYFROMTEXT:
		            	    case self::ST_GEOMETRYFROMWKB:
		            	    case self::ST_GEOMETRYN:
		            	    case self::ST_GEOMETRYTYPE:
		            	    case self::ST_GEOMFROMTEXT:
		            	    case self::ST_GEOMFROMWKB:
		            	    case self::ST_INTERIORRINGN:
		            	    case self::ST_INTERSECTION:
		            	    case self::ST_INTERSECTS:
		            	    case self::ST_ISCLOSED:
		            	    case self::ST_ISEMPTY:
		            	    case self::ST_ISSIMPLE:
		            	    case self::ST_LINEFROMTEXT:
		            	    case self::ST_LINEFROMWKB:
		            	    case self::ST_LINESTRINGFROMTEXT:
		            	    case self::ST_LINESTRINGFROMWKB:
		            	    case self::ST_NUMGEOMETRIES:
		            	    case self::ST_NUMINTERIORRING:
		            	    case self::ST_NUMINTERIORRINGS:
		            	    case self::ST_NUMPOINTS:
		            	    case self::ST_OVERLAPS:
		            	    case self::ST_POINTFROMTEXT:
		            	    case self::ST_POINTFROMWKB:
		            	    case self::ST_POINTN:
		            	    case self::ST_POLYFROMTEXT:
		            	    case self::ST_POLYFROMWKB:
		            	    case self::ST_POLYGONFROMTEXT:
		            	    case self::ST_POLYGONFROMWKB:
		            	    case self::ST_SRID:
		            	    case self::ST_STARTPOINT:
		            	    case self::ST_SYMDIFFERENCE:
		            	    case self::ST_TOUCHES:
		            	    case self::ST_UNION:
		            	    case self::ST_WITHIN:
		            	    case self::ST_X:
		            	    case self::ST_Y:
		            	    case self::SUBDATE:
		            	    case self::SUBSTRING_INDEX:
		            	    case self::SUBTIME:
		            	    case self::SYSTEM_USER:
		            	    case self::TAN:
		            	    case self::TIMEDIFF:
		            	    case self::TIMESTAMPADD:
		            	    case self::TIMESTAMPDIFF:
		            	    case self::TIME_FORMAT:
		            	    case self::TIME_TO_SEC:
		            	    case self::TOUCHES:
		            	    case self::TO_BASE64:
		            	    case self::TO_DAYS:
		            	    case self::TO_SECONDS:
		            	    case self::UCASE:
		            	    case self::UNCOMPRESS:
		            	    case self::UNCOMPRESSED_LENGTH:
		            	    case self::UNHEX:
		            	    case self::UNIX_TIMESTAMP:
		            	    case self::UPDATEXML:
		            	    case self::UPPER:
		            	    case self::UUID:
		            	    case self::UUID_SHORT:
		            	    case self::VALIDATE_PASSWORD_STRENGTH:
		            	    case self::VERSION:
		            	    case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            	    case self::WEEKDAY:
		            	    case self::WEEKOFYEAR:
		            	    case self::WEIGHT_STRING:
		            	    case self::WITHIN:
		            	    case self::YEARWEEK:
		            	    case self::Y_FUNCTION:
		            	    case self::X_FUNCTION:
		            	    case self::AT_SIGN:
		            	    case self::CHARSET_REVERSE_QOUTE_STRING:
		            	    case self::STRING_LITERAL:
		            	    case self::ID:
		            	    case self::REVERSE_QUOTE_ID:
		            	    case self::LOCAL_ID:
		            	    case self::GLOBAL_ID:
		            	    	$this->setState(5335);
		            	    	$this->variableClause();
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	$this->setState(5338);
		            	$this->variableClause();
		            	$this->setState(5339);
		            	$this->match(self::EQUAL_SYMBOL);
		            	$this->setState(5340);
		            	$this->diagnosticsConditionInformationName();
		            	$this->setState(5348);
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	while ($_la === self::COMMA) {
		            		$this->setState(5341);
		            		$this->match(self::COMMA);
		            		$this->setState(5342);
		            		$this->variableClause();
		            		$this->setState(5343);
		            		$this->match(self::EQUAL_SYMBOL);
		            		$this->setState(5344);
		            		$this->diagnosticsConditionInformationName();
		            		$this->setState(5350);
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function diagnosticsConditionInformationName() : Context\DiagnosticsConditionInformationNameContext
		{
		    $localContext = new Context\DiagnosticsConditionInformationNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 492, self::RULE_diagnosticsConditionInformationName);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5353);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 297)) & ~0x3f) === 0 && ((1 << ($_la - 297)) & ((1 << (self::CLASS_ORIGIN - 297)) | (1 << (self::COLUMN_NAME - 297)) | (1 << (self::CONSTRAINT_CATALOG - 297)) | (1 << (self::CONSTRAINT_SCHEMA - 297)) | (1 << (self::CONSTRAINT_NAME - 297)) | (1 << (self::CURSOR_NAME - 297)))) !== 0) || $_la === self::MESSAGE_TEXT || $_la === self::MYSQL_ERRNO || (((($_la - 507)) & ~0x3f) === 0 && ((1 << ($_la - 507)) & ((1 << (self::RETURNED_SQLSTATE - 507)) | (1 << (self::SUBCLASS_ORIGIN - 507)) | (1 << (self::TABLE_NAME - 507)))) !== 0) || $_la === self::CATALOG_NAME || $_la === self::SCHEMA_NAME)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function describeObjectClause() : Context\DescribeObjectClauseContext
		{
		    $localContext = new Context\DescribeObjectClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 494, self::RULE_describeObjectClause);

		    try {
		        $this->setState(5365);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::DELETE:
		            case self::INSERT:
		            case self::REPLACE:
		            case self::SELECT:
		            case self::UPDATE:
		            case self::LR_BRACKET:
		            	$localContext = new Context\DescribeStatementsContext($localContext);
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5360);
		            	$this->errorHandler->sync($this);

		            	switch ($this->input->LA(1)) {
		            	    case self::SELECT:
		            	    case self::LR_BRACKET:
		            	    	$this->setState(5355);
		            	    	$this->selectStatement();
		            	    	break;

		            	    case self::DELETE:
		            	    	$this->setState(5356);
		            	    	$this->deleteStatement();
		            	    	break;

		            	    case self::INSERT:
		            	    	$this->setState(5357);
		            	    	$this->insertStatement();
		            	    	break;

		            	    case self::REPLACE:
		            	    	$this->setState(5358);
		            	    	$this->replaceStatement();
		            	    	break;

		            	    case self::UPDATE:
		            	    	$this->setState(5359);
		            	    	$this->updateStatement();
		            	    	break;

		            	default:
		            		throw new NoViableAltException($this);
		            	}
		            	break;

		            case self::FOR:
		            	$localContext = new Context\DescribeConnectionContext($localContext);
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5362);
		            	$this->match(self::FOR);
		            	$this->setState(5363);
		            	$this->match(self::CONNECTION);
		            	$this->setState(5364);
		            	$this->uid();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function fullId() : Context\FullIdContext
		{
		    $localContext = new Context\FullIdContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 496, self::RULE_fullId);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5367);
		        $this->uid();
		        $this->setState(5371);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 777, $this->ctx)) {
		            case 1:
		        	    $this->setState(5368);
		        	    $this->match(self::DOT_ID);
		        	break;

		            case 2:
		        	    $this->setState(5369);
		        	    $this->match(self::DOT);
		        	    $this->setState(5370);
		        	    $this->uid();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tableName() : Context\TableNameContext
		{
		    $localContext = new Context\TableNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 498, self::RULE_tableName);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5373);
		        $this->fullId();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function fullColumnName() : Context\FullColumnNameContext
		{
		    $localContext = new Context\FullColumnNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 500, self::RULE_fullColumnName);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5375);
		        $this->uid();
		        $this->setState(5380);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 779, $this->ctx)) {
		            case 1:
		        	    $this->setState(5376);
		        	    $this->dottedId();
		        	    $this->setState(5378);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 778, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5377);
		        	    	    $this->dottedId();
		        	    	break;
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function indexColumnName() : Context\IndexColumnNameContext
		{
		    $localContext = new Context\IndexColumnNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 502, self::RULE_indexColumnName);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5384);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 780, $this->ctx)) {
		        	case 1:
		        	    $this->setState(5382);
		        	    $this->uid();
		        	break;

		        	case 2:
		        	    $this->setState(5383);
		        	    $this->match(self::STRING_LITERAL);
		        	break;
		        }
		        $this->setState(5390);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::LR_BRACKET) {
		        	$this->setState(5386);
		        	$this->match(self::LR_BRACKET);
		        	$this->setState(5387);
		        	$this->decimalLiteral();
		        	$this->setState(5388);
		        	$this->match(self::RR_BRACKET);
		        }
		        $this->setState(5393);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ASC || $_la === self::DESC) {
		        	$this->setState(5392);

		        	$localContext->sortType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::ASC || $_la === self::DESC)) {
		        		    $localContext->sortType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function userName() : Context\UserNameContext
		{
		    $localContext = new Context\UserNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 504, self::RULE_userName);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5395);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 1037)) & ~0x3f) === 0 && ((1 << ($_la - 1037)) & ((1 << (self::STRING_LITERAL - 1037)) | (1 << (self::ID - 1037)) | (1 << (self::STRING_USER_NAME - 1037)))) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function mysqlVariable() : Context\MysqlVariableContext
		{
		    $localContext = new Context\MysqlVariableContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 506, self::RULE_mysqlVariable);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5397);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::LOCAL_ID || $_la === self::GLOBAL_ID)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function charsetName() : Context\CharsetNameContext
		{
		    $localContext = new Context\CharsetNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 508, self::RULE_charsetName);

		    try {
		        $this->setState(5403);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::BINARY:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5399);
		            	$this->match(self::BINARY);
		            	break;

		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5400);
		            	$this->charsetNameBase();
		            	break;

		            case self::STRING_LITERAL:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5401);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(5402);
		            	$this->match(self::CHARSET_REVERSE_QOUTE_STRING);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function collationName() : Context\CollationNameContext
		{
		    $localContext = new Context\CollationNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 510, self::RULE_collationName);

		    try {
		        $this->setState(5407);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 784, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5405);
		        	    $this->uid();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5406);
		        	    $this->match(self::STRING_LITERAL);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function engineName() : Context\EngineNameContext
		{
		    $localContext = new Context\EngineNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 512, self::RULE_engineName);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5409);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 679)) & ~0x3f) === 0 && ((1 << ($_la - 679)) & ((1 << (self::ARCHIVE - 679)) | (1 << (self::BLACKHOLE - 679)) | (1 << (self::CSV - 679)) | (1 << (self::FEDERATED - 679)) | (1 << (self::INNODB - 679)) | (1 << (self::MEMORY - 679)) | (1 << (self::MRG_MYISAM - 679)) | (1 << (self::MYISAM - 679)) | (1 << (self::NDB - 679)) | (1 << (self::NDBCLUSTER - 679)) | (1 << (self::PERFORMANCE_SCHEMA - 679)) | (1 << (self::TOKUDB - 679)))) !== 0) || (((($_la - 1037)) & ~0x3f) === 0 && ((1 << ($_la - 1037)) & ((1 << (self::STRING_LITERAL - 1037)) | (1 << (self::ID - 1037)) | (1 << (self::REVERSE_QUOTE_ID - 1037)))) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function uuidSet() : Context\UuidSetContext
		{
		    $localContext = new Context\UuidSetContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 514, self::RULE_uuidSet);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5411);
		        $this->decimalLiteral();
		        $this->setState(5412);
		        $this->match(self::MINUS);
		        $this->setState(5413);
		        $this->decimalLiteral();
		        $this->setState(5414);
		        $this->match(self::MINUS);
		        $this->setState(5415);
		        $this->decimalLiteral();
		        $this->setState(5416);
		        $this->match(self::MINUS);
		        $this->setState(5417);
		        $this->decimalLiteral();
		        $this->setState(5418);
		        $this->match(self::MINUS);
		        $this->setState(5419);
		        $this->decimalLiteral();
		        $this->setState(5425); 
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        do {
		        	$this->setState(5420);
		        	$this->match(self::COLON_SYMB);
		        	$this->setState(5421);
		        	$this->decimalLiteral();
		        	$this->setState(5422);
		        	$this->match(self::MINUS);
		        	$this->setState(5423);
		        	$this->decimalLiteral();
		        	$this->setState(5427); 
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        } while ($_la === self::COLON_SYMB);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xid() : Context\XidContext
		{
		    $localContext = new Context\XidContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 516, self::RULE_xid);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5429);
		        $localContext->globalTableUid = $this->xuidStringId();
		        $this->setState(5436);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::COMMA) {
		        	$this->setState(5430);
		        	$this->match(self::COMMA);
		        	$this->setState(5431);
		        	$localContext->qualifier = $this->xuidStringId();
		        	$this->setState(5434);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);

		        	if ($_la === self::COMMA) {
		        		$this->setState(5432);
		        		$this->match(self::COMMA);
		        		$this->setState(5433);
		        		$localContext->idFormat = $this->decimalLiteral();
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function xuidStringId() : Context\XuidStringIdContext
		{
		    $localContext = new Context\XuidStringIdContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 518, self::RULE_xuidStringId);

		    try {
		        $this->setState(5445);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::STRING_LITERAL:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5438);
		            	$this->match(self::STRING_LITERAL);
		            	break;

		            case self::BIT_STRING:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5439);
		            	$this->match(self::BIT_STRING);
		            	break;

		            case self::HEXADECIMAL_LITERAL:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5441); 
		            	$this->errorHandler->sync($this);

		            	$_la = $this->input->LA(1);
		            	do {
		            		$this->setState(5440);
		            		$this->match(self::HEXADECIMAL_LITERAL);
		            		$this->setState(5443); 
		            		$this->errorHandler->sync($this);
		            		$_la = $this->input->LA(1);
		            	} while ($_la === self::HEXADECIMAL_LITERAL);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function authPlugin() : Context\AuthPluginContext
		{
		    $localContext = new Context\AuthPluginContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 520, self::RULE_authPlugin);

		    try {
		        $this->setState(5449);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 790, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5447);
		        	    $this->uid();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5448);
		        	    $this->match(self::STRING_LITERAL);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function uid() : Context\UidContext
		{
		    $localContext = new Context\UidContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 522, self::RULE_uid);

		    try {
		        $this->setState(5454);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 791, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5451);
		        	    $this->simpleId();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5452);
		        	    $this->match(self::REVERSE_QUOTE_ID);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5453);
		        	    $this->match(self::CHARSET_REVERSE_QOUTE_STRING);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function simpleId() : Context\SimpleIdContext
		{
		    $localContext = new Context\SimpleIdContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 524, self::RULE_simpleId);

		    try {
		        $this->setState(5465);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 792, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5456);
		        	    $this->match(self::ID);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5457);
		        	    $this->charsetNameBase();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5458);
		        	    $this->transactionLevelBase();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(5459);
		        	    $this->engineName();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(5460);
		        	    $this->privilegesBase();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(5461);
		        	    $this->intervalTypeBase();
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(5462);
		        	    $this->dataTypeBase();
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(5463);
		        	    $this->keywordsCanBeId();
		        	break;

		        	case 9:
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(5464);
		        	    $this->functionNameBase();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dottedId() : Context\DottedIdContext
		{
		    $localContext = new Context\DottedIdContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 526, self::RULE_dottedId);

		    try {
		        $this->setState(5470);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::DOT_ID:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5467);
		            	$this->match(self::DOT_ID);
		            	break;

		            case self::DOT:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5468);
		            	$this->match(self::DOT);
		            	$this->setState(5469);
		            	$this->uid();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function decimalLiteral() : Context\DecimalLiteralContext
		{
		    $localContext = new Context\DecimalLiteralContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 528, self::RULE_decimalLiteral);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5472);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 1027)) & ~0x3f) === 0 && ((1 << ($_la - 1027)) & ((1 << (self::ZERO_DECIMAL - 1027)) | (1 << (self::ONE_DECIMAL - 1027)) | (1 << (self::TWO_DECIMAL - 1027)) | (1 << (self::DECIMAL_LITERAL - 1027)))) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function fileSizeLiteral() : Context\FileSizeLiteralContext
		{
		    $localContext = new Context\FileSizeLiteralContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 530, self::RULE_fileSizeLiteral);

		    try {
		        $this->setState(5476);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::FILESIZE_LITERAL:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5474);
		            	$this->match(self::FILESIZE_LITERAL);
		            	break;

		            case self::ZERO_DECIMAL:
		            case self::ONE_DECIMAL:
		            case self::TWO_DECIMAL:
		            case self::DECIMAL_LITERAL:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5475);
		            	$this->decimalLiteral();
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function stringLiteral() : Context\StringLiteralContext
		{
		    $localContext = new Context\StringLiteralContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 532, self::RULE_stringLiteral);

		    try {
		        $this->setState(5501);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 801, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5483);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::STRING_LITERAL:
		        	        case self::STRING_CHARSET_NAME:
		        	        	$this->setState(5479);
		        	        	$this->errorHandler->sync($this);
		        	        	$_la = $this->input->LA(1);

		        	        	if ($_la === self::STRING_CHARSET_NAME) {
		        	        		$this->setState(5478);
		        	        		$this->match(self::STRING_CHARSET_NAME);
		        	        	}
		        	        	$this->setState(5481);
		        	        	$this->match(self::STRING_LITERAL);
		        	        	break;

		        	        case self::START_NATIONAL_STRING_LITERAL:
		        	        	$this->setState(5482);
		        	        	$this->match(self::START_NATIONAL_STRING_LITERAL);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	    $this->setState(5486); 
		        	    $this->errorHandler->sync($this);

		        	    $alt = 1;

		        	    do {
		        	    	switch ($alt) {
		        	    	case 1:
		        	    		$this->setState(5485);
		        	    		$this->match(self::STRING_LITERAL);
		        	    		break;
		        	    	default:
		        	    		throw new NoViableAltException($this);
		        	    	}

		        	    	$this->setState(5488); 
		        	    	$this->errorHandler->sync($this);

		        	    	$alt = $this->getInterpreter()->adaptivePredict($this->input, 797, $this->ctx);
		        	    } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5495);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::STRING_LITERAL:
		        	        case self::STRING_CHARSET_NAME:
		        	        	$this->setState(5491);
		        	        	$this->errorHandler->sync($this);
		        	        	$_la = $this->input->LA(1);

		        	        	if ($_la === self::STRING_CHARSET_NAME) {
		        	        		$this->setState(5490);
		        	        		$this->match(self::STRING_CHARSET_NAME);
		        	        	}
		        	        	$this->setState(5493);
		        	        	$this->match(self::STRING_LITERAL);
		        	        	break;

		        	        case self::START_NATIONAL_STRING_LITERAL:
		        	        	$this->setState(5494);
		        	        	$this->match(self::START_NATIONAL_STRING_LITERAL);
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	    $this->setState(5499);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 800, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5497);
		        	    	    $this->match(self::COLLATE);
		        	    	    $this->setState(5498);
		        	    	    $this->collationName();
		        	    	break;
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function booleanLiteral() : Context\BooleanLiteralContext
		{
		    $localContext = new Context\BooleanLiteralContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 534, self::RULE_booleanLiteral);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5503);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::FALSE || $_la === self::TRUE)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function hexadecimalLiteral() : Context\HexadecimalLiteralContext
		{
		    $localContext = new Context\HexadecimalLiteralContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 536, self::RULE_hexadecimalLiteral);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5506);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::STRING_CHARSET_NAME) {
		        	$this->setState(5505);
		        	$this->match(self::STRING_CHARSET_NAME);
		        }
		        $this->setState(5508);
		        $this->match(self::HEXADECIMAL_LITERAL);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function nullNotnull() : Context\NullNotnullContext
		{
		    $localContext = new Context\NullNotnullContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 538, self::RULE_nullNotnull);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5511);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::NOT) {
		        	$this->setState(5510);
		        	$this->match(self::NOT);
		        }
		        $this->setState(5513);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::NULL_LITERAL || $_la === self::NULL_SPEC_LITERAL)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function constant() : Context\ConstantContext
		{
		    $localContext = new Context\ConstantContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 540, self::RULE_constant);

		    try {
		        $this->setState(5527);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 805, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5515);
		        	    $this->stringLiteral();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5516);
		        	    $this->decimalLiteral();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5517);
		        	    $this->match(self::MINUS);
		        	    $this->setState(5518);
		        	    $this->decimalLiteral();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(5519);
		        	    $this->hexadecimalLiteral();
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(5520);
		        	    $this->booleanLiteral();
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(5521);
		        	    $this->match(self::REAL_LITERAL);
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(5522);
		        	    $this->match(self::BIT_STRING);
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(5524);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::NOT) {
		        	    	$this->setState(5523);
		        	    	$this->match(self::NOT);
		        	    }
		        	    $this->setState(5526);

		        	    $localContext->nullLiteral = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::NULL_LITERAL || $_la === self::NULL_SPEC_LITERAL)) {
		        	    	    $localContext->nullLiteral = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dataType() : Context\DataTypeContext
		{
		    $localContext = new Context\DataTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 542, self::RULE_dataType);

		    try {
		        $this->setState(5635);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 834, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\StringDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5529);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::CHARACTER || (((($_la - 204)) & ~0x3f) === 0 && ((1 << ($_la - 204)) & ((1 << (self::CHAR - 204)) | (1 << (self::VARCHAR - 204)) | (1 << (self::NVARCHAR - 204)) | (1 << (self::TINYTEXT - 204)) | (1 << (self::TEXT - 204)) | (1 << (self::MEDIUMTEXT - 204)) | (1 << (self::LONGTEXT - 204)))) !== 0) || $_la === self::NCHAR)) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5531);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 806, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5530);
		        	    	    $this->lengthOneDimension();
		        	    	break;
		        	    }
		        	    $this->setState(5534);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::BINARY) {
		        	    	$this->setState(5533);
		        	    	$this->match(self::BINARY);
		        	    }
		        	    $this->setState(5542);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 809, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5539);
		        	    	    $this->errorHandler->sync($this);

		        	    	    switch ($this->input->LA(1)) {
		        	    	        case self::CHARACTER:
		        	    	        	$this->setState(5536);
		        	    	        	$this->match(self::CHARACTER);
		        	    	        	$this->setState(5537);
		        	    	        	$this->match(self::SET);
		        	    	        	break;

		        	    	        case self::CHARSET:
		        	    	        	$this->setState(5538);
		        	    	        	$this->match(self::CHARSET);
		        	    	        	break;

		        	    	    default:
		        	    	    	throw new NoViableAltException($this);
		        	    	    }
		        	    	    $this->setState(5541);
		        	    	    $this->charsetName();
		        	    	break;
		        	    }
		        	    $this->setState(5546);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 810, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5544);
		        	    	    $this->match(self::COLLATE);
		        	    	    $this->setState(5545);
		        	    	    $this->collationName();
		        	    	break;
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\NationalStringDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5548);
		        	    $this->match(self::NATIONAL);
		        	    $this->setState(5549);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::CHARACTER || $_la === self::VARCHAR)) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5551);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 811, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5550);
		        	    	    $this->lengthOneDimension();
		        	    	break;
		        	    }
		        	    $this->setState(5554);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::BINARY) {
		        	    	$this->setState(5553);
		        	    	$this->match(self::BINARY);
		        	    }
		        	break;

		        	case 3:
		        	    $localContext = new Context\NationalStringDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5556);
		        	    $this->match(self::NCHAR);
		        	    $this->setState(5557);
		        	    $localContext->typeName = $this->match(self::VARCHAR);
		        	    $this->setState(5559);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 813, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5558);
		        	    	    $this->lengthOneDimension();
		        	    	break;
		        	    }
		        	    $this->setState(5562);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::BINARY) {
		        	    	$this->setState(5561);
		        	    	$this->match(self::BINARY);
		        	    }
		        	break;

		        	case 4:
		        	    $localContext = new Context\NationalVaryingStringDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(5564);
		        	    $this->match(self::NATIONAL);
		        	    $this->setState(5565);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::CHARACTER || $_la === self::CHAR)) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5566);
		        	    $this->match(self::VARYING);
		        	    $this->setState(5568);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 815, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5567);
		        	    	    $this->lengthOneDimension();
		        	    	break;
		        	    }
		        	    $this->setState(5571);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::BINARY) {
		        	    	$this->setState(5570);
		        	    	$this->match(self::BINARY);
		        	    }
		        	break;

		        	case 5:
		        	    $localContext = new Context\DimensionDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(5573);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!((((($_la - 178)) & ~0x3f) === 0 && ((1 << ($_la - 178)) & ((1 << (self::TINYINT - 178)) | (1 << (self::SMALLINT - 178)) | (1 << (self::MEDIUMINT - 178)) | (1 << (self::INT - 178)) | (1 << (self::INTEGER - 178)) | (1 << (self::BIGINT - 178)))) !== 0))) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5575);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 817, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5574);
		        	    	    $this->lengthOneDimension();
		        	    	break;
		        	    }
		        	    $this->setState(5578);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 818, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5577);

		        	    	    $_la = $this->input->LA(1);

		        	    	    if (!($_la === self::UNSIGNED || $_la === self::SIGNED)) {
		        	    	    $this->errorHandler->recoverInline($this);
		        	    	    } else {
		        	    	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    	    $this->matchedEOF = true;
		        	    	        }

		        	    	    	$this->errorHandler->reportMatch($this);
		        	    	    	$this->consume();
		        	    	    }
		        	    	break;
		        	    }
		        	    $this->setState(5581);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ZEROFILL) {
		        	    	$this->setState(5580);
		        	    	$this->match(self::ZEROFILL);
		        	    }
		        	break;

		        	case 6:
		        	    $localContext = new Context\DimensionDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(5583);
		        	    $localContext->typeName = $this->match(self::REAL);
		        	    $this->setState(5585);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 820, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5584);
		        	    	    $this->lengthTwoDimension();
		        	    	break;
		        	    }
		        	    $this->setState(5588);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 821, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5587);

		        	    	    $_la = $this->input->LA(1);

		        	    	    if (!($_la === self::UNSIGNED || $_la === self::SIGNED)) {
		        	    	    $this->errorHandler->recoverInline($this);
		        	    	    } else {
		        	    	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    	    $this->matchedEOF = true;
		        	    	        }

		        	    	    	$this->errorHandler->reportMatch($this);
		        	    	    	$this->consume();
		        	    	    }
		        	    	break;
		        	    }
		        	    $this->setState(5591);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ZEROFILL) {
		        	    	$this->setState(5590);
		        	    	$this->match(self::ZEROFILL);
		        	    }
		        	break;

		        	case 7:
		        	    $localContext = new Context\DimensionDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(5593);
		        	    $localContext->typeName = $this->match(self::DOUBLE);
		        	    $this->setState(5595);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::PRECISION) {
		        	    	$this->setState(5594);
		        	    	$this->match(self::PRECISION);
		        	    }
		        	    $this->setState(5598);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 824, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5597);
		        	    	    $this->lengthTwoDimension();
		        	    	break;
		        	    }
		        	    $this->setState(5601);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 825, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5600);

		        	    	    $_la = $this->input->LA(1);

		        	    	    if (!($_la === self::UNSIGNED || $_la === self::SIGNED)) {
		        	    	    $this->errorHandler->recoverInline($this);
		        	    	    } else {
		        	    	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    	    $this->matchedEOF = true;
		        	    	        }

		        	    	    	$this->errorHandler->reportMatch($this);
		        	    	    	$this->consume();
		        	    	    }
		        	    	break;
		        	    }
		        	    $this->setState(5604);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ZEROFILL) {
		        	    	$this->setState(5603);
		        	    	$this->match(self::ZEROFILL);
		        	    }
		        	break;

		        	case 8:
		        	    $localContext = new Context\DimensionDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(5606);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!((((($_la - 193)) & ~0x3f) === 0 && ((1 << ($_la - 193)) & ((1 << (self::FLOAT - 193)) | (1 << (self::DECIMAL - 193)) | (1 << (self::DEC - 193)) | (1 << (self::NUMERIC - 193)))) !== 0) || $_la === self::FIXED)) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5608);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 827, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5607);
		        	    	    $this->lengthTwoOptionalDimension();
		        	    	break;
		        	    }
		        	    $this->setState(5611);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 828, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5610);

		        	    	    $_la = $this->input->LA(1);

		        	    	    if (!($_la === self::UNSIGNED || $_la === self::SIGNED)) {
		        	    	    $this->errorHandler->recoverInline($this);
		        	    	    } else {
		        	    	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    	    $this->matchedEOF = true;
		        	    	        }

		        	    	    	$this->errorHandler->reportMatch($this);
		        	    	    	$this->consume();
		        	    	    }
		        	    	break;
		        	    }
		        	    $this->setState(5614);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ZEROFILL) {
		        	    	$this->setState(5613);
		        	    	$this->match(self::ZEROFILL);
		        	    }
		        	break;

		        	case 9:
		        	    $localContext = new Context\SimpleDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(5616);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!((((($_la - 199)) & ~0x3f) === 0 && ((1 << ($_la - 199)) & ((1 << (self::DATE - 199)) | (1 << (self::TINYBLOB - 199)) | (1 << (self::BLOB - 199)) | (1 << (self::MEDIUMBLOB - 199)) | (1 << (self::LONGBLOB - 199)) | (1 << (self::SERIAL - 199)))) !== 0) || $_la === self::BOOL || $_la === self::BOOLEAN)) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 10:
		        	    $localContext = new Context\DimensionDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(5617);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!((((($_la - 200)) & ~0x3f) === 0 && ((1 << ($_la - 200)) & ((1 << (self::TIME - 200)) | (1 << (self::TIMESTAMP - 200)) | (1 << (self::DATETIME - 200)) | (1 << (self::YEAR - 200)) | (1 << (self::BINARY - 200)) | (1 << (self::VARBINARY - 200)))) !== 0) || $_la === self::BIT)) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5619);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 830, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5618);
		        	    	    $this->lengthOneDimension();
		        	    	break;
		        	    }
		        	break;

		        	case 11:
		        	    $localContext = new Context\CollectionDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(5621);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::SET || $_la === self::ENUM)) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5622);
		        	    $this->collectionOptions();
		        	    $this->setState(5624);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::BINARY) {
		        	    	$this->setState(5623);
		        	    	$this->match(self::BINARY);
		        	    }
		        	    $this->setState(5632);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 833, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5629);
		        	    	    $this->errorHandler->sync($this);

		        	    	    switch ($this->input->LA(1)) {
		        	    	        case self::CHARACTER:
		        	    	        	$this->setState(5626);
		        	    	        	$this->match(self::CHARACTER);
		        	    	        	$this->setState(5627);
		        	    	        	$this->match(self::SET);
		        	    	        	break;

		        	    	        case self::CHARSET:
		        	    	        	$this->setState(5628);
		        	    	        	$this->match(self::CHARSET);
		        	    	        	break;

		        	    	    default:
		        	    	    	throw new NoViableAltException($this);
		        	    	    }
		        	    	    $this->setState(5631);
		        	    	    $this->charsetName();
		        	    	break;
		        	    }
		        	break;

		        	case 12:
		        	    $localContext = new Context\SpatialDataTypeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(5634);

		        	    $localContext->typeName = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::JSON || (((($_la - 695)) & ~0x3f) === 0 && ((1 << ($_la - 695)) & ((1 << (self::GEOMETRYCOLLECTION - 695)) | (1 << (self::GEOMCOLLECTION - 695)) | (1 << (self::GEOMETRY - 695)) | (1 << (self::LINESTRING - 695)) | (1 << (self::MULTILINESTRING - 695)) | (1 << (self::MULTIPOINT - 695)) | (1 << (self::MULTIPOLYGON - 695)) | (1 << (self::POINT - 695)) | (1 << (self::POLYGON - 695)))) !== 0))) {
		        	    	    $localContext->typeName = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function collectionOptions() : Context\CollectionOptionsContext
		{
		    $localContext = new Context\CollectionOptionsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 544, self::RULE_collectionOptions);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5637);
		        $this->match(self::LR_BRACKET);
		        $this->setState(5638);
		        $this->match(self::STRING_LITERAL);
		        $this->setState(5643);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5639);
		        	$this->match(self::COMMA);
		        	$this->setState(5640);
		        	$this->match(self::STRING_LITERAL);
		        	$this->setState(5645);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(5646);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function convertedDataType() : Context\ConvertedDataTypeContext
		{
		    $localContext = new Context\ConvertedDataTypeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 546, self::RULE_convertedDataType);

		    try {
		        $this->setState(5673);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::BINARY:
		            case self::NCHAR:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5648);

		            	$localContext->typeName = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::BINARY || $_la === self::NCHAR)) {
		            		    $localContext->typeName = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(5650);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::LR_BRACKET) {
		            		$this->setState(5649);
		            		$this->lengthOneDimension();
		            	}
		            	break;

		            case self::CHAR:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5652);
		            	$localContext->typeName = $this->match(self::CHAR);
		            	$this->setState(5654);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::LR_BRACKET) {
		            		$this->setState(5653);
		            		$this->lengthOneDimension();
		            	}
		            	$this->setState(5662);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::CHARACTER || $_la === self::CHARSET) {
		            		$this->setState(5659);
		            		$this->errorHandler->sync($this);

		            		switch ($this->input->LA(1)) {
		            		    case self::CHARACTER:
		            		    	$this->setState(5656);
		            		    	$this->match(self::CHARACTER);
		            		    	$this->setState(5657);
		            		    	$this->match(self::SET);
		            		    	break;

		            		    case self::CHARSET:
		            		    	$this->setState(5658);
		            		    	$this->match(self::CHARSET);
		            		    	break;

		            		default:
		            			throw new NoViableAltException($this);
		            		}
		            		$this->setState(5661);
		            		$this->charsetName();
		            	}
		            	break;

		            case self::DATE:
		            case self::TIME:
		            case self::DATETIME:
		            case self::JSON:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(5664);

		            	$localContext->typeName = $this->input->LT(1);
		            	$_la = $this->input->LA(1);

		            	if (!((((($_la - 199)) & ~0x3f) === 0 && ((1 << ($_la - 199)) & ((1 << (self::DATE - 199)) | (1 << (self::TIME - 199)) | (1 << (self::DATETIME - 199)))) !== 0) || $_la === self::JSON)) {
		            		    $localContext->typeName = $this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	break;

		            case self::DECIMAL:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(5665);
		            	$localContext->typeName = $this->match(self::DECIMAL);
		            	$this->setState(5667);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::LR_BRACKET) {
		            		$this->setState(5666);
		            		$this->lengthTwoDimension();
		            	}
		            	break;

		            case self::UNSIGNED:
		            case self::SIGNED:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(5669);

		            	$_la = $this->input->LA(1);

		            	if (!($_la === self::UNSIGNED || $_la === self::SIGNED)) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(5671);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ($_la === self::INTEGER) {
		            		$this->setState(5670);
		            		$this->match(self::INTEGER);
		            	}
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function lengthOneDimension() : Context\LengthOneDimensionContext
		{
		    $localContext = new Context\LengthOneDimensionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 548, self::RULE_lengthOneDimension);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5675);
		        $this->match(self::LR_BRACKET);
		        $this->setState(5676);
		        $this->decimalLiteral();
		        $this->setState(5677);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function lengthTwoDimension() : Context\LengthTwoDimensionContext
		{
		    $localContext = new Context\LengthTwoDimensionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 550, self::RULE_lengthTwoDimension);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5679);
		        $this->match(self::LR_BRACKET);
		        $this->setState(5680);
		        $this->decimalLiteral();
		        $this->setState(5681);
		        $this->match(self::COMMA);
		        $this->setState(5682);
		        $this->decimalLiteral();
		        $this->setState(5683);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function lengthTwoOptionalDimension() : Context\LengthTwoOptionalDimensionContext
		{
		    $localContext = new Context\LengthTwoOptionalDimensionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 552, self::RULE_lengthTwoOptionalDimension);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5685);
		        $this->match(self::LR_BRACKET);
		        $this->setState(5686);
		        $this->decimalLiteral();
		        $this->setState(5689);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::COMMA) {
		        	$this->setState(5687);
		        	$this->match(self::COMMA);
		        	$this->setState(5688);
		        	$this->decimalLiteral();
		        }
		        $this->setState(5691);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function uidList() : Context\UidListContext
		{
		    $localContext = new Context\UidListContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 554, self::RULE_uidList);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5693);
		        $this->uid();
		        $this->setState(5698);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 844, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(5694);
		        		$this->match(self::COMMA);
		        		$this->setState(5695);
		        		$this->uid(); 
		        	}

		        	$this->setState(5700);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 844, $this->ctx);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function tables() : Context\TablesContext
		{
		    $localContext = new Context\TablesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 556, self::RULE_tables);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5701);
		        $this->tableName();
		        $this->setState(5706);
		        $this->errorHandler->sync($this);

		        $alt = $this->getInterpreter()->adaptivePredict($this->input, 845, $this->ctx);

		        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
		        	if ($alt === 1) {
		        		$this->setState(5702);
		        		$this->match(self::COMMA);
		        		$this->setState(5703);
		        		$this->tableName(); 
		        	}

		        	$this->setState(5708);
		        	$this->errorHandler->sync($this);

		        	$alt = $this->getInterpreter()->adaptivePredict($this->input, 845, $this->ctx);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function indexColumnNames() : Context\IndexColumnNamesContext
		{
		    $localContext = new Context\IndexColumnNamesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 558, self::RULE_indexColumnNames);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5709);
		        $this->match(self::LR_BRACKET);
		        $this->setState(5710);
		        $this->indexColumnName();
		        $this->setState(5715);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5711);
		        	$this->match(self::COMMA);
		        	$this->setState(5712);
		        	$this->indexColumnName();
		        	$this->setState(5717);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		        $this->setState(5718);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function expressions() : Context\ExpressionsContext
		{
		    $localContext = new Context\ExpressionsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 560, self::RULE_expressions);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5720);
		        $this->recursiveExpression(0);
		        $this->setState(5725);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5721);
		        	$this->match(self::COMMA);
		        	$this->setState(5722);
		        	$this->recursiveExpression(0);
		        	$this->setState(5727);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function expressionsForUpdate() : Context\ExpressionsForUpdateContext
		{
		    $localContext = new Context\ExpressionsForUpdateContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 562, self::RULE_expressionsForUpdate);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5728);
		        $this->recursiveExpressionForUpdate(0);
		        $this->setState(5733);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5729);
		        	$this->match(self::COMMA);
		        	$this->setState(5730);
		        	$this->recursiveExpressionForUpdate(0);
		        	$this->setState(5735);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function expressionsWithDefaults() : Context\ExpressionsWithDefaultsContext
		{
		    $localContext = new Context\ExpressionsWithDefaultsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 564, self::RULE_expressionsWithDefaults);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5736);
		        $this->expressionOrDefault();
		        $this->setState(5741);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5737);
		        	$this->match(self::COMMA);
		        	$this->setState(5738);
		        	$this->expressionOrDefault();
		        	$this->setState(5743);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function constants() : Context\ConstantsContext
		{
		    $localContext = new Context\ConstantsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 566, self::RULE_constants);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5744);
		        $this->constant();
		        $this->setState(5749);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5745);
		        	$this->match(self::COMMA);
		        	$this->setState(5746);
		        	$this->constant();
		        	$this->setState(5751);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function simpleStrings() : Context\SimpleStringsContext
		{
		    $localContext = new Context\SimpleStringsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 568, self::RULE_simpleStrings);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5752);
		        $this->match(self::STRING_LITERAL);
		        $this->setState(5757);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5753);
		        	$this->match(self::COMMA);
		        	$this->setState(5754);
		        	$this->match(self::STRING_LITERAL);
		        	$this->setState(5759);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function userVariables() : Context\UserVariablesContext
		{
		    $localContext = new Context\UserVariablesContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 570, self::RULE_userVariables);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5760);
		        $this->match(self::LOCAL_ID);
		        $this->setState(5765);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(5761);
		        	$this->match(self::COMMA);
		        	$this->setState(5762);
		        	$this->match(self::LOCAL_ID);
		        	$this->setState(5767);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function defaultValue() : Context\DefaultValueContext
		{
		    $localContext = new Context\DefaultValueContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 572, self::RULE_defaultValue);

		    try {
		        $this->setState(5779);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 855, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5768);
		        	    $this->match(self::NULL_LITERAL);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5770);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 853, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5769);
		        	    	    $this->unaryOperator();
		        	    	break;
		        	    }
		        	    $this->setState(5772);
		        	    $this->constant();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5773);
		        	    $this->currentTimestamp();
		        	    $this->setState(5777);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 854, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5774);
		        	    	    $this->match(self::ON);
		        	    	    $this->setState(5775);
		        	    	    $this->match(self::UPDATE);
		        	    	    $this->setState(5776);
		        	    	    $this->currentTimestamp();
		        	    	break;
		        	    }
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function currentTimestamp() : Context\CurrentTimestampContext
		{
		    $localContext = new Context\CurrentTimestampContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 574, self::RULE_currentTimestamp);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5795);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CURRENT_TIMESTAMP:
		            case self::LOCALTIME:
		            case self::LOCALTIMESTAMP:
		            	$this->setState(5781);

		            	$_la = $this->input->LA(1);

		            	if (!((((($_la - 253)) & ~0x3f) === 0 && ((1 << ($_la - 253)) & ((1 << (self::CURRENT_TIMESTAMP - 253)) | (1 << (self::LOCALTIME - 253)) | (1 << (self::LOCALTIMESTAMP - 253)))) !== 0))) {
		            	$this->errorHandler->recoverInline($this);
		            	} else {
		            		if ($this->input->LA(1) === Token::EOF) {
		            		    $this->matchedEOF = true;
		            	    }

		            		$this->errorHandler->reportMatch($this);
		            		$this->consume();
		            	}
		            	$this->setState(5787);
		            	$this->errorHandler->sync($this);

		            	switch ($this->getInterpreter()->adaptivePredict($this->input, 857, $this->ctx)) {
		            	    case 1:
		            		    $this->setState(5782);
		            		    $this->match(self::LR_BRACKET);
		            		    $this->setState(5784);
		            		    $this->errorHandler->sync($this);
		            		    $_la = $this->input->LA(1);

		            		    if ((((($_la - 1027)) & ~0x3f) === 0 && ((1 << ($_la - 1027)) & ((1 << (self::ZERO_DECIMAL - 1027)) | (1 << (self::ONE_DECIMAL - 1027)) | (1 << (self::TWO_DECIMAL - 1027)) | (1 << (self::DECIMAL_LITERAL - 1027)))) !== 0)) {
		            		    	$this->setState(5783);
		            		    	$this->decimalLiteral();
		            		    }
		            		    $this->setState(5786);
		            		    $this->match(self::RR_BRACKET);
		            		break;
		            	}
		            	break;

		            case self::NOW:
		            	$this->setState(5789);
		            	$this->match(self::NOW);
		            	$this->setState(5790);
		            	$this->match(self::LR_BRACKET);
		            	$this->setState(5792);
		            	$this->errorHandler->sync($this);
		            	$_la = $this->input->LA(1);

		            	if ((((($_la - 1027)) & ~0x3f) === 0 && ((1 << ($_la - 1027)) & ((1 << (self::ZERO_DECIMAL - 1027)) | (1 << (self::ONE_DECIMAL - 1027)) | (1 << (self::TWO_DECIMAL - 1027)) | (1 << (self::DECIMAL_LITERAL - 1027)))) !== 0)) {
		            		$this->setState(5791);
		            		$this->decimalLiteral();
		            	}
		            	$this->setState(5794);
		            	$this->match(self::RR_BRACKET);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function expressionOrDefault() : Context\ExpressionOrDefaultContext
		{
		    $localContext = new Context\ExpressionOrDefaultContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 576, self::RULE_expressionOrDefault);

		    try {
		        $this->setState(5799);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::CASE:
		            case self::CAST:
		            case self::CONVERT:
		            case self::CURRENT:
		            case self::CURRENT_USER:
		            case self::DATABASE:
		            case self::DIAGNOSTICS:
		            case self::EXISTS:
		            case self::FALSE:
		            case self::IF:
		            case self::INSERT:
		            case self::INTERVAL:
		            case self::LEFT:
		            case self::NOT:
		            case self::NULL_LITERAL:
		            case self::NUMBER:
		            case self::REPLACE:
		            case self::RIGHT:
		            case self::STACKED:
		            case self::TRUE:
		            case self::VALUES:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::DATETIME:
		            case self::YEAR:
		            case self::CHAR:
		            case self::BINARY:
		            case self::TEXT:
		            case self::ENUM:
		            case self::SERIAL:
		            case self::AVG:
		            case self::BIT_AND:
		            case self::BIT_OR:
		            case self::BIT_XOR:
		            case self::COUNT:
		            case self::GROUP_CONCAT:
		            case self::MAX:
		            case self::MIN:
		            case self::STD:
		            case self::STDDEV:
		            case self::STDDEV_POP:
		            case self::STDDEV_SAMP:
		            case self::SUM:
		            case self::VAR_POP:
		            case self::VAR_SAMP:
		            case self::VARIANCE:
		            case self::CURRENT_DATE:
		            case self::CURRENT_TIME:
		            case self::CURRENT_TIMESTAMP:
		            case self::LOCALTIME:
		            case self::CURDATE:
		            case self::CURTIME:
		            case self::DATE_ADD:
		            case self::DATE_SUB:
		            case self::EXTRACT:
		            case self::LOCALTIMESTAMP:
		            case self::NOW:
		            case self::POSITION:
		            case self::SUBSTR:
		            case self::SUBSTRING:
		            case self::SYSDATE:
		            case self::TRIM:
		            case self::UTC_DATE:
		            case self::UTC_TIME:
		            case self::UTC_TIMESTAMP:
		            case self::ACCOUNT:
		            case self::ACTION:
		            case self::AFTER:
		            case self::AGGREGATE:
		            case self::ALGORITHM:
		            case self::ANY:
		            case self::AT:
		            case self::AUTHORS:
		            case self::AUTOCOMMIT:
		            case self::AUTOEXTEND_SIZE:
		            case self::AUTO_INCREMENT:
		            case self::AVG_ROW_LENGTH:
		            case self::BEGIN:
		            case self::BINLOG:
		            case self::BIT:
		            case self::BLOCK:
		            case self::BOOL:
		            case self::BOOLEAN:
		            case self::BTREE:
		            case self::CACHE:
		            case self::CASCADED:
		            case self::CHAIN:
		            case self::CHANGED:
		            case self::CHANNEL:
		            case self::CHECKSUM:
		            case self::PAGE_CHECKSUM:
		            case self::CIPHER:
		            case self::CLASS_ORIGIN:
		            case self::CLIENT:
		            case self::CLOSE:
		            case self::COALESCE:
		            case self::CODE:
		            case self::COLUMNS:
		            case self::COLUMN_FORMAT:
		            case self::COLUMN_NAME:
		            case self::COMMENT:
		            case self::COMMIT:
		            case self::COMPACT:
		            case self::COMPLETION:
		            case self::COMPRESSED:
		            case self::COMPRESSION:
		            case self::CONCURRENT:
		            case self::CONNECTION:
		            case self::CONSISTENT:
		            case self::CONSTRAINT_CATALOG:
		            case self::CONSTRAINT_SCHEMA:
		            case self::CONSTRAINT_NAME:
		            case self::CONTAINS:
		            case self::CONTEXT:
		            case self::CONTRIBUTORS:
		            case self::COPY:
		            case self::CPU:
		            case self::CURSOR_NAME:
		            case self::DATA:
		            case self::DATAFILE:
		            case self::DEALLOCATE:
		            case self::DEFAULT_AUTH:
		            case self::DEFINER:
		            case self::DELAY_KEY_WRITE:
		            case self::DES_KEY_FILE:
		            case self::DIRECTORY:
		            case self::DISABLE:
		            case self::DISCARD:
		            case self::DISK:
		            case self::DO:
		            case self::DUMPFILE:
		            case self::DUPLICATE:
		            case self::DYNAMIC:
		            case self::ENABLE:
		            case self::ENCRYPTION:
		            case self::END:
		            case self::ENDS:
		            case self::ENGINE:
		            case self::ENGINES:
		            case self::ERROR:
		            case self::ERRORS:
		            case self::ESCAPE:
		            case self::EVEN:
		            case self::EVENT:
		            case self::EVENTS:
		            case self::EVERY:
		            case self::EXCHANGE:
		            case self::EXCLUSIVE:
		            case self::EXPIRE:
		            case self::EXPORT:
		            case self::EXTENDED:
		            case self::EXTENT_SIZE:
		            case self::FAST:
		            case self::FAULTS:
		            case self::FIELDS:
		            case self::FILE_BLOCK_SIZE:
		            case self::FILTER:
		            case self::FIRST:
		            case self::FIXED:
		            case self::FLUSH:
		            case self::FOLLOWS:
		            case self::FOUND:
		            case self::FULL:
		            case self::FUNCTION:
		            case self::GENERAL:
		            case self::GLOBAL:
		            case self::GRANTS:
		            case self::GROUP_REPLICATION:
		            case self::HANDLER:
		            case self::HASH:
		            case self::HELP:
		            case self::HOST:
		            case self::HOSTS:
		            case self::IDENTIFIED:
		            case self::IGNORE_SERVER_IDS:
		            case self::IMPORT:
		            case self::INDEXES:
		            case self::INITIAL_SIZE:
		            case self::INPLACE:
		            case self::INSERT_METHOD:
		            case self::INSTALL:
		            case self::INSTANCE:
		            case self::INVISIBLE:
		            case self::INVOKER:
		            case self::IO:
		            case self::IO_THREAD:
		            case self::IPC:
		            case self::ISOLATION:
		            case self::ISSUER:
		            case self::JSON:
		            case self::KEY_BLOCK_SIZE:
		            case self::LANGUAGE:
		            case self::LAST:
		            case self::LEAVES:
		            case self::LESS:
		            case self::LEVEL:
		            case self::LIST:
		            case self::LOCAL:
		            case self::LOGFILE:
		            case self::LOGS:
		            case self::MASTER:
		            case self::MASTER_AUTO_POSITION:
		            case self::MASTER_CONNECT_RETRY:
		            case self::MASTER_DELAY:
		            case self::MASTER_HEARTBEAT_PERIOD:
		            case self::MASTER_HOST:
		            case self::MASTER_LOG_FILE:
		            case self::MASTER_LOG_POS:
		            case self::MASTER_PASSWORD:
		            case self::MASTER_PORT:
		            case self::MASTER_RETRY_COUNT:
		            case self::MASTER_SSL:
		            case self::MASTER_SSL_CA:
		            case self::MASTER_SSL_CAPATH:
		            case self::MASTER_SSL_CERT:
		            case self::MASTER_SSL_CIPHER:
		            case self::MASTER_SSL_CRL:
		            case self::MASTER_SSL_CRLPATH:
		            case self::MASTER_SSL_KEY:
		            case self::MASTER_TLS_VERSION:
		            case self::MASTER_USER:
		            case self::MAX_CONNECTIONS_PER_HOUR:
		            case self::MAX_QUERIES_PER_HOUR:
		            case self::MAX_ROWS:
		            case self::MAX_SIZE:
		            case self::MAX_UPDATES_PER_HOUR:
		            case self::MAX_USER_CONNECTIONS:
		            case self::MEDIUM:
		            case self::MERGE:
		            case self::MESSAGE_TEXT:
		            case self::MID:
		            case self::MIGRATE:
		            case self::MIN_ROWS:
		            case self::MODE:
		            case self::MODIFY:
		            case self::MUTEX:
		            case self::MYSQL:
		            case self::MYSQL_ERRNO:
		            case self::NAME:
		            case self::NAMES:
		            case self::NCHAR:
		            case self::NEVER:
		            case self::NEXT:
		            case self::NO:
		            case self::NODEGROUP:
		            case self::NONE:
		            case self::OFFLINE:
		            case self::OFFSET:
		            case self::OJ:
		            case self::OLD_PASSWORD:
		            case self::ONE:
		            case self::ONLINE:
		            case self::ONLY:
		            case self::OPEN:
		            case self::OPTIMIZER_COSTS:
		            case self::OPTIONS:
		            case self::OWNER:
		            case self::PACK_KEYS:
		            case self::PAGE:
		            case self::PARSER:
		            case self::PARTIAL:
		            case self::PARTITIONING:
		            case self::PARTITIONS:
		            case self::PASSWORD:
		            case self::PHASE:
		            case self::PLUGIN:
		            case self::PLUGIN_DIR:
		            case self::PLUGINS:
		            case self::PORT:
		            case self::PRECEDES:
		            case self::PREPARE:
		            case self::PRESERVE:
		            case self::PREV:
		            case self::PROCESSLIST:
		            case self::PROFILE:
		            case self::PROFILES:
		            case self::PROXY:
		            case self::QUERY:
		            case self::QUICK:
		            case self::REBUILD:
		            case self::RECOVER:
		            case self::REDO_BUFFER_SIZE:
		            case self::REDUNDANT:
		            case self::RELAY:
		            case self::RELAY_LOG_FILE:
		            case self::RELAY_LOG_POS:
		            case self::RELAYLOG:
		            case self::REMOVE:
		            case self::REORGANIZE:
		            case self::REPAIR:
		            case self::REPLICATE_DO_DB:
		            case self::REPLICATE_DO_TABLE:
		            case self::REPLICATE_IGNORE_DB:
		            case self::REPLICATE_IGNORE_TABLE:
		            case self::REPLICATE_REWRITE_DB:
		            case self::REPLICATE_WILD_DO_TABLE:
		            case self::REPLICATE_WILD_IGNORE_TABLE:
		            case self::REPLICATION:
		            case self::RESET:
		            case self::RESUME:
		            case self::RETURNED_SQLSTATE:
		            case self::RETURNS:
		            case self::ROLLBACK:
		            case self::ROLLUP:
		            case self::ROTATE:
		            case self::ROW:
		            case self::ROWS:
		            case self::ROW_FORMAT:
		            case self::SAVEPOINT:
		            case self::SCHEDULE:
		            case self::SECURITY:
		            case self::SERVER:
		            case self::SESSION:
		            case self::SHARE:
		            case self::SHARED:
		            case self::SIGNED:
		            case self::SIMPLE:
		            case self::SLAVE:
		            case self::SLOW:
		            case self::SNAPSHOT:
		            case self::SOCKET:
		            case self::SOME:
		            case self::SONAME:
		            case self::SOUNDS:
		            case self::SOURCE:
		            case self::SQL_AFTER_GTIDS:
		            case self::SQL_AFTER_MTS_GAPS:
		            case self::SQL_BEFORE_GTIDS:
		            case self::SQL_BUFFER_RESULT:
		            case self::SQL_CACHE:
		            case self::SQL_NO_CACHE:
		            case self::SQL_THREAD:
		            case self::START:
		            case self::STARTS:
		            case self::STATS_AUTO_RECALC:
		            case self::STATS_PERSISTENT:
		            case self::STATS_SAMPLE_PAGES:
		            case self::STATUS:
		            case self::STOP:
		            case self::STORAGE:
		            case self::STRING:
		            case self::SUBCLASS_ORIGIN:
		            case self::SUBJECT:
		            case self::SUBPARTITION:
		            case self::SUBPARTITIONS:
		            case self::SUSPEND:
		            case self::SWAPS:
		            case self::SWITCHES:
		            case self::TABLE_NAME:
		            case self::TABLESPACE:
		            case self::TEMPORARY:
		            case self::TEMPTABLE:
		            case self::THAN:
		            case self::TRADITIONAL:
		            case self::TRANSACTION:
		            case self::TRIGGERS:
		            case self::TRUNCATE:
		            case self::UNDEFINED:
		            case self::UNDOFILE:
		            case self::UNDO_BUFFER_SIZE:
		            case self::UNINSTALL:
		            case self::UNKNOWN:
		            case self::UNTIL:
		            case self::UPGRADE:
		            case self::USER:
		            case self::USE_FRM:
		            case self::USER_RESOURCES:
		            case self::VALIDATION:
		            case self::VALUE:
		            case self::VARIABLES:
		            case self::VIEW:
		            case self::VISIBLE:
		            case self::WAIT:
		            case self::WARNINGS:
		            case self::WITHOUT:
		            case self::WORK:
		            case self::WRAPPER:
		            case self::X509:
		            case self::XA:
		            case self::XML:
		            case self::INTERNAL:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::TABLES:
		            case self::ROUTINE:
		            case self::EXECUTE:
		            case self::FILE:
		            case self::PROCESS:
		            case self::RELOAD:
		            case self::SHUTDOWN:
		            case self::SUPER:
		            case self::PRIVILEGES:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::ARMSCII8:
		            case self::ASCII:
		            case self::BIG5:
		            case self::CP1250:
		            case self::CP1251:
		            case self::CP1256:
		            case self::CP1257:
		            case self::CP850:
		            case self::CP852:
		            case self::CP866:
		            case self::CP932:
		            case self::DEC8:
		            case self::EUCJPMS:
		            case self::EUCKR:
		            case self::GB2312:
		            case self::GBK:
		            case self::GEOSTD8:
		            case self::GREEK:
		            case self::HEBREW:
		            case self::HP8:
		            case self::KEYBCS2:
		            case self::KOI8R:
		            case self::KOI8U:
		            case self::LATIN1:
		            case self::LATIN2:
		            case self::LATIN5:
		            case self::LATIN7:
		            case self::MACCE:
		            case self::MACROMAN:
		            case self::SJIS:
		            case self::SWE7:
		            case self::TIS620:
		            case self::UCS2:
		            case self::UJIS:
		            case self::UTF16:
		            case self::UTF16LE:
		            case self::UTF32:
		            case self::UTF8:
		            case self::UTF8MB3:
		            case self::UTF8MB4:
		            case self::ARCHIVE:
		            case self::BLACKHOLE:
		            case self::CSV:
		            case self::FEDERATED:
		            case self::INNODB:
		            case self::MEMORY:
		            case self::MRG_MYISAM:
		            case self::MYISAM:
		            case self::NDB:
		            case self::NDBCLUSTER:
		            case self::PERFORMANCE_SCHEMA:
		            case self::TOKUDB:
		            case self::REPEATABLE:
		            case self::COMMITTED:
		            case self::UNCOMMITTED:
		            case self::SERIALIZABLE:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CATALOG_NAME:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SCHEMA_NAME:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            case self::PLUS:
		            case self::MINUS:
		            case self::EXCLAMATION_SYMBOL:
		            case self::BIT_NOT_OP:
		            case self::LR_BRACKET:
		            case self::ZERO_DECIMAL:
		            case self::ONE_DECIMAL:
		            case self::TWO_DECIMAL:
		            case self::CHARSET_REVERSE_QOUTE_STRING:
		            case self::START_NATIONAL_STRING_LITERAL:
		            case self::STRING_LITERAL:
		            case self::DECIMAL_LITERAL:
		            case self::HEXADECIMAL_LITERAL:
		            case self::REAL_LITERAL:
		            case self::NULL_SPEC_LITERAL:
		            case self::BIT_STRING:
		            case self::STRING_CHARSET_NAME:
		            case self::ID:
		            case self::REVERSE_QUOTE_ID:
		            case self::LOCAL_ID:
		            case self::GLOBAL_ID:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(5797);
		            	$this->recursiveExpression(0);
		            	break;

		            case self::DEFAULT:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(5798);
		            	$this->match(self::DEFAULT);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function ifExists() : Context\IfExistsContext
		{
		    $localContext = new Context\IfExistsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 578, self::RULE_ifExists);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5801);
		        $this->match(self::IF);
		        $this->setState(5802);
		        $this->match(self::EXISTS);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function ifNotExists() : Context\IfNotExistsContext
		{
		    $localContext = new Context\IfNotExistsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 580, self::RULE_ifNotExists);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5804);
		        $this->match(self::IF);
		        $this->setState(5805);
		        $this->match(self::NOT);
		        $this->setState(5806);
		        $this->match(self::EXISTS);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function functionCall() : Context\FunctionCallContext
		{
		    $localContext = new Context\FunctionCallContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 582, self::RULE_functionCall);

		    try {
		        $this->setState(5825);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 863, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SpecificFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5808);
		        	    $this->specificFunction();
		        	break;

		        	case 2:
		        	    $localContext = new Context\AggregateFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5809);
		        	    $this->aggregateWindowedFunction();
		        	break;

		        	case 3:
		        	    $localContext = new Context\ScalarFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5810);
		        	    $this->scalarFunctionName();
		        	    $this->setState(5811);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5813);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CASE) | (1 << self::CAST) | (1 << self::CONVERT) | (1 << self::CURRENT) | (1 << self::CURRENT_USER) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS) | (1 << self::EXISTS) | (1 << self::FALSE))) !== 0) || (((($_la - 69)) & ~0x3f) === 0 && ((1 << ($_la - 69)) & ((1 << (self::IF - 69)) | (1 << (self::INSERT - 69)) | (1 << (self::INTERVAL - 69)) | (1 << (self::LEFT - 69)) | (1 << (self::NOT - 69)) | (1 << (self::NULL_LITERAL - 69)) | (1 << (self::NUMBER - 69)) | (1 << (self::REPLACE - 69)))) !== 0) || (((($_la - 133)) & ~0x3f) === 0 && ((1 << ($_la - 133)) & ((1 << (self::RIGHT - 133)) | (1 << (self::STACKED - 133)) | (1 << (self::TRUE - 133)) | (1 << (self::VALUES - 133)))) !== 0) || (((($_la - 199)) & ~0x3f) === 0 && ((1 << ($_la - 199)) & ((1 << (self::DATE - 199)) | (1 << (self::TIME - 199)) | (1 << (self::TIMESTAMP - 199)) | (1 << (self::DATETIME - 199)) | (1 << (self::YEAR - 199)) | (1 << (self::CHAR - 199)) | (1 << (self::BINARY - 199)) | (1 << (self::TEXT - 199)) | (1 << (self::ENUM - 199)) | (1 << (self::SERIAL - 199)) | (1 << (self::AVG - 199)) | (1 << (self::BIT_AND - 199)) | (1 << (self::BIT_OR - 199)) | (1 << (self::BIT_XOR - 199)) | (1 << (self::COUNT - 199)) | (1 << (self::GROUP_CONCAT - 199)) | (1 << (self::MAX - 199)) | (1 << (self::MIN - 199)) | (1 << (self::STD - 199)) | (1 << (self::STDDEV - 199)) | (1 << (self::STDDEV_POP - 199)) | (1 << (self::STDDEV_SAMP - 199)) | (1 << (self::SUM - 199)) | (1 << (self::VAR_POP - 199)) | (1 << (self::VAR_SAMP - 199)) | (1 << (self::VARIANCE - 199)) | (1 << (self::CURRENT_DATE - 199)) | (1 << (self::CURRENT_TIME - 199)) | (1 << (self::CURRENT_TIMESTAMP - 199)) | (1 << (self::LOCALTIME - 199)) | (1 << (self::CURDATE - 199)) | (1 << (self::CURTIME - 199)) | (1 << (self::DATE_ADD - 199)) | (1 << (self::DATE_SUB - 199)) | (1 << (self::EXTRACT - 199)) | (1 << (self::LOCALTIMESTAMP - 199)) | (1 << (self::NOW - 199)) | (1 << (self::POSITION - 199)))) !== 0) || (((($_la - 263)) & ~0x3f) === 0 && ((1 << ($_la - 263)) & ((1 << (self::SUBSTR - 263)) | (1 << (self::SUBSTRING - 263)) | (1 << (self::SYSDATE - 263)) | (1 << (self::TRIM - 263)) | (1 << (self::UTC_DATE - 263)) | (1 << (self::UTC_TIME - 263)) | (1 << (self::UTC_TIMESTAMP - 263)) | (1 << (self::ACCOUNT - 263)) | (1 << (self::ACTION - 263)) | (1 << (self::AFTER - 263)) | (1 << (self::AGGREGATE - 263)) | (1 << (self::ALGORITHM - 263)) | (1 << (self::ANY - 263)) | (1 << (self::AT - 263)) | (1 << (self::AUTHORS - 263)) | (1 << (self::AUTOCOMMIT - 263)) | (1 << (self::AUTOEXTEND_SIZE - 263)) | (1 << (self::AUTO_INCREMENT - 263)) | (1 << (self::AVG_ROW_LENGTH - 263)) | (1 << (self::BEGIN - 263)) | (1 << (self::BINLOG - 263)) | (1 << (self::BIT - 263)) | (1 << (self::BLOCK - 263)) | (1 << (self::BOOL - 263)) | (1 << (self::BOOLEAN - 263)) | (1 << (self::BTREE - 263)) | (1 << (self::CACHE - 263)) | (1 << (self::CASCADED - 263)) | (1 << (self::CHAIN - 263)) | (1 << (self::CHANGED - 263)) | (1 << (self::CHANNEL - 263)) | (1 << (self::CHECKSUM - 263)) | (1 << (self::PAGE_CHECKSUM - 263)) | (1 << (self::CIPHER - 263)) | (1 << (self::CLASS_ORIGIN - 263)) | (1 << (self::CLIENT - 263)) | (1 << (self::CLOSE - 263)) | (1 << (self::COALESCE - 263)) | (1 << (self::CODE - 263)) | (1 << (self::COLUMNS - 263)) | (1 << (self::COLUMN_FORMAT - 263)) | (1 << (self::COLUMN_NAME - 263)) | (1 << (self::COMMENT - 263)) | (1 << (self::COMMIT - 263)) | (1 << (self::COMPACT - 263)) | (1 << (self::COMPLETION - 263)) | (1 << (self::COMPRESSED - 263)) | (1 << (self::COMPRESSION - 263)) | (1 << (self::CONCURRENT - 263)) | (1 << (self::CONNECTION - 263)) | (1 << (self::CONSISTENT - 263)) | (1 << (self::CONSTRAINT_CATALOG - 263)) | (1 << (self::CONSTRAINT_SCHEMA - 263)) | (1 << (self::CONSTRAINT_NAME - 263)) | (1 << (self::CONTAINS - 263)) | (1 << (self::CONTEXT - 263)) | (1 << (self::CONTRIBUTORS - 263)) | (1 << (self::COPY - 263)) | (1 << (self::CPU - 263)) | (1 << (self::CURSOR_NAME - 263)) | (1 << (self::DATA - 263)) | (1 << (self::DATAFILE - 263)) | (1 << (self::DEALLOCATE - 263)) | (1 << (self::DEFAULT_AUTH - 263)))) !== 0) || (((($_la - 327)) & ~0x3f) === 0 && ((1 << ($_la - 327)) & ((1 << (self::DEFINER - 327)) | (1 << (self::DELAY_KEY_WRITE - 327)) | (1 << (self::DES_KEY_FILE - 327)) | (1 << (self::DIRECTORY - 327)) | (1 << (self::DISABLE - 327)) | (1 << (self::DISCARD - 327)) | (1 << (self::DISK - 327)) | (1 << (self::DO - 327)) | (1 << (self::DUMPFILE - 327)) | (1 << (self::DUPLICATE - 327)) | (1 << (self::DYNAMIC - 327)) | (1 << (self::ENABLE - 327)) | (1 << (self::ENCRYPTION - 327)) | (1 << (self::END - 327)) | (1 << (self::ENDS - 327)) | (1 << (self::ENGINE - 327)) | (1 << (self::ENGINES - 327)) | (1 << (self::ERROR - 327)) | (1 << (self::ERRORS - 327)) | (1 << (self::ESCAPE - 327)) | (1 << (self::EVEN - 327)) | (1 << (self::EVENT - 327)) | (1 << (self::EVENTS - 327)) | (1 << (self::EVERY - 327)) | (1 << (self::EXCHANGE - 327)) | (1 << (self::EXCLUSIVE - 327)) | (1 << (self::EXPIRE - 327)) | (1 << (self::EXPORT - 327)) | (1 << (self::EXTENDED - 327)) | (1 << (self::EXTENT_SIZE - 327)) | (1 << (self::FAST - 327)) | (1 << (self::FAULTS - 327)) | (1 << (self::FIELDS - 327)) | (1 << (self::FILE_BLOCK_SIZE - 327)) | (1 << (self::FILTER - 327)) | (1 << (self::FIRST - 327)) | (1 << (self::FIXED - 327)) | (1 << (self::FLUSH - 327)) | (1 << (self::FOLLOWS - 327)) | (1 << (self::FOUND - 327)) | (1 << (self::FULL - 327)) | (1 << (self::FUNCTION - 327)) | (1 << (self::GENERAL - 327)) | (1 << (self::GLOBAL - 327)) | (1 << (self::GRANTS - 327)) | (1 << (self::GROUP_REPLICATION - 327)) | (1 << (self::HANDLER - 327)) | (1 << (self::HASH - 327)) | (1 << (self::HELP - 327)) | (1 << (self::HOST - 327)) | (1 << (self::HOSTS - 327)) | (1 << (self::IDENTIFIED - 327)) | (1 << (self::IGNORE_SERVER_IDS - 327)) | (1 << (self::IMPORT - 327)) | (1 << (self::INDEXES - 327)) | (1 << (self::INITIAL_SIZE - 327)) | (1 << (self::INPLACE - 327)) | (1 << (self::INSERT_METHOD - 327)) | (1 << (self::INSTALL - 327)) | (1 << (self::INSTANCE - 327)) | (1 << (self::INVISIBLE - 327)) | (1 << (self::INVOKER - 327)) | (1 << (self::IO - 327)) | (1 << (self::IO_THREAD - 327)))) !== 0) || (((($_la - 391)) & ~0x3f) === 0 && ((1 << ($_la - 391)) & ((1 << (self::IPC - 391)) | (1 << (self::ISOLATION - 391)) | (1 << (self::ISSUER - 391)) | (1 << (self::JSON - 391)) | (1 << (self::KEY_BLOCK_SIZE - 391)) | (1 << (self::LANGUAGE - 391)) | (1 << (self::LAST - 391)) | (1 << (self::LEAVES - 391)) | (1 << (self::LESS - 391)) | (1 << (self::LEVEL - 391)) | (1 << (self::LIST - 391)) | (1 << (self::LOCAL - 391)) | (1 << (self::LOGFILE - 391)) | (1 << (self::LOGS - 391)) | (1 << (self::MASTER - 391)) | (1 << (self::MASTER_AUTO_POSITION - 391)) | (1 << (self::MASTER_CONNECT_RETRY - 391)) | (1 << (self::MASTER_DELAY - 391)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 391)) | (1 << (self::MASTER_HOST - 391)) | (1 << (self::MASTER_LOG_FILE - 391)) | (1 << (self::MASTER_LOG_POS - 391)) | (1 << (self::MASTER_PASSWORD - 391)) | (1 << (self::MASTER_PORT - 391)) | (1 << (self::MASTER_RETRY_COUNT - 391)) | (1 << (self::MASTER_SSL - 391)) | (1 << (self::MASTER_SSL_CA - 391)) | (1 << (self::MASTER_SSL_CAPATH - 391)) | (1 << (self::MASTER_SSL_CERT - 391)) | (1 << (self::MASTER_SSL_CIPHER - 391)) | (1 << (self::MASTER_SSL_CRL - 391)) | (1 << (self::MASTER_SSL_CRLPATH - 391)) | (1 << (self::MASTER_SSL_KEY - 391)) | (1 << (self::MASTER_TLS_VERSION - 391)) | (1 << (self::MASTER_USER - 391)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 391)) | (1 << (self::MAX_QUERIES_PER_HOUR - 391)) | (1 << (self::MAX_ROWS - 391)) | (1 << (self::MAX_SIZE - 391)) | (1 << (self::MAX_UPDATES_PER_HOUR - 391)) | (1 << (self::MAX_USER_CONNECTIONS - 391)) | (1 << (self::MEDIUM - 391)) | (1 << (self::MERGE - 391)) | (1 << (self::MESSAGE_TEXT - 391)) | (1 << (self::MID - 391)) | (1 << (self::MIGRATE - 391)) | (1 << (self::MIN_ROWS - 391)) | (1 << (self::MODE - 391)) | (1 << (self::MODIFY - 391)) | (1 << (self::MUTEX - 391)) | (1 << (self::MYSQL - 391)) | (1 << (self::MYSQL_ERRNO - 391)) | (1 << (self::NAME - 391)) | (1 << (self::NAMES - 391)) | (1 << (self::NCHAR - 391)) | (1 << (self::NEVER - 391)) | (1 << (self::NEXT - 391)) | (1 << (self::NO - 391)) | (1 << (self::NODEGROUP - 391)) | (1 << (self::NONE - 391)) | (1 << (self::OFFLINE - 391)) | (1 << (self::OFFSET - 391)))) !== 0) || (((($_la - 455)) & ~0x3f) === 0 && ((1 << ($_la - 455)) & ((1 << (self::OJ - 455)) | (1 << (self::OLD_PASSWORD - 455)) | (1 << (self::ONE - 455)) | (1 << (self::ONLINE - 455)) | (1 << (self::ONLY - 455)) | (1 << (self::OPEN - 455)) | (1 << (self::OPTIMIZER_COSTS - 455)) | (1 << (self::OPTIONS - 455)) | (1 << (self::OWNER - 455)) | (1 << (self::PACK_KEYS - 455)) | (1 << (self::PAGE - 455)) | (1 << (self::PARSER - 455)) | (1 << (self::PARTIAL - 455)) | (1 << (self::PARTITIONING - 455)) | (1 << (self::PARTITIONS - 455)) | (1 << (self::PASSWORD - 455)) | (1 << (self::PHASE - 455)) | (1 << (self::PLUGIN - 455)) | (1 << (self::PLUGIN_DIR - 455)) | (1 << (self::PLUGINS - 455)) | (1 << (self::PORT - 455)) | (1 << (self::PRECEDES - 455)) | (1 << (self::PREPARE - 455)) | (1 << (self::PRESERVE - 455)) | (1 << (self::PREV - 455)) | (1 << (self::PROCESSLIST - 455)) | (1 << (self::PROFILE - 455)) | (1 << (self::PROFILES - 455)) | (1 << (self::PROXY - 455)) | (1 << (self::QUERY - 455)) | (1 << (self::QUICK - 455)) | (1 << (self::REBUILD - 455)) | (1 << (self::RECOVER - 455)) | (1 << (self::REDO_BUFFER_SIZE - 455)) | (1 << (self::REDUNDANT - 455)) | (1 << (self::RELAY - 455)) | (1 << (self::RELAY_LOG_FILE - 455)) | (1 << (self::RELAY_LOG_POS - 455)) | (1 << (self::RELAYLOG - 455)) | (1 << (self::REMOVE - 455)) | (1 << (self::REORGANIZE - 455)) | (1 << (self::REPAIR - 455)) | (1 << (self::REPLICATE_DO_DB - 455)) | (1 << (self::REPLICATE_DO_TABLE - 455)) | (1 << (self::REPLICATE_IGNORE_DB - 455)) | (1 << (self::REPLICATE_IGNORE_TABLE - 455)) | (1 << (self::REPLICATE_REWRITE_DB - 455)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 455)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 455)) | (1 << (self::REPLICATION - 455)) | (1 << (self::RESET - 455)) | (1 << (self::RESUME - 455)) | (1 << (self::RETURNED_SQLSTATE - 455)) | (1 << (self::RETURNS - 455)) | (1 << (self::ROLLBACK - 455)) | (1 << (self::ROLLUP - 455)) | (1 << (self::ROTATE - 455)) | (1 << (self::ROW - 455)) | (1 << (self::ROWS - 455)) | (1 << (self::ROW_FORMAT - 455)) | (1 << (self::SAVEPOINT - 455)) | (1 << (self::SCHEDULE - 455)) | (1 << (self::SECURITY - 455)))) !== 0) || (((($_la - 519)) & ~0x3f) === 0 && ((1 << ($_la - 519)) & ((1 << (self::SERVER - 519)) | (1 << (self::SESSION - 519)) | (1 << (self::SHARE - 519)) | (1 << (self::SHARED - 519)) | (1 << (self::SIGNED - 519)) | (1 << (self::SIMPLE - 519)) | (1 << (self::SLAVE - 519)) | (1 << (self::SLOW - 519)) | (1 << (self::SNAPSHOT - 519)) | (1 << (self::SOCKET - 519)) | (1 << (self::SOME - 519)) | (1 << (self::SONAME - 519)) | (1 << (self::SOUNDS - 519)) | (1 << (self::SOURCE - 519)) | (1 << (self::SQL_AFTER_GTIDS - 519)) | (1 << (self::SQL_AFTER_MTS_GAPS - 519)) | (1 << (self::SQL_BEFORE_GTIDS - 519)) | (1 << (self::SQL_BUFFER_RESULT - 519)) | (1 << (self::SQL_CACHE - 519)) | (1 << (self::SQL_NO_CACHE - 519)) | (1 << (self::SQL_THREAD - 519)) | (1 << (self::START - 519)) | (1 << (self::STARTS - 519)) | (1 << (self::STATS_AUTO_RECALC - 519)) | (1 << (self::STATS_PERSISTENT - 519)) | (1 << (self::STATS_SAMPLE_PAGES - 519)) | (1 << (self::STATUS - 519)) | (1 << (self::STOP - 519)) | (1 << (self::STORAGE - 519)) | (1 << (self::STRING - 519)) | (1 << (self::SUBCLASS_ORIGIN - 519)) | (1 << (self::SUBJECT - 519)) | (1 << (self::SUBPARTITION - 519)) | (1 << (self::SUBPARTITIONS - 519)) | (1 << (self::SUSPEND - 519)) | (1 << (self::SWAPS - 519)) | (1 << (self::SWITCHES - 519)) | (1 << (self::TABLE_NAME - 519)) | (1 << (self::TABLESPACE - 519)) | (1 << (self::TEMPORARY - 519)) | (1 << (self::TEMPTABLE - 519)) | (1 << (self::THAN - 519)) | (1 << (self::TRADITIONAL - 519)) | (1 << (self::TRANSACTION - 519)) | (1 << (self::TRIGGERS - 519)) | (1 << (self::TRUNCATE - 519)) | (1 << (self::UNDEFINED - 519)) | (1 << (self::UNDOFILE - 519)) | (1 << (self::UNDO_BUFFER_SIZE - 519)) | (1 << (self::UNINSTALL - 519)) | (1 << (self::UNKNOWN - 519)) | (1 << (self::UNTIL - 519)) | (1 << (self::UPGRADE - 519)) | (1 << (self::USER - 519)) | (1 << (self::USE_FRM - 519)) | (1 << (self::USER_RESOURCES - 519)) | (1 << (self::VALIDATION - 519)) | (1 << (self::VALUE - 519)) | (1 << (self::VARIABLES - 519)) | (1 << (self::VIEW - 519)) | (1 << (self::VISIBLE - 519)))) !== 0) || (((($_la - 583)) & ~0x3f) === 0 && ((1 << ($_la - 583)) & ((1 << (self::WAIT - 583)) | (1 << (self::WARNINGS - 583)) | (1 << (self::WITHOUT - 583)) | (1 << (self::WORK - 583)) | (1 << (self::WRAPPER - 583)) | (1 << (self::X509 - 583)) | (1 << (self::XA - 583)) | (1 << (self::XML - 583)) | (1 << (self::INTERNAL - 583)) | (1 << (self::QUARTER - 583)) | (1 << (self::MONTH - 583)) | (1 << (self::DAY - 583)) | (1 << (self::HOUR - 583)) | (1 << (self::MINUTE - 583)) | (1 << (self::WEEK - 583)) | (1 << (self::SECOND - 583)) | (1 << (self::MICROSECOND - 583)) | (1 << (self::TABLES - 583)) | (1 << (self::ROUTINE - 583)) | (1 << (self::EXECUTE - 583)) | (1 << (self::FILE - 583)) | (1 << (self::PROCESS - 583)) | (1 << (self::RELOAD - 583)) | (1 << (self::SHUTDOWN - 583)) | (1 << (self::SUPER - 583)) | (1 << (self::PRIVILEGES - 583)) | (1 << (self::SESSION_VARIABLES_ADMIN - 583)) | (1 << (self::ARMSCII8 - 583)) | (1 << (self::ASCII - 583)) | (1 << (self::BIG5 - 583)) | (1 << (self::CP1250 - 583)) | (1 << (self::CP1251 - 583)) | (1 << (self::CP1256 - 583)) | (1 << (self::CP1257 - 583)) | (1 << (self::CP850 - 583)))) !== 0) || (((($_la - 647)) & ~0x3f) === 0 && ((1 << ($_la - 647)) & ((1 << (self::CP852 - 647)) | (1 << (self::CP866 - 647)) | (1 << (self::CP932 - 647)) | (1 << (self::DEC8 - 647)) | (1 << (self::EUCJPMS - 647)) | (1 << (self::EUCKR - 647)) | (1 << (self::GB2312 - 647)) | (1 << (self::GBK - 647)) | (1 << (self::GEOSTD8 - 647)) | (1 << (self::GREEK - 647)) | (1 << (self::HEBREW - 647)) | (1 << (self::HP8 - 647)) | (1 << (self::KEYBCS2 - 647)) | (1 << (self::KOI8R - 647)) | (1 << (self::KOI8U - 647)) | (1 << (self::LATIN1 - 647)) | (1 << (self::LATIN2 - 647)) | (1 << (self::LATIN5 - 647)) | (1 << (self::LATIN7 - 647)) | (1 << (self::MACCE - 647)) | (1 << (self::MACROMAN - 647)) | (1 << (self::SJIS - 647)) | (1 << (self::SWE7 - 647)) | (1 << (self::TIS620 - 647)) | (1 << (self::UCS2 - 647)) | (1 << (self::UJIS - 647)) | (1 << (self::UTF16 - 647)) | (1 << (self::UTF16LE - 647)) | (1 << (self::UTF32 - 647)) | (1 << (self::UTF8 - 647)) | (1 << (self::UTF8MB3 - 647)) | (1 << (self::UTF8MB4 - 647)) | (1 << (self::ARCHIVE - 647)) | (1 << (self::BLACKHOLE - 647)) | (1 << (self::CSV - 647)) | (1 << (self::FEDERATED - 647)) | (1 << (self::INNODB - 647)) | (1 << (self::MEMORY - 647)) | (1 << (self::MRG_MYISAM - 647)) | (1 << (self::MYISAM - 647)) | (1 << (self::NDB - 647)) | (1 << (self::NDBCLUSTER - 647)) | (1 << (self::PERFORMANCE_SCHEMA - 647)) | (1 << (self::TOKUDB - 647)) | (1 << (self::REPEATABLE - 647)) | (1 << (self::COMMITTED - 647)) | (1 << (self::UNCOMMITTED - 647)) | (1 << (self::SERIALIZABLE - 647)) | (1 << (self::GEOMETRYCOLLECTION - 647)) | (1 << (self::LINESTRING - 647)) | (1 << (self::MULTILINESTRING - 647)) | (1 << (self::MULTIPOINT - 647)) | (1 << (self::MULTIPOLYGON - 647)) | (1 << (self::POINT - 647)) | (1 << (self::POLYGON - 647)) | (1 << (self::ABS - 647)) | (1 << (self::ACOS - 647)) | (1 << (self::ADDDATE - 647)) | (1 << (self::ADDTIME - 647)) | (1 << (self::AES_DECRYPT - 647)) | (1 << (self::AES_ENCRYPT - 647)) | (1 << (self::AREA - 647)))) !== 0) || (((($_la - 711)) & ~0x3f) === 0 && ((1 << ($_la - 711)) & ((1 << (self::ASBINARY - 711)) | (1 << (self::ASIN - 711)) | (1 << (self::ASTEXT - 711)) | (1 << (self::ASWKB - 711)) | (1 << (self::ASWKT - 711)) | (1 << (self::ASYMMETRIC_DECRYPT - 711)) | (1 << (self::ASYMMETRIC_DERIVE - 711)) | (1 << (self::ASYMMETRIC_ENCRYPT - 711)) | (1 << (self::ASYMMETRIC_SIGN - 711)) | (1 << (self::ASYMMETRIC_VERIFY - 711)) | (1 << (self::ATAN - 711)) | (1 << (self::ATAN2 - 711)) | (1 << (self::BENCHMARK - 711)) | (1 << (self::BIN - 711)) | (1 << (self::BIT_COUNT - 711)) | (1 << (self::BIT_LENGTH - 711)) | (1 << (self::BUFFER - 711)) | (1 << (self::CATALOG_NAME - 711)) | (1 << (self::CEIL - 711)) | (1 << (self::CEILING - 711)) | (1 << (self::CENTROID - 711)) | (1 << (self::CHARACTER_LENGTH - 711)) | (1 << (self::CHARSET - 711)) | (1 << (self::CHAR_LENGTH - 711)) | (1 << (self::COERCIBILITY - 711)) | (1 << (self::COLLATION - 711)) | (1 << (self::COMPRESS - 711)) | (1 << (self::CONCAT - 711)) | (1 << (self::CONCAT_WS - 711)) | (1 << (self::CONNECTION_ID - 711)) | (1 << (self::CONV - 711)) | (1 << (self::CONVERT_TZ - 711)) | (1 << (self::COS - 711)) | (1 << (self::COT - 711)) | (1 << (self::CRC32 - 711)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 711)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 711)) | (1 << (self::CREATE_DH_PARAMETERS - 711)) | (1 << (self::CREATE_DIGEST - 711)) | (1 << (self::CROSSES - 711)) | (1 << (self::DATEDIFF - 711)) | (1 << (self::DATE_FORMAT - 711)) | (1 << (self::DAYNAME - 711)) | (1 << (self::DAYOFMONTH - 711)) | (1 << (self::DAYOFWEEK - 711)) | (1 << (self::DAYOFYEAR - 711)) | (1 << (self::DECODE - 711)) | (1 << (self::DEGREES - 711)) | (1 << (self::DES_DECRYPT - 711)) | (1 << (self::DES_ENCRYPT - 711)) | (1 << (self::DIMENSION - 711)) | (1 << (self::DISJOINT - 711)) | (1 << (self::ELT - 711)) | (1 << (self::ENCODE - 711)) | (1 << (self::ENCRYPT - 711)) | (1 << (self::ENDPOINT - 711)) | (1 << (self::ENVELOPE - 711)) | (1 << (self::EQUALS - 711)) | (1 << (self::EXP - 711)) | (1 << (self::EXPORT_SET - 711)) | (1 << (self::EXTERIORRING - 711)) | (1 << (self::EXTRACTVALUE - 711)) | (1 << (self::FIELD - 711)) | (1 << (self::FIND_IN_SET - 711)))) !== 0) || (((($_la - 775)) & ~0x3f) === 0 && ((1 << ($_la - 775)) & ((1 << (self::FLOOR - 775)) | (1 << (self::FORMAT - 775)) | (1 << (self::FOUND_ROWS - 775)) | (1 << (self::FROM_BASE64 - 775)) | (1 << (self::FROM_DAYS - 775)) | (1 << (self::FROM_UNIXTIME - 775)) | (1 << (self::GEOMCOLLFROMTEXT - 775)) | (1 << (self::GEOMCOLLFROMWKB - 775)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 775)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 775)) | (1 << (self::GEOMETRYFROMTEXT - 775)) | (1 << (self::GEOMETRYFROMWKB - 775)) | (1 << (self::GEOMETRYN - 775)) | (1 << (self::GEOMETRYTYPE - 775)) | (1 << (self::GEOMFROMTEXT - 775)) | (1 << (self::GEOMFROMWKB - 775)) | (1 << (self::GET_FORMAT - 775)) | (1 << (self::GET_LOCK - 775)) | (1 << (self::GLENGTH - 775)) | (1 << (self::GREATEST - 775)) | (1 << (self::GTID_SUBSET - 775)) | (1 << (self::GTID_SUBTRACT - 775)) | (1 << (self::HEX - 775)) | (1 << (self::IFNULL - 775)) | (1 << (self::INET6_ATON - 775)) | (1 << (self::INET6_NTOA - 775)) | (1 << (self::INET_ATON - 775)) | (1 << (self::INET_NTOA - 775)) | (1 << (self::INSTR - 775)) | (1 << (self::INTERIORRINGN - 775)) | (1 << (self::INTERSECTS - 775)) | (1 << (self::ISCLOSED - 775)) | (1 << (self::ISEMPTY - 775)) | (1 << (self::ISNULL - 775)) | (1 << (self::ISSIMPLE - 775)) | (1 << (self::IS_FREE_LOCK - 775)) | (1 << (self::IS_IPV4 - 775)) | (1 << (self::IS_IPV4_COMPAT - 775)) | (1 << (self::IS_IPV4_MAPPED - 775)) | (1 << (self::IS_IPV6 - 775)) | (1 << (self::IS_USED_LOCK - 775)) | (1 << (self::LAST_INSERT_ID - 775)) | (1 << (self::LCASE - 775)) | (1 << (self::LEAST - 775)) | (1 << (self::LENGTH - 775)) | (1 << (self::LINEFROMTEXT - 775)) | (1 << (self::LINEFROMWKB - 775)) | (1 << (self::LINESTRINGFROMTEXT - 775)) | (1 << (self::LINESTRINGFROMWKB - 775)) | (1 << (self::LN - 775)) | (1 << (self::LOAD_FILE - 775)) | (1 << (self::LOCATE - 775)) | (1 << (self::LOG - 775)) | (1 << (self::LOG10 - 775)) | (1 << (self::LOG2 - 775)) | (1 << (self::LOWER - 775)) | (1 << (self::LPAD - 775)) | (1 << (self::LTRIM - 775)) | (1 << (self::MAKEDATE - 775)) | (1 << (self::MAKETIME - 775)) | (1 << (self::MAKE_SET - 775)) | (1 << (self::MASTER_POS_WAIT - 775)) | (1 << (self::MBRCONTAINS - 775)) | (1 << (self::MBRDISJOINT - 775)))) !== 0) || (((($_la - 839)) & ~0x3f) === 0 && ((1 << ($_la - 839)) & ((1 << (self::MBREQUAL - 839)) | (1 << (self::MBRINTERSECTS - 839)) | (1 << (self::MBROVERLAPS - 839)) | (1 << (self::MBRTOUCHES - 839)) | (1 << (self::MBRWITHIN - 839)) | (1 << (self::MD5 - 839)) | (1 << (self::MLINEFROMTEXT - 839)) | (1 << (self::MLINEFROMWKB - 839)) | (1 << (self::MONTHNAME - 839)) | (1 << (self::MPOINTFROMTEXT - 839)) | (1 << (self::MPOINTFROMWKB - 839)) | (1 << (self::MPOLYFROMTEXT - 839)) | (1 << (self::MPOLYFROMWKB - 839)) | (1 << (self::MULTILINESTRINGFROMTEXT - 839)) | (1 << (self::MULTILINESTRINGFROMWKB - 839)) | (1 << (self::MULTIPOINTFROMTEXT - 839)) | (1 << (self::MULTIPOINTFROMWKB - 839)) | (1 << (self::MULTIPOLYGONFROMTEXT - 839)) | (1 << (self::MULTIPOLYGONFROMWKB - 839)) | (1 << (self::NAME_CONST - 839)) | (1 << (self::NULLIF - 839)) | (1 << (self::NUMGEOMETRIES - 839)) | (1 << (self::NUMINTERIORRINGS - 839)) | (1 << (self::NUMPOINTS - 839)) | (1 << (self::OCT - 839)) | (1 << (self::OCTET_LENGTH - 839)) | (1 << (self::ORD - 839)) | (1 << (self::OVERLAPS - 839)) | (1 << (self::PERIOD_ADD - 839)) | (1 << (self::PERIOD_DIFF - 839)) | (1 << (self::PI - 839)) | (1 << (self::POINTFROMTEXT - 839)) | (1 << (self::POINTFROMWKB - 839)) | (1 << (self::POINTN - 839)) | (1 << (self::POLYFROMTEXT - 839)) | (1 << (self::POLYFROMWKB - 839)) | (1 << (self::POLYGONFROMTEXT - 839)) | (1 << (self::POLYGONFROMWKB - 839)) | (1 << (self::POW - 839)) | (1 << (self::POWER - 839)) | (1 << (self::QUOTE - 839)) | (1 << (self::RADIANS - 839)) | (1 << (self::RAND - 839)) | (1 << (self::RANDOM_BYTES - 839)) | (1 << (self::RELEASE_LOCK - 839)) | (1 << (self::REVERSE - 839)) | (1 << (self::ROUND - 839)) | (1 << (self::ROW_COUNT - 839)) | (1 << (self::RPAD - 839)) | (1 << (self::RTRIM - 839)) | (1 << (self::SEC_TO_TIME - 839)) | (1 << (self::SESSION_USER - 839)) | (1 << (self::SHA - 839)) | (1 << (self::SHA1 - 839)) | (1 << (self::SHA2 - 839)) | (1 << (self::SCHEMA_NAME - 839)) | (1 << (self::SIGN - 839)) | (1 << (self::SIN - 839)) | (1 << (self::SLEEP - 839)) | (1 << (self::SOUNDEX - 839)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 839)) | (1 << (self::SQRT - 839)) | (1 << (self::SRID - 839)) | (1 << (self::STARTPOINT - 839)))) !== 0) || (((($_la - 903)) & ~0x3f) === 0 && ((1 << ($_la - 903)) & ((1 << (self::STRCMP - 903)) | (1 << (self::STR_TO_DATE - 903)) | (1 << (self::ST_AREA - 903)) | (1 << (self::ST_ASBINARY - 903)) | (1 << (self::ST_ASTEXT - 903)) | (1 << (self::ST_ASWKB - 903)) | (1 << (self::ST_ASWKT - 903)) | (1 << (self::ST_BUFFER - 903)) | (1 << (self::ST_CENTROID - 903)) | (1 << (self::ST_CONTAINS - 903)) | (1 << (self::ST_CROSSES - 903)) | (1 << (self::ST_DIFFERENCE - 903)) | (1 << (self::ST_DIMENSION - 903)) | (1 << (self::ST_DISJOINT - 903)) | (1 << (self::ST_DISTANCE - 903)) | (1 << (self::ST_ENDPOINT - 903)) | (1 << (self::ST_ENVELOPE - 903)) | (1 << (self::ST_EQUALS - 903)) | (1 << (self::ST_EXTERIORRING - 903)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 903)) | (1 << (self::ST_GEOMCOLLFROMTXT - 903)) | (1 << (self::ST_GEOMCOLLFROMWKB - 903)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 903)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 903)) | (1 << (self::ST_GEOMETRYFROMTEXT - 903)) | (1 << (self::ST_GEOMETRYFROMWKB - 903)) | (1 << (self::ST_GEOMETRYN - 903)) | (1 << (self::ST_GEOMETRYTYPE - 903)) | (1 << (self::ST_GEOMFROMTEXT - 903)) | (1 << (self::ST_GEOMFROMWKB - 903)) | (1 << (self::ST_INTERIORRINGN - 903)) | (1 << (self::ST_INTERSECTION - 903)) | (1 << (self::ST_INTERSECTS - 903)) | (1 << (self::ST_ISCLOSED - 903)) | (1 << (self::ST_ISEMPTY - 903)) | (1 << (self::ST_ISSIMPLE - 903)) | (1 << (self::ST_LINEFROMTEXT - 903)) | (1 << (self::ST_LINEFROMWKB - 903)) | (1 << (self::ST_LINESTRINGFROMTEXT - 903)) | (1 << (self::ST_LINESTRINGFROMWKB - 903)) | (1 << (self::ST_NUMGEOMETRIES - 903)) | (1 << (self::ST_NUMINTERIORRING - 903)) | (1 << (self::ST_NUMINTERIORRINGS - 903)) | (1 << (self::ST_NUMPOINTS - 903)) | (1 << (self::ST_OVERLAPS - 903)) | (1 << (self::ST_POINTFROMTEXT - 903)) | (1 << (self::ST_POINTFROMWKB - 903)) | (1 << (self::ST_POINTN - 903)) | (1 << (self::ST_POLYFROMTEXT - 903)) | (1 << (self::ST_POLYFROMWKB - 903)) | (1 << (self::ST_POLYGONFROMTEXT - 903)) | (1 << (self::ST_POLYGONFROMWKB - 903)) | (1 << (self::ST_SRID - 903)) | (1 << (self::ST_STARTPOINT - 903)) | (1 << (self::ST_SYMDIFFERENCE - 903)) | (1 << (self::ST_TOUCHES - 903)) | (1 << (self::ST_UNION - 903)) | (1 << (self::ST_WITHIN - 903)) | (1 << (self::ST_X - 903)) | (1 << (self::ST_Y - 903)) | (1 << (self::SUBDATE - 903)) | (1 << (self::SUBSTRING_INDEX - 903)) | (1 << (self::SUBTIME - 903)) | (1 << (self::SYSTEM_USER - 903)))) !== 0) || (((($_la - 967)) & ~0x3f) === 0 && ((1 << ($_la - 967)) & ((1 << (self::TAN - 967)) | (1 << (self::TIMEDIFF - 967)) | (1 << (self::TIMESTAMPADD - 967)) | (1 << (self::TIMESTAMPDIFF - 967)) | (1 << (self::TIME_FORMAT - 967)) | (1 << (self::TIME_TO_SEC - 967)) | (1 << (self::TOUCHES - 967)) | (1 << (self::TO_BASE64 - 967)) | (1 << (self::TO_DAYS - 967)) | (1 << (self::TO_SECONDS - 967)) | (1 << (self::UCASE - 967)) | (1 << (self::UNCOMPRESS - 967)) | (1 << (self::UNCOMPRESSED_LENGTH - 967)) | (1 << (self::UNHEX - 967)) | (1 << (self::UNIX_TIMESTAMP - 967)) | (1 << (self::UPDATEXML - 967)) | (1 << (self::UPPER - 967)) | (1 << (self::UUID - 967)) | (1 << (self::UUID_SHORT - 967)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 967)) | (1 << (self::VERSION - 967)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 967)) | (1 << (self::WEEKDAY - 967)) | (1 << (self::WEEKOFYEAR - 967)) | (1 << (self::WEIGHT_STRING - 967)) | (1 << (self::WITHIN - 967)) | (1 << (self::YEARWEEK - 967)) | (1 << (self::Y_FUNCTION - 967)) | (1 << (self::X_FUNCTION - 967)) | (1 << (self::PLUS - 967)) | (1 << (self::MINUS - 967)) | (1 << (self::EXCLAMATION_SYMBOL - 967)) | (1 << (self::BIT_NOT_OP - 967)) | (1 << (self::LR_BRACKET - 967)) | (1 << (self::ZERO_DECIMAL - 967)) | (1 << (self::ONE_DECIMAL - 967)) | (1 << (self::TWO_DECIMAL - 967)))) !== 0) || (((($_la - 1034)) & ~0x3f) === 0 && ((1 << ($_la - 1034)) & ((1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (self::START_NATIONAL_STRING_LITERAL - 1034)) | (1 << (self::STRING_LITERAL - 1034)) | (1 << (self::DECIMAL_LITERAL - 1034)) | (1 << (self::HEXADECIMAL_LITERAL - 1034)) | (1 << (self::REAL_LITERAL - 1034)) | (1 << (self::NULL_SPEC_LITERAL - 1034)) | (1 << (self::BIT_STRING - 1034)) | (1 << (self::STRING_CHARSET_NAME - 1034)) | (1 << (self::ID - 1034)) | (1 << (self::REVERSE_QUOTE_ID - 1034)) | (1 << (self::LOCAL_ID - 1034)) | (1 << (self::GLOBAL_ID - 1034)))) !== 0)) {
		        	    	$this->setState(5812);
		        	    	$this->functionArgs();
		        	    }
		        	    $this->setState(5815);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 4:
		        	    $localContext = new Context\UdfFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(5817);
		        	    $this->fullId();
		        	    $this->setState(5818);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5820);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if (((($_la) & ~0x3f) === 0 && ((1 << $_la) & ((1 << self::CASE) | (1 << self::CAST) | (1 << self::CONVERT) | (1 << self::CURRENT) | (1 << self::CURRENT_USER) | (1 << self::DATABASE) | (1 << self::DIAGNOSTICS) | (1 << self::EXISTS) | (1 << self::FALSE))) !== 0) || (((($_la - 69)) & ~0x3f) === 0 && ((1 << ($_la - 69)) & ((1 << (self::IF - 69)) | (1 << (self::INSERT - 69)) | (1 << (self::INTERVAL - 69)) | (1 << (self::LEFT - 69)) | (1 << (self::NOT - 69)) | (1 << (self::NULL_LITERAL - 69)) | (1 << (self::NUMBER - 69)) | (1 << (self::REPLACE - 69)))) !== 0) || (((($_la - 133)) & ~0x3f) === 0 && ((1 << ($_la - 133)) & ((1 << (self::RIGHT - 133)) | (1 << (self::STACKED - 133)) | (1 << (self::TRUE - 133)) | (1 << (self::VALUES - 133)))) !== 0) || (((($_la - 199)) & ~0x3f) === 0 && ((1 << ($_la - 199)) & ((1 << (self::DATE - 199)) | (1 << (self::TIME - 199)) | (1 << (self::TIMESTAMP - 199)) | (1 << (self::DATETIME - 199)) | (1 << (self::YEAR - 199)) | (1 << (self::CHAR - 199)) | (1 << (self::BINARY - 199)) | (1 << (self::TEXT - 199)) | (1 << (self::ENUM - 199)) | (1 << (self::SERIAL - 199)) | (1 << (self::AVG - 199)) | (1 << (self::BIT_AND - 199)) | (1 << (self::BIT_OR - 199)) | (1 << (self::BIT_XOR - 199)) | (1 << (self::COUNT - 199)) | (1 << (self::GROUP_CONCAT - 199)) | (1 << (self::MAX - 199)) | (1 << (self::MIN - 199)) | (1 << (self::STD - 199)) | (1 << (self::STDDEV - 199)) | (1 << (self::STDDEV_POP - 199)) | (1 << (self::STDDEV_SAMP - 199)) | (1 << (self::SUM - 199)) | (1 << (self::VAR_POP - 199)) | (1 << (self::VAR_SAMP - 199)) | (1 << (self::VARIANCE - 199)) | (1 << (self::CURRENT_DATE - 199)) | (1 << (self::CURRENT_TIME - 199)) | (1 << (self::CURRENT_TIMESTAMP - 199)) | (1 << (self::LOCALTIME - 199)) | (1 << (self::CURDATE - 199)) | (1 << (self::CURTIME - 199)) | (1 << (self::DATE_ADD - 199)) | (1 << (self::DATE_SUB - 199)) | (1 << (self::EXTRACT - 199)) | (1 << (self::LOCALTIMESTAMP - 199)) | (1 << (self::NOW - 199)) | (1 << (self::POSITION - 199)))) !== 0) || (((($_la - 263)) & ~0x3f) === 0 && ((1 << ($_la - 263)) & ((1 << (self::SUBSTR - 263)) | (1 << (self::SUBSTRING - 263)) | (1 << (self::SYSDATE - 263)) | (1 << (self::TRIM - 263)) | (1 << (self::UTC_DATE - 263)) | (1 << (self::UTC_TIME - 263)) | (1 << (self::UTC_TIMESTAMP - 263)) | (1 << (self::ACCOUNT - 263)) | (1 << (self::ACTION - 263)) | (1 << (self::AFTER - 263)) | (1 << (self::AGGREGATE - 263)) | (1 << (self::ALGORITHM - 263)) | (1 << (self::ANY - 263)) | (1 << (self::AT - 263)) | (1 << (self::AUTHORS - 263)) | (1 << (self::AUTOCOMMIT - 263)) | (1 << (self::AUTOEXTEND_SIZE - 263)) | (1 << (self::AUTO_INCREMENT - 263)) | (1 << (self::AVG_ROW_LENGTH - 263)) | (1 << (self::BEGIN - 263)) | (1 << (self::BINLOG - 263)) | (1 << (self::BIT - 263)) | (1 << (self::BLOCK - 263)) | (1 << (self::BOOL - 263)) | (1 << (self::BOOLEAN - 263)) | (1 << (self::BTREE - 263)) | (1 << (self::CACHE - 263)) | (1 << (self::CASCADED - 263)) | (1 << (self::CHAIN - 263)) | (1 << (self::CHANGED - 263)) | (1 << (self::CHANNEL - 263)) | (1 << (self::CHECKSUM - 263)) | (1 << (self::PAGE_CHECKSUM - 263)) | (1 << (self::CIPHER - 263)) | (1 << (self::CLASS_ORIGIN - 263)) | (1 << (self::CLIENT - 263)) | (1 << (self::CLOSE - 263)) | (1 << (self::COALESCE - 263)) | (1 << (self::CODE - 263)) | (1 << (self::COLUMNS - 263)) | (1 << (self::COLUMN_FORMAT - 263)) | (1 << (self::COLUMN_NAME - 263)) | (1 << (self::COMMENT - 263)) | (1 << (self::COMMIT - 263)) | (1 << (self::COMPACT - 263)) | (1 << (self::COMPLETION - 263)) | (1 << (self::COMPRESSED - 263)) | (1 << (self::COMPRESSION - 263)) | (1 << (self::CONCURRENT - 263)) | (1 << (self::CONNECTION - 263)) | (1 << (self::CONSISTENT - 263)) | (1 << (self::CONSTRAINT_CATALOG - 263)) | (1 << (self::CONSTRAINT_SCHEMA - 263)) | (1 << (self::CONSTRAINT_NAME - 263)) | (1 << (self::CONTAINS - 263)) | (1 << (self::CONTEXT - 263)) | (1 << (self::CONTRIBUTORS - 263)) | (1 << (self::COPY - 263)) | (1 << (self::CPU - 263)) | (1 << (self::CURSOR_NAME - 263)) | (1 << (self::DATA - 263)) | (1 << (self::DATAFILE - 263)) | (1 << (self::DEALLOCATE - 263)) | (1 << (self::DEFAULT_AUTH - 263)))) !== 0) || (((($_la - 327)) & ~0x3f) === 0 && ((1 << ($_la - 327)) & ((1 << (self::DEFINER - 327)) | (1 << (self::DELAY_KEY_WRITE - 327)) | (1 << (self::DES_KEY_FILE - 327)) | (1 << (self::DIRECTORY - 327)) | (1 << (self::DISABLE - 327)) | (1 << (self::DISCARD - 327)) | (1 << (self::DISK - 327)) | (1 << (self::DO - 327)) | (1 << (self::DUMPFILE - 327)) | (1 << (self::DUPLICATE - 327)) | (1 << (self::DYNAMIC - 327)) | (1 << (self::ENABLE - 327)) | (1 << (self::ENCRYPTION - 327)) | (1 << (self::END - 327)) | (1 << (self::ENDS - 327)) | (1 << (self::ENGINE - 327)) | (1 << (self::ENGINES - 327)) | (1 << (self::ERROR - 327)) | (1 << (self::ERRORS - 327)) | (1 << (self::ESCAPE - 327)) | (1 << (self::EVEN - 327)) | (1 << (self::EVENT - 327)) | (1 << (self::EVENTS - 327)) | (1 << (self::EVERY - 327)) | (1 << (self::EXCHANGE - 327)) | (1 << (self::EXCLUSIVE - 327)) | (1 << (self::EXPIRE - 327)) | (1 << (self::EXPORT - 327)) | (1 << (self::EXTENDED - 327)) | (1 << (self::EXTENT_SIZE - 327)) | (1 << (self::FAST - 327)) | (1 << (self::FAULTS - 327)) | (1 << (self::FIELDS - 327)) | (1 << (self::FILE_BLOCK_SIZE - 327)) | (1 << (self::FILTER - 327)) | (1 << (self::FIRST - 327)) | (1 << (self::FIXED - 327)) | (1 << (self::FLUSH - 327)) | (1 << (self::FOLLOWS - 327)) | (1 << (self::FOUND - 327)) | (1 << (self::FULL - 327)) | (1 << (self::FUNCTION - 327)) | (1 << (self::GENERAL - 327)) | (1 << (self::GLOBAL - 327)) | (1 << (self::GRANTS - 327)) | (1 << (self::GROUP_REPLICATION - 327)) | (1 << (self::HANDLER - 327)) | (1 << (self::HASH - 327)) | (1 << (self::HELP - 327)) | (1 << (self::HOST - 327)) | (1 << (self::HOSTS - 327)) | (1 << (self::IDENTIFIED - 327)) | (1 << (self::IGNORE_SERVER_IDS - 327)) | (1 << (self::IMPORT - 327)) | (1 << (self::INDEXES - 327)) | (1 << (self::INITIAL_SIZE - 327)) | (1 << (self::INPLACE - 327)) | (1 << (self::INSERT_METHOD - 327)) | (1 << (self::INSTALL - 327)) | (1 << (self::INSTANCE - 327)) | (1 << (self::INVISIBLE - 327)) | (1 << (self::INVOKER - 327)) | (1 << (self::IO - 327)) | (1 << (self::IO_THREAD - 327)))) !== 0) || (((($_la - 391)) & ~0x3f) === 0 && ((1 << ($_la - 391)) & ((1 << (self::IPC - 391)) | (1 << (self::ISOLATION - 391)) | (1 << (self::ISSUER - 391)) | (1 << (self::JSON - 391)) | (1 << (self::KEY_BLOCK_SIZE - 391)) | (1 << (self::LANGUAGE - 391)) | (1 << (self::LAST - 391)) | (1 << (self::LEAVES - 391)) | (1 << (self::LESS - 391)) | (1 << (self::LEVEL - 391)) | (1 << (self::LIST - 391)) | (1 << (self::LOCAL - 391)) | (1 << (self::LOGFILE - 391)) | (1 << (self::LOGS - 391)) | (1 << (self::MASTER - 391)) | (1 << (self::MASTER_AUTO_POSITION - 391)) | (1 << (self::MASTER_CONNECT_RETRY - 391)) | (1 << (self::MASTER_DELAY - 391)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 391)) | (1 << (self::MASTER_HOST - 391)) | (1 << (self::MASTER_LOG_FILE - 391)) | (1 << (self::MASTER_LOG_POS - 391)) | (1 << (self::MASTER_PASSWORD - 391)) | (1 << (self::MASTER_PORT - 391)) | (1 << (self::MASTER_RETRY_COUNT - 391)) | (1 << (self::MASTER_SSL - 391)) | (1 << (self::MASTER_SSL_CA - 391)) | (1 << (self::MASTER_SSL_CAPATH - 391)) | (1 << (self::MASTER_SSL_CERT - 391)) | (1 << (self::MASTER_SSL_CIPHER - 391)) | (1 << (self::MASTER_SSL_CRL - 391)) | (1 << (self::MASTER_SSL_CRLPATH - 391)) | (1 << (self::MASTER_SSL_KEY - 391)) | (1 << (self::MASTER_TLS_VERSION - 391)) | (1 << (self::MASTER_USER - 391)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 391)) | (1 << (self::MAX_QUERIES_PER_HOUR - 391)) | (1 << (self::MAX_ROWS - 391)) | (1 << (self::MAX_SIZE - 391)) | (1 << (self::MAX_UPDATES_PER_HOUR - 391)) | (1 << (self::MAX_USER_CONNECTIONS - 391)) | (1 << (self::MEDIUM - 391)) | (1 << (self::MERGE - 391)) | (1 << (self::MESSAGE_TEXT - 391)) | (1 << (self::MID - 391)) | (1 << (self::MIGRATE - 391)) | (1 << (self::MIN_ROWS - 391)) | (1 << (self::MODE - 391)) | (1 << (self::MODIFY - 391)) | (1 << (self::MUTEX - 391)) | (1 << (self::MYSQL - 391)) | (1 << (self::MYSQL_ERRNO - 391)) | (1 << (self::NAME - 391)) | (1 << (self::NAMES - 391)) | (1 << (self::NCHAR - 391)) | (1 << (self::NEVER - 391)) | (1 << (self::NEXT - 391)) | (1 << (self::NO - 391)) | (1 << (self::NODEGROUP - 391)) | (1 << (self::NONE - 391)) | (1 << (self::OFFLINE - 391)) | (1 << (self::OFFSET - 391)))) !== 0) || (((($_la - 455)) & ~0x3f) === 0 && ((1 << ($_la - 455)) & ((1 << (self::OJ - 455)) | (1 << (self::OLD_PASSWORD - 455)) | (1 << (self::ONE - 455)) | (1 << (self::ONLINE - 455)) | (1 << (self::ONLY - 455)) | (1 << (self::OPEN - 455)) | (1 << (self::OPTIMIZER_COSTS - 455)) | (1 << (self::OPTIONS - 455)) | (1 << (self::OWNER - 455)) | (1 << (self::PACK_KEYS - 455)) | (1 << (self::PAGE - 455)) | (1 << (self::PARSER - 455)) | (1 << (self::PARTIAL - 455)) | (1 << (self::PARTITIONING - 455)) | (1 << (self::PARTITIONS - 455)) | (1 << (self::PASSWORD - 455)) | (1 << (self::PHASE - 455)) | (1 << (self::PLUGIN - 455)) | (1 << (self::PLUGIN_DIR - 455)) | (1 << (self::PLUGINS - 455)) | (1 << (self::PORT - 455)) | (1 << (self::PRECEDES - 455)) | (1 << (self::PREPARE - 455)) | (1 << (self::PRESERVE - 455)) | (1 << (self::PREV - 455)) | (1 << (self::PROCESSLIST - 455)) | (1 << (self::PROFILE - 455)) | (1 << (self::PROFILES - 455)) | (1 << (self::PROXY - 455)) | (1 << (self::QUERY - 455)) | (1 << (self::QUICK - 455)) | (1 << (self::REBUILD - 455)) | (1 << (self::RECOVER - 455)) | (1 << (self::REDO_BUFFER_SIZE - 455)) | (1 << (self::REDUNDANT - 455)) | (1 << (self::RELAY - 455)) | (1 << (self::RELAY_LOG_FILE - 455)) | (1 << (self::RELAY_LOG_POS - 455)) | (1 << (self::RELAYLOG - 455)) | (1 << (self::REMOVE - 455)) | (1 << (self::REORGANIZE - 455)) | (1 << (self::REPAIR - 455)) | (1 << (self::REPLICATE_DO_DB - 455)) | (1 << (self::REPLICATE_DO_TABLE - 455)) | (1 << (self::REPLICATE_IGNORE_DB - 455)) | (1 << (self::REPLICATE_IGNORE_TABLE - 455)) | (1 << (self::REPLICATE_REWRITE_DB - 455)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 455)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 455)) | (1 << (self::REPLICATION - 455)) | (1 << (self::RESET - 455)) | (1 << (self::RESUME - 455)) | (1 << (self::RETURNED_SQLSTATE - 455)) | (1 << (self::RETURNS - 455)) | (1 << (self::ROLLBACK - 455)) | (1 << (self::ROLLUP - 455)) | (1 << (self::ROTATE - 455)) | (1 << (self::ROW - 455)) | (1 << (self::ROWS - 455)) | (1 << (self::ROW_FORMAT - 455)) | (1 << (self::SAVEPOINT - 455)) | (1 << (self::SCHEDULE - 455)) | (1 << (self::SECURITY - 455)))) !== 0) || (((($_la - 519)) & ~0x3f) === 0 && ((1 << ($_la - 519)) & ((1 << (self::SERVER - 519)) | (1 << (self::SESSION - 519)) | (1 << (self::SHARE - 519)) | (1 << (self::SHARED - 519)) | (1 << (self::SIGNED - 519)) | (1 << (self::SIMPLE - 519)) | (1 << (self::SLAVE - 519)) | (1 << (self::SLOW - 519)) | (1 << (self::SNAPSHOT - 519)) | (1 << (self::SOCKET - 519)) | (1 << (self::SOME - 519)) | (1 << (self::SONAME - 519)) | (1 << (self::SOUNDS - 519)) | (1 << (self::SOURCE - 519)) | (1 << (self::SQL_AFTER_GTIDS - 519)) | (1 << (self::SQL_AFTER_MTS_GAPS - 519)) | (1 << (self::SQL_BEFORE_GTIDS - 519)) | (1 << (self::SQL_BUFFER_RESULT - 519)) | (1 << (self::SQL_CACHE - 519)) | (1 << (self::SQL_NO_CACHE - 519)) | (1 << (self::SQL_THREAD - 519)) | (1 << (self::START - 519)) | (1 << (self::STARTS - 519)) | (1 << (self::STATS_AUTO_RECALC - 519)) | (1 << (self::STATS_PERSISTENT - 519)) | (1 << (self::STATS_SAMPLE_PAGES - 519)) | (1 << (self::STATUS - 519)) | (1 << (self::STOP - 519)) | (1 << (self::STORAGE - 519)) | (1 << (self::STRING - 519)) | (1 << (self::SUBCLASS_ORIGIN - 519)) | (1 << (self::SUBJECT - 519)) | (1 << (self::SUBPARTITION - 519)) | (1 << (self::SUBPARTITIONS - 519)) | (1 << (self::SUSPEND - 519)) | (1 << (self::SWAPS - 519)) | (1 << (self::SWITCHES - 519)) | (1 << (self::TABLE_NAME - 519)) | (1 << (self::TABLESPACE - 519)) | (1 << (self::TEMPORARY - 519)) | (1 << (self::TEMPTABLE - 519)) | (1 << (self::THAN - 519)) | (1 << (self::TRADITIONAL - 519)) | (1 << (self::TRANSACTION - 519)) | (1 << (self::TRIGGERS - 519)) | (1 << (self::TRUNCATE - 519)) | (1 << (self::UNDEFINED - 519)) | (1 << (self::UNDOFILE - 519)) | (1 << (self::UNDO_BUFFER_SIZE - 519)) | (1 << (self::UNINSTALL - 519)) | (1 << (self::UNKNOWN - 519)) | (1 << (self::UNTIL - 519)) | (1 << (self::UPGRADE - 519)) | (1 << (self::USER - 519)) | (1 << (self::USE_FRM - 519)) | (1 << (self::USER_RESOURCES - 519)) | (1 << (self::VALIDATION - 519)) | (1 << (self::VALUE - 519)) | (1 << (self::VARIABLES - 519)) | (1 << (self::VIEW - 519)) | (1 << (self::VISIBLE - 519)))) !== 0) || (((($_la - 583)) & ~0x3f) === 0 && ((1 << ($_la - 583)) & ((1 << (self::WAIT - 583)) | (1 << (self::WARNINGS - 583)) | (1 << (self::WITHOUT - 583)) | (1 << (self::WORK - 583)) | (1 << (self::WRAPPER - 583)) | (1 << (self::X509 - 583)) | (1 << (self::XA - 583)) | (1 << (self::XML - 583)) | (1 << (self::INTERNAL - 583)) | (1 << (self::QUARTER - 583)) | (1 << (self::MONTH - 583)) | (1 << (self::DAY - 583)) | (1 << (self::HOUR - 583)) | (1 << (self::MINUTE - 583)) | (1 << (self::WEEK - 583)) | (1 << (self::SECOND - 583)) | (1 << (self::MICROSECOND - 583)) | (1 << (self::TABLES - 583)) | (1 << (self::ROUTINE - 583)) | (1 << (self::EXECUTE - 583)) | (1 << (self::FILE - 583)) | (1 << (self::PROCESS - 583)) | (1 << (self::RELOAD - 583)) | (1 << (self::SHUTDOWN - 583)) | (1 << (self::SUPER - 583)) | (1 << (self::PRIVILEGES - 583)) | (1 << (self::SESSION_VARIABLES_ADMIN - 583)) | (1 << (self::ARMSCII8 - 583)) | (1 << (self::ASCII - 583)) | (1 << (self::BIG5 - 583)) | (1 << (self::CP1250 - 583)) | (1 << (self::CP1251 - 583)) | (1 << (self::CP1256 - 583)) | (1 << (self::CP1257 - 583)) | (1 << (self::CP850 - 583)))) !== 0) || (((($_la - 647)) & ~0x3f) === 0 && ((1 << ($_la - 647)) & ((1 << (self::CP852 - 647)) | (1 << (self::CP866 - 647)) | (1 << (self::CP932 - 647)) | (1 << (self::DEC8 - 647)) | (1 << (self::EUCJPMS - 647)) | (1 << (self::EUCKR - 647)) | (1 << (self::GB2312 - 647)) | (1 << (self::GBK - 647)) | (1 << (self::GEOSTD8 - 647)) | (1 << (self::GREEK - 647)) | (1 << (self::HEBREW - 647)) | (1 << (self::HP8 - 647)) | (1 << (self::KEYBCS2 - 647)) | (1 << (self::KOI8R - 647)) | (1 << (self::KOI8U - 647)) | (1 << (self::LATIN1 - 647)) | (1 << (self::LATIN2 - 647)) | (1 << (self::LATIN5 - 647)) | (1 << (self::LATIN7 - 647)) | (1 << (self::MACCE - 647)) | (1 << (self::MACROMAN - 647)) | (1 << (self::SJIS - 647)) | (1 << (self::SWE7 - 647)) | (1 << (self::TIS620 - 647)) | (1 << (self::UCS2 - 647)) | (1 << (self::UJIS - 647)) | (1 << (self::UTF16 - 647)) | (1 << (self::UTF16LE - 647)) | (1 << (self::UTF32 - 647)) | (1 << (self::UTF8 - 647)) | (1 << (self::UTF8MB3 - 647)) | (1 << (self::UTF8MB4 - 647)) | (1 << (self::ARCHIVE - 647)) | (1 << (self::BLACKHOLE - 647)) | (1 << (self::CSV - 647)) | (1 << (self::FEDERATED - 647)) | (1 << (self::INNODB - 647)) | (1 << (self::MEMORY - 647)) | (1 << (self::MRG_MYISAM - 647)) | (1 << (self::MYISAM - 647)) | (1 << (self::NDB - 647)) | (1 << (self::NDBCLUSTER - 647)) | (1 << (self::PERFORMANCE_SCHEMA - 647)) | (1 << (self::TOKUDB - 647)) | (1 << (self::REPEATABLE - 647)) | (1 << (self::COMMITTED - 647)) | (1 << (self::UNCOMMITTED - 647)) | (1 << (self::SERIALIZABLE - 647)) | (1 << (self::GEOMETRYCOLLECTION - 647)) | (1 << (self::LINESTRING - 647)) | (1 << (self::MULTILINESTRING - 647)) | (1 << (self::MULTIPOINT - 647)) | (1 << (self::MULTIPOLYGON - 647)) | (1 << (self::POINT - 647)) | (1 << (self::POLYGON - 647)) | (1 << (self::ABS - 647)) | (1 << (self::ACOS - 647)) | (1 << (self::ADDDATE - 647)) | (1 << (self::ADDTIME - 647)) | (1 << (self::AES_DECRYPT - 647)) | (1 << (self::AES_ENCRYPT - 647)) | (1 << (self::AREA - 647)))) !== 0) || (((($_la - 711)) & ~0x3f) === 0 && ((1 << ($_la - 711)) & ((1 << (self::ASBINARY - 711)) | (1 << (self::ASIN - 711)) | (1 << (self::ASTEXT - 711)) | (1 << (self::ASWKB - 711)) | (1 << (self::ASWKT - 711)) | (1 << (self::ASYMMETRIC_DECRYPT - 711)) | (1 << (self::ASYMMETRIC_DERIVE - 711)) | (1 << (self::ASYMMETRIC_ENCRYPT - 711)) | (1 << (self::ASYMMETRIC_SIGN - 711)) | (1 << (self::ASYMMETRIC_VERIFY - 711)) | (1 << (self::ATAN - 711)) | (1 << (self::ATAN2 - 711)) | (1 << (self::BENCHMARK - 711)) | (1 << (self::BIN - 711)) | (1 << (self::BIT_COUNT - 711)) | (1 << (self::BIT_LENGTH - 711)) | (1 << (self::BUFFER - 711)) | (1 << (self::CATALOG_NAME - 711)) | (1 << (self::CEIL - 711)) | (1 << (self::CEILING - 711)) | (1 << (self::CENTROID - 711)) | (1 << (self::CHARACTER_LENGTH - 711)) | (1 << (self::CHARSET - 711)) | (1 << (self::CHAR_LENGTH - 711)) | (1 << (self::COERCIBILITY - 711)) | (1 << (self::COLLATION - 711)) | (1 << (self::COMPRESS - 711)) | (1 << (self::CONCAT - 711)) | (1 << (self::CONCAT_WS - 711)) | (1 << (self::CONNECTION_ID - 711)) | (1 << (self::CONV - 711)) | (1 << (self::CONVERT_TZ - 711)) | (1 << (self::COS - 711)) | (1 << (self::COT - 711)) | (1 << (self::CRC32 - 711)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 711)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 711)) | (1 << (self::CREATE_DH_PARAMETERS - 711)) | (1 << (self::CREATE_DIGEST - 711)) | (1 << (self::CROSSES - 711)) | (1 << (self::DATEDIFF - 711)) | (1 << (self::DATE_FORMAT - 711)) | (1 << (self::DAYNAME - 711)) | (1 << (self::DAYOFMONTH - 711)) | (1 << (self::DAYOFWEEK - 711)) | (1 << (self::DAYOFYEAR - 711)) | (1 << (self::DECODE - 711)) | (1 << (self::DEGREES - 711)) | (1 << (self::DES_DECRYPT - 711)) | (1 << (self::DES_ENCRYPT - 711)) | (1 << (self::DIMENSION - 711)) | (1 << (self::DISJOINT - 711)) | (1 << (self::ELT - 711)) | (1 << (self::ENCODE - 711)) | (1 << (self::ENCRYPT - 711)) | (1 << (self::ENDPOINT - 711)) | (1 << (self::ENVELOPE - 711)) | (1 << (self::EQUALS - 711)) | (1 << (self::EXP - 711)) | (1 << (self::EXPORT_SET - 711)) | (1 << (self::EXTERIORRING - 711)) | (1 << (self::EXTRACTVALUE - 711)) | (1 << (self::FIELD - 711)) | (1 << (self::FIND_IN_SET - 711)))) !== 0) || (((($_la - 775)) & ~0x3f) === 0 && ((1 << ($_la - 775)) & ((1 << (self::FLOOR - 775)) | (1 << (self::FORMAT - 775)) | (1 << (self::FOUND_ROWS - 775)) | (1 << (self::FROM_BASE64 - 775)) | (1 << (self::FROM_DAYS - 775)) | (1 << (self::FROM_UNIXTIME - 775)) | (1 << (self::GEOMCOLLFROMTEXT - 775)) | (1 << (self::GEOMCOLLFROMWKB - 775)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 775)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 775)) | (1 << (self::GEOMETRYFROMTEXT - 775)) | (1 << (self::GEOMETRYFROMWKB - 775)) | (1 << (self::GEOMETRYN - 775)) | (1 << (self::GEOMETRYTYPE - 775)) | (1 << (self::GEOMFROMTEXT - 775)) | (1 << (self::GEOMFROMWKB - 775)) | (1 << (self::GET_FORMAT - 775)) | (1 << (self::GET_LOCK - 775)) | (1 << (self::GLENGTH - 775)) | (1 << (self::GREATEST - 775)) | (1 << (self::GTID_SUBSET - 775)) | (1 << (self::GTID_SUBTRACT - 775)) | (1 << (self::HEX - 775)) | (1 << (self::IFNULL - 775)) | (1 << (self::INET6_ATON - 775)) | (1 << (self::INET6_NTOA - 775)) | (1 << (self::INET_ATON - 775)) | (1 << (self::INET_NTOA - 775)) | (1 << (self::INSTR - 775)) | (1 << (self::INTERIORRINGN - 775)) | (1 << (self::INTERSECTS - 775)) | (1 << (self::ISCLOSED - 775)) | (1 << (self::ISEMPTY - 775)) | (1 << (self::ISNULL - 775)) | (1 << (self::ISSIMPLE - 775)) | (1 << (self::IS_FREE_LOCK - 775)) | (1 << (self::IS_IPV4 - 775)) | (1 << (self::IS_IPV4_COMPAT - 775)) | (1 << (self::IS_IPV4_MAPPED - 775)) | (1 << (self::IS_IPV6 - 775)) | (1 << (self::IS_USED_LOCK - 775)) | (1 << (self::LAST_INSERT_ID - 775)) | (1 << (self::LCASE - 775)) | (1 << (self::LEAST - 775)) | (1 << (self::LENGTH - 775)) | (1 << (self::LINEFROMTEXT - 775)) | (1 << (self::LINEFROMWKB - 775)) | (1 << (self::LINESTRINGFROMTEXT - 775)) | (1 << (self::LINESTRINGFROMWKB - 775)) | (1 << (self::LN - 775)) | (1 << (self::LOAD_FILE - 775)) | (1 << (self::LOCATE - 775)) | (1 << (self::LOG - 775)) | (1 << (self::LOG10 - 775)) | (1 << (self::LOG2 - 775)) | (1 << (self::LOWER - 775)) | (1 << (self::LPAD - 775)) | (1 << (self::LTRIM - 775)) | (1 << (self::MAKEDATE - 775)) | (1 << (self::MAKETIME - 775)) | (1 << (self::MAKE_SET - 775)) | (1 << (self::MASTER_POS_WAIT - 775)) | (1 << (self::MBRCONTAINS - 775)) | (1 << (self::MBRDISJOINT - 775)))) !== 0) || (((($_la - 839)) & ~0x3f) === 0 && ((1 << ($_la - 839)) & ((1 << (self::MBREQUAL - 839)) | (1 << (self::MBRINTERSECTS - 839)) | (1 << (self::MBROVERLAPS - 839)) | (1 << (self::MBRTOUCHES - 839)) | (1 << (self::MBRWITHIN - 839)) | (1 << (self::MD5 - 839)) | (1 << (self::MLINEFROMTEXT - 839)) | (1 << (self::MLINEFROMWKB - 839)) | (1 << (self::MONTHNAME - 839)) | (1 << (self::MPOINTFROMTEXT - 839)) | (1 << (self::MPOINTFROMWKB - 839)) | (1 << (self::MPOLYFROMTEXT - 839)) | (1 << (self::MPOLYFROMWKB - 839)) | (1 << (self::MULTILINESTRINGFROMTEXT - 839)) | (1 << (self::MULTILINESTRINGFROMWKB - 839)) | (1 << (self::MULTIPOINTFROMTEXT - 839)) | (1 << (self::MULTIPOINTFROMWKB - 839)) | (1 << (self::MULTIPOLYGONFROMTEXT - 839)) | (1 << (self::MULTIPOLYGONFROMWKB - 839)) | (1 << (self::NAME_CONST - 839)) | (1 << (self::NULLIF - 839)) | (1 << (self::NUMGEOMETRIES - 839)) | (1 << (self::NUMINTERIORRINGS - 839)) | (1 << (self::NUMPOINTS - 839)) | (1 << (self::OCT - 839)) | (1 << (self::OCTET_LENGTH - 839)) | (1 << (self::ORD - 839)) | (1 << (self::OVERLAPS - 839)) | (1 << (self::PERIOD_ADD - 839)) | (1 << (self::PERIOD_DIFF - 839)) | (1 << (self::PI - 839)) | (1 << (self::POINTFROMTEXT - 839)) | (1 << (self::POINTFROMWKB - 839)) | (1 << (self::POINTN - 839)) | (1 << (self::POLYFROMTEXT - 839)) | (1 << (self::POLYFROMWKB - 839)) | (1 << (self::POLYGONFROMTEXT - 839)) | (1 << (self::POLYGONFROMWKB - 839)) | (1 << (self::POW - 839)) | (1 << (self::POWER - 839)) | (1 << (self::QUOTE - 839)) | (1 << (self::RADIANS - 839)) | (1 << (self::RAND - 839)) | (1 << (self::RANDOM_BYTES - 839)) | (1 << (self::RELEASE_LOCK - 839)) | (1 << (self::REVERSE - 839)) | (1 << (self::ROUND - 839)) | (1 << (self::ROW_COUNT - 839)) | (1 << (self::RPAD - 839)) | (1 << (self::RTRIM - 839)) | (1 << (self::SEC_TO_TIME - 839)) | (1 << (self::SESSION_USER - 839)) | (1 << (self::SHA - 839)) | (1 << (self::SHA1 - 839)) | (1 << (self::SHA2 - 839)) | (1 << (self::SCHEMA_NAME - 839)) | (1 << (self::SIGN - 839)) | (1 << (self::SIN - 839)) | (1 << (self::SLEEP - 839)) | (1 << (self::SOUNDEX - 839)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 839)) | (1 << (self::SQRT - 839)) | (1 << (self::SRID - 839)) | (1 << (self::STARTPOINT - 839)))) !== 0) || (((($_la - 903)) & ~0x3f) === 0 && ((1 << ($_la - 903)) & ((1 << (self::STRCMP - 903)) | (1 << (self::STR_TO_DATE - 903)) | (1 << (self::ST_AREA - 903)) | (1 << (self::ST_ASBINARY - 903)) | (1 << (self::ST_ASTEXT - 903)) | (1 << (self::ST_ASWKB - 903)) | (1 << (self::ST_ASWKT - 903)) | (1 << (self::ST_BUFFER - 903)) | (1 << (self::ST_CENTROID - 903)) | (1 << (self::ST_CONTAINS - 903)) | (1 << (self::ST_CROSSES - 903)) | (1 << (self::ST_DIFFERENCE - 903)) | (1 << (self::ST_DIMENSION - 903)) | (1 << (self::ST_DISJOINT - 903)) | (1 << (self::ST_DISTANCE - 903)) | (1 << (self::ST_ENDPOINT - 903)) | (1 << (self::ST_ENVELOPE - 903)) | (1 << (self::ST_EQUALS - 903)) | (1 << (self::ST_EXTERIORRING - 903)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 903)) | (1 << (self::ST_GEOMCOLLFROMTXT - 903)) | (1 << (self::ST_GEOMCOLLFROMWKB - 903)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 903)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 903)) | (1 << (self::ST_GEOMETRYFROMTEXT - 903)) | (1 << (self::ST_GEOMETRYFROMWKB - 903)) | (1 << (self::ST_GEOMETRYN - 903)) | (1 << (self::ST_GEOMETRYTYPE - 903)) | (1 << (self::ST_GEOMFROMTEXT - 903)) | (1 << (self::ST_GEOMFROMWKB - 903)) | (1 << (self::ST_INTERIORRINGN - 903)) | (1 << (self::ST_INTERSECTION - 903)) | (1 << (self::ST_INTERSECTS - 903)) | (1 << (self::ST_ISCLOSED - 903)) | (1 << (self::ST_ISEMPTY - 903)) | (1 << (self::ST_ISSIMPLE - 903)) | (1 << (self::ST_LINEFROMTEXT - 903)) | (1 << (self::ST_LINEFROMWKB - 903)) | (1 << (self::ST_LINESTRINGFROMTEXT - 903)) | (1 << (self::ST_LINESTRINGFROMWKB - 903)) | (1 << (self::ST_NUMGEOMETRIES - 903)) | (1 << (self::ST_NUMINTERIORRING - 903)) | (1 << (self::ST_NUMINTERIORRINGS - 903)) | (1 << (self::ST_NUMPOINTS - 903)) | (1 << (self::ST_OVERLAPS - 903)) | (1 << (self::ST_POINTFROMTEXT - 903)) | (1 << (self::ST_POINTFROMWKB - 903)) | (1 << (self::ST_POINTN - 903)) | (1 << (self::ST_POLYFROMTEXT - 903)) | (1 << (self::ST_POLYFROMWKB - 903)) | (1 << (self::ST_POLYGONFROMTEXT - 903)) | (1 << (self::ST_POLYGONFROMWKB - 903)) | (1 << (self::ST_SRID - 903)) | (1 << (self::ST_STARTPOINT - 903)) | (1 << (self::ST_SYMDIFFERENCE - 903)) | (1 << (self::ST_TOUCHES - 903)) | (1 << (self::ST_UNION - 903)) | (1 << (self::ST_WITHIN - 903)) | (1 << (self::ST_X - 903)) | (1 << (self::ST_Y - 903)) | (1 << (self::SUBDATE - 903)) | (1 << (self::SUBSTRING_INDEX - 903)) | (1 << (self::SUBTIME - 903)) | (1 << (self::SYSTEM_USER - 903)))) !== 0) || (((($_la - 967)) & ~0x3f) === 0 && ((1 << ($_la - 967)) & ((1 << (self::TAN - 967)) | (1 << (self::TIMEDIFF - 967)) | (1 << (self::TIMESTAMPADD - 967)) | (1 << (self::TIMESTAMPDIFF - 967)) | (1 << (self::TIME_FORMAT - 967)) | (1 << (self::TIME_TO_SEC - 967)) | (1 << (self::TOUCHES - 967)) | (1 << (self::TO_BASE64 - 967)) | (1 << (self::TO_DAYS - 967)) | (1 << (self::TO_SECONDS - 967)) | (1 << (self::UCASE - 967)) | (1 << (self::UNCOMPRESS - 967)) | (1 << (self::UNCOMPRESSED_LENGTH - 967)) | (1 << (self::UNHEX - 967)) | (1 << (self::UNIX_TIMESTAMP - 967)) | (1 << (self::UPDATEXML - 967)) | (1 << (self::UPPER - 967)) | (1 << (self::UUID - 967)) | (1 << (self::UUID_SHORT - 967)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 967)) | (1 << (self::VERSION - 967)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 967)) | (1 << (self::WEEKDAY - 967)) | (1 << (self::WEEKOFYEAR - 967)) | (1 << (self::WEIGHT_STRING - 967)) | (1 << (self::WITHIN - 967)) | (1 << (self::YEARWEEK - 967)) | (1 << (self::Y_FUNCTION - 967)) | (1 << (self::X_FUNCTION - 967)) | (1 << (self::PLUS - 967)) | (1 << (self::MINUS - 967)) | (1 << (self::EXCLAMATION_SYMBOL - 967)) | (1 << (self::BIT_NOT_OP - 967)) | (1 << (self::LR_BRACKET - 967)) | (1 << (self::ZERO_DECIMAL - 967)) | (1 << (self::ONE_DECIMAL - 967)) | (1 << (self::TWO_DECIMAL - 967)))) !== 0) || (((($_la - 1034)) & ~0x3f) === 0 && ((1 << ($_la - 1034)) & ((1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1034)) | (1 << (self::START_NATIONAL_STRING_LITERAL - 1034)) | (1 << (self::STRING_LITERAL - 1034)) | (1 << (self::DECIMAL_LITERAL - 1034)) | (1 << (self::HEXADECIMAL_LITERAL - 1034)) | (1 << (self::REAL_LITERAL - 1034)) | (1 << (self::NULL_SPEC_LITERAL - 1034)) | (1 << (self::BIT_STRING - 1034)) | (1 << (self::STRING_CHARSET_NAME - 1034)) | (1 << (self::ID - 1034)) | (1 << (self::REVERSE_QUOTE_ID - 1034)) | (1 << (self::LOCAL_ID - 1034)) | (1 << (self::GLOBAL_ID - 1034)))) !== 0)) {
		        	    	$this->setState(5819);
		        	    	$this->functionArgs();
		        	    }
		        	    $this->setState(5822);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 5:
		        	    $localContext = new Context\PasswordFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(5824);
		        	    $this->passwordFunctionClause();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function specificFunction() : Context\SpecificFunctionContext
		{
		    $localContext = new Context\SpecificFunctionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 584, self::RULE_specificFunction);

		    try {
		        $this->setState(5984);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 883, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\SimpleFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5827);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::CURRENT_USER || (((($_la - 251)) & ~0x3f) === 0 && ((1 << ($_la - 251)) & ((1 << (self::CURRENT_DATE - 251)) | (1 << (self::CURRENT_TIME - 251)) | (1 << (self::CURRENT_TIMESTAMP - 251)) | (1 << (self::LOCALTIME - 251)))) !== 0))) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\DataTypeFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(5828);
		        	    $this->match(self::CONVERT);
		        	    $this->setState(5829);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5830);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(5831);
		        	    $localContext->separator = $this->match(self::COMMA);
		        	    $this->setState(5832);
		        	    $this->convertedDataType();
		        	    $this->setState(5833);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 3:
		        	    $localContext = new Context\DataTypeFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(5835);
		        	    $this->match(self::CONVERT);
		        	    $this->setState(5836);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5837);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(5838);
		        	    $this->match(self::USING);
		        	    $this->setState(5839);
		        	    $this->charsetName();
		        	    $this->setState(5840);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 4:
		        	    $localContext = new Context\DataTypeFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(5842);
		        	    $this->match(self::CAST);
		        	    $this->setState(5843);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5844);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(5845);
		        	    $this->match(self::AS);
		        	    $this->setState(5846);
		        	    $this->convertedDataType();
		        	    $this->setState(5847);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 5:
		        	    $localContext = new Context\ValuesFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(5849);
		        	    $this->match(self::VALUES);
		        	    $this->setState(5850);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5851);
		        	    $this->fullColumnName();
		        	    $this->setState(5852);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 6:
		        	    $localContext = new Context\CaseFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(5854);
		        	    $this->match(self::CASE);
		        	    $this->setState(5855);
		        	    $this->recursiveExpression(0);
		        	    $this->setState(5857); 
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    do {
		        	    	$this->setState(5856);
		        	    	$this->caseFuncAlternative();
		        	    	$this->setState(5859); 
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    } while ($_la === self::WHEN);
		        	    $this->setState(5863);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ELSE) {
		        	    	$this->setState(5861);
		        	    	$this->match(self::ELSE);
		        	    	$this->setState(5862);
		        	    	$localContext->elseArg = $this->functionArg();
		        	    }
		        	    $this->setState(5865);
		        	    $this->match(self::END);
		        	break;

		        	case 7:
		        	    $localContext = new Context\CaseFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(5867);
		        	    $this->match(self::CASE);
		        	    $this->setState(5869); 
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    do {
		        	    	$this->setState(5868);
		        	    	$this->caseFuncAlternative();
		        	    	$this->setState(5871); 
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    } while ($_la === self::WHEN);
		        	    $this->setState(5875);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ELSE) {
		        	    	$this->setState(5873);
		        	    	$this->match(self::ELSE);
		        	    	$this->setState(5874);
		        	    	$localContext->elseArg = $this->functionArg();
		        	    }
		        	    $this->setState(5877);
		        	    $this->match(self::END);
		        	break;

		        	case 8:
		        	    $localContext = new Context\CharFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(5879);
		        	    $this->match(self::CHAR);
		        	    $this->setState(5880);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5881);
		        	    $this->functionArgs();
		        	    $this->setState(5884);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::USING) {
		        	    	$this->setState(5882);
		        	    	$this->match(self::USING);
		        	    	$this->setState(5883);
		        	    	$this->charsetName();
		        	    }
		        	    $this->setState(5886);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 9:
		        	    $localContext = new Context\PositionFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 9);
		        	    $this->setState(5888);
		        	    $this->match(self::POSITION);
		        	    $this->setState(5889);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5892);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 869, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(5890);
		        	    	    $localContext->positionString = $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(5891);
		        	    	    $localContext->positionExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(5894);
		        	    $this->match(self::IN);
		        	    $this->setState(5897);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 870, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(5895);
		        	    	    $localContext->inString = $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(5896);
		        	    	    $localContext->inExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(5899);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 10:
		        	    $localContext = new Context\SubstrFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 10);
		        	    $this->setState(5901);

		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::SUBSTR || $_la === self::SUBSTRING)) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5902);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5905);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 871, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(5903);
		        	    	    $localContext->sourceString = $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(5904);
		        	    	    $localContext->sourceExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(5907);
		        	    $this->match(self::FROM);
		        	    $this->setState(5910);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 872, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(5908);
		        	    	    $localContext->fromDecimal = $this->decimalLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(5909);
		        	    	    $localContext->fromExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(5917);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::FOR) {
		        	    	$this->setState(5912);
		        	    	$this->match(self::FOR);
		        	    	$this->setState(5915);
		        	    	$this->errorHandler->sync($this);

		        	    	switch ($this->getInterpreter()->adaptivePredict($this->input, 873, $this->ctx)) {
		        	    		case 1:
		        	    		    $this->setState(5913);
		        	    		    $localContext->forDecimal = $this->decimalLiteral();
		        	    		break;

		        	    		case 2:
		        	    		    $this->setState(5914);
		        	    		    $localContext->forExpression = $this->recursiveExpression(0);
		        	    		break;
		        	    	}
		        	    }
		        	    $this->setState(5919);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 11:
		        	    $localContext = new Context\TrimFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 11);
		        	    $this->setState(5921);
		        	    $this->match(self::TRIM);
		        	    $this->setState(5922);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5923);

		        	    $localContext->positioinForm = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!($_la === self::BOTH || $_la === self::LEADING || $_la === self::TRAILING)) {
		        	    	    $localContext->positioinForm = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5926);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 875, $this->ctx)) {
		        	        case 1:
		        	    	    $this->setState(5924);
		        	    	    $localContext->sourceString = $this->stringLiteral();
		        	    	break;

		        	        case 2:
		        	    	    $this->setState(5925);
		        	    	    $localContext->sourceExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(5928);
		        	    $this->match(self::FROM);
		        	    $this->setState(5931);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 876, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(5929);
		        	    	    $localContext->fromString = $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(5930);
		        	    	    $localContext->fromExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(5933);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 12:
		        	    $localContext = new Context\TrimFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 12);
		        	    $this->setState(5935);
		        	    $this->match(self::TRIM);
		        	    $this->setState(5936);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5939);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 877, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(5937);
		        	    	    $localContext->sourceString = $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(5938);
		        	    	    $localContext->sourceExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(5941);
		        	    $this->match(self::FROM);
		        	    $this->setState(5944);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 878, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(5942);
		        	    	    $localContext->fromString = $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(5943);
		        	    	    $localContext->fromExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(5946);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 13:
		        	    $localContext = new Context\WeightFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 13);
		        	    $this->setState(5948);
		        	    $this->match(self::WEIGHT_STRING);
		        	    $this->setState(5949);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5952);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 879, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(5950);
		        	    	    $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(5951);
		        	    	    $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(5960);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::AS) {
		        	    	$this->setState(5954);
		        	    	$this->match(self::AS);
		        	    	$this->setState(5955);

		        	    	$localContext->stringFormat = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::CHAR || $_la === self::BINARY)) {
		        	    		    $localContext->stringFormat = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    	$this->setState(5956);
		        	    	$this->match(self::LR_BRACKET);
		        	    	$this->setState(5957);
		        	    	$this->decimalLiteral();
		        	    	$this->setState(5958);
		        	    	$this->match(self::RR_BRACKET);
		        	    }
		        	    $this->setState(5963);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::LEVEL) {
		        	    	$this->setState(5962);
		        	    	$this->levelsInWeightString();
		        	    }
		        	    $this->setState(5965);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 14:
		        	    $localContext = new Context\ExtractFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 14);
		        	    $this->setState(5967);
		        	    $this->match(self::EXTRACT);
		        	    $this->setState(5968);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5969);
		        	    $this->intervalType();
		        	    $this->setState(5970);
		        	    $this->match(self::FROM);
		        	    $this->setState(5973);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->getInterpreter()->adaptivePredict($this->input, 882, $this->ctx)) {
		        	    	case 1:
		        	    	    $this->setState(5971);
		        	    	    $localContext->sourceString = $this->stringLiteral();
		        	    	break;

		        	    	case 2:
		        	    	    $this->setState(5972);
		        	    	    $localContext->sourceExpression = $this->recursiveExpression(0);
		        	    	break;
		        	    }
		        	    $this->setState(5975);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 15:
		        	    $localContext = new Context\GetFormatFunctionCallContext($localContext);
		        	    $this->enterOuterAlt($localContext, 15);
		        	    $this->setState(5977);
		        	    $this->match(self::GET_FORMAT);
		        	    $this->setState(5978);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(5979);

		        	    $localContext->datetimeFormat = $this->input->LT(1);
		        	    $_la = $this->input->LA(1);

		        	    if (!((((($_la - 199)) & ~0x3f) === 0 && ((1 << ($_la - 199)) & ((1 << (self::DATE - 199)) | (1 << (self::TIME - 199)) | (1 << (self::DATETIME - 199)))) !== 0))) {
		        	    	    $localContext->datetimeFormat = $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(5980);
		        	    $this->match(self::COMMA);
		        	    $this->setState(5981);
		        	    $this->stringLiteral();
		        	    $this->setState(5982);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function caseFuncAlternative() : Context\CaseFuncAlternativeContext
		{
		    $localContext = new Context\CaseFuncAlternativeContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 586, self::RULE_caseFuncAlternative);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(5986);
		        $this->match(self::WHEN);
		        $this->setState(5987);
		        $localContext->condition = $this->functionArg();
		        $this->setState(5988);
		        $this->match(self::THEN);
		        $this->setState(5989);
		        $localContext->consequent = $this->functionArg();
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function levelsInWeightString() : Context\LevelsInWeightStringContext
		{
		    $localContext = new Context\LevelsInWeightStringContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 588, self::RULE_levelsInWeightString);

		    try {
		        $this->setState(6005);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 885, $this->ctx)) {
		        	case 1:
		        	    $localContext = new Context\LevelWeightListContext($localContext);
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(5991);
		        	    $this->match(self::LEVEL);
		        	    $this->setState(5992);
		        	    $this->levelInWeightListElement();
		        	    $this->setState(5997);
		        	    $this->errorHandler->sync($this);

		        	    $_la = $this->input->LA(1);
		        	    while ($_la === self::COMMA) {
		        	    	$this->setState(5993);
		        	    	$this->match(self::COMMA);
		        	    	$this->setState(5994);
		        	    	$this->levelInWeightListElement();
		        	    	$this->setState(5999);
		        	    	$this->errorHandler->sync($this);
		        	    	$_la = $this->input->LA(1);
		        	    }
		        	break;

		        	case 2:
		        	    $localContext = new Context\LevelWeightRangeContext($localContext);
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6000);
		        	    $this->match(self::LEVEL);
		        	    $this->setState(6001);
		        	    $localContext->firstLevel = $this->decimalLiteral();
		        	    $this->setState(6002);
		        	    $this->match(self::MINUS);
		        	    $this->setState(6003);
		        	    $localContext->lastLevel = $this->decimalLiteral();
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function levelInWeightListElement() : Context\LevelInWeightListElementContext
		{
		    $localContext = new Context\LevelInWeightListElementContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 590, self::RULE_levelInWeightListElement);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6007);
		        $this->decimalLiteral();
		        $this->setState(6009);
		        $this->errorHandler->sync($this);
		        $_la = $this->input->LA(1);

		        if ($_la === self::ASC || $_la === self::DESC || $_la === self::REVERSE) {
		        	$this->setState(6008);

		        	$localContext->orderType = $this->input->LT(1);
		        	$_la = $this->input->LA(1);

		        	if (!($_la === self::ASC || $_la === self::DESC || $_la === self::REVERSE)) {
		        		    $localContext->orderType = $this->errorHandler->recoverInline($this);
		        	} else {
		        		if ($this->input->LA(1) === Token::EOF) {
		        		    $this->matchedEOF = true;
		        	    }

		        		$this->errorHandler->reportMatch($this);
		        		$this->consume();
		        	}
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function aggregateWindowedFunction() : Context\AggregateWindowedFunctionContext
		{
		    $localContext = new Context\AggregateWindowedFunctionContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 592, self::RULE_aggregateWindowedFunction);

		    try {
		        $this->setState(6067);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 895, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6011);

		        	    $_la = $this->input->LA(1);

		        	    if (!((((($_la - 235)) & ~0x3f) === 0 && ((1 << ($_la - 235)) & ((1 << (self::AVG - 235)) | (1 << (self::MAX - 235)) | (1 << (self::MIN - 235)) | (1 << (self::SUM - 235)))) !== 0))) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6012);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6014);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ALL || $_la === self::DISTINCT) {
		        	    	$this->setState(6013);

		        	    	$localContext->aggregator = $this->input->LT(1);
		        	    	$_la = $this->input->LA(1);

		        	    	if (!($_la === self::ALL || $_la === self::DISTINCT)) {
		        	    		    $localContext->aggregator = $this->errorHandler->recoverInline($this);
		        	    	} else {
		        	    		if ($this->input->LA(1) === Token::EOF) {
		        	    		    $this->matchedEOF = true;
		        	    	    }

		        	    		$this->errorHandler->reportMatch($this);
		        	    		$this->consume();
		        	    	}
		        	    }
		        	    $this->setState(6016);
		        	    $this->functionArg();
		        	    $this->setState(6017);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6019);
		        	    $this->match(self::COUNT);
		        	    $this->setState(6020);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6026);
		        	    $this->errorHandler->sync($this);

		        	    switch ($this->input->LA(1)) {
		        	        case self::STAR:
		        	        	$this->setState(6021);
		        	        	$localContext->starArg = $this->match(self::STAR);
		        	        	break;

		        	        case self::ALL:
		        	        case self::CASE:
		        	        case self::CAST:
		        	        case self::CONVERT:
		        	        case self::CURRENT:
		        	        case self::CURRENT_USER:
		        	        case self::DATABASE:
		        	        case self::DIAGNOSTICS:
		        	        case self::EXISTS:
		        	        case self::FALSE:
		        	        case self::IF:
		        	        case self::INSERT:
		        	        case self::INTERVAL:
		        	        case self::LEFT:
		        	        case self::NOT:
		        	        case self::NULL_LITERAL:
		        	        case self::NUMBER:
		        	        case self::REPLACE:
		        	        case self::RIGHT:
		        	        case self::STACKED:
		        	        case self::TRUE:
		        	        case self::VALUES:
		        	        case self::DATE:
		        	        case self::TIME:
		        	        case self::TIMESTAMP:
		        	        case self::DATETIME:
		        	        case self::YEAR:
		        	        case self::CHAR:
		        	        case self::BINARY:
		        	        case self::TEXT:
		        	        case self::ENUM:
		        	        case self::SERIAL:
		        	        case self::AVG:
		        	        case self::BIT_AND:
		        	        case self::BIT_OR:
		        	        case self::BIT_XOR:
		        	        case self::COUNT:
		        	        case self::GROUP_CONCAT:
		        	        case self::MAX:
		        	        case self::MIN:
		        	        case self::STD:
		        	        case self::STDDEV:
		        	        case self::STDDEV_POP:
		        	        case self::STDDEV_SAMP:
		        	        case self::SUM:
		        	        case self::VAR_POP:
		        	        case self::VAR_SAMP:
		        	        case self::VARIANCE:
		        	        case self::CURRENT_DATE:
		        	        case self::CURRENT_TIME:
		        	        case self::CURRENT_TIMESTAMP:
		        	        case self::LOCALTIME:
		        	        case self::CURDATE:
		        	        case self::CURTIME:
		        	        case self::DATE_ADD:
		        	        case self::DATE_SUB:
		        	        case self::EXTRACT:
		        	        case self::LOCALTIMESTAMP:
		        	        case self::NOW:
		        	        case self::POSITION:
		        	        case self::SUBSTR:
		        	        case self::SUBSTRING:
		        	        case self::SYSDATE:
		        	        case self::TRIM:
		        	        case self::UTC_DATE:
		        	        case self::UTC_TIME:
		        	        case self::UTC_TIMESTAMP:
		        	        case self::ACCOUNT:
		        	        case self::ACTION:
		        	        case self::AFTER:
		        	        case self::AGGREGATE:
		        	        case self::ALGORITHM:
		        	        case self::ANY:
		        	        case self::AT:
		        	        case self::AUTHORS:
		        	        case self::AUTOCOMMIT:
		        	        case self::AUTOEXTEND_SIZE:
		        	        case self::AUTO_INCREMENT:
		        	        case self::AVG_ROW_LENGTH:
		        	        case self::BEGIN:
		        	        case self::BINLOG:
		        	        case self::BIT:
		        	        case self::BLOCK:
		        	        case self::BOOL:
		        	        case self::BOOLEAN:
		        	        case self::BTREE:
		        	        case self::CACHE:
		        	        case self::CASCADED:
		        	        case self::CHAIN:
		        	        case self::CHANGED:
		        	        case self::CHANNEL:
		        	        case self::CHECKSUM:
		        	        case self::PAGE_CHECKSUM:
		        	        case self::CIPHER:
		        	        case self::CLASS_ORIGIN:
		        	        case self::CLIENT:
		        	        case self::CLOSE:
		        	        case self::COALESCE:
		        	        case self::CODE:
		        	        case self::COLUMNS:
		        	        case self::COLUMN_FORMAT:
		        	        case self::COLUMN_NAME:
		        	        case self::COMMENT:
		        	        case self::COMMIT:
		        	        case self::COMPACT:
		        	        case self::COMPLETION:
		        	        case self::COMPRESSED:
		        	        case self::COMPRESSION:
		        	        case self::CONCURRENT:
		        	        case self::CONNECTION:
		        	        case self::CONSISTENT:
		        	        case self::CONSTRAINT_CATALOG:
		        	        case self::CONSTRAINT_SCHEMA:
		        	        case self::CONSTRAINT_NAME:
		        	        case self::CONTAINS:
		        	        case self::CONTEXT:
		        	        case self::CONTRIBUTORS:
		        	        case self::COPY:
		        	        case self::CPU:
		        	        case self::CURSOR_NAME:
		        	        case self::DATA:
		        	        case self::DATAFILE:
		        	        case self::DEALLOCATE:
		        	        case self::DEFAULT_AUTH:
		        	        case self::DEFINER:
		        	        case self::DELAY_KEY_WRITE:
		        	        case self::DES_KEY_FILE:
		        	        case self::DIRECTORY:
		        	        case self::DISABLE:
		        	        case self::DISCARD:
		        	        case self::DISK:
		        	        case self::DO:
		        	        case self::DUMPFILE:
		        	        case self::DUPLICATE:
		        	        case self::DYNAMIC:
		        	        case self::ENABLE:
		        	        case self::ENCRYPTION:
		        	        case self::END:
		        	        case self::ENDS:
		        	        case self::ENGINE:
		        	        case self::ENGINES:
		        	        case self::ERROR:
		        	        case self::ERRORS:
		        	        case self::ESCAPE:
		        	        case self::EVEN:
		        	        case self::EVENT:
		        	        case self::EVENTS:
		        	        case self::EVERY:
		        	        case self::EXCHANGE:
		        	        case self::EXCLUSIVE:
		        	        case self::EXPIRE:
		        	        case self::EXPORT:
		        	        case self::EXTENDED:
		        	        case self::EXTENT_SIZE:
		        	        case self::FAST:
		        	        case self::FAULTS:
		        	        case self::FIELDS:
		        	        case self::FILE_BLOCK_SIZE:
		        	        case self::FILTER:
		        	        case self::FIRST:
		        	        case self::FIXED:
		        	        case self::FLUSH:
		        	        case self::FOLLOWS:
		        	        case self::FOUND:
		        	        case self::FULL:
		        	        case self::FUNCTION:
		        	        case self::GENERAL:
		        	        case self::GLOBAL:
		        	        case self::GRANTS:
		        	        case self::GROUP_REPLICATION:
		        	        case self::HANDLER:
		        	        case self::HASH:
		        	        case self::HELP:
		        	        case self::HOST:
		        	        case self::HOSTS:
		        	        case self::IDENTIFIED:
		        	        case self::IGNORE_SERVER_IDS:
		        	        case self::IMPORT:
		        	        case self::INDEXES:
		        	        case self::INITIAL_SIZE:
		        	        case self::INPLACE:
		        	        case self::INSERT_METHOD:
		        	        case self::INSTALL:
		        	        case self::INSTANCE:
		        	        case self::INVISIBLE:
		        	        case self::INVOKER:
		        	        case self::IO:
		        	        case self::IO_THREAD:
		        	        case self::IPC:
		        	        case self::ISOLATION:
		        	        case self::ISSUER:
		        	        case self::JSON:
		        	        case self::KEY_BLOCK_SIZE:
		        	        case self::LANGUAGE:
		        	        case self::LAST:
		        	        case self::LEAVES:
		        	        case self::LESS:
		        	        case self::LEVEL:
		        	        case self::LIST:
		        	        case self::LOCAL:
		        	        case self::LOGFILE:
		        	        case self::LOGS:
		        	        case self::MASTER:
		        	        case self::MASTER_AUTO_POSITION:
		        	        case self::MASTER_CONNECT_RETRY:
		        	        case self::MASTER_DELAY:
		        	        case self::MASTER_HEARTBEAT_PERIOD:
		        	        case self::MASTER_HOST:
		        	        case self::MASTER_LOG_FILE:
		        	        case self::MASTER_LOG_POS:
		        	        case self::MASTER_PASSWORD:
		        	        case self::MASTER_PORT:
		        	        case self::MASTER_RETRY_COUNT:
		        	        case self::MASTER_SSL:
		        	        case self::MASTER_SSL_CA:
		        	        case self::MASTER_SSL_CAPATH:
		        	        case self::MASTER_SSL_CERT:
		        	        case self::MASTER_SSL_CIPHER:
		        	        case self::MASTER_SSL_CRL:
		        	        case self::MASTER_SSL_CRLPATH:
		        	        case self::MASTER_SSL_KEY:
		        	        case self::MASTER_TLS_VERSION:
		        	        case self::MASTER_USER:
		        	        case self::MAX_CONNECTIONS_PER_HOUR:
		        	        case self::MAX_QUERIES_PER_HOUR:
		        	        case self::MAX_ROWS:
		        	        case self::MAX_SIZE:
		        	        case self::MAX_UPDATES_PER_HOUR:
		        	        case self::MAX_USER_CONNECTIONS:
		        	        case self::MEDIUM:
		        	        case self::MERGE:
		        	        case self::MESSAGE_TEXT:
		        	        case self::MID:
		        	        case self::MIGRATE:
		        	        case self::MIN_ROWS:
		        	        case self::MODE:
		        	        case self::MODIFY:
		        	        case self::MUTEX:
		        	        case self::MYSQL:
		        	        case self::MYSQL_ERRNO:
		        	        case self::NAME:
		        	        case self::NAMES:
		        	        case self::NCHAR:
		        	        case self::NEVER:
		        	        case self::NEXT:
		        	        case self::NO:
		        	        case self::NODEGROUP:
		        	        case self::NONE:
		        	        case self::OFFLINE:
		        	        case self::OFFSET:
		        	        case self::OJ:
		        	        case self::OLD_PASSWORD:
		        	        case self::ONE:
		        	        case self::ONLINE:
		        	        case self::ONLY:
		        	        case self::OPEN:
		        	        case self::OPTIMIZER_COSTS:
		        	        case self::OPTIONS:
		        	        case self::OWNER:
		        	        case self::PACK_KEYS:
		        	        case self::PAGE:
		        	        case self::PARSER:
		        	        case self::PARTIAL:
		        	        case self::PARTITIONING:
		        	        case self::PARTITIONS:
		        	        case self::PASSWORD:
		        	        case self::PHASE:
		        	        case self::PLUGIN:
		        	        case self::PLUGIN_DIR:
		        	        case self::PLUGINS:
		        	        case self::PORT:
		        	        case self::PRECEDES:
		        	        case self::PREPARE:
		        	        case self::PRESERVE:
		        	        case self::PREV:
		        	        case self::PROCESSLIST:
		        	        case self::PROFILE:
		        	        case self::PROFILES:
		        	        case self::PROXY:
		        	        case self::QUERY:
		        	        case self::QUICK:
		        	        case self::REBUILD:
		        	        case self::RECOVER:
		        	        case self::REDO_BUFFER_SIZE:
		        	        case self::REDUNDANT:
		        	        case self::RELAY:
		        	        case self::RELAY_LOG_FILE:
		        	        case self::RELAY_LOG_POS:
		        	        case self::RELAYLOG:
		        	        case self::REMOVE:
		        	        case self::REORGANIZE:
		        	        case self::REPAIR:
		        	        case self::REPLICATE_DO_DB:
		        	        case self::REPLICATE_DO_TABLE:
		        	        case self::REPLICATE_IGNORE_DB:
		        	        case self::REPLICATE_IGNORE_TABLE:
		        	        case self::REPLICATE_REWRITE_DB:
		        	        case self::REPLICATE_WILD_DO_TABLE:
		        	        case self::REPLICATE_WILD_IGNORE_TABLE:
		        	        case self::REPLICATION:
		        	        case self::RESET:
		        	        case self::RESUME:
		        	        case self::RETURNED_SQLSTATE:
		        	        case self::RETURNS:
		        	        case self::ROLLBACK:
		        	        case self::ROLLUP:
		        	        case self::ROTATE:
		        	        case self::ROW:
		        	        case self::ROWS:
		        	        case self::ROW_FORMAT:
		        	        case self::SAVEPOINT:
		        	        case self::SCHEDULE:
		        	        case self::SECURITY:
		        	        case self::SERVER:
		        	        case self::SESSION:
		        	        case self::SHARE:
		        	        case self::SHARED:
		        	        case self::SIGNED:
		        	        case self::SIMPLE:
		        	        case self::SLAVE:
		        	        case self::SLOW:
		        	        case self::SNAPSHOT:
		        	        case self::SOCKET:
		        	        case self::SOME:
		        	        case self::SONAME:
		        	        case self::SOUNDS:
		        	        case self::SOURCE:
		        	        case self::SQL_AFTER_GTIDS:
		        	        case self::SQL_AFTER_MTS_GAPS:
		        	        case self::SQL_BEFORE_GTIDS:
		        	        case self::SQL_BUFFER_RESULT:
		        	        case self::SQL_CACHE:
		        	        case self::SQL_NO_CACHE:
		        	        case self::SQL_THREAD:
		        	        case self::START:
		        	        case self::STARTS:
		        	        case self::STATS_AUTO_RECALC:
		        	        case self::STATS_PERSISTENT:
		        	        case self::STATS_SAMPLE_PAGES:
		        	        case self::STATUS:
		        	        case self::STOP:
		        	        case self::STORAGE:
		        	        case self::STRING:
		        	        case self::SUBCLASS_ORIGIN:
		        	        case self::SUBJECT:
		        	        case self::SUBPARTITION:
		        	        case self::SUBPARTITIONS:
		        	        case self::SUSPEND:
		        	        case self::SWAPS:
		        	        case self::SWITCHES:
		        	        case self::TABLE_NAME:
		        	        case self::TABLESPACE:
		        	        case self::TEMPORARY:
		        	        case self::TEMPTABLE:
		        	        case self::THAN:
		        	        case self::TRADITIONAL:
		        	        case self::TRANSACTION:
		        	        case self::TRIGGERS:
		        	        case self::TRUNCATE:
		        	        case self::UNDEFINED:
		        	        case self::UNDOFILE:
		        	        case self::UNDO_BUFFER_SIZE:
		        	        case self::UNINSTALL:
		        	        case self::UNKNOWN:
		        	        case self::UNTIL:
		        	        case self::UPGRADE:
		        	        case self::USER:
		        	        case self::USE_FRM:
		        	        case self::USER_RESOURCES:
		        	        case self::VALIDATION:
		        	        case self::VALUE:
		        	        case self::VARIABLES:
		        	        case self::VIEW:
		        	        case self::VISIBLE:
		        	        case self::WAIT:
		        	        case self::WARNINGS:
		        	        case self::WITHOUT:
		        	        case self::WORK:
		        	        case self::WRAPPER:
		        	        case self::X509:
		        	        case self::XA:
		        	        case self::XML:
		        	        case self::INTERNAL:
		        	        case self::QUARTER:
		        	        case self::MONTH:
		        	        case self::DAY:
		        	        case self::HOUR:
		        	        case self::MINUTE:
		        	        case self::WEEK:
		        	        case self::SECOND:
		        	        case self::MICROSECOND:
		        	        case self::TABLES:
		        	        case self::ROUTINE:
		        	        case self::EXECUTE:
		        	        case self::FILE:
		        	        case self::PROCESS:
		        	        case self::RELOAD:
		        	        case self::SHUTDOWN:
		        	        case self::SUPER:
		        	        case self::PRIVILEGES:
		        	        case self::SESSION_VARIABLES_ADMIN:
		        	        case self::ARMSCII8:
		        	        case self::ASCII:
		        	        case self::BIG5:
		        	        case self::CP1250:
		        	        case self::CP1251:
		        	        case self::CP1256:
		        	        case self::CP1257:
		        	        case self::CP850:
		        	        case self::CP852:
		        	        case self::CP866:
		        	        case self::CP932:
		        	        case self::DEC8:
		        	        case self::EUCJPMS:
		        	        case self::EUCKR:
		        	        case self::GB2312:
		        	        case self::GBK:
		        	        case self::GEOSTD8:
		        	        case self::GREEK:
		        	        case self::HEBREW:
		        	        case self::HP8:
		        	        case self::KEYBCS2:
		        	        case self::KOI8R:
		        	        case self::KOI8U:
		        	        case self::LATIN1:
		        	        case self::LATIN2:
		        	        case self::LATIN5:
		        	        case self::LATIN7:
		        	        case self::MACCE:
		        	        case self::MACROMAN:
		        	        case self::SJIS:
		        	        case self::SWE7:
		        	        case self::TIS620:
		        	        case self::UCS2:
		        	        case self::UJIS:
		        	        case self::UTF16:
		        	        case self::UTF16LE:
		        	        case self::UTF32:
		        	        case self::UTF8:
		        	        case self::UTF8MB3:
		        	        case self::UTF8MB4:
		        	        case self::ARCHIVE:
		        	        case self::BLACKHOLE:
		        	        case self::CSV:
		        	        case self::FEDERATED:
		        	        case self::INNODB:
		        	        case self::MEMORY:
		        	        case self::MRG_MYISAM:
		        	        case self::MYISAM:
		        	        case self::NDB:
		        	        case self::NDBCLUSTER:
		        	        case self::PERFORMANCE_SCHEMA:
		        	        case self::TOKUDB:
		        	        case self::REPEATABLE:
		        	        case self::COMMITTED:
		        	        case self::UNCOMMITTED:
		        	        case self::SERIALIZABLE:
		        	        case self::GEOMETRYCOLLECTION:
		        	        case self::LINESTRING:
		        	        case self::MULTILINESTRING:
		        	        case self::MULTIPOINT:
		        	        case self::MULTIPOLYGON:
		        	        case self::POINT:
		        	        case self::POLYGON:
		        	        case self::ABS:
		        	        case self::ACOS:
		        	        case self::ADDDATE:
		        	        case self::ADDTIME:
		        	        case self::AES_DECRYPT:
		        	        case self::AES_ENCRYPT:
		        	        case self::AREA:
		        	        case self::ASBINARY:
		        	        case self::ASIN:
		        	        case self::ASTEXT:
		        	        case self::ASWKB:
		        	        case self::ASWKT:
		        	        case self::ASYMMETRIC_DECRYPT:
		        	        case self::ASYMMETRIC_DERIVE:
		        	        case self::ASYMMETRIC_ENCRYPT:
		        	        case self::ASYMMETRIC_SIGN:
		        	        case self::ASYMMETRIC_VERIFY:
		        	        case self::ATAN:
		        	        case self::ATAN2:
		        	        case self::BENCHMARK:
		        	        case self::BIN:
		        	        case self::BIT_COUNT:
		        	        case self::BIT_LENGTH:
		        	        case self::BUFFER:
		        	        case self::CATALOG_NAME:
		        	        case self::CEIL:
		        	        case self::CEILING:
		        	        case self::CENTROID:
		        	        case self::CHARACTER_LENGTH:
		        	        case self::CHARSET:
		        	        case self::CHAR_LENGTH:
		        	        case self::COERCIBILITY:
		        	        case self::COLLATION:
		        	        case self::COMPRESS:
		        	        case self::CONCAT:
		        	        case self::CONCAT_WS:
		        	        case self::CONNECTION_ID:
		        	        case self::CONV:
		        	        case self::CONVERT_TZ:
		        	        case self::COS:
		        	        case self::COT:
		        	        case self::CRC32:
		        	        case self::CREATE_ASYMMETRIC_PRIV_KEY:
		        	        case self::CREATE_ASYMMETRIC_PUB_KEY:
		        	        case self::CREATE_DH_PARAMETERS:
		        	        case self::CREATE_DIGEST:
		        	        case self::CROSSES:
		        	        case self::DATEDIFF:
		        	        case self::DATE_FORMAT:
		        	        case self::DAYNAME:
		        	        case self::DAYOFMONTH:
		        	        case self::DAYOFWEEK:
		        	        case self::DAYOFYEAR:
		        	        case self::DECODE:
		        	        case self::DEGREES:
		        	        case self::DES_DECRYPT:
		        	        case self::DES_ENCRYPT:
		        	        case self::DIMENSION:
		        	        case self::DISJOINT:
		        	        case self::ELT:
		        	        case self::ENCODE:
		        	        case self::ENCRYPT:
		        	        case self::ENDPOINT:
		        	        case self::ENVELOPE:
		        	        case self::EQUALS:
		        	        case self::EXP:
		        	        case self::EXPORT_SET:
		        	        case self::EXTERIORRING:
		        	        case self::EXTRACTVALUE:
		        	        case self::FIELD:
		        	        case self::FIND_IN_SET:
		        	        case self::FLOOR:
		        	        case self::FORMAT:
		        	        case self::FOUND_ROWS:
		        	        case self::FROM_BASE64:
		        	        case self::FROM_DAYS:
		        	        case self::FROM_UNIXTIME:
		        	        case self::GEOMCOLLFROMTEXT:
		        	        case self::GEOMCOLLFROMWKB:
		        	        case self::GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::GEOMETRYFROMTEXT:
		        	        case self::GEOMETRYFROMWKB:
		        	        case self::GEOMETRYN:
		        	        case self::GEOMETRYTYPE:
		        	        case self::GEOMFROMTEXT:
		        	        case self::GEOMFROMWKB:
		        	        case self::GET_FORMAT:
		        	        case self::GET_LOCK:
		        	        case self::GLENGTH:
		        	        case self::GREATEST:
		        	        case self::GTID_SUBSET:
		        	        case self::GTID_SUBTRACT:
		        	        case self::HEX:
		        	        case self::IFNULL:
		        	        case self::INET6_ATON:
		        	        case self::INET6_NTOA:
		        	        case self::INET_ATON:
		        	        case self::INET_NTOA:
		        	        case self::INSTR:
		        	        case self::INTERIORRINGN:
		        	        case self::INTERSECTS:
		        	        case self::ISCLOSED:
		        	        case self::ISEMPTY:
		        	        case self::ISNULL:
		        	        case self::ISSIMPLE:
		        	        case self::IS_FREE_LOCK:
		        	        case self::IS_IPV4:
		        	        case self::IS_IPV4_COMPAT:
		        	        case self::IS_IPV4_MAPPED:
		        	        case self::IS_IPV6:
		        	        case self::IS_USED_LOCK:
		        	        case self::LAST_INSERT_ID:
		        	        case self::LCASE:
		        	        case self::LEAST:
		        	        case self::LENGTH:
		        	        case self::LINEFROMTEXT:
		        	        case self::LINEFROMWKB:
		        	        case self::LINESTRINGFROMTEXT:
		        	        case self::LINESTRINGFROMWKB:
		        	        case self::LN:
		        	        case self::LOAD_FILE:
		        	        case self::LOCATE:
		        	        case self::LOG:
		        	        case self::LOG10:
		        	        case self::LOG2:
		        	        case self::LOWER:
		        	        case self::LPAD:
		        	        case self::LTRIM:
		        	        case self::MAKEDATE:
		        	        case self::MAKETIME:
		        	        case self::MAKE_SET:
		        	        case self::MASTER_POS_WAIT:
		        	        case self::MBRCONTAINS:
		        	        case self::MBRDISJOINT:
		        	        case self::MBREQUAL:
		        	        case self::MBRINTERSECTS:
		        	        case self::MBROVERLAPS:
		        	        case self::MBRTOUCHES:
		        	        case self::MBRWITHIN:
		        	        case self::MD5:
		        	        case self::MLINEFROMTEXT:
		        	        case self::MLINEFROMWKB:
		        	        case self::MONTHNAME:
		        	        case self::MPOINTFROMTEXT:
		        	        case self::MPOINTFROMWKB:
		        	        case self::MPOLYFROMTEXT:
		        	        case self::MPOLYFROMWKB:
		        	        case self::MULTILINESTRINGFROMTEXT:
		        	        case self::MULTILINESTRINGFROMWKB:
		        	        case self::MULTIPOINTFROMTEXT:
		        	        case self::MULTIPOINTFROMWKB:
		        	        case self::MULTIPOLYGONFROMTEXT:
		        	        case self::MULTIPOLYGONFROMWKB:
		        	        case self::NAME_CONST:
		        	        case self::NULLIF:
		        	        case self::NUMGEOMETRIES:
		        	        case self::NUMINTERIORRINGS:
		        	        case self::NUMPOINTS:
		        	        case self::OCT:
		        	        case self::OCTET_LENGTH:
		        	        case self::ORD:
		        	        case self::OVERLAPS:
		        	        case self::PERIOD_ADD:
		        	        case self::PERIOD_DIFF:
		        	        case self::PI:
		        	        case self::POINTFROMTEXT:
		        	        case self::POINTFROMWKB:
		        	        case self::POINTN:
		        	        case self::POLYFROMTEXT:
		        	        case self::POLYFROMWKB:
		        	        case self::POLYGONFROMTEXT:
		        	        case self::POLYGONFROMWKB:
		        	        case self::POW:
		        	        case self::POWER:
		        	        case self::QUOTE:
		        	        case self::RADIANS:
		        	        case self::RAND:
		        	        case self::RANDOM_BYTES:
		        	        case self::RELEASE_LOCK:
		        	        case self::REVERSE:
		        	        case self::ROUND:
		        	        case self::ROW_COUNT:
		        	        case self::RPAD:
		        	        case self::RTRIM:
		        	        case self::SEC_TO_TIME:
		        	        case self::SESSION_USER:
		        	        case self::SHA:
		        	        case self::SHA1:
		        	        case self::SHA2:
		        	        case self::SCHEMA_NAME:
		        	        case self::SIGN:
		        	        case self::SIN:
		        	        case self::SLEEP:
		        	        case self::SOUNDEX:
		        	        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		        	        case self::SQRT:
		        	        case self::SRID:
		        	        case self::STARTPOINT:
		        	        case self::STRCMP:
		        	        case self::STR_TO_DATE:
		        	        case self::ST_AREA:
		        	        case self::ST_ASBINARY:
		        	        case self::ST_ASTEXT:
		        	        case self::ST_ASWKB:
		        	        case self::ST_ASWKT:
		        	        case self::ST_BUFFER:
		        	        case self::ST_CENTROID:
		        	        case self::ST_CONTAINS:
		        	        case self::ST_CROSSES:
		        	        case self::ST_DIFFERENCE:
		        	        case self::ST_DIMENSION:
		        	        case self::ST_DISJOINT:
		        	        case self::ST_DISTANCE:
		        	        case self::ST_ENDPOINT:
		        	        case self::ST_ENVELOPE:
		        	        case self::ST_EQUALS:
		        	        case self::ST_EXTERIORRING:
		        	        case self::ST_GEOMCOLLFROMTEXT:
		        	        case self::ST_GEOMCOLLFROMTXT:
		        	        case self::ST_GEOMCOLLFROMWKB:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		        	        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		        	        case self::ST_GEOMETRYFROMTEXT:
		        	        case self::ST_GEOMETRYFROMWKB:
		        	        case self::ST_GEOMETRYN:
		        	        case self::ST_GEOMETRYTYPE:
		        	        case self::ST_GEOMFROMTEXT:
		        	        case self::ST_GEOMFROMWKB:
		        	        case self::ST_INTERIORRINGN:
		        	        case self::ST_INTERSECTION:
		        	        case self::ST_INTERSECTS:
		        	        case self::ST_ISCLOSED:
		        	        case self::ST_ISEMPTY:
		        	        case self::ST_ISSIMPLE:
		        	        case self::ST_LINEFROMTEXT:
		        	        case self::ST_LINEFROMWKB:
		        	        case self::ST_LINESTRINGFROMTEXT:
		        	        case self::ST_LINESTRINGFROMWKB:
		        	        case self::ST_NUMGEOMETRIES:
		        	        case self::ST_NUMINTERIORRING:
		        	        case self::ST_NUMINTERIORRINGS:
		        	        case self::ST_NUMPOINTS:
		        	        case self::ST_OVERLAPS:
		        	        case self::ST_POINTFROMTEXT:
		        	        case self::ST_POINTFROMWKB:
		        	        case self::ST_POINTN:
		        	        case self::ST_POLYFROMTEXT:
		        	        case self::ST_POLYFROMWKB:
		        	        case self::ST_POLYGONFROMTEXT:
		        	        case self::ST_POLYGONFROMWKB:
		        	        case self::ST_SRID:
		        	        case self::ST_STARTPOINT:
		        	        case self::ST_SYMDIFFERENCE:
		        	        case self::ST_TOUCHES:
		        	        case self::ST_UNION:
		        	        case self::ST_WITHIN:
		        	        case self::ST_X:
		        	        case self::ST_Y:
		        	        case self::SUBDATE:
		        	        case self::SUBSTRING_INDEX:
		        	        case self::SUBTIME:
		        	        case self::SYSTEM_USER:
		        	        case self::TAN:
		        	        case self::TIMEDIFF:
		        	        case self::TIMESTAMPADD:
		        	        case self::TIMESTAMPDIFF:
		        	        case self::TIME_FORMAT:
		        	        case self::TIME_TO_SEC:
		        	        case self::TOUCHES:
		        	        case self::TO_BASE64:
		        	        case self::TO_DAYS:
		        	        case self::TO_SECONDS:
		        	        case self::UCASE:
		        	        case self::UNCOMPRESS:
		        	        case self::UNCOMPRESSED_LENGTH:
		        	        case self::UNHEX:
		        	        case self::UNIX_TIMESTAMP:
		        	        case self::UPDATEXML:
		        	        case self::UPPER:
		        	        case self::UUID:
		        	        case self::UUID_SHORT:
		        	        case self::VALIDATE_PASSWORD_STRENGTH:
		        	        case self::VERSION:
		        	        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		        	        case self::WEEKDAY:
		        	        case self::WEEKOFYEAR:
		        	        case self::WEIGHT_STRING:
		        	        case self::WITHIN:
		        	        case self::YEARWEEK:
		        	        case self::Y_FUNCTION:
		        	        case self::X_FUNCTION:
		        	        case self::PLUS:
		        	        case self::MINUS:
		        	        case self::EXCLAMATION_SYMBOL:
		        	        case self::BIT_NOT_OP:
		        	        case self::LR_BRACKET:
		        	        case self::ZERO_DECIMAL:
		        	        case self::ONE_DECIMAL:
		        	        case self::TWO_DECIMAL:
		        	        case self::CHARSET_REVERSE_QOUTE_STRING:
		        	        case self::START_NATIONAL_STRING_LITERAL:
		        	        case self::STRING_LITERAL:
		        	        case self::DECIMAL_LITERAL:
		        	        case self::HEXADECIMAL_LITERAL:
		        	        case self::REAL_LITERAL:
		        	        case self::NULL_SPEC_LITERAL:
		        	        case self::BIT_STRING:
		        	        case self::STRING_CHARSET_NAME:
		        	        case self::ID:
		        	        case self::REVERSE_QUOTE_ID:
		        	        case self::LOCAL_ID:
		        	        case self::GLOBAL_ID:
		        	        	$this->setState(6023);
		        	        	$this->errorHandler->sync($this);
		        	        	$_la = $this->input->LA(1);

		        	        	if ($_la === self::ALL) {
		        	        		$this->setState(6022);
		        	        		$localContext->aggregator = $this->match(self::ALL);
		        	        	}
		        	        	$this->setState(6025);
		        	        	$this->functionArg();
		        	        	break;

		        	    default:
		        	    	throw new NoViableAltException($this);
		        	    }
		        	    $this->setState(6028);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(6029);
		        	    $this->match(self::COUNT);
		        	    $this->setState(6030);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6031);
		        	    $localContext->aggregator = $this->match(self::DISTINCT);
		        	    $this->setState(6032);
		        	    $this->functionArgs();
		        	    $this->setState(6033);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(6035);

		        	    $_la = $this->input->LA(1);

		        	    if (!((((($_la - 236)) & ~0x3f) === 0 && ((1 << ($_la - 236)) & ((1 << (self::BIT_AND - 236)) | (1 << (self::BIT_OR - 236)) | (1 << (self::BIT_XOR - 236)) | (1 << (self::STD - 236)) | (1 << (self::STDDEV - 236)) | (1 << (self::STDDEV_POP - 236)) | (1 << (self::STDDEV_SAMP - 236)) | (1 << (self::VAR_POP - 236)) | (1 << (self::VAR_SAMP - 236)) | (1 << (self::VARIANCE - 236)))) !== 0))) {
		        	    $this->errorHandler->recoverInline($this);
		        	    } else {
		        	    	if ($this->input->LA(1) === Token::EOF) {
		        	    	    $this->matchedEOF = true;
		        	        }

		        	    	$this->errorHandler->reportMatch($this);
		        	    	$this->consume();
		        	    }
		        	    $this->setState(6036);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6038);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ALL) {
		        	    	$this->setState(6037);
		        	    	$localContext->aggregator = $this->match(self::ALL);
		        	    }
		        	    $this->setState(6040);
		        	    $this->functionArg();
		        	    $this->setState(6041);
		        	    $this->match(self::RR_BRACKET);
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(6043);
		        	    $this->match(self::GROUP_CONCAT);
		        	    $this->setState(6044);
		        	    $this->match(self::LR_BRACKET);
		        	    $this->setState(6046);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::DISTINCT) {
		        	    	$this->setState(6045);
		        	    	$localContext->aggregator = $this->match(self::DISTINCT);
		        	    }
		        	    $this->setState(6048);
		        	    $this->functionArgs();
		        	    $this->setState(6059);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::ORDER) {
		        	    	$this->setState(6049);
		        	    	$this->match(self::ORDER);
		        	    	$this->setState(6050);
		        	    	$this->match(self::BY);
		        	    	$this->setState(6051);
		        	    	$this->orderByExpression();
		        	    	$this->setState(6056);
		        	    	$this->errorHandler->sync($this);

		        	    	$_la = $this->input->LA(1);
		        	    	while ($_la === self::COMMA) {
		        	    		$this->setState(6052);
		        	    		$this->match(self::COMMA);
		        	    		$this->setState(6053);
		        	    		$this->orderByExpression();
		        	    		$this->setState(6058);
		        	    		$this->errorHandler->sync($this);
		        	    		$_la = $this->input->LA(1);
		        	    	}
		        	    }
		        	    $this->setState(6063);
		        	    $this->errorHandler->sync($this);
		        	    $_la = $this->input->LA(1);

		        	    if ($_la === self::SEPARATOR) {
		        	    	$this->setState(6061);
		        	    	$this->match(self::SEPARATOR);
		        	    	$this->setState(6062);
		        	    	$localContext->separator = $this->match(self::STRING_LITERAL);
		        	    }
		        	    $this->setState(6065);
		        	    $this->match(self::RR_BRACKET);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function scalarFunctionName() : Context\ScalarFunctionNameContext
		{
		    $localContext = new Context\ScalarFunctionNameContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 594, self::RULE_scalarFunctionName);

		    try {
		        $this->setState(6092);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::DATABASE:
		            case self::LEFT:
		            case self::RIGHT:
		            case self::DATE:
		            case self::TIME:
		            case self::TIMESTAMP:
		            case self::YEAR:
		            case self::COUNT:
		            case self::POSITION:
		            case self::INVISIBLE:
		            case self::VISIBLE:
		            case self::QUARTER:
		            case self::MONTH:
		            case self::DAY:
		            case self::HOUR:
		            case self::MINUTE:
		            case self::WEEK:
		            case self::SECOND:
		            case self::MICROSECOND:
		            case self::SESSION_VARIABLES_ADMIN:
		            case self::GEOMETRYCOLLECTION:
		            case self::LINESTRING:
		            case self::MULTILINESTRING:
		            case self::MULTIPOINT:
		            case self::MULTIPOLYGON:
		            case self::POINT:
		            case self::POLYGON:
		            case self::ABS:
		            case self::ACOS:
		            case self::ADDDATE:
		            case self::ADDTIME:
		            case self::AES_DECRYPT:
		            case self::AES_ENCRYPT:
		            case self::AREA:
		            case self::ASBINARY:
		            case self::ASIN:
		            case self::ASTEXT:
		            case self::ASWKB:
		            case self::ASWKT:
		            case self::ASYMMETRIC_DECRYPT:
		            case self::ASYMMETRIC_DERIVE:
		            case self::ASYMMETRIC_ENCRYPT:
		            case self::ASYMMETRIC_SIGN:
		            case self::ASYMMETRIC_VERIFY:
		            case self::ATAN:
		            case self::ATAN2:
		            case self::BENCHMARK:
		            case self::BIN:
		            case self::BIT_COUNT:
		            case self::BIT_LENGTH:
		            case self::BUFFER:
		            case self::CEIL:
		            case self::CEILING:
		            case self::CENTROID:
		            case self::CHARACTER_LENGTH:
		            case self::CHARSET:
		            case self::CHAR_LENGTH:
		            case self::COERCIBILITY:
		            case self::COLLATION:
		            case self::COMPRESS:
		            case self::CONCAT:
		            case self::CONCAT_WS:
		            case self::CONNECTION_ID:
		            case self::CONV:
		            case self::CONVERT_TZ:
		            case self::COS:
		            case self::COT:
		            case self::CRC32:
		            case self::CREATE_ASYMMETRIC_PRIV_KEY:
		            case self::CREATE_ASYMMETRIC_PUB_KEY:
		            case self::CREATE_DH_PARAMETERS:
		            case self::CREATE_DIGEST:
		            case self::CROSSES:
		            case self::DATEDIFF:
		            case self::DATE_FORMAT:
		            case self::DAYNAME:
		            case self::DAYOFMONTH:
		            case self::DAYOFWEEK:
		            case self::DAYOFYEAR:
		            case self::DECODE:
		            case self::DEGREES:
		            case self::DES_DECRYPT:
		            case self::DES_ENCRYPT:
		            case self::DIMENSION:
		            case self::DISJOINT:
		            case self::ELT:
		            case self::ENCODE:
		            case self::ENCRYPT:
		            case self::ENDPOINT:
		            case self::ENVELOPE:
		            case self::EQUALS:
		            case self::EXP:
		            case self::EXPORT_SET:
		            case self::EXTERIORRING:
		            case self::EXTRACTVALUE:
		            case self::FIELD:
		            case self::FIND_IN_SET:
		            case self::FLOOR:
		            case self::FORMAT:
		            case self::FOUND_ROWS:
		            case self::FROM_BASE64:
		            case self::FROM_DAYS:
		            case self::FROM_UNIXTIME:
		            case self::GEOMCOLLFROMTEXT:
		            case self::GEOMCOLLFROMWKB:
		            case self::GEOMETRYCOLLECTIONFROMTEXT:
		            case self::GEOMETRYCOLLECTIONFROMWKB:
		            case self::GEOMETRYFROMTEXT:
		            case self::GEOMETRYFROMWKB:
		            case self::GEOMETRYN:
		            case self::GEOMETRYTYPE:
		            case self::GEOMFROMTEXT:
		            case self::GEOMFROMWKB:
		            case self::GET_FORMAT:
		            case self::GET_LOCK:
		            case self::GLENGTH:
		            case self::GREATEST:
		            case self::GTID_SUBSET:
		            case self::GTID_SUBTRACT:
		            case self::HEX:
		            case self::IFNULL:
		            case self::INET6_ATON:
		            case self::INET6_NTOA:
		            case self::INET_ATON:
		            case self::INET_NTOA:
		            case self::INSTR:
		            case self::INTERIORRINGN:
		            case self::INTERSECTS:
		            case self::ISCLOSED:
		            case self::ISEMPTY:
		            case self::ISNULL:
		            case self::ISSIMPLE:
		            case self::IS_FREE_LOCK:
		            case self::IS_IPV4:
		            case self::IS_IPV4_COMPAT:
		            case self::IS_IPV4_MAPPED:
		            case self::IS_IPV6:
		            case self::IS_USED_LOCK:
		            case self::LAST_INSERT_ID:
		            case self::LCASE:
		            case self::LEAST:
		            case self::LENGTH:
		            case self::LINEFROMTEXT:
		            case self::LINEFROMWKB:
		            case self::LINESTRINGFROMTEXT:
		            case self::LINESTRINGFROMWKB:
		            case self::LN:
		            case self::LOAD_FILE:
		            case self::LOCATE:
		            case self::LOG:
		            case self::LOG10:
		            case self::LOG2:
		            case self::LOWER:
		            case self::LPAD:
		            case self::LTRIM:
		            case self::MAKEDATE:
		            case self::MAKETIME:
		            case self::MAKE_SET:
		            case self::MASTER_POS_WAIT:
		            case self::MBRCONTAINS:
		            case self::MBRDISJOINT:
		            case self::MBREQUAL:
		            case self::MBRINTERSECTS:
		            case self::MBROVERLAPS:
		            case self::MBRTOUCHES:
		            case self::MBRWITHIN:
		            case self::MD5:
		            case self::MLINEFROMTEXT:
		            case self::MLINEFROMWKB:
		            case self::MONTHNAME:
		            case self::MPOINTFROMTEXT:
		            case self::MPOINTFROMWKB:
		            case self::MPOLYFROMTEXT:
		            case self::MPOLYFROMWKB:
		            case self::MULTILINESTRINGFROMTEXT:
		            case self::MULTILINESTRINGFROMWKB:
		            case self::MULTIPOINTFROMTEXT:
		            case self::MULTIPOINTFROMWKB:
		            case self::MULTIPOLYGONFROMTEXT:
		            case self::MULTIPOLYGONFROMWKB:
		            case self::NAME_CONST:
		            case self::NULLIF:
		            case self::NUMGEOMETRIES:
		            case self::NUMINTERIORRINGS:
		            case self::NUMPOINTS:
		            case self::OCT:
		            case self::OCTET_LENGTH:
		            case self::ORD:
		            case self::OVERLAPS:
		            case self::PERIOD_ADD:
		            case self::PERIOD_DIFF:
		            case self::PI:
		            case self::POINTFROMTEXT:
		            case self::POINTFROMWKB:
		            case self::POINTN:
		            case self::POLYFROMTEXT:
		            case self::POLYFROMWKB:
		            case self::POLYGONFROMTEXT:
		            case self::POLYGONFROMWKB:
		            case self::POW:
		            case self::POWER:
		            case self::QUOTE:
		            case self::RADIANS:
		            case self::RAND:
		            case self::RANDOM_BYTES:
		            case self::RELEASE_LOCK:
		            case self::REVERSE:
		            case self::ROUND:
		            case self::ROW_COUNT:
		            case self::RPAD:
		            case self::RTRIM:
		            case self::SEC_TO_TIME:
		            case self::SESSION_USER:
		            case self::SHA:
		            case self::SHA1:
		            case self::SHA2:
		            case self::SIGN:
		            case self::SIN:
		            case self::SLEEP:
		            case self::SOUNDEX:
		            case self::SQL_THREAD_WAIT_AFTER_GTIDS:
		            case self::SQRT:
		            case self::SRID:
		            case self::STARTPOINT:
		            case self::STRCMP:
		            case self::STR_TO_DATE:
		            case self::ST_AREA:
		            case self::ST_ASBINARY:
		            case self::ST_ASTEXT:
		            case self::ST_ASWKB:
		            case self::ST_ASWKT:
		            case self::ST_BUFFER:
		            case self::ST_CENTROID:
		            case self::ST_CONTAINS:
		            case self::ST_CROSSES:
		            case self::ST_DIFFERENCE:
		            case self::ST_DIMENSION:
		            case self::ST_DISJOINT:
		            case self::ST_DISTANCE:
		            case self::ST_ENDPOINT:
		            case self::ST_ENVELOPE:
		            case self::ST_EQUALS:
		            case self::ST_EXTERIORRING:
		            case self::ST_GEOMCOLLFROMTEXT:
		            case self::ST_GEOMCOLLFROMTXT:
		            case self::ST_GEOMCOLLFROMWKB:
		            case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
		            case self::ST_GEOMETRYCOLLECTIONFROMWKB:
		            case self::ST_GEOMETRYFROMTEXT:
		            case self::ST_GEOMETRYFROMWKB:
		            case self::ST_GEOMETRYN:
		            case self::ST_GEOMETRYTYPE:
		            case self::ST_GEOMFROMTEXT:
		            case self::ST_GEOMFROMWKB:
		            case self::ST_INTERIORRINGN:
		            case self::ST_INTERSECTION:
		            case self::ST_INTERSECTS:
		            case self::ST_ISCLOSED:
		            case self::ST_ISEMPTY:
		            case self::ST_ISSIMPLE:
		            case self::ST_LINEFROMTEXT:
		            case self::ST_LINEFROMWKB:
		            case self::ST_LINESTRINGFROMTEXT:
		            case self::ST_LINESTRINGFROMWKB:
		            case self::ST_NUMGEOMETRIES:
		            case self::ST_NUMINTERIORRING:
		            case self::ST_NUMINTERIORRINGS:
		            case self::ST_NUMPOINTS:
		            case self::ST_OVERLAPS:
		            case self::ST_POINTFROMTEXT:
		            case self::ST_POINTFROMWKB:
		            case self::ST_POINTN:
		            case self::ST_POLYFROMTEXT:
		            case self::ST_POLYFROMWKB:
		            case self::ST_POLYGONFROMTEXT:
		            case self::ST_POLYGONFROMWKB:
		            case self::ST_SRID:
		            case self::ST_STARTPOINT:
		            case self::ST_SYMDIFFERENCE:
		            case self::ST_TOUCHES:
		            case self::ST_UNION:
		            case self::ST_WITHIN:
		            case self::ST_X:
		            case self::ST_Y:
		            case self::SUBDATE:
		            case self::SUBSTRING_INDEX:
		            case self::SUBTIME:
		            case self::SYSTEM_USER:
		            case self::TAN:
		            case self::TIMEDIFF:
		            case self::TIMESTAMPADD:
		            case self::TIMESTAMPDIFF:
		            case self::TIME_FORMAT:
		            case self::TIME_TO_SEC:
		            case self::TOUCHES:
		            case self::TO_BASE64:
		            case self::TO_DAYS:
		            case self::TO_SECONDS:
		            case self::UCASE:
		            case self::UNCOMPRESS:
		            case self::UNCOMPRESSED_LENGTH:
		            case self::UNHEX:
		            case self::UNIX_TIMESTAMP:
		            case self::UPDATEXML:
		            case self::UPPER:
		            case self::UUID:
		            case self::UUID_SHORT:
		            case self::VALIDATE_PASSWORD_STRENGTH:
		            case self::VERSION:
		            case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
		            case self::WEEKDAY:
		            case self::WEEKOFYEAR:
		            case self::WEIGHT_STRING:
		            case self::WITHIN:
		            case self::YEARWEEK:
		            case self::Y_FUNCTION:
		            case self::X_FUNCTION:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(6069);
		            	$this->functionNameBase();
		            	break;

		            case self::ASCII:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(6070);
		            	$this->match(self::ASCII);
		            	break;

		            case self::CURDATE:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(6071);
		            	$this->match(self::CURDATE);
		            	break;

		            case self::CURRENT_DATE:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(6072);
		            	$this->match(self::CURRENT_DATE);
		            	break;

		            case self::CURRENT_TIME:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(6073);
		            	$this->match(self::CURRENT_TIME);
		            	break;

		            case self::CURRENT_TIMESTAMP:
		            	$this->enterOuterAlt($localContext, 6);
		            	$this->setState(6074);
		            	$this->match(self::CURRENT_TIMESTAMP);
		            	break;

		            case self::CURTIME:
		            	$this->enterOuterAlt($localContext, 7);
		            	$this->setState(6075);
		            	$this->match(self::CURTIME);
		            	break;

		            case self::DATE_ADD:
		            	$this->enterOuterAlt($localContext, 8);
		            	$this->setState(6076);
		            	$this->match(self::DATE_ADD);
		            	break;

		            case self::DATE_SUB:
		            	$this->enterOuterAlt($localContext, 9);
		            	$this->setState(6077);
		            	$this->match(self::DATE_SUB);
		            	break;

		            case self::IF:
		            	$this->enterOuterAlt($localContext, 10);
		            	$this->setState(6078);
		            	$this->match(self::IF);
		            	break;

		            case self::INSERT:
		            	$this->enterOuterAlt($localContext, 11);
		            	$this->setState(6079);
		            	$this->match(self::INSERT);
		            	break;

		            case self::LOCALTIME:
		            	$this->enterOuterAlt($localContext, 12);
		            	$this->setState(6080);
		            	$this->match(self::LOCALTIME);
		            	break;

		            case self::LOCALTIMESTAMP:
		            	$this->enterOuterAlt($localContext, 13);
		            	$this->setState(6081);
		            	$this->match(self::LOCALTIMESTAMP);
		            	break;

		            case self::MID:
		            	$this->enterOuterAlt($localContext, 14);
		            	$this->setState(6082);
		            	$this->match(self::MID);
		            	break;

		            case self::NOW:
		            	$this->enterOuterAlt($localContext, 15);
		            	$this->setState(6083);
		            	$this->match(self::NOW);
		            	break;

		            case self::REPLACE:
		            	$this->enterOuterAlt($localContext, 16);
		            	$this->setState(6084);
		            	$this->match(self::REPLACE);
		            	break;

		            case self::SUBSTR:
		            	$this->enterOuterAlt($localContext, 17);
		            	$this->setState(6085);
		            	$this->match(self::SUBSTR);
		            	break;

		            case self::SUBSTRING:
		            	$this->enterOuterAlt($localContext, 18);
		            	$this->setState(6086);
		            	$this->match(self::SUBSTRING);
		            	break;

		            case self::SYSDATE:
		            	$this->enterOuterAlt($localContext, 19);
		            	$this->setState(6087);
		            	$this->match(self::SYSDATE);
		            	break;

		            case self::TRIM:
		            	$this->enterOuterAlt($localContext, 20);
		            	$this->setState(6088);
		            	$this->match(self::TRIM);
		            	break;

		            case self::UTC_DATE:
		            	$this->enterOuterAlt($localContext, 21);
		            	$this->setState(6089);
		            	$this->match(self::UTC_DATE);
		            	break;

		            case self::UTC_TIME:
		            	$this->enterOuterAlt($localContext, 22);
		            	$this->setState(6090);
		            	$this->match(self::UTC_TIME);
		            	break;

		            case self::UTC_TIMESTAMP:
		            	$this->enterOuterAlt($localContext, 23);
		            	$this->setState(6091);
		            	$this->match(self::UTC_TIMESTAMP);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function passwordFunctionClause() : Context\PasswordFunctionClauseContext
		{
		    $localContext = new Context\PasswordFunctionClauseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 596, self::RULE_passwordFunctionClause);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6094);

		        $localContext->functionName = $this->input->LT(1);
		        $_la = $this->input->LA(1);

		        if (!($_la === self::OLD_PASSWORD || $_la === self::PASSWORD)) {
		        	    $localContext->functionName = $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		        $this->setState(6095);
		        $this->match(self::LR_BRACKET);
		        $this->setState(6096);
		        $this->functionArg();
		        $this->setState(6097);
		        $this->match(self::RR_BRACKET);
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function functionArgs() : Context\FunctionArgsContext
		{
		    $localContext = new Context\FunctionArgsContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 598, self::RULE_functionArgs);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6103);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 897, $this->ctx)) {
		        	case 1:
		        	    $this->setState(6099);
		        	    $this->constant();
		        	break;

		        	case 2:
		        	    $this->setState(6100);
		        	    $this->fullColumnName();
		        	break;

		        	case 3:
		        	    $this->setState(6101);
		        	    $this->functionCall();
		        	break;

		        	case 4:
		        	    $this->setState(6102);
		        	    $this->recursiveExpression(0);
		        	break;
		        }
		        $this->setState(6114);
		        $this->errorHandler->sync($this);

		        $_la = $this->input->LA(1);
		        while ($_la === self::COMMA) {
		        	$this->setState(6105);
		        	$this->match(self::COMMA);
		        	$this->setState(6110);
		        	$this->errorHandler->sync($this);

		        	switch ($this->getInterpreter()->adaptivePredict($this->input, 898, $this->ctx)) {
		        		case 1:
		        		    $this->setState(6106);
		        		    $this->constant();
		        		break;

		        		case 2:
		        		    $this->setState(6107);
		        		    $this->fullColumnName();
		        		break;

		        		case 3:
		        		    $this->setState(6108);
		        		    $this->functionCall();
		        		break;

		        		case 4:
		        		    $this->setState(6109);
		        		    $this->recursiveExpression(0);
		        		break;
		        	}
		        	$this->setState(6116);
		        	$this->errorHandler->sync($this);
		        	$_la = $this->input->LA(1);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function functionArg() : Context\FunctionArgContext
		{
		    $localContext = new Context\FunctionArgContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 600, self::RULE_functionArg);

		    try {
		        $this->setState(6121);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 900, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6117);
		        	    $this->constant();
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6118);
		        	    $this->fullColumnName();
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(6119);
		        	    $this->functionCall();
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(6120);
		        	    $this->recursiveExpression(0);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function expression() : Context\ExpressionContext
		{
			return $this->recursiveExpression(0);
		}

		/**
		 * @throws RecognitionException
		 */
		private function recursiveExpression(int $precedence) : Context\ExpressionContext
		{
			$parentContext = $this->ctx;
			$parentState = $this->getState();
			$localContext = new Context\ExpressionContext($this->ctx, $parentState);
			$previousContext = $localContext;
			$startState = 602;
			$this->enterRecursionRule($localContext, 602, self::RULE_expression, $precedence);

			try {
				$this->enterOuterAlt($localContext, 1);
				$this->setState(6134);
				$this->errorHandler->sync($this);

				switch ($this->getInterpreter()->adaptivePredict($this->input, 902, $this->ctx)) {
					case 1:
					    $localContext = new Context\NotExpressionContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;

					    $this->setState(6124);

					    $localContext->notOperator = $this->input->LT(1);
					    $_la = $this->input->LA(1);

					    if (!($_la === self::NOT || $_la === self::EXCLAMATION_SYMBOL)) {
					    	    $localContext->notOperator = $this->errorHandler->recoverInline($this);
					    } else {
					    	if ($this->input->LA(1) === Token::EOF) {
					    	    $this->matchedEOF = true;
					        }

					    	$this->errorHandler->reportMatch($this);
					    	$this->consume();
					    }
					    $this->setState(6125);
					    $this->recursiveExpression(4);
					break;

					case 2:
					    $localContext = new Context\IsExpressionContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6126);
					    $this->recursivePredicate(0);
					    $this->setState(6127);
					    $this->match(self::IS);
					    $this->setState(6129);
					    $this->errorHandler->sync($this);
					    $_la = $this->input->LA(1);

					    if ($_la === self::NOT) {
					    	$this->setState(6128);
					    	$this->match(self::NOT);
					    }
					    $this->setState(6131);

					    $localContext->testValue = $this->input->LT(1);
					    $_la = $this->input->LA(1);

					    if (!($_la === self::FALSE || $_la === self::TRUE || $_la === self::UNKNOWN)) {
					    	    $localContext->testValue = $this->errorHandler->recoverInline($this);
					    } else {
					    	if ($this->input->LA(1) === Token::EOF) {
					    	    $this->matchedEOF = true;
					        }

					    	$this->errorHandler->reportMatch($this);
					    	$this->consume();
					    }
					break;

					case 3:
					    $localContext = new Context\PredicateExpressionContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6133);
					    $this->recursivePredicate(0);
					break;
				}
				$this->ctx->stop = $this->input->LT(-1);
				$this->setState(6142);
				$this->errorHandler->sync($this);

				$alt = $this->getInterpreter()->adaptivePredict($this->input, 903, $this->ctx);

				while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
					if ($alt === 1) {
						if ($this->getParseListeners() !== null) {
						    $this->triggerExitRuleEvent();
						}

						$previousContext = $localContext;
						$localContext = new Context\LogicalExpressionContext(new Context\ExpressionContext($parentContext, $parentState));
						$this->pushNewRecursionContext($localContext, $startState, self::RULE_expression);
						$this->setState(6136);

						if (!($this->precpred($this->ctx, 3))) {
						    throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 3)");
						}
						$this->setState(6137);
						$this->logicalOperator();
						$this->setState(6138);
						$this->recursiveExpression(4); 
					}

					$this->setState(6144);
					$this->errorHandler->sync($this);

					$alt = $this->getInterpreter()->adaptivePredict($this->input, 903, $this->ctx);
				}
			} catch (RecognitionException $exception) {
				$localContext->exception = $exception;
				$this->errorHandler->reportError($this, $exception);
				$this->errorHandler->recover($this, $exception);
			} finally {
				$this->unrollRecursionContexts($parentContext);
			}

			return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function predicate() : Context\PredicateContext
		{
			return $this->recursivePredicate(0);
		}

		/**
		 * @throws RecognitionException
		 */
		private function recursivePredicate(int $precedence) : Context\PredicateContext
		{
			$parentContext = $this->ctx;
			$parentState = $this->getState();
			$localContext = new Context\PredicateContext($this->ctx, $parentState);
			$previousContext = $localContext;
			$startState = 604;
			$this->enterRecursionRule($localContext, 604, self::RULE_predicate, $precedence);

			try {
				$this->enterOuterAlt($localContext, 1);
				$localContext = new Context\ExpressionAtomPredicateContext($localContext);
				$this->ctx = $localContext;
				$previousContext = $localContext;

				$this->setState(6148);
				$this->errorHandler->sync($this);

				switch ($this->getInterpreter()->adaptivePredict($this->input, 904, $this->ctx)) {
				    case 1:
					    $this->setState(6146);
					    $this->match(self::LOCAL_ID);
					    $this->setState(6147);
					    $this->match(self::VAR_ASSIGN);
					break;
				}
				$this->setState(6150);
				$this->recursiveExpressionAtom(0);
				$this->ctx->stop = $this->input->LT(-1);
				$this->setState(6209);
				$this->errorHandler->sync($this);

				$alt = $this->getInterpreter()->adaptivePredict($this->input, 912, $this->ctx);

				while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
					if ($alt === 1) {
						if ($this->getParseListeners() !== null) {
						    $this->triggerExitRuleEvent();
						}

						$previousContext = $localContext;
						$this->setState(6207);
						$this->errorHandler->sync($this);

						switch ($this->getInterpreter()->adaptivePredict($this->input, 911, $this->ctx)) {
							case 1:
							    $localContext = new Context\BinaryComparasionPredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $localContext->left = $previousContext;

							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(6152);

							    if (!($this->precpred($this->ctx, 7))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 7)");
							    }
							    $this->setState(6153);
							    $this->comparisonOperator();
							    $this->setState(6154);
							    $localContext->right = $this->recursivePredicate(8);
							break;

							case 2:
							    $localContext = new Context\BetweenPredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(6156);

							    if (!($this->precpred($this->ctx, 5))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 5)");
							    }
							    $this->setState(6158);
							    $this->errorHandler->sync($this);
							    $_la = $this->input->LA(1);

							    if ($_la === self::NOT) {
							    	$this->setState(6157);
							    	$this->match(self::NOT);
							    }
							    $this->setState(6160);
							    $this->match(self::BETWEEN);
							    $this->setState(6161);
							    $this->recursivePredicate(0);
							    $this->setState(6162);
							    $this->match(self::AND);
							    $this->setState(6163);
							    $this->recursivePredicate(6);
							break;

							case 3:
							    $localContext = new Context\SoundsLikePredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(6165);

							    if (!($this->precpred($this->ctx, 4))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 4)");
							    }
							    $this->setState(6166);
							    $this->match(self::SOUNDS);
							    $this->setState(6167);
							    $this->match(self::LIKE);
							    $this->setState(6168);
							    $this->recursivePredicate(5);
							break;

							case 4:
							    $localContext = new Context\RegexpPredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(6169);

							    if (!($this->precpred($this->ctx, 2))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 2)");
							    }
							    $this->setState(6171);
							    $this->errorHandler->sync($this);
							    $_la = $this->input->LA(1);

							    if ($_la === self::NOT) {
							    	$this->setState(6170);
							    	$this->match(self::NOT);
							    }
							    $this->setState(6173);

							    $localContext->regex = $this->input->LT(1);
							    $_la = $this->input->LA(1);

							    if (!($_la === self::REGEXP || $_la === self::RLIKE)) {
							    	    $localContext->regex = $this->errorHandler->recoverInline($this);
							    } else {
							    	if ($this->input->LA(1) === Token::EOF) {
							    	    $this->matchedEOF = true;
							        }

							    	$this->errorHandler->reportMatch($this);
							    	$this->consume();
							    }
							    $this->setState(6174);
							    $this->recursivePredicate(3);
							break;

							case 5:
							    $localContext = new Context\InPredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(6175);

							    if (!($this->precpred($this->ctx, 9))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 9)");
							    }
							    $this->setState(6177);
							    $this->errorHandler->sync($this);
							    $_la = $this->input->LA(1);

							    if ($_la === self::NOT) {
							    	$this->setState(6176);
							    	$this->match(self::NOT);
							    }
							    $this->setState(6179);
							    $this->match(self::IN);
							    $this->setState(6180);
							    $this->match(self::LR_BRACKET);
							    $this->setState(6183);
							    $this->errorHandler->sync($this);

							    switch ($this->getInterpreter()->adaptivePredict($this->input, 908, $this->ctx)) {
							    	case 1:
							    	    $this->setState(6181);
							    	    $this->selectStatement();
							    	break;

							    	case 2:
							    	    $this->setState(6182);
							    	    $this->expressions();
							    	break;
							    }
							    $this->setState(6185);
							    $this->match(self::RR_BRACKET);
							break;

							case 6:
							    $localContext = new Context\IsNullPredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(6187);

							    if (!($this->precpred($this->ctx, 8))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 8)");
							    }
							    $this->setState(6188);
							    $this->match(self::IS);
							    $this->setState(6189);
							    $this->nullNotnull();
							break;

							case 7:
							    $localContext = new Context\SubqueryComparasionPredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(6190);

							    if (!($this->precpred($this->ctx, 6))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 6)");
							    }
							    $this->setState(6191);
							    $this->comparisonOperator();
							    $this->setState(6192);

							    $localContext->quantifier = $this->input->LT(1);
							    $_la = $this->input->LA(1);

							    if (!($_la === self::ALL || $_la === self::ANY || $_la === self::SOME)) {
							    	    $localContext->quantifier = $this->errorHandler->recoverInline($this);
							    } else {
							    	if ($this->input->LA(1) === Token::EOF) {
							    	    $this->matchedEOF = true;
							        }

							    	$this->errorHandler->reportMatch($this);
							    	$this->consume();
							    }
							    $this->setState(6193);
							    $this->match(self::LR_BRACKET);
							    $this->setState(6194);
							    $this->selectStatement();
							    $this->setState(6195);
							    $this->match(self::RR_BRACKET);
							break;

							case 8:
							    $localContext = new Context\LikePredicateContext(new Context\PredicateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
							    $this->setState(6197);

							    if (!($this->precpred($this->ctx, 3))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 3)");
							    }
							    $this->setState(6199);
							    $this->errorHandler->sync($this);
							    $_la = $this->input->LA(1);

							    if ($_la === self::NOT) {
							    	$this->setState(6198);
							    	$this->match(self::NOT);
							    }
							    $this->setState(6201);
							    $this->match(self::LIKE);
							    $this->setState(6202);
							    $this->recursivePredicate(0);
							    $this->setState(6205);
							    $this->errorHandler->sync($this);

							    switch ($this->getInterpreter()->adaptivePredict($this->input, 910, $this->ctx)) {
							        case 1:
							    	    $this->setState(6203);
							    	    $this->match(self::ESCAPE);
							    	    $this->setState(6204);
							    	    $this->match(self::STRING_LITERAL);
							    	break;
							    }
							break;
						} 
					}

					$this->setState(6211);
					$this->errorHandler->sync($this);

					$alt = $this->getInterpreter()->adaptivePredict($this->input, 912, $this->ctx);
				}
			} catch (RecognitionException $exception) {
				$localContext->exception = $exception;
				$this->errorHandler->reportError($this, $exception);
				$this->errorHandler->recover($this, $exception);
			} finally {
				$this->unrollRecursionContexts($parentContext);
			}

			return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function expressionForUpdate() : Context\ExpressionForUpdateContext
		{
			return $this->recursiveExpressionForUpdate(0);
		}

		/**
		 * @throws RecognitionException
		 */
		private function recursiveExpressionForUpdate(int $precedence) : Context\ExpressionForUpdateContext
		{
			$parentContext = $this->ctx;
			$parentState = $this->getState();
			$localContext = new Context\ExpressionForUpdateContext($this->ctx, $parentState);
			$previousContext = $localContext;
			$startState = 606;
			$this->enterRecursionRule($localContext, 606, self::RULE_expressionForUpdate, $precedence);

			try {
				$this->enterOuterAlt($localContext, 1);
				$this->setState(6216);
				$this->errorHandler->sync($this);

				switch ($this->getInterpreter()->adaptivePredict($this->input, 913, $this->ctx)) {
					case 1:
					    $localContext = new Context\NotExpressionForUpdateContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;

					    $this->setState(6213);

					    $localContext->notOperator = $this->input->LT(1);
					    $_la = $this->input->LA(1);

					    if (!($_la === self::NOT || $_la === self::EXCLAMATION_SYMBOL)) {
					    	    $localContext->notOperator = $this->errorHandler->recoverInline($this);
					    } else {
					    	if ($this->input->LA(1) === Token::EOF) {
					    	    $this->matchedEOF = true;
					        }

					    	$this->errorHandler->reportMatch($this);
					    	$this->consume();
					    }
					    $this->setState(6214);
					    $this->recursiveExpressionForUpdate(4);
					break;

					case 2:
					    $localContext = new Context\PredicateExpressionForUpdateContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6215);
					    $this->recursivePredicateForUpdate(0);
					break;
				}
				$this->ctx->stop = $this->input->LT(-1);
				$this->setState(6230);
				$this->errorHandler->sync($this);

				$alt = $this->getInterpreter()->adaptivePredict($this->input, 916, $this->ctx);

				while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
					if ($alt === 1) {
						if ($this->getParseListeners() !== null) {
						    $this->triggerExitRuleEvent();
						}

						$previousContext = $localContext;
						$this->setState(6228);
						$this->errorHandler->sync($this);

						switch ($this->getInterpreter()->adaptivePredict($this->input, 915, $this->ctx)) {
							case 1:
							    $localContext = new Context\LogicalExpressionForUpdateContext(new Context\ExpressionForUpdateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionForUpdate);
							    $this->setState(6218);

							    if (!($this->precpred($this->ctx, 3))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 3)");
							    }
							    $this->setState(6219);
							    $this->logicalOperator();
							    $this->setState(6220);
							    $this->recursiveExpressionForUpdate(4);
							break;

							case 2:
							    $localContext = new Context\IsExpressionForUpdateContext(new Context\ExpressionForUpdateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionForUpdate);
							    $this->setState(6222);

							    if (!($this->precpred($this->ctx, 2))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 2)");
							    }
							    $this->setState(6223);
							    $this->match(self::IS);
							    $this->setState(6225);
							    $this->errorHandler->sync($this);
							    $_la = $this->input->LA(1);

							    if ($_la === self::NOT) {
							    	$this->setState(6224);
							    	$this->match(self::NOT);
							    }
							    $this->setState(6227);

							    $localContext->testValue = $this->input->LT(1);
							    $_la = $this->input->LA(1);

							    if (!($_la === self::FALSE || $_la === self::TRUE || $_la === self::UNKNOWN)) {
							    	    $localContext->testValue = $this->errorHandler->recoverInline($this);
							    } else {
							    	if ($this->input->LA(1) === Token::EOF) {
							    	    $this->matchedEOF = true;
							        }

							    	$this->errorHandler->reportMatch($this);
							    	$this->consume();
							    }
							break;
						} 
					}

					$this->setState(6232);
					$this->errorHandler->sync($this);

					$alt = $this->getInterpreter()->adaptivePredict($this->input, 916, $this->ctx);
				}
			} catch (RecognitionException $exception) {
				$localContext->exception = $exception;
				$this->errorHandler->reportError($this, $exception);
				$this->errorHandler->recover($this, $exception);
			} finally {
				$this->unrollRecursionContexts($parentContext);
			}

			return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function predicateForUpdate() : Context\PredicateForUpdateContext
		{
			return $this->recursivePredicateForUpdate(0);
		}

		/**
		 * @throws RecognitionException
		 */
		private function recursivePredicateForUpdate(int $precedence) : Context\PredicateForUpdateContext
		{
			$parentContext = $this->ctx;
			$parentState = $this->getState();
			$localContext = new Context\PredicateForUpdateContext($this->ctx, $parentState);
			$previousContext = $localContext;
			$startState = 608;
			$this->enterRecursionRule($localContext, 608, self::RULE_predicateForUpdate, $precedence);

			try {
				$this->enterOuterAlt($localContext, 1);
				$localContext = new Context\ExpressionAtomPredicateForUpdateContext($localContext);
				$this->ctx = $localContext;
				$previousContext = $localContext;

				$this->setState(6236);
				$this->errorHandler->sync($this);

				switch ($this->getInterpreter()->adaptivePredict($this->input, 917, $this->ctx)) {
				    case 1:
					    $this->setState(6234);
					    $this->match(self::LOCAL_ID);
					    $this->setState(6235);
					    $this->match(self::VAR_ASSIGN);
					break;
				}
				$this->setState(6238);
				$this->recursiveExpressionAtomForUpdate(0);
				$this->ctx->stop = $this->input->LT(-1);
				$this->setState(6297);
				$this->errorHandler->sync($this);

				$alt = $this->getInterpreter()->adaptivePredict($this->input, 925, $this->ctx);

				while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
					if ($alt === 1) {
						if ($this->getParseListeners() !== null) {
						    $this->triggerExitRuleEvent();
						}

						$previousContext = $localContext;
						$this->setState(6295);
						$this->errorHandler->sync($this);

						switch ($this->getInterpreter()->adaptivePredict($this->input, 924, $this->ctx)) {
							case 1:
							    $localContext = new Context\BinaryComparasionPredicateForUpdateContext(new Context\PredicateForUpdateContext($parentContext, $parentState));
							    $localContext->left = $previousContext;

							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicateForUpdate);
							    $this->setState(6240);

							    if (!($this->precpred($this->ctx, 7))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 7)");
							    }
							    $this->setState(6241);
							    $this->comparisonOperator();
							    $this->setState(6242);
							    $localContext->right = $this->recursivePredicateForUpdate(8);
							break;

							case 2:
							    $localContext = new Context\BetweenPredicateForUpdateContext(new Context\PredicateForUpdateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicateForUpdate);
							    $this->setState(6244);

							    if (!($this->precpred($this->ctx, 5))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 5)");
							    }
							    $this->setState(6246);
							    $this->errorHandler->sync($this);
							    $_la = $this->input->LA(1);

							    if ($_la === self::NOT) {
							    	$this->setState(6245);
							    	$this->match(self::NOT);
							    }
							    $this->setState(6248);
							    $this->match(self::BETWEEN);
							    $this->setState(6249);
							    $this->recursivePredicateForUpdate(0);
							    $this->setState(6250);
							    $this->match(self::AND);
							    $this->setState(6251);
							    $this->recursivePredicateForUpdate(6);
							break;

							case 3:
							    $localContext = new Context\SoundsLikePredicateForUpdateContext(new Context\PredicateForUpdateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicateForUpdate);
							    $this->setState(6253);

							    if (!($this->precpred($this->ctx, 4))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 4)");
							    }
							    $this->setState(6254);
							    $this->match(self::SOUNDS);
							    $this->setState(6255);
							    $this->match(self::LIKE);
							    $this->setState(6256);
							    $this->recursivePredicateForUpdate(5);
							break;

							case 4:
							    $localContext = new Context\InPredicateForUpdateContext(new Context\PredicateForUpdateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicateForUpdate);
							    $this->setState(6257);

							    if (!($this->precpred($this->ctx, 9))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 9)");
							    }
							    $this->setState(6259);
							    $this->errorHandler->sync($this);
							    $_la = $this->input->LA(1);

							    if ($_la === self::NOT) {
							    	$this->setState(6258);
							    	$this->match(self::NOT);
							    }
							    $this->setState(6261);
							    $this->match(self::IN);
							    $this->setState(6262);
							    $this->match(self::LR_BRACKET);
							    $this->setState(6265);
							    $this->errorHandler->sync($this);

							    switch ($this->getInterpreter()->adaptivePredict($this->input, 920, $this->ctx)) {
							    	case 1:
							    	    $this->setState(6263);
							    	    $this->selectStatement();
							    	break;

							    	case 2:
							    	    $this->setState(6264);
							    	    $this->expressionsForUpdate();
							    	break;
							    }
							    $this->setState(6267);
							    $this->match(self::RR_BRACKET);
							break;

							case 5:
							    $localContext = new Context\IsNullPredicateForUpdateContext(new Context\PredicateForUpdateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicateForUpdate);
							    $this->setState(6269);

							    if (!($this->precpred($this->ctx, 8))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 8)");
							    }
							    $this->setState(6270);
							    $this->match(self::IS);
							    $this->setState(6271);
							    $this->nullNotnull();
							break;

							case 6:
							    $localContext = new Context\SubqueryComparasionPredicateForUpdateContext(new Context\PredicateForUpdateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicateForUpdate);
							    $this->setState(6272);

							    if (!($this->precpred($this->ctx, 6))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 6)");
							    }
							    $this->setState(6273);
							    $this->comparisonOperator();
							    $this->setState(6274);

							    $localContext->quantifier = $this->input->LT(1);
							    $_la = $this->input->LA(1);

							    if (!($_la === self::ALL || $_la === self::ANY || $_la === self::SOME)) {
							    	    $localContext->quantifier = $this->errorHandler->recoverInline($this);
							    } else {
							    	if ($this->input->LA(1) === Token::EOF) {
							    	    $this->matchedEOF = true;
							        }

							    	$this->errorHandler->reportMatch($this);
							    	$this->consume();
							    }
							    $this->setState(6275);
							    $this->match(self::LR_BRACKET);
							    $this->setState(6276);
							    $this->selectStatement();
							    $this->setState(6277);
							    $this->match(self::RR_BRACKET);
							break;

							case 7:
							    $localContext = new Context\LikePredicateForUpdateContext(new Context\PredicateForUpdateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicateForUpdate);
							    $this->setState(6279);

							    if (!($this->precpred($this->ctx, 3))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 3)");
							    }
							    $this->setState(6281);
							    $this->errorHandler->sync($this);
							    $_la = $this->input->LA(1);

							    if ($_la === self::NOT) {
							    	$this->setState(6280);
							    	$this->match(self::NOT);
							    }
							    $this->setState(6283);
							    $this->match(self::LIKE);
							    $this->setState(6284);
							    $this->recursivePredicateForUpdate(0);
							    $this->setState(6287);
							    $this->errorHandler->sync($this);

							    switch ($this->getInterpreter()->adaptivePredict($this->input, 922, $this->ctx)) {
							        case 1:
							    	    $this->setState(6285);
							    	    $this->match(self::ESCAPE);
							    	    $this->setState(6286);
							    	    $this->match(self::STRING_LITERAL);
							    	break;
							    }
							break;

							case 8:
							    $localContext = new Context\RegexpPredicateForUpdateContext(new Context\PredicateForUpdateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicateForUpdate);
							    $this->setState(6289);

							    if (!($this->precpred($this->ctx, 2))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 2)");
							    }
							    $this->setState(6291);
							    $this->errorHandler->sync($this);
							    $_la = $this->input->LA(1);

							    if ($_la === self::NOT) {
							    	$this->setState(6290);
							    	$this->match(self::NOT);
							    }
							    $this->setState(6293);

							    $localContext->regex = $this->input->LT(1);
							    $_la = $this->input->LA(1);

							    if (!($_la === self::REGEXP || $_la === self::RLIKE)) {
							    	    $localContext->regex = $this->errorHandler->recoverInline($this);
							    } else {
							    	if ($this->input->LA(1) === Token::EOF) {
							    	    $this->matchedEOF = true;
							        }

							    	$this->errorHandler->reportMatch($this);
							    	$this->consume();
							    }
							    $this->setState(6294);
							    $this->recursivePredicate(0);
							break;
						} 
					}

					$this->setState(6299);
					$this->errorHandler->sync($this);

					$alt = $this->getInterpreter()->adaptivePredict($this->input, 925, $this->ctx);
				}
			} catch (RecognitionException $exception) {
				$localContext->exception = $exception;
				$this->errorHandler->reportError($this, $exception);
				$this->errorHandler->recover($this, $exception);
			} finally {
				$this->unrollRecursionContexts($parentContext);
			}

			return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function expressionAtomForUpdate() : Context\ExpressionAtomForUpdateContext
		{
			return $this->recursiveExpressionAtomForUpdate(0);
		}

		/**
		 * @throws RecognitionException
		 */
		private function recursiveExpressionAtomForUpdate(int $precedence) : Context\ExpressionAtomForUpdateContext
		{
			$parentContext = $this->ctx;
			$parentState = $this->getState();
			$localContext = new Context\ExpressionAtomForUpdateContext($this->ctx, $parentState);
			$previousContext = $localContext;
			$startState = 610;
			$this->enterRecursionRule($localContext, 610, self::RULE_expressionAtomForUpdate, $precedence);

			try {
				$this->enterOuterAlt($localContext, 1);
				$this->setState(6345);
				$this->errorHandler->sync($this);

				switch ($this->getInterpreter()->adaptivePredict($this->input, 928, $this->ctx)) {
					case 1:
					    $localContext = new Context\ConstantExpressionAtomForUpdateContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;

					    $this->setState(6301);
					    $this->constant();
					break;

					case 2:
					    $localContext = new Context\FullColumnNameExpressionAtomForUpdateContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6302);
					    $this->fullColumnName();
					break;

					case 3:
					    $localContext = new Context\FunctionCallExpressionAtomForUpdateContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6303);
					    $this->functionCall();
					break;

					case 4:
					    $localContext = new Context\MysqlVariableExpressionAtomForUpdateContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6304);
					    $this->mysqlVariable();
					break;

					case 5:
					    $localContext = new Context\UnaryExpressionAtomForUpdateContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6305);
					    $this->unaryOperator();
					    $this->setState(6306);
					    $this->recursiveExpressionAtomForUpdate(9);
					break;

					case 6:
					    $localContext = new Context\BinaryExpressionAtomForUpdateContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6308);
					    $this->match(self::BINARY);
					    $this->setState(6309);
					    $this->recursiveExpressionAtomForUpdate(8);
					break;

					case 7:
					    $localContext = new Context\NestedExpressionAtomForUpdateContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6310);
					    $this->match(self::LR_BRACKET);
					    $this->setState(6311);
					    $this->recursiveExpressionForUpdate(0);
					    $this->setState(6316);
					    $this->errorHandler->sync($this);

					    $_la = $this->input->LA(1);
					    while ($_la === self::COMMA) {
					    	$this->setState(6312);
					    	$this->match(self::COMMA);
					    	$this->setState(6313);
					    	$this->recursiveExpressionForUpdate(0);
					    	$this->setState(6318);
					    	$this->errorHandler->sync($this);
					    	$_la = $this->input->LA(1);
					    }
					    $this->setState(6319);
					    $this->match(self::RR_BRACKET);
					break;

					case 8:
					    $localContext = new Context\NestedRowExpressionAtomForUpdateContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6321);
					    $this->match(self::ROW);
					    $this->setState(6322);
					    $this->match(self::LR_BRACKET);
					    $this->setState(6323);
					    $this->recursiveExpressionForUpdate(0);
					    $this->setState(6326); 
					    $this->errorHandler->sync($this);

					    $_la = $this->input->LA(1);
					    do {
					    	$this->setState(6324);
					    	$this->match(self::COMMA);
					    	$this->setState(6325);
					    	$this->recursiveExpressionForUpdate(0);
					    	$this->setState(6328); 
					    	$this->errorHandler->sync($this);
					    	$_la = $this->input->LA(1);
					    } while ($_la === self::COMMA);
					    $this->setState(6330);
					    $this->match(self::RR_BRACKET);
					break;

					case 9:
					    $localContext = new Context\ExistsExpessionAtomForUpdateContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6332);
					    $this->match(self::EXISTS);
					    $this->setState(6333);
					    $this->match(self::LR_BRACKET);
					    $this->setState(6334);
					    $this->selectStatement();
					    $this->setState(6335);
					    $this->match(self::RR_BRACKET);
					break;

					case 10:
					    $localContext = new Context\SubqueryExpessionAtomForUpdateContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6337);
					    $this->match(self::LR_BRACKET);
					    $this->setState(6338);
					    $this->selectStatement();
					    $this->setState(6339);
					    $this->match(self::RR_BRACKET);
					break;

					case 11:
					    $localContext = new Context\IntervalExpressionAtomForUpdateContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6341);
					    $this->match(self::INTERVAL);
					    $this->setState(6342);
					    $this->recursiveExpressionForUpdate(0);
					    $this->setState(6343);
					    $this->intervalType();
					break;
				}
				$this->ctx->stop = $this->input->LT(-1);
				$this->setState(6360);
				$this->errorHandler->sync($this);

				$alt = $this->getInterpreter()->adaptivePredict($this->input, 930, $this->ctx);

				while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
					if ($alt === 1) {
						if ($this->getParseListeners() !== null) {
						    $this->triggerExitRuleEvent();
						}

						$previousContext = $localContext;
						$this->setState(6358);
						$this->errorHandler->sync($this);

						switch ($this->getInterpreter()->adaptivePredict($this->input, 929, $this->ctx)) {
							case 1:
							    $localContext = new Context\BitExpressionAtomForUpdateContext(new Context\ExpressionAtomForUpdateContext($parentContext, $parentState));
							    $localContext->left = $previousContext;

							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionAtomForUpdate);
							    $this->setState(6347);

							    if (!($this->precpred($this->ctx, 2))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 2)");
							    }
							    $this->setState(6348);
							    $this->bitOperator();
							    $this->setState(6349);
							    $localContext->right = $this->recursiveExpressionAtomForUpdate(3);
							break;

							case 2:
							    $localContext = new Context\MathExpressionAtomForUpdateContext(new Context\ExpressionAtomForUpdateContext($parentContext, $parentState));
							    $localContext->left = $previousContext;

							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionAtomForUpdate);
							    $this->setState(6351);

							    if (!($this->precpred($this->ctx, 1))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 1)");
							    }
							    $this->setState(6352);
							    $this->mathOperator();
							    $this->setState(6353);
							    $localContext->right = $this->recursiveExpressionAtomForUpdate(2);
							break;

							case 3:
							    $localContext = new Context\CollateExpressionAtomForUpdateContext(new Context\ExpressionAtomForUpdateContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionAtomForUpdate);
							    $this->setState(6355);

							    if (!($this->precpred($this->ctx, 11))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 11)");
							    }
							    $this->setState(6356);
							    $this->match(self::COLLATE);
							    $this->setState(6357);
							    $this->collationName();
							break;
						} 
					}

					$this->setState(6362);
					$this->errorHandler->sync($this);

					$alt = $this->getInterpreter()->adaptivePredict($this->input, 930, $this->ctx);
				}
			} catch (RecognitionException $exception) {
				$localContext->exception = $exception;
				$this->errorHandler->reportError($this, $exception);
				$this->errorHandler->recover($this, $exception);
			} finally {
				$this->unrollRecursionContexts($parentContext);
			}

			return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function expressionAtom() : Context\ExpressionAtomContext
		{
			return $this->recursiveExpressionAtom(0);
		}

		/**
		 * @throws RecognitionException
		 */
		private function recursiveExpressionAtom(int $precedence) : Context\ExpressionAtomContext
		{
			$parentContext = $this->ctx;
			$parentState = $this->getState();
			$localContext = new Context\ExpressionAtomContext($this->ctx, $parentState);
			$previousContext = $localContext;
			$startState = 612;
			$this->enterRecursionRule($localContext, 612, self::RULE_expressionAtom, $precedence);

			try {
				$this->enterOuterAlt($localContext, 1);
				$this->setState(6408);
				$this->errorHandler->sync($this);

				switch ($this->getInterpreter()->adaptivePredict($this->input, 933, $this->ctx)) {
					case 1:
					    $localContext = new Context\ConstantExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;

					    $this->setState(6364);
					    $this->constant();
					break;

					case 2:
					    $localContext = new Context\FullColumnNameExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6365);
					    $this->fullColumnName();
					break;

					case 3:
					    $localContext = new Context\FunctionCallExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6366);
					    $this->functionCall();
					break;

					case 4:
					    $localContext = new Context\MysqlVariableExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6367);
					    $this->mysqlVariable();
					break;

					case 5:
					    $localContext = new Context\UnaryExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6368);
					    $this->unaryOperator();
					    $this->setState(6369);
					    $this->recursiveExpressionAtom(9);
					break;

					case 6:
					    $localContext = new Context\BinaryExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6371);
					    $this->match(self::BINARY);
					    $this->setState(6372);
					    $this->recursiveExpressionAtom(8);
					break;

					case 7:
					    $localContext = new Context\NestedExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6373);
					    $this->match(self::LR_BRACKET);
					    $this->setState(6374);
					    $this->recursiveExpression(0);
					    $this->setState(6379);
					    $this->errorHandler->sync($this);

					    $_la = $this->input->LA(1);
					    while ($_la === self::COMMA) {
					    	$this->setState(6375);
					    	$this->match(self::COMMA);
					    	$this->setState(6376);
					    	$this->recursiveExpression(0);
					    	$this->setState(6381);
					    	$this->errorHandler->sync($this);
					    	$_la = $this->input->LA(1);
					    }
					    $this->setState(6382);
					    $this->match(self::RR_BRACKET);
					break;

					case 8:
					    $localContext = new Context\NestedRowExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6384);
					    $this->match(self::ROW);
					    $this->setState(6385);
					    $this->match(self::LR_BRACKET);
					    $this->setState(6386);
					    $this->recursiveExpression(0);
					    $this->setState(6389); 
					    $this->errorHandler->sync($this);

					    $_la = $this->input->LA(1);
					    do {
					    	$this->setState(6387);
					    	$this->match(self::COMMA);
					    	$this->setState(6388);
					    	$this->recursiveExpression(0);
					    	$this->setState(6391); 
					    	$this->errorHandler->sync($this);
					    	$_la = $this->input->LA(1);
					    } while ($_la === self::COMMA);
					    $this->setState(6393);
					    $this->match(self::RR_BRACKET);
					break;

					case 9:
					    $localContext = new Context\ExistsExpessionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6395);
					    $this->match(self::EXISTS);
					    $this->setState(6396);
					    $this->match(self::LR_BRACKET);
					    $this->setState(6397);
					    $this->selectStatement();
					    $this->setState(6398);
					    $this->match(self::RR_BRACKET);
					break;

					case 10:
					    $localContext = new Context\SubqueryExpessionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6400);
					    $this->match(self::LR_BRACKET);
					    $this->setState(6401);
					    $this->selectStatement();
					    $this->setState(6402);
					    $this->match(self::RR_BRACKET);
					break;

					case 11:
					    $localContext = new Context\IntervalExpressionAtomContext($localContext);
					    $this->ctx = $localContext;
					    $previousContext = $localContext;
					    $this->setState(6404);
					    $this->match(self::INTERVAL);
					    $this->setState(6405);
					    $this->recursiveExpression(0);
					    $this->setState(6406);
					    $this->intervalType();
					break;
				}
				$this->ctx->stop = $this->input->LT(-1);
				$this->setState(6423);
				$this->errorHandler->sync($this);

				$alt = $this->getInterpreter()->adaptivePredict($this->input, 935, $this->ctx);

				while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
					if ($alt === 1) {
						if ($this->getParseListeners() !== null) {
						    $this->triggerExitRuleEvent();
						}

						$previousContext = $localContext;
						$this->setState(6421);
						$this->errorHandler->sync($this);

						switch ($this->getInterpreter()->adaptivePredict($this->input, 934, $this->ctx)) {
							case 1:
							    $localContext = new Context\BitExpressionAtomContext(new Context\ExpressionAtomContext($parentContext, $parentState));
							    $localContext->left = $previousContext;

							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionAtom);
							    $this->setState(6410);

							    if (!($this->precpred($this->ctx, 2))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 2)");
							    }
							    $this->setState(6411);
							    $this->bitOperator();
							    $this->setState(6412);
							    $localContext->right = $this->recursiveExpressionAtom(3);
							break;

							case 2:
							    $localContext = new Context\MathExpressionAtomContext(new Context\ExpressionAtomContext($parentContext, $parentState));
							    $localContext->left = $previousContext;

							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionAtom);
							    $this->setState(6414);

							    if (!($this->precpred($this->ctx, 1))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 1)");
							    }
							    $this->setState(6415);
							    $this->mathOperator();
							    $this->setState(6416);
							    $localContext->right = $this->recursiveExpressionAtom(2);
							break;

							case 3:
							    $localContext = new Context\CollateExpressionAtomContext(new Context\ExpressionAtomContext($parentContext, $parentState));
							    $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionAtom);
							    $this->setState(6418);

							    if (!($this->precpred($this->ctx, 11))) {
							        throw new FailedPredicateException($this, "\\\$this->precpred(\\\$this->ctx, 11)");
							    }
							    $this->setState(6419);
							    $this->match(self::COLLATE);
							    $this->setState(6420);
							    $this->collationName();
							break;
						} 
					}

					$this->setState(6425);
					$this->errorHandler->sync($this);

					$alt = $this->getInterpreter()->adaptivePredict($this->input, 935, $this->ctx);
				}
			} catch (RecognitionException $exception) {
				$localContext->exception = $exception;
				$this->errorHandler->reportError($this, $exception);
				$this->errorHandler->recover($this, $exception);
			} finally {
				$this->unrollRecursionContexts($parentContext);
			}

			return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function unaryOperator() : Context\UnaryOperatorContext
		{
		    $localContext = new Context\UnaryOperatorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 614, self::RULE_unaryOperator);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6426);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::NOT || (((($_la - 1008)) & ~0x3f) === 0 && ((1 << ($_la - 1008)) & ((1 << (self::PLUS - 1008)) | (1 << (self::MINUS - 1008)) | (1 << (self::EXCLAMATION_SYMBOL - 1008)) | (1 << (self::BIT_NOT_OP - 1008)))) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function comparisonOperator() : Context\ComparisonOperatorContext
		{
		    $localContext = new Context\ComparisonOperatorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 616, self::RULE_comparisonOperator);

		    try {
		        $this->setState(6442);
		        $this->errorHandler->sync($this);

		        switch ($this->getInterpreter()->adaptivePredict($this->input, 936, $this->ctx)) {
		        	case 1:
		        	    $this->enterOuterAlt($localContext, 1);
		        	    $this->setState(6428);
		        	    $this->match(self::EQUAL_SYMBOL);
		        	break;

		        	case 2:
		        	    $this->enterOuterAlt($localContext, 2);
		        	    $this->setState(6429);
		        	    $this->match(self::GREATER_SYMBOL);
		        	break;

		        	case 3:
		        	    $this->enterOuterAlt($localContext, 3);
		        	    $this->setState(6430);
		        	    $this->match(self::LESS_SYMBOL);
		        	break;

		        	case 4:
		        	    $this->enterOuterAlt($localContext, 4);
		        	    $this->setState(6431);
		        	    $this->match(self::LESS_SYMBOL);
		        	    $this->setState(6432);
		        	    $this->match(self::EQUAL_SYMBOL);
		        	break;

		        	case 5:
		        	    $this->enterOuterAlt($localContext, 5);
		        	    $this->setState(6433);
		        	    $this->match(self::GREATER_SYMBOL);
		        	    $this->setState(6434);
		        	    $this->match(self::EQUAL_SYMBOL);
		        	break;

		        	case 6:
		        	    $this->enterOuterAlt($localContext, 6);
		        	    $this->setState(6435);
		        	    $this->match(self::LESS_SYMBOL);
		        	    $this->setState(6436);
		        	    $this->match(self::GREATER_SYMBOL);
		        	break;

		        	case 7:
		        	    $this->enterOuterAlt($localContext, 7);
		        	    $this->setState(6437);
		        	    $this->match(self::EXCLAMATION_SYMBOL);
		        	    $this->setState(6438);
		        	    $this->match(self::EQUAL_SYMBOL);
		        	break;

		        	case 8:
		        	    $this->enterOuterAlt($localContext, 8);
		        	    $this->setState(6439);
		        	    $this->match(self::LESS_SYMBOL);
		        	    $this->setState(6440);
		        	    $this->match(self::EQUAL_SYMBOL);
		        	    $this->setState(6441);
		        	    $this->match(self::GREATER_SYMBOL);
		        	break;
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function logicalOperator() : Context\LogicalOperatorContext
		{
		    $localContext = new Context\LogicalOperatorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 618, self::RULE_logicalOperator);

		    try {
		        $this->setState(6451);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::AND:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(6444);
		            	$this->match(self::AND);
		            	break;

		            case self::BIT_AND_OP:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(6445);
		            	$this->match(self::BIT_AND_OP);
		            	$this->setState(6446);
		            	$this->match(self::BIT_AND_OP);
		            	break;

		            case self::XOR:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(6447);
		            	$this->match(self::XOR);
		            	break;

		            case self::OR:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(6448);
		            	$this->match(self::OR);
		            	break;

		            case self::BIT_OR_OP:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(6449);
		            	$this->match(self::BIT_OR_OP);
		            	$this->setState(6450);
		            	$this->match(self::BIT_OR_OP);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function bitOperator() : Context\BitOperatorContext
		{
		    $localContext = new Context\BitOperatorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 620, self::RULE_bitOperator);

		    try {
		        $this->setState(6460);
		        $this->errorHandler->sync($this);

		        switch ($this->input->LA(1)) {
		            case self::LESS_SYMBOL:
		            	$this->enterOuterAlt($localContext, 1);
		            	$this->setState(6453);
		            	$this->match(self::LESS_SYMBOL);
		            	$this->setState(6454);
		            	$this->match(self::LESS_SYMBOL);
		            	break;

		            case self::GREATER_SYMBOL:
		            	$this->enterOuterAlt($localContext, 2);
		            	$this->setState(6455);
		            	$this->match(self::GREATER_SYMBOL);
		            	$this->setState(6456);
		            	$this->match(self::GREATER_SYMBOL);
		            	break;

		            case self::BIT_AND_OP:
		            	$this->enterOuterAlt($localContext, 3);
		            	$this->setState(6457);
		            	$this->match(self::BIT_AND_OP);
		            	break;

		            case self::BIT_XOR_OP:
		            	$this->enterOuterAlt($localContext, 4);
		            	$this->setState(6458);
		            	$this->match(self::BIT_XOR_OP);
		            	break;

		            case self::BIT_OR_OP:
		            	$this->enterOuterAlt($localContext, 5);
		            	$this->setState(6459);
		            	$this->match(self::BIT_OR_OP);
		            	break;

		        default:
		        	throw new NoViableAltException($this);
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function mathOperator() : Context\MathOperatorContext
		{
		    $localContext = new Context\MathOperatorContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 622, self::RULE_mathOperator);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6462);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 1005)) & ~0x3f) === 0 && ((1 << ($_la - 1005)) & ((1 << (self::STAR - 1005)) | (1 << (self::DIVIDE - 1005)) | (1 << (self::MODULE - 1005)) | (1 << (self::PLUS - 1005)) | (1 << (self::MINUSMINUS - 1005)) | (1 << (self::MINUS - 1005)) | (1 << (self::DIV - 1005)) | (1 << (self::MOD - 1005)))) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function charsetNameBase() : Context\CharsetNameBaseContext
		{
		    $localContext = new Context\CharsetNameBaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 624, self::RULE_charsetNameBase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6464);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 639)) & ~0x3f) === 0 && ((1 << ($_la - 639)) & ((1 << (self::ARMSCII8 - 639)) | (1 << (self::ASCII - 639)) | (1 << (self::BIG5 - 639)) | (1 << (self::CP1250 - 639)) | (1 << (self::CP1251 - 639)) | (1 << (self::CP1256 - 639)) | (1 << (self::CP1257 - 639)) | (1 << (self::CP850 - 639)) | (1 << (self::CP852 - 639)) | (1 << (self::CP866 - 639)) | (1 << (self::CP932 - 639)) | (1 << (self::DEC8 - 639)) | (1 << (self::EUCJPMS - 639)) | (1 << (self::EUCKR - 639)) | (1 << (self::GB2312 - 639)) | (1 << (self::GBK - 639)) | (1 << (self::GEOSTD8 - 639)) | (1 << (self::GREEK - 639)) | (1 << (self::HEBREW - 639)) | (1 << (self::HP8 - 639)) | (1 << (self::KEYBCS2 - 639)) | (1 << (self::KOI8R - 639)) | (1 << (self::KOI8U - 639)) | (1 << (self::LATIN1 - 639)) | (1 << (self::LATIN2 - 639)) | (1 << (self::LATIN5 - 639)) | (1 << (self::LATIN7 - 639)) | (1 << (self::MACCE - 639)) | (1 << (self::MACROMAN - 639)) | (1 << (self::SJIS - 639)) | (1 << (self::SWE7 - 639)) | (1 << (self::TIS620 - 639)) | (1 << (self::UCS2 - 639)) | (1 << (self::UJIS - 639)) | (1 << (self::UTF16 - 639)) | (1 << (self::UTF16LE - 639)) | (1 << (self::UTF32 - 639)) | (1 << (self::UTF8 - 639)) | (1 << (self::UTF8MB3 - 639)) | (1 << (self::UTF8MB4 - 639)))) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function transactionLevelBase() : Context\TransactionLevelBaseContext
		{
		    $localContext = new Context\TransactionLevelBaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 626, self::RULE_transactionLevelBase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6466);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 691)) & ~0x3f) === 0 && ((1 << ($_la - 691)) & ((1 << (self::REPEATABLE - 691)) | (1 << (self::COMMITTED - 691)) | (1 << (self::UNCOMMITTED - 691)) | (1 << (self::SERIALIZABLE - 691)))) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function privilegesBase() : Context\PrivilegesBaseContext
		{
		    $localContext = new Context\PrivilegesBaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 628, self::RULE_privilegesBase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6468);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 604)) & ~0x3f) === 0 && ((1 << ($_la - 604)) & ((1 << (self::TABLES - 604)) | (1 << (self::ROUTINE - 604)) | (1 << (self::EXECUTE - 604)) | (1 << (self::FILE - 604)) | (1 << (self::PROCESS - 604)) | (1 << (self::RELOAD - 604)) | (1 << (self::SHUTDOWN - 604)) | (1 << (self::SUPER - 604)) | (1 << (self::PRIVILEGES - 604)))) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function intervalTypeBase() : Context\IntervalTypeBaseContext
		{
		    $localContext = new Context\IntervalTypeBaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 630, self::RULE_intervalTypeBase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6470);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 596)) & ~0x3f) === 0 && ((1 << ($_la - 596)) & ((1 << (self::QUARTER - 596)) | (1 << (self::MONTH - 596)) | (1 << (self::DAY - 596)) | (1 << (self::HOUR - 596)) | (1 << (self::MINUTE - 596)) | (1 << (self::WEEK - 596)) | (1 << (self::SECOND - 596)) | (1 << (self::MICROSECOND - 596)))) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function dataTypeBase() : Context\DataTypeBaseContext
		{
		    $localContext = new Context\DataTypeBaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 632, self::RULE_dataTypeBase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6472);

		        $_la = $this->input->LA(1);

		        if (!((((($_la - 199)) & ~0x3f) === 0 && ((1 << ($_la - 199)) & ((1 << (self::DATE - 199)) | (1 << (self::TIME - 199)) | (1 << (self::TIMESTAMP - 199)) | (1 << (self::DATETIME - 199)) | (1 << (self::YEAR - 199)) | (1 << (self::TEXT - 199)) | (1 << (self::ENUM - 199)))) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function keywordsCanBeId() : Context\KeywordsCanBeIdContext
		{
		    $localContext = new Context\KeywordsCanBeIdContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 634, self::RULE_keywordsCanBeId);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6474);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::CURRENT || $_la === self::DIAGNOSTICS || $_la === self::NUMBER || $_la === self::STACKED || (((($_la - 221)) & ~0x3f) === 0 && ((1 << ($_la - 221)) & ((1 << (self::SERIAL - 221)) | (1 << (self::ACCOUNT - 221)) | (1 << (self::ACTION - 221)) | (1 << (self::AFTER - 221)) | (1 << (self::AGGREGATE - 221)) | (1 << (self::ALGORITHM - 221)) | (1 << (self::ANY - 221)) | (1 << (self::AT - 221)) | (1 << (self::AUTHORS - 221)) | (1 << (self::AUTOCOMMIT - 221)) | (1 << (self::AUTOEXTEND_SIZE - 221)) | (1 << (self::AUTO_INCREMENT - 221)) | (1 << (self::AVG_ROW_LENGTH - 221)) | (1 << (self::BEGIN - 221)) | (1 << (self::BINLOG - 221)) | (1 << (self::BIT - 221)))) !== 0) || (((($_la - 285)) & ~0x3f) === 0 && ((1 << ($_la - 285)) & ((1 << (self::BLOCK - 285)) | (1 << (self::BOOL - 285)) | (1 << (self::BOOLEAN - 285)) | (1 << (self::BTREE - 285)) | (1 << (self::CACHE - 285)) | (1 << (self::CASCADED - 285)) | (1 << (self::CHAIN - 285)) | (1 << (self::CHANGED - 285)) | (1 << (self::CHANNEL - 285)) | (1 << (self::CHECKSUM - 285)) | (1 << (self::PAGE_CHECKSUM - 285)) | (1 << (self::CIPHER - 285)) | (1 << (self::CLASS_ORIGIN - 285)) | (1 << (self::CLIENT - 285)) | (1 << (self::CLOSE - 285)) | (1 << (self::COALESCE - 285)) | (1 << (self::CODE - 285)) | (1 << (self::COLUMNS - 285)) | (1 << (self::COLUMN_FORMAT - 285)) | (1 << (self::COLUMN_NAME - 285)) | (1 << (self::COMMENT - 285)) | (1 << (self::COMMIT - 285)) | (1 << (self::COMPACT - 285)) | (1 << (self::COMPLETION - 285)) | (1 << (self::COMPRESSED - 285)) | (1 << (self::COMPRESSION - 285)) | (1 << (self::CONCURRENT - 285)) | (1 << (self::CONNECTION - 285)) | (1 << (self::CONSISTENT - 285)) | (1 << (self::CONSTRAINT_CATALOG - 285)) | (1 << (self::CONSTRAINT_SCHEMA - 285)) | (1 << (self::CONSTRAINT_NAME - 285)) | (1 << (self::CONTAINS - 285)) | (1 << (self::CONTEXT - 285)) | (1 << (self::CONTRIBUTORS - 285)) | (1 << (self::COPY - 285)) | (1 << (self::CPU - 285)) | (1 << (self::CURSOR_NAME - 285)) | (1 << (self::DATA - 285)) | (1 << (self::DATAFILE - 285)) | (1 << (self::DEALLOCATE - 285)) | (1 << (self::DEFAULT_AUTH - 285)) | (1 << (self::DEFINER - 285)) | (1 << (self::DELAY_KEY_WRITE - 285)) | (1 << (self::DES_KEY_FILE - 285)) | (1 << (self::DIRECTORY - 285)) | (1 << (self::DISABLE - 285)) | (1 << (self::DISCARD - 285)) | (1 << (self::DISK - 285)) | (1 << (self::DO - 285)) | (1 << (self::DUMPFILE - 285)) | (1 << (self::DUPLICATE - 285)) | (1 << (self::DYNAMIC - 285)) | (1 << (self::ENABLE - 285)) | (1 << (self::ENCRYPTION - 285)) | (1 << (self::END - 285)) | (1 << (self::ENDS - 285)) | (1 << (self::ENGINE - 285)) | (1 << (self::ENGINES - 285)) | (1 << (self::ERROR - 285)) | (1 << (self::ERRORS - 285)) | (1 << (self::ESCAPE - 285)) | (1 << (self::EVEN - 285)) | (1 << (self::EVENT - 285)))) !== 0) || (((($_la - 349)) & ~0x3f) === 0 && ((1 << ($_la - 349)) & ((1 << (self::EVENTS - 349)) | (1 << (self::EVERY - 349)) | (1 << (self::EXCHANGE - 349)) | (1 << (self::EXCLUSIVE - 349)) | (1 << (self::EXPIRE - 349)) | (1 << (self::EXPORT - 349)) | (1 << (self::EXTENDED - 349)) | (1 << (self::EXTENT_SIZE - 349)) | (1 << (self::FAST - 349)) | (1 << (self::FAULTS - 349)) | (1 << (self::FIELDS - 349)) | (1 << (self::FILE_BLOCK_SIZE - 349)) | (1 << (self::FILTER - 349)) | (1 << (self::FIRST - 349)) | (1 << (self::FIXED - 349)) | (1 << (self::FLUSH - 349)) | (1 << (self::FOLLOWS - 349)) | (1 << (self::FOUND - 349)) | (1 << (self::FULL - 349)) | (1 << (self::FUNCTION - 349)) | (1 << (self::GENERAL - 349)) | (1 << (self::GLOBAL - 349)) | (1 << (self::GRANTS - 349)) | (1 << (self::GROUP_REPLICATION - 349)) | (1 << (self::HANDLER - 349)) | (1 << (self::HASH - 349)) | (1 << (self::HELP - 349)) | (1 << (self::HOST - 349)) | (1 << (self::HOSTS - 349)) | (1 << (self::IDENTIFIED - 349)) | (1 << (self::IGNORE_SERVER_IDS - 349)) | (1 << (self::IMPORT - 349)) | (1 << (self::INDEXES - 349)) | (1 << (self::INITIAL_SIZE - 349)) | (1 << (self::INPLACE - 349)) | (1 << (self::INSERT_METHOD - 349)) | (1 << (self::INSTALL - 349)) | (1 << (self::INSTANCE - 349)) | (1 << (self::INVOKER - 349)) | (1 << (self::IO - 349)) | (1 << (self::IO_THREAD - 349)) | (1 << (self::IPC - 349)) | (1 << (self::ISOLATION - 349)) | (1 << (self::ISSUER - 349)) | (1 << (self::JSON - 349)) | (1 << (self::KEY_BLOCK_SIZE - 349)) | (1 << (self::LANGUAGE - 349)) | (1 << (self::LAST - 349)) | (1 << (self::LEAVES - 349)) | (1 << (self::LESS - 349)) | (1 << (self::LEVEL - 349)) | (1 << (self::LIST - 349)) | (1 << (self::LOCAL - 349)) | (1 << (self::LOGFILE - 349)) | (1 << (self::LOGS - 349)) | (1 << (self::MASTER - 349)) | (1 << (self::MASTER_AUTO_POSITION - 349)) | (1 << (self::MASTER_CONNECT_RETRY - 349)) | (1 << (self::MASTER_DELAY - 349)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 349)) | (1 << (self::MASTER_HOST - 349)) | (1 << (self::MASTER_LOG_FILE - 349)) | (1 << (self::MASTER_LOG_POS - 349)))) !== 0) || (((($_la - 413)) & ~0x3f) === 0 && ((1 << ($_la - 413)) & ((1 << (self::MASTER_PASSWORD - 413)) | (1 << (self::MASTER_PORT - 413)) | (1 << (self::MASTER_RETRY_COUNT - 413)) | (1 << (self::MASTER_SSL - 413)) | (1 << (self::MASTER_SSL_CA - 413)) | (1 << (self::MASTER_SSL_CAPATH - 413)) | (1 << (self::MASTER_SSL_CERT - 413)) | (1 << (self::MASTER_SSL_CIPHER - 413)) | (1 << (self::MASTER_SSL_CRL - 413)) | (1 << (self::MASTER_SSL_CRLPATH - 413)) | (1 << (self::MASTER_SSL_KEY - 413)) | (1 << (self::MASTER_TLS_VERSION - 413)) | (1 << (self::MASTER_USER - 413)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 413)) | (1 << (self::MAX_QUERIES_PER_HOUR - 413)) | (1 << (self::MAX_ROWS - 413)) | (1 << (self::MAX_SIZE - 413)) | (1 << (self::MAX_UPDATES_PER_HOUR - 413)) | (1 << (self::MAX_USER_CONNECTIONS - 413)) | (1 << (self::MEDIUM - 413)) | (1 << (self::MERGE - 413)) | (1 << (self::MESSAGE_TEXT - 413)) | (1 << (self::MID - 413)) | (1 << (self::MIGRATE - 413)) | (1 << (self::MIN_ROWS - 413)) | (1 << (self::MODE - 413)) | (1 << (self::MODIFY - 413)) | (1 << (self::MUTEX - 413)) | (1 << (self::MYSQL - 413)) | (1 << (self::MYSQL_ERRNO - 413)) | (1 << (self::NAME - 413)) | (1 << (self::NAMES - 413)) | (1 << (self::NCHAR - 413)) | (1 << (self::NEVER - 413)) | (1 << (self::NEXT - 413)) | (1 << (self::NO - 413)) | (1 << (self::NODEGROUP - 413)) | (1 << (self::NONE - 413)) | (1 << (self::OFFLINE - 413)) | (1 << (self::OFFSET - 413)) | (1 << (self::OJ - 413)) | (1 << (self::OLD_PASSWORD - 413)) | (1 << (self::ONE - 413)) | (1 << (self::ONLINE - 413)) | (1 << (self::ONLY - 413)) | (1 << (self::OPEN - 413)) | (1 << (self::OPTIMIZER_COSTS - 413)) | (1 << (self::OPTIONS - 413)) | (1 << (self::OWNER - 413)) | (1 << (self::PACK_KEYS - 413)) | (1 << (self::PAGE - 413)) | (1 << (self::PARSER - 413)) | (1 << (self::PARTIAL - 413)) | (1 << (self::PARTITIONING - 413)) | (1 << (self::PARTITIONS - 413)) | (1 << (self::PASSWORD - 413)) | (1 << (self::PHASE - 413)) | (1 << (self::PLUGIN - 413)) | (1 << (self::PLUGIN_DIR - 413)) | (1 << (self::PLUGINS - 413)) | (1 << (self::PORT - 413)) | (1 << (self::PRECEDES - 413)))) !== 0) || (((($_la - 477)) & ~0x3f) === 0 && ((1 << ($_la - 477)) & ((1 << (self::PREPARE - 477)) | (1 << (self::PRESERVE - 477)) | (1 << (self::PREV - 477)) | (1 << (self::PROCESSLIST - 477)) | (1 << (self::PROFILE - 477)) | (1 << (self::PROFILES - 477)) | (1 << (self::PROXY - 477)) | (1 << (self::QUERY - 477)) | (1 << (self::QUICK - 477)) | (1 << (self::REBUILD - 477)) | (1 << (self::RECOVER - 477)) | (1 << (self::REDO_BUFFER_SIZE - 477)) | (1 << (self::REDUNDANT - 477)) | (1 << (self::RELAY - 477)) | (1 << (self::RELAY_LOG_FILE - 477)) | (1 << (self::RELAY_LOG_POS - 477)) | (1 << (self::RELAYLOG - 477)) | (1 << (self::REMOVE - 477)) | (1 << (self::REORGANIZE - 477)) | (1 << (self::REPAIR - 477)) | (1 << (self::REPLICATE_DO_DB - 477)) | (1 << (self::REPLICATE_DO_TABLE - 477)) | (1 << (self::REPLICATE_IGNORE_DB - 477)) | (1 << (self::REPLICATE_IGNORE_TABLE - 477)) | (1 << (self::REPLICATE_REWRITE_DB - 477)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 477)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 477)) | (1 << (self::REPLICATION - 477)) | (1 << (self::RESET - 477)) | (1 << (self::RESUME - 477)) | (1 << (self::RETURNED_SQLSTATE - 477)) | (1 << (self::RETURNS - 477)) | (1 << (self::ROLLBACK - 477)) | (1 << (self::ROLLUP - 477)) | (1 << (self::ROTATE - 477)) | (1 << (self::ROW - 477)) | (1 << (self::ROWS - 477)) | (1 << (self::ROW_FORMAT - 477)) | (1 << (self::SAVEPOINT - 477)) | (1 << (self::SCHEDULE - 477)) | (1 << (self::SECURITY - 477)) | (1 << (self::SERVER - 477)) | (1 << (self::SESSION - 477)) | (1 << (self::SHARE - 477)) | (1 << (self::SHARED - 477)) | (1 << (self::SIGNED - 477)) | (1 << (self::SIMPLE - 477)) | (1 << (self::SLAVE - 477)) | (1 << (self::SLOW - 477)) | (1 << (self::SNAPSHOT - 477)) | (1 << (self::SOCKET - 477)) | (1 << (self::SOME - 477)) | (1 << (self::SONAME - 477)) | (1 << (self::SOUNDS - 477)) | (1 << (self::SOURCE - 477)) | (1 << (self::SQL_AFTER_GTIDS - 477)) | (1 << (self::SQL_AFTER_MTS_GAPS - 477)) | (1 << (self::SQL_BEFORE_GTIDS - 477)) | (1 << (self::SQL_BUFFER_RESULT - 477)) | (1 << (self::SQL_CACHE - 477)) | (1 << (self::SQL_NO_CACHE - 477)) | (1 << (self::SQL_THREAD - 477)) | (1 << (self::START - 477)))) !== 0) || (((($_la - 541)) & ~0x3f) === 0 && ((1 << ($_la - 541)) & ((1 << (self::STARTS - 541)) | (1 << (self::STATS_AUTO_RECALC - 541)) | (1 << (self::STATS_PERSISTENT - 541)) | (1 << (self::STATS_SAMPLE_PAGES - 541)) | (1 << (self::STATUS - 541)) | (1 << (self::STOP - 541)) | (1 << (self::STORAGE - 541)) | (1 << (self::STRING - 541)) | (1 << (self::SUBCLASS_ORIGIN - 541)) | (1 << (self::SUBJECT - 541)) | (1 << (self::SUBPARTITION - 541)) | (1 << (self::SUBPARTITIONS - 541)) | (1 << (self::SUSPEND - 541)) | (1 << (self::SWAPS - 541)) | (1 << (self::SWITCHES - 541)) | (1 << (self::TABLE_NAME - 541)) | (1 << (self::TABLESPACE - 541)) | (1 << (self::TEMPORARY - 541)) | (1 << (self::TEMPTABLE - 541)) | (1 << (self::THAN - 541)) | (1 << (self::TRADITIONAL - 541)) | (1 << (self::TRANSACTION - 541)) | (1 << (self::TRIGGERS - 541)) | (1 << (self::TRUNCATE - 541)) | (1 << (self::UNDEFINED - 541)) | (1 << (self::UNDOFILE - 541)) | (1 << (self::UNDO_BUFFER_SIZE - 541)) | (1 << (self::UNINSTALL - 541)) | (1 << (self::UNKNOWN - 541)) | (1 << (self::UNTIL - 541)) | (1 << (self::UPGRADE - 541)) | (1 << (self::USER - 541)) | (1 << (self::USE_FRM - 541)) | (1 << (self::USER_RESOURCES - 541)) | (1 << (self::VALIDATION - 541)) | (1 << (self::VALUE - 541)) | (1 << (self::VARIABLES - 541)) | (1 << (self::VIEW - 541)) | (1 << (self::WAIT - 541)) | (1 << (self::WARNINGS - 541)) | (1 << (self::WITHOUT - 541)) | (1 << (self::WORK - 541)) | (1 << (self::WRAPPER - 541)) | (1 << (self::X509 - 541)) | (1 << (self::XA - 541)) | (1 << (self::XML - 541)) | (1 << (self::INTERNAL - 541)))) !== 0) || $_la === self::MEMORY || $_la === self::CATALOG_NAME || $_la === self::SCHEMA_NAME)) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		/**
		 * @throws RecognitionException
		 */
		public function functionNameBase() : Context\FunctionNameBaseContext
		{
		    $localContext = new Context\FunctionNameBaseContext($this->ctx, $this->getState());

		    $this->enterRule($localContext, 636, self::RULE_functionNameBase);

		    try {
		        $this->enterOuterAlt($localContext, 1);
		        $this->setState(6476);

		        $_la = $this->input->LA(1);

		        if (!($_la === self::DATABASE || $_la === self::LEFT || $_la === self::RIGHT || (((($_la - 199)) & ~0x3f) === 0 && ((1 << ($_la - 199)) & ((1 << (self::DATE - 199)) | (1 << (self::TIME - 199)) | (1 << (self::TIMESTAMP - 199)) | (1 << (self::YEAR - 199)) | (1 << (self::COUNT - 199)) | (1 << (self::POSITION - 199)))) !== 0) || $_la === self::INVISIBLE || (((($_la - 582)) & ~0x3f) === 0 && ((1 << ($_la - 582)) & ((1 << (self::VISIBLE - 582)) | (1 << (self::QUARTER - 582)) | (1 << (self::MONTH - 582)) | (1 << (self::DAY - 582)) | (1 << (self::HOUR - 582)) | (1 << (self::MINUTE - 582)) | (1 << (self::WEEK - 582)) | (1 << (self::SECOND - 582)) | (1 << (self::MICROSECOND - 582)) | (1 << (self::SESSION_VARIABLES_ADMIN - 582)))) !== 0) || (((($_la - 695)) & ~0x3f) === 0 && ((1 << ($_la - 695)) & ((1 << (self::GEOMETRYCOLLECTION - 695)) | (1 << (self::LINESTRING - 695)) | (1 << (self::MULTILINESTRING - 695)) | (1 << (self::MULTIPOINT - 695)) | (1 << (self::MULTIPOLYGON - 695)) | (1 << (self::POINT - 695)) | (1 << (self::POLYGON - 695)) | (1 << (self::ABS - 695)) | (1 << (self::ACOS - 695)) | (1 << (self::ADDDATE - 695)) | (1 << (self::ADDTIME - 695)) | (1 << (self::AES_DECRYPT - 695)) | (1 << (self::AES_ENCRYPT - 695)) | (1 << (self::AREA - 695)) | (1 << (self::ASBINARY - 695)) | (1 << (self::ASIN - 695)) | (1 << (self::ASTEXT - 695)) | (1 << (self::ASWKB - 695)) | (1 << (self::ASWKT - 695)) | (1 << (self::ASYMMETRIC_DECRYPT - 695)) | (1 << (self::ASYMMETRIC_DERIVE - 695)) | (1 << (self::ASYMMETRIC_ENCRYPT - 695)) | (1 << (self::ASYMMETRIC_SIGN - 695)) | (1 << (self::ASYMMETRIC_VERIFY - 695)) | (1 << (self::ATAN - 695)) | (1 << (self::ATAN2 - 695)) | (1 << (self::BENCHMARK - 695)) | (1 << (self::BIN - 695)) | (1 << (self::BIT_COUNT - 695)) | (1 << (self::BIT_LENGTH - 695)) | (1 << (self::BUFFER - 695)) | (1 << (self::CEIL - 695)) | (1 << (self::CEILING - 695)) | (1 << (self::CENTROID - 695)) | (1 << (self::CHARACTER_LENGTH - 695)) | (1 << (self::CHARSET - 695)) | (1 << (self::CHAR_LENGTH - 695)) | (1 << (self::COERCIBILITY - 695)) | (1 << (self::COLLATION - 695)) | (1 << (self::COMPRESS - 695)) | (1 << (self::CONCAT - 695)) | (1 << (self::CONCAT_WS - 695)) | (1 << (self::CONNECTION_ID - 695)) | (1 << (self::CONV - 695)) | (1 << (self::CONVERT_TZ - 695)) | (1 << (self::COS - 695)) | (1 << (self::COT - 695)) | (1 << (self::CRC32 - 695)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 695)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 695)) | (1 << (self::CREATE_DH_PARAMETERS - 695)) | (1 << (self::CREATE_DIGEST - 695)) | (1 << (self::CROSSES - 695)) | (1 << (self::DATEDIFF - 695)) | (1 << (self::DATE_FORMAT - 695)) | (1 << (self::DAYNAME - 695)) | (1 << (self::DAYOFMONTH - 695)) | (1 << (self::DAYOFWEEK - 695)) | (1 << (self::DAYOFYEAR - 695)) | (1 << (self::DECODE - 695)) | (1 << (self::DEGREES - 695)))) !== 0) || (((($_la - 759)) & ~0x3f) === 0 && ((1 << ($_la - 759)) & ((1 << (self::DES_DECRYPT - 759)) | (1 << (self::DES_ENCRYPT - 759)) | (1 << (self::DIMENSION - 759)) | (1 << (self::DISJOINT - 759)) | (1 << (self::ELT - 759)) | (1 << (self::ENCODE - 759)) | (1 << (self::ENCRYPT - 759)) | (1 << (self::ENDPOINT - 759)) | (1 << (self::ENVELOPE - 759)) | (1 << (self::EQUALS - 759)) | (1 << (self::EXP - 759)) | (1 << (self::EXPORT_SET - 759)) | (1 << (self::EXTERIORRING - 759)) | (1 << (self::EXTRACTVALUE - 759)) | (1 << (self::FIELD - 759)) | (1 << (self::FIND_IN_SET - 759)) | (1 << (self::FLOOR - 759)) | (1 << (self::FORMAT - 759)) | (1 << (self::FOUND_ROWS - 759)) | (1 << (self::FROM_BASE64 - 759)) | (1 << (self::FROM_DAYS - 759)) | (1 << (self::FROM_UNIXTIME - 759)) | (1 << (self::GEOMCOLLFROMTEXT - 759)) | (1 << (self::GEOMCOLLFROMWKB - 759)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 759)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 759)) | (1 << (self::GEOMETRYFROMTEXT - 759)) | (1 << (self::GEOMETRYFROMWKB - 759)) | (1 << (self::GEOMETRYN - 759)) | (1 << (self::GEOMETRYTYPE - 759)) | (1 << (self::GEOMFROMTEXT - 759)) | (1 << (self::GEOMFROMWKB - 759)) | (1 << (self::GET_FORMAT - 759)) | (1 << (self::GET_LOCK - 759)) | (1 << (self::GLENGTH - 759)) | (1 << (self::GREATEST - 759)) | (1 << (self::GTID_SUBSET - 759)) | (1 << (self::GTID_SUBTRACT - 759)) | (1 << (self::HEX - 759)) | (1 << (self::IFNULL - 759)) | (1 << (self::INET6_ATON - 759)) | (1 << (self::INET6_NTOA - 759)) | (1 << (self::INET_ATON - 759)) | (1 << (self::INET_NTOA - 759)) | (1 << (self::INSTR - 759)) | (1 << (self::INTERIORRINGN - 759)) | (1 << (self::INTERSECTS - 759)) | (1 << (self::ISCLOSED - 759)) | (1 << (self::ISEMPTY - 759)) | (1 << (self::ISNULL - 759)) | (1 << (self::ISSIMPLE - 759)) | (1 << (self::IS_FREE_LOCK - 759)) | (1 << (self::IS_IPV4 - 759)) | (1 << (self::IS_IPV4_COMPAT - 759)) | (1 << (self::IS_IPV4_MAPPED - 759)) | (1 << (self::IS_IPV6 - 759)) | (1 << (self::IS_USED_LOCK - 759)) | (1 << (self::LAST_INSERT_ID - 759)) | (1 << (self::LCASE - 759)) | (1 << (self::LEAST - 759)) | (1 << (self::LENGTH - 759)) | (1 << (self::LINEFROMTEXT - 759)) | (1 << (self::LINEFROMWKB - 759)) | (1 << (self::LINESTRINGFROMTEXT - 759)))) !== 0) || (((($_la - 823)) & ~0x3f) === 0 && ((1 << ($_la - 823)) & ((1 << (self::LINESTRINGFROMWKB - 823)) | (1 << (self::LN - 823)) | (1 << (self::LOAD_FILE - 823)) | (1 << (self::LOCATE - 823)) | (1 << (self::LOG - 823)) | (1 << (self::LOG10 - 823)) | (1 << (self::LOG2 - 823)) | (1 << (self::LOWER - 823)) | (1 << (self::LPAD - 823)) | (1 << (self::LTRIM - 823)) | (1 << (self::MAKEDATE - 823)) | (1 << (self::MAKETIME - 823)) | (1 << (self::MAKE_SET - 823)) | (1 << (self::MASTER_POS_WAIT - 823)) | (1 << (self::MBRCONTAINS - 823)) | (1 << (self::MBRDISJOINT - 823)) | (1 << (self::MBREQUAL - 823)) | (1 << (self::MBRINTERSECTS - 823)) | (1 << (self::MBROVERLAPS - 823)) | (1 << (self::MBRTOUCHES - 823)) | (1 << (self::MBRWITHIN - 823)) | (1 << (self::MD5 - 823)) | (1 << (self::MLINEFROMTEXT - 823)) | (1 << (self::MLINEFROMWKB - 823)) | (1 << (self::MONTHNAME - 823)) | (1 << (self::MPOINTFROMTEXT - 823)) | (1 << (self::MPOINTFROMWKB - 823)) | (1 << (self::MPOLYFROMTEXT - 823)) | (1 << (self::MPOLYFROMWKB - 823)) | (1 << (self::MULTILINESTRINGFROMTEXT - 823)) | (1 << (self::MULTILINESTRINGFROMWKB - 823)) | (1 << (self::MULTIPOINTFROMTEXT - 823)) | (1 << (self::MULTIPOINTFROMWKB - 823)) | (1 << (self::MULTIPOLYGONFROMTEXT - 823)) | (1 << (self::MULTIPOLYGONFROMWKB - 823)) | (1 << (self::NAME_CONST - 823)) | (1 << (self::NULLIF - 823)) | (1 << (self::NUMGEOMETRIES - 823)) | (1 << (self::NUMINTERIORRINGS - 823)) | (1 << (self::NUMPOINTS - 823)) | (1 << (self::OCT - 823)) | (1 << (self::OCTET_LENGTH - 823)) | (1 << (self::ORD - 823)) | (1 << (self::OVERLAPS - 823)) | (1 << (self::PERIOD_ADD - 823)) | (1 << (self::PERIOD_DIFF - 823)) | (1 << (self::PI - 823)) | (1 << (self::POINTFROMTEXT - 823)) | (1 << (self::POINTFROMWKB - 823)) | (1 << (self::POINTN - 823)) | (1 << (self::POLYFROMTEXT - 823)) | (1 << (self::POLYFROMWKB - 823)) | (1 << (self::POLYGONFROMTEXT - 823)) | (1 << (self::POLYGONFROMWKB - 823)) | (1 << (self::POW - 823)) | (1 << (self::POWER - 823)) | (1 << (self::QUOTE - 823)) | (1 << (self::RADIANS - 823)) | (1 << (self::RAND - 823)) | (1 << (self::RANDOM_BYTES - 823)) | (1 << (self::RELEASE_LOCK - 823)) | (1 << (self::REVERSE - 823)) | (1 << (self::ROUND - 823)) | (1 << (self::ROW_COUNT - 823)))) !== 0) || (((($_la - 887)) & ~0x3f) === 0 && ((1 << ($_la - 887)) & ((1 << (self::RPAD - 887)) | (1 << (self::RTRIM - 887)) | (1 << (self::SEC_TO_TIME - 887)) | (1 << (self::SESSION_USER - 887)) | (1 << (self::SHA - 887)) | (1 << (self::SHA1 - 887)) | (1 << (self::SHA2 - 887)) | (1 << (self::SIGN - 887)) | (1 << (self::SIN - 887)) | (1 << (self::SLEEP - 887)) | (1 << (self::SOUNDEX - 887)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 887)) | (1 << (self::SQRT - 887)) | (1 << (self::SRID - 887)) | (1 << (self::STARTPOINT - 887)) | (1 << (self::STRCMP - 887)) | (1 << (self::STR_TO_DATE - 887)) | (1 << (self::ST_AREA - 887)) | (1 << (self::ST_ASBINARY - 887)) | (1 << (self::ST_ASTEXT - 887)) | (1 << (self::ST_ASWKB - 887)) | (1 << (self::ST_ASWKT - 887)) | (1 << (self::ST_BUFFER - 887)) | (1 << (self::ST_CENTROID - 887)) | (1 << (self::ST_CONTAINS - 887)) | (1 << (self::ST_CROSSES - 887)) | (1 << (self::ST_DIFFERENCE - 887)) | (1 << (self::ST_DIMENSION - 887)) | (1 << (self::ST_DISJOINT - 887)) | (1 << (self::ST_DISTANCE - 887)) | (1 << (self::ST_ENDPOINT - 887)) | (1 << (self::ST_ENVELOPE - 887)) | (1 << (self::ST_EQUALS - 887)) | (1 << (self::ST_EXTERIORRING - 887)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 887)) | (1 << (self::ST_GEOMCOLLFROMTXT - 887)) | (1 << (self::ST_GEOMCOLLFROMWKB - 887)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 887)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 887)) | (1 << (self::ST_GEOMETRYFROMTEXT - 887)) | (1 << (self::ST_GEOMETRYFROMWKB - 887)) | (1 << (self::ST_GEOMETRYN - 887)) | (1 << (self::ST_GEOMETRYTYPE - 887)) | (1 << (self::ST_GEOMFROMTEXT - 887)) | (1 << (self::ST_GEOMFROMWKB - 887)) | (1 << (self::ST_INTERIORRINGN - 887)) | (1 << (self::ST_INTERSECTION - 887)) | (1 << (self::ST_INTERSECTS - 887)) | (1 << (self::ST_ISCLOSED - 887)) | (1 << (self::ST_ISEMPTY - 887)) | (1 << (self::ST_ISSIMPLE - 887)) | (1 << (self::ST_LINEFROMTEXT - 887)) | (1 << (self::ST_LINEFROMWKB - 887)) | (1 << (self::ST_LINESTRINGFROMTEXT - 887)) | (1 << (self::ST_LINESTRINGFROMWKB - 887)) | (1 << (self::ST_NUMGEOMETRIES - 887)) | (1 << (self::ST_NUMINTERIORRING - 887)) | (1 << (self::ST_NUMINTERIORRINGS - 887)) | (1 << (self::ST_NUMPOINTS - 887)) | (1 << (self::ST_OVERLAPS - 887)) | (1 << (self::ST_POINTFROMTEXT - 887)) | (1 << (self::ST_POINTFROMWKB - 887)) | (1 << (self::ST_POINTN - 887)))) !== 0) || (((($_la - 951)) & ~0x3f) === 0 && ((1 << ($_la - 951)) & ((1 << (self::ST_POLYFROMTEXT - 951)) | (1 << (self::ST_POLYFROMWKB - 951)) | (1 << (self::ST_POLYGONFROMTEXT - 951)) | (1 << (self::ST_POLYGONFROMWKB - 951)) | (1 << (self::ST_SRID - 951)) | (1 << (self::ST_STARTPOINT - 951)) | (1 << (self::ST_SYMDIFFERENCE - 951)) | (1 << (self::ST_TOUCHES - 951)) | (1 << (self::ST_UNION - 951)) | (1 << (self::ST_WITHIN - 951)) | (1 << (self::ST_X - 951)) | (1 << (self::ST_Y - 951)) | (1 << (self::SUBDATE - 951)) | (1 << (self::SUBSTRING_INDEX - 951)) | (1 << (self::SUBTIME - 951)) | (1 << (self::SYSTEM_USER - 951)) | (1 << (self::TAN - 951)) | (1 << (self::TIMEDIFF - 951)) | (1 << (self::TIMESTAMPADD - 951)) | (1 << (self::TIMESTAMPDIFF - 951)) | (1 << (self::TIME_FORMAT - 951)) | (1 << (self::TIME_TO_SEC - 951)) | (1 << (self::TOUCHES - 951)) | (1 << (self::TO_BASE64 - 951)) | (1 << (self::TO_DAYS - 951)) | (1 << (self::TO_SECONDS - 951)) | (1 << (self::UCASE - 951)) | (1 << (self::UNCOMPRESS - 951)) | (1 << (self::UNCOMPRESSED_LENGTH - 951)) | (1 << (self::UNHEX - 951)) | (1 << (self::UNIX_TIMESTAMP - 951)) | (1 << (self::UPDATEXML - 951)) | (1 << (self::UPPER - 951)) | (1 << (self::UUID - 951)) | (1 << (self::UUID_SHORT - 951)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 951)) | (1 << (self::VERSION - 951)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 951)) | (1 << (self::WEEKDAY - 951)) | (1 << (self::WEEKOFYEAR - 951)) | (1 << (self::WEIGHT_STRING - 951)) | (1 << (self::WITHIN - 951)) | (1 << (self::YEARWEEK - 951)) | (1 << (self::Y_FUNCTION - 951)) | (1 << (self::X_FUNCTION - 951)))) !== 0))) {
		        $this->errorHandler->recoverInline($this);
		        } else {
		        	if ($this->input->LA(1) === Token::EOF) {
		        	    $this->matchedEOF = true;
		            }

		        	$this->errorHandler->reportMatch($this);
		        	$this->consume();
		        }
		    } catch (RecognitionException $exception) {
		        $localContext->exception = $exception;
		        $this->errorHandler->reportError($this, $exception);
		        $this->errorHandler->recover($this, $exception);
		    } finally {
		        $this->exitRule();
		    }

		    return $localContext;
		}

		public function sempred(?RuleContext $localContext, int $ruleIndex, int $predicateIndex) : bool
		{
			switch ($ruleIndex) {
					case 301:
						return $this->sempredExpression($localContext, $predicateIndex);

					case 302:
						return $this->sempredPredicate($localContext, $predicateIndex);

					case 303:
						return $this->sempredExpressionForUpdate($localContext, $predicateIndex);

					case 304:
						return $this->sempredPredicateForUpdate($localContext, $predicateIndex);

					case 305:
						return $this->sempredExpressionAtomForUpdate($localContext, $predicateIndex);

					case 306:
						return $this->sempredExpressionAtom($localContext, $predicateIndex);

				default:
					return true;
				}
		}

		private function sempredExpression(?Context\ExpressionContext $localContext, int $predicateIndex) : bool
		{
			switch ($predicateIndex) {
			    case 0:
			        return $this->precpred($this->ctx, 3);
			}

			return true;
		}

		private function sempredPredicate(?Context\PredicateContext $localContext, int $predicateIndex) : bool
		{
			switch ($predicateIndex) {
			    case 1:
			        return $this->precpred($this->ctx, 7);

			    case 2:
			        return $this->precpred($this->ctx, 5);

			    case 3:
			        return $this->precpred($this->ctx, 4);

			    case 4:
			        return $this->precpred($this->ctx, 2);

			    case 5:
			        return $this->precpred($this->ctx, 9);

			    case 6:
			        return $this->precpred($this->ctx, 8);

			    case 7:
			        return $this->precpred($this->ctx, 6);

			    case 8:
			        return $this->precpred($this->ctx, 3);
			}

			return true;
		}

		private function sempredExpressionForUpdate(?Context\ExpressionForUpdateContext $localContext, int $predicateIndex) : bool
		{
			switch ($predicateIndex) {
			    case 9:
			        return $this->precpred($this->ctx, 3);

			    case 10:
			        return $this->precpred($this->ctx, 2);
			}

			return true;
		}

		private function sempredPredicateForUpdate(?Context\PredicateForUpdateContext $localContext, int $predicateIndex) : bool
		{
			switch ($predicateIndex) {
			    case 11:
			        return $this->precpred($this->ctx, 7);

			    case 12:
			        return $this->precpred($this->ctx, 5);

			    case 13:
			        return $this->precpred($this->ctx, 4);

			    case 14:
			        return $this->precpred($this->ctx, 9);

			    case 15:
			        return $this->precpred($this->ctx, 8);

			    case 16:
			        return $this->precpred($this->ctx, 6);

			    case 17:
			        return $this->precpred($this->ctx, 3);

			    case 18:
			        return $this->precpred($this->ctx, 2);
			}

			return true;
		}

		private function sempredExpressionAtomForUpdate(?Context\ExpressionAtomForUpdateContext $localContext, int $predicateIndex) : bool
		{
			switch ($predicateIndex) {
			    case 19:
			        return $this->precpred($this->ctx, 2);

			    case 20:
			        return $this->precpred($this->ctx, 1);

			    case 21:
			        return $this->precpred($this->ctx, 11);
			}

			return true;
		}

		private function sempredExpressionAtom(?Context\ExpressionAtomContext $localContext, int $predicateIndex) : bool
		{
			switch ($predicateIndex) {
			    case 22:
			        return $this->precpred($this->ctx, 2);

			    case 23:
			        return $this->precpred($this->ctx, 1);

			    case 24:
			        return $this->precpred($this->ctx, 11);
			}

			return true;
		}
	}
}

namespace Context {
	use Antlr\Antlr4\Runtime\ParserRuleContext;
	use Antlr\Antlr4\Runtime\Token;
	use Antlr\Antlr4\Runtime\Tree\ParseTreeVisitor;
	use Antlr\Antlr4\Runtime\Tree\TerminalNode;
	use Antlr\Antlr4\Runtime\Tree\ParseTreeListener;
	use MySqlParser;
	use MySqlParserListener;

	class RootContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_root;
	    }

	    public function EOF() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EOF, 0);
	    }

	    public function sqlStatements() : ?SqlStatementsContext
	    {
	    	return $this->getTypedRuleContext(SqlStatementsContext::class, 0);
	    }

	    public function MINUSMINUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MINUSMINUS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRoot($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRoot($this);
		    }
		}
	} 

	class SqlStatementsContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_sqlStatements;
	    }

	    /**
	     * @return array<SqlStatementContext>|SqlStatementContext|null
	     */
	    public function sqlStatement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(SqlStatementContext::class);
	    	}

	        return $this->getTypedRuleContext(SqlStatementContext::class, $index);
	    }

	    /**
	     * @return array<EmptyStatementContext>|EmptyStatementContext|null
	     */
	    public function emptyStatement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(EmptyStatementContext::class);
	    	}

	        return $this->getTypedRuleContext(EmptyStatementContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function SEMI(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::SEMI);
	    	}

	        return $this->getToken(MySqlParser::SEMI, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function MINUSMINUS(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::MINUSMINUS);
	    	}

	        return $this->getToken(MySqlParser::MINUSMINUS, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSqlStatements($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSqlStatements($this);
		    }
		}
	} 

	class SqlStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_sqlStatement;
	    }

	    public function ddlStatement() : ?DdlStatementContext
	    {
	    	return $this->getTypedRuleContext(DdlStatementContext::class, 0);
	    }

	    public function dmlStatement() : ?DmlStatementContext
	    {
	    	return $this->getTypedRuleContext(DmlStatementContext::class, 0);
	    }

	    public function transactionStatement() : ?TransactionStatementContext
	    {
	    	return $this->getTypedRuleContext(TransactionStatementContext::class, 0);
	    }

	    public function replicationStatement() : ?ReplicationStatementContext
	    {
	    	return $this->getTypedRuleContext(ReplicationStatementContext::class, 0);
	    }

	    public function preparedStatement() : ?PreparedStatementContext
	    {
	    	return $this->getTypedRuleContext(PreparedStatementContext::class, 0);
	    }

	    public function administrationStatement() : ?AdministrationStatementContext
	    {
	    	return $this->getTypedRuleContext(AdministrationStatementContext::class, 0);
	    }

	    public function utilityStatement() : ?UtilityStatementContext
	    {
	    	return $this->getTypedRuleContext(UtilityStatementContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSqlStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSqlStatement($this);
		    }
		}
	} 

	class EmptyStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_emptyStatement;
	    }

	    public function SEMI() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SEMI, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterEmptyStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitEmptyStatement($this);
		    }
		}
	} 

	class DdlStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_ddlStatement;
	    }

	    public function createDatabase() : ?CreateDatabaseContext
	    {
	    	return $this->getTypedRuleContext(CreateDatabaseContext::class, 0);
	    }

	    public function createEvent() : ?CreateEventContext
	    {
	    	return $this->getTypedRuleContext(CreateEventContext::class, 0);
	    }

	    public function createIndex() : ?CreateIndexContext
	    {
	    	return $this->getTypedRuleContext(CreateIndexContext::class, 0);
	    }

	    public function createLogfileGroup() : ?CreateLogfileGroupContext
	    {
	    	return $this->getTypedRuleContext(CreateLogfileGroupContext::class, 0);
	    }

	    public function createProcedure() : ?CreateProcedureContext
	    {
	    	return $this->getTypedRuleContext(CreateProcedureContext::class, 0);
	    }

	    public function createFunction() : ?CreateFunctionContext
	    {
	    	return $this->getTypedRuleContext(CreateFunctionContext::class, 0);
	    }

	    public function createServer() : ?CreateServerContext
	    {
	    	return $this->getTypedRuleContext(CreateServerContext::class, 0);
	    }

	    public function createTable() : ?CreateTableContext
	    {
	    	return $this->getTypedRuleContext(CreateTableContext::class, 0);
	    }

	    public function createTablespaceInnodb() : ?CreateTablespaceInnodbContext
	    {
	    	return $this->getTypedRuleContext(CreateTablespaceInnodbContext::class, 0);
	    }

	    public function createTablespaceNdb() : ?CreateTablespaceNdbContext
	    {
	    	return $this->getTypedRuleContext(CreateTablespaceNdbContext::class, 0);
	    }

	    public function createTrigger() : ?CreateTriggerContext
	    {
	    	return $this->getTypedRuleContext(CreateTriggerContext::class, 0);
	    }

	    public function createView() : ?CreateViewContext
	    {
	    	return $this->getTypedRuleContext(CreateViewContext::class, 0);
	    }

	    public function alterDatabase() : ?AlterDatabaseContext
	    {
	    	return $this->getTypedRuleContext(AlterDatabaseContext::class, 0);
	    }

	    public function alterEvent() : ?AlterEventContext
	    {
	    	return $this->getTypedRuleContext(AlterEventContext::class, 0);
	    }

	    public function alterFunction() : ?AlterFunctionContext
	    {
	    	return $this->getTypedRuleContext(AlterFunctionContext::class, 0);
	    }

	    public function alterInstance() : ?AlterInstanceContext
	    {
	    	return $this->getTypedRuleContext(AlterInstanceContext::class, 0);
	    }

	    public function alterLogfileGroup() : ?AlterLogfileGroupContext
	    {
	    	return $this->getTypedRuleContext(AlterLogfileGroupContext::class, 0);
	    }

	    public function alterProcedure() : ?AlterProcedureContext
	    {
	    	return $this->getTypedRuleContext(AlterProcedureContext::class, 0);
	    }

	    public function alterServer() : ?AlterServerContext
	    {
	    	return $this->getTypedRuleContext(AlterServerContext::class, 0);
	    }

	    public function alterTable() : ?AlterTableContext
	    {
	    	return $this->getTypedRuleContext(AlterTableContext::class, 0);
	    }

	    public function alterTablespace() : ?AlterTablespaceContext
	    {
	    	return $this->getTypedRuleContext(AlterTablespaceContext::class, 0);
	    }

	    public function alterView() : ?AlterViewContext
	    {
	    	return $this->getTypedRuleContext(AlterViewContext::class, 0);
	    }

	    public function dropDatabase() : ?DropDatabaseContext
	    {
	    	return $this->getTypedRuleContext(DropDatabaseContext::class, 0);
	    }

	    public function dropEvent() : ?DropEventContext
	    {
	    	return $this->getTypedRuleContext(DropEventContext::class, 0);
	    }

	    public function dropIndex() : ?DropIndexContext
	    {
	    	return $this->getTypedRuleContext(DropIndexContext::class, 0);
	    }

	    public function dropLogfileGroup() : ?DropLogfileGroupContext
	    {
	    	return $this->getTypedRuleContext(DropLogfileGroupContext::class, 0);
	    }

	    public function dropProcedure() : ?DropProcedureContext
	    {
	    	return $this->getTypedRuleContext(DropProcedureContext::class, 0);
	    }

	    public function dropFunction() : ?DropFunctionContext
	    {
	    	return $this->getTypedRuleContext(DropFunctionContext::class, 0);
	    }

	    public function dropServer() : ?DropServerContext
	    {
	    	return $this->getTypedRuleContext(DropServerContext::class, 0);
	    }

	    public function dropTable() : ?DropTableContext
	    {
	    	return $this->getTypedRuleContext(DropTableContext::class, 0);
	    }

	    public function dropTablespace() : ?DropTablespaceContext
	    {
	    	return $this->getTypedRuleContext(DropTablespaceContext::class, 0);
	    }

	    public function dropTrigger() : ?DropTriggerContext
	    {
	    	return $this->getTypedRuleContext(DropTriggerContext::class, 0);
	    }

	    public function dropView() : ?DropViewContext
	    {
	    	return $this->getTypedRuleContext(DropViewContext::class, 0);
	    }

	    public function renameTable() : ?RenameTableContext
	    {
	    	return $this->getTypedRuleContext(RenameTableContext::class, 0);
	    }

	    public function truncateTable() : ?TruncateTableContext
	    {
	    	return $this->getTypedRuleContext(TruncateTableContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDdlStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDdlStatement($this);
		    }
		}
	} 

	class DmlStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dmlStatement;
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

	    public function insertStatement() : ?InsertStatementContext
	    {
	    	return $this->getTypedRuleContext(InsertStatementContext::class, 0);
	    }

	    public function updateStatement() : ?UpdateStatementContext
	    {
	    	return $this->getTypedRuleContext(UpdateStatementContext::class, 0);
	    }

	    public function deleteStatement() : ?DeleteStatementContext
	    {
	    	return $this->getTypedRuleContext(DeleteStatementContext::class, 0);
	    }

	    public function replaceStatement() : ?ReplaceStatementContext
	    {
	    	return $this->getTypedRuleContext(ReplaceStatementContext::class, 0);
	    }

	    public function callStatement() : ?CallStatementContext
	    {
	    	return $this->getTypedRuleContext(CallStatementContext::class, 0);
	    }

	    public function loadDataStatement() : ?LoadDataStatementContext
	    {
	    	return $this->getTypedRuleContext(LoadDataStatementContext::class, 0);
	    }

	    public function loadXmlStatement() : ?LoadXmlStatementContext
	    {
	    	return $this->getTypedRuleContext(LoadXmlStatementContext::class, 0);
	    }

	    public function doStatement() : ?DoStatementContext
	    {
	    	return $this->getTypedRuleContext(DoStatementContext::class, 0);
	    }

	    public function handlerStatement() : ?HandlerStatementContext
	    {
	    	return $this->getTypedRuleContext(HandlerStatementContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDmlStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDmlStatement($this);
		    }
		}
	} 

	class TransactionStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_transactionStatement;
	    }

	    public function startTransaction() : ?StartTransactionContext
	    {
	    	return $this->getTypedRuleContext(StartTransactionContext::class, 0);
	    }

	    public function beginWork() : ?BeginWorkContext
	    {
	    	return $this->getTypedRuleContext(BeginWorkContext::class, 0);
	    }

	    public function commitWork() : ?CommitWorkContext
	    {
	    	return $this->getTypedRuleContext(CommitWorkContext::class, 0);
	    }

	    public function rollbackWork() : ?RollbackWorkContext
	    {
	    	return $this->getTypedRuleContext(RollbackWorkContext::class, 0);
	    }

	    public function savepointStatement() : ?SavepointStatementContext
	    {
	    	return $this->getTypedRuleContext(SavepointStatementContext::class, 0);
	    }

	    public function rollbackStatement() : ?RollbackStatementContext
	    {
	    	return $this->getTypedRuleContext(RollbackStatementContext::class, 0);
	    }

	    public function releaseStatement() : ?ReleaseStatementContext
	    {
	    	return $this->getTypedRuleContext(ReleaseStatementContext::class, 0);
	    }

	    public function lockTables() : ?LockTablesContext
	    {
	    	return $this->getTypedRuleContext(LockTablesContext::class, 0);
	    }

	    public function unlockTables() : ?UnlockTablesContext
	    {
	    	return $this->getTypedRuleContext(UnlockTablesContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTransactionStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTransactionStatement($this);
		    }
		}
	} 

	class ReplicationStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_replicationStatement;
	    }

	    public function changeMaster() : ?ChangeMasterContext
	    {
	    	return $this->getTypedRuleContext(ChangeMasterContext::class, 0);
	    }

	    public function changeReplicationFilter() : ?ChangeReplicationFilterContext
	    {
	    	return $this->getTypedRuleContext(ChangeReplicationFilterContext::class, 0);
	    }

	    public function purgeBinaryLogs() : ?PurgeBinaryLogsContext
	    {
	    	return $this->getTypedRuleContext(PurgeBinaryLogsContext::class, 0);
	    }

	    public function resetMaster() : ?ResetMasterContext
	    {
	    	return $this->getTypedRuleContext(ResetMasterContext::class, 0);
	    }

	    public function resetSlave() : ?ResetSlaveContext
	    {
	    	return $this->getTypedRuleContext(ResetSlaveContext::class, 0);
	    }

	    public function startSlave() : ?StartSlaveContext
	    {
	    	return $this->getTypedRuleContext(StartSlaveContext::class, 0);
	    }

	    public function stopSlave() : ?StopSlaveContext
	    {
	    	return $this->getTypedRuleContext(StopSlaveContext::class, 0);
	    }

	    public function startGroupReplication() : ?StartGroupReplicationContext
	    {
	    	return $this->getTypedRuleContext(StartGroupReplicationContext::class, 0);
	    }

	    public function stopGroupReplication() : ?StopGroupReplicationContext
	    {
	    	return $this->getTypedRuleContext(StopGroupReplicationContext::class, 0);
	    }

	    public function xaStartTransaction() : ?XaStartTransactionContext
	    {
	    	return $this->getTypedRuleContext(XaStartTransactionContext::class, 0);
	    }

	    public function xaEndTransaction() : ?XaEndTransactionContext
	    {
	    	return $this->getTypedRuleContext(XaEndTransactionContext::class, 0);
	    }

	    public function xaPrepareStatement() : ?XaPrepareStatementContext
	    {
	    	return $this->getTypedRuleContext(XaPrepareStatementContext::class, 0);
	    }

	    public function xaCommitWork() : ?XaCommitWorkContext
	    {
	    	return $this->getTypedRuleContext(XaCommitWorkContext::class, 0);
	    }

	    public function xaRollbackWork() : ?XaRollbackWorkContext
	    {
	    	return $this->getTypedRuleContext(XaRollbackWorkContext::class, 0);
	    }

	    public function xaRecoverWork() : ?XaRecoverWorkContext
	    {
	    	return $this->getTypedRuleContext(XaRecoverWorkContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterReplicationStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitReplicationStatement($this);
		    }
		}
	} 

	class PreparedStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_preparedStatement;
	    }

	    public function prepareStatement() : ?PrepareStatementContext
	    {
	    	return $this->getTypedRuleContext(PrepareStatementContext::class, 0);
	    }

	    public function executeStatement() : ?ExecuteStatementContext
	    {
	    	return $this->getTypedRuleContext(ExecuteStatementContext::class, 0);
	    }

	    public function deallocatePrepare() : ?DeallocatePrepareContext
	    {
	    	return $this->getTypedRuleContext(DeallocatePrepareContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPreparedStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPreparedStatement($this);
		    }
		}
	} 

	class CompoundStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_compoundStatement;
	    }

	    public function blockStatement() : ?BlockStatementContext
	    {
	    	return $this->getTypedRuleContext(BlockStatementContext::class, 0);
	    }

	    public function caseStatement() : ?CaseStatementContext
	    {
	    	return $this->getTypedRuleContext(CaseStatementContext::class, 0);
	    }

	    public function ifStatement() : ?IfStatementContext
	    {
	    	return $this->getTypedRuleContext(IfStatementContext::class, 0);
	    }

	    public function leaveStatement() : ?LeaveStatementContext
	    {
	    	return $this->getTypedRuleContext(LeaveStatementContext::class, 0);
	    }

	    public function loopStatement() : ?LoopStatementContext
	    {
	    	return $this->getTypedRuleContext(LoopStatementContext::class, 0);
	    }

	    public function repeatStatement() : ?RepeatStatementContext
	    {
	    	return $this->getTypedRuleContext(RepeatStatementContext::class, 0);
	    }

	    public function whileStatement() : ?WhileStatementContext
	    {
	    	return $this->getTypedRuleContext(WhileStatementContext::class, 0);
	    }

	    public function iterateStatement() : ?IterateStatementContext
	    {
	    	return $this->getTypedRuleContext(IterateStatementContext::class, 0);
	    }

	    public function returnStatement() : ?ReturnStatementContext
	    {
	    	return $this->getTypedRuleContext(ReturnStatementContext::class, 0);
	    }

	    public function cursorStatement() : ?CursorStatementContext
	    {
	    	return $this->getTypedRuleContext(CursorStatementContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCompoundStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCompoundStatement($this);
		    }
		}
	} 

	class AdministrationStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_administrationStatement;
	    }

	    public function alterUser() : ?AlterUserContext
	    {
	    	return $this->getTypedRuleContext(AlterUserContext::class, 0);
	    }

	    public function createUser() : ?CreateUserContext
	    {
	    	return $this->getTypedRuleContext(CreateUserContext::class, 0);
	    }

	    public function dropUser() : ?DropUserContext
	    {
	    	return $this->getTypedRuleContext(DropUserContext::class, 0);
	    }

	    public function grantStatement() : ?GrantStatementContext
	    {
	    	return $this->getTypedRuleContext(GrantStatementContext::class, 0);
	    }

	    public function grantProxy() : ?GrantProxyContext
	    {
	    	return $this->getTypedRuleContext(GrantProxyContext::class, 0);
	    }

	    public function renameUser() : ?RenameUserContext
	    {
	    	return $this->getTypedRuleContext(RenameUserContext::class, 0);
	    }

	    public function revokeStatement() : ?RevokeStatementContext
	    {
	    	return $this->getTypedRuleContext(RevokeStatementContext::class, 0);
	    }

	    public function revokeProxy() : ?RevokeProxyContext
	    {
	    	return $this->getTypedRuleContext(RevokeProxyContext::class, 0);
	    }

	    public function analyzeTable() : ?AnalyzeTableContext
	    {
	    	return $this->getTypedRuleContext(AnalyzeTableContext::class, 0);
	    }

	    public function checkTable() : ?CheckTableContext
	    {
	    	return $this->getTypedRuleContext(CheckTableContext::class, 0);
	    }

	    public function checksumTable() : ?ChecksumTableContext
	    {
	    	return $this->getTypedRuleContext(ChecksumTableContext::class, 0);
	    }

	    public function optimizeTable() : ?OptimizeTableContext
	    {
	    	return $this->getTypedRuleContext(OptimizeTableContext::class, 0);
	    }

	    public function repairTable() : ?RepairTableContext
	    {
	    	return $this->getTypedRuleContext(RepairTableContext::class, 0);
	    }

	    public function createUdfunction() : ?CreateUdfunctionContext
	    {
	    	return $this->getTypedRuleContext(CreateUdfunctionContext::class, 0);
	    }

	    public function installPlugin() : ?InstallPluginContext
	    {
	    	return $this->getTypedRuleContext(InstallPluginContext::class, 0);
	    }

	    public function uninstallPlugin() : ?UninstallPluginContext
	    {
	    	return $this->getTypedRuleContext(UninstallPluginContext::class, 0);
	    }

	    public function setStatement() : ?SetStatementContext
	    {
	    	return $this->getTypedRuleContext(SetStatementContext::class, 0);
	    }

	    public function showStatement() : ?ShowStatementContext
	    {
	    	return $this->getTypedRuleContext(ShowStatementContext::class, 0);
	    }

	    public function binlogStatement() : ?BinlogStatementContext
	    {
	    	return $this->getTypedRuleContext(BinlogStatementContext::class, 0);
	    }

	    public function cacheIndexStatement() : ?CacheIndexStatementContext
	    {
	    	return $this->getTypedRuleContext(CacheIndexStatementContext::class, 0);
	    }

	    public function flushStatement() : ?FlushStatementContext
	    {
	    	return $this->getTypedRuleContext(FlushStatementContext::class, 0);
	    }

	    public function killStatement() : ?KillStatementContext
	    {
	    	return $this->getTypedRuleContext(KillStatementContext::class, 0);
	    }

	    public function loadIndexIntoCache() : ?LoadIndexIntoCacheContext
	    {
	    	return $this->getTypedRuleContext(LoadIndexIntoCacheContext::class, 0);
	    }

	    public function resetStatement() : ?ResetStatementContext
	    {
	    	return $this->getTypedRuleContext(ResetStatementContext::class, 0);
	    }

	    public function shutdownStatement() : ?ShutdownStatementContext
	    {
	    	return $this->getTypedRuleContext(ShutdownStatementContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAdministrationStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAdministrationStatement($this);
		    }
		}
	} 

	class UtilityStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_utilityStatement;
	    }

	    public function simpleDescribeStatement() : ?SimpleDescribeStatementContext
	    {
	    	return $this->getTypedRuleContext(SimpleDescribeStatementContext::class, 0);
	    }

	    public function fullDescribeStatement() : ?FullDescribeStatementContext
	    {
	    	return $this->getTypedRuleContext(FullDescribeStatementContext::class, 0);
	    }

	    public function helpStatement() : ?HelpStatementContext
	    {
	    	return $this->getTypedRuleContext(HelpStatementContext::class, 0);
	    }

	    public function useStatement() : ?UseStatementContext
	    {
	    	return $this->getTypedRuleContext(UseStatementContext::class, 0);
	    }

	    public function signalStatement() : ?SignalStatementContext
	    {
	    	return $this->getTypedRuleContext(SignalStatementContext::class, 0);
	    }

	    public function resignalStatement() : ?ResignalStatementContext
	    {
	    	return $this->getTypedRuleContext(ResignalStatementContext::class, 0);
	    }

	    public function diagnosticsStatement() : ?DiagnosticsStatementContext
	    {
	    	return $this->getTypedRuleContext(DiagnosticsStatementContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUtilityStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUtilityStatement($this);
		    }
		}
	} 

	class CreateDatabaseContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $dbFormat
		 */
		public $dbFormat;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createDatabase;
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function DATABASE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATABASE, 0);
	    }

	    public function SCHEMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SCHEMA, 0);
	    }

	    public function ifNotExists() : ?IfNotExistsContext
	    {
	    	return $this->getTypedRuleContext(IfNotExistsContext::class, 0);
	    }

	    /**
	     * @return array<CreateDatabaseOptionContext>|CreateDatabaseOptionContext|null
	     */
	    public function createDatabaseOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(CreateDatabaseOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(CreateDatabaseOptionContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateDatabase($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateDatabase($this);
		    }
		}
	} 

	class CreateEventContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createEvent;
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function EVENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EVENT, 0);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function ON(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::ON);
	    	}

	        return $this->getToken(MySqlParser::ON, $index);
	    }

	    public function SCHEDULE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SCHEDULE, 0);
	    }

	    public function scheduleExpression() : ?ScheduleExpressionContext
	    {
	    	return $this->getTypedRuleContext(ScheduleExpressionContext::class, 0);
	    }

	    public function DO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DO, 0);
	    }

	    public function routineBody() : ?RoutineBodyContext
	    {
	    	return $this->getTypedRuleContext(RoutineBodyContext::class, 0);
	    }

	    public function ownerStatement() : ?OwnerStatementContext
	    {
	    	return $this->getTypedRuleContext(OwnerStatementContext::class, 0);
	    }

	    public function ifNotExists() : ?IfNotExistsContext
	    {
	    	return $this->getTypedRuleContext(IfNotExistsContext::class, 0);
	    }

	    public function COMPLETION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMPLETION, 0);
	    }

	    public function PRESERVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PRESERVE, 0);
	    }

	    public function enableType() : ?EnableTypeContext
	    {
	    	return $this->getTypedRuleContext(EnableTypeContext::class, 0);
	    }

	    public function COMMENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMENT, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateEvent($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateEvent($this);
		    }
		}
	} 

	class CreateIndexContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $intimeAction
		 */
		public $intimeAction;

		/**
		 * @var Token|null $indexCategory
		 */
		public $indexCategory;

		/**
		 * @var Token|null $algType
		 */
		public $algType;

		/**
		 * @var Token|null $lockType
		 */
		public $lockType;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createIndex;
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function ON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ON, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function indexColumnNames() : ?IndexColumnNamesContext
	    {
	    	return $this->getTypedRuleContext(IndexColumnNamesContext::class, 0);
	    }

	    public function indexType() : ?IndexTypeContext
	    {
	    	return $this->getTypedRuleContext(IndexTypeContext::class, 0);
	    }

	    /**
	     * @return array<IndexOptionContext>|IndexOptionContext|null
	     */
	    public function indexOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(IndexOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(IndexOptionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function ALGORITHM(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::ALGORITHM);
	    	}

	        return $this->getToken(MySqlParser::ALGORITHM, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function LOCK(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::LOCK);
	    	}

	        return $this->getToken(MySqlParser::LOCK, $index);
	    }

	    public function ONLINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONLINE, 0);
	    }

	    public function OFFLINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OFFLINE, 0);
	    }

	    public function UNIQUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNIQUE, 0);
	    }

	    public function FULLTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FULLTEXT, 0);
	    }

	    public function SPATIAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SPATIAL, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function DEFAULT(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::DEFAULT);
	    	}

	        return $this->getToken(MySqlParser::DEFAULT, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function INPLACE(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::INPLACE);
	    	}

	        return $this->getToken(MySqlParser::INPLACE, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COPY(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COPY);
	    	}

	        return $this->getToken(MySqlParser::COPY, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function NONE(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::NONE);
	    	}

	        return $this->getToken(MySqlParser::NONE, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function SHARED(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::SHARED);
	    	}

	        return $this->getToken(MySqlParser::SHARED, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EXCLUSIVE(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::EXCLUSIVE);
	    	}

	        return $this->getToken(MySqlParser::EXCLUSIVE, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EQUAL_SYMBOL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::EQUAL_SYMBOL);
	    	}

	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateIndex($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateIndex($this);
		    }
		}
	} 

	class CreateLogfileGroupContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $undoFile
		 */
		public $undoFile;

		/**
		 * @var Token|null $comment
		 */
		public $comment;

		/**
		 * @var FileSizeLiteralContext|null $initSize
		 */
		public $initSize;

		/**
		 * @var FileSizeLiteralContext|null $undoSize
		 */
		public $undoSize;

		/**
		 * @var FileSizeLiteralContext|null $redoSize
		 */
		public $redoSize;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createLogfileGroup;
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function LOGFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOGFILE, 0);
	    }

	    public function GROUP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GROUP, 0);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    public function ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADD, 0);
	    }

	    public function UNDOFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNDOFILE, 0);
	    }

	    public function ENGINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENGINE, 0);
	    }

	    public function engineName() : ?EngineNameContext
	    {
	    	return $this->getTypedRuleContext(EngineNameContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function STRING_LITERAL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::STRING_LITERAL);
	    	}

	        return $this->getToken(MySqlParser::STRING_LITERAL, $index);
	    }

	    public function INITIAL_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INITIAL_SIZE, 0);
	    }

	    public function UNDO_BUFFER_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNDO_BUFFER_SIZE, 0);
	    }

	    public function REDO_BUFFER_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REDO_BUFFER_SIZE, 0);
	    }

	    public function NODEGROUP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NODEGROUP, 0);
	    }

	    public function WAIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WAIT, 0);
	    }

	    public function COMMENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMENT, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EQUAL_SYMBOL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::EQUAL_SYMBOL);
	    	}

	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, $index);
	    }

	    /**
	     * @return array<FileSizeLiteralContext>|FileSizeLiteralContext|null
	     */
	    public function fileSizeLiteral(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(FileSizeLiteralContext::class);
	    	}

	        return $this->getTypedRuleContext(FileSizeLiteralContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateLogfileGroup($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateLogfileGroup($this);
		    }
		}
	} 

	class CreateProcedureContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createProcedure;
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function PROCEDURE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROCEDURE, 0);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function routineBody() : ?RoutineBodyContext
	    {
	    	return $this->getTypedRuleContext(RoutineBodyContext::class, 0);
	    }

	    public function ownerStatement() : ?OwnerStatementContext
	    {
	    	return $this->getTypedRuleContext(OwnerStatementContext::class, 0);
	    }

	    /**
	     * @return array<ProcedureParameterContext>|ProcedureParameterContext|null
	     */
	    public function procedureParameter(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ProcedureParameterContext::class);
	    	}

	        return $this->getTypedRuleContext(ProcedureParameterContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    /**
	     * @return array<RoutineOptionContext>|RoutineOptionContext|null
	     */
	    public function routineOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(RoutineOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(RoutineOptionContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateProcedure($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateProcedure($this);
		    }
		}
	} 

	class CreateFunctionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createFunction;
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function FUNCTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FUNCTION, 0);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function RETURNS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RETURNS, 0);
	    }

	    public function dataType() : ?DataTypeContext
	    {
	    	return $this->getTypedRuleContext(DataTypeContext::class, 0);
	    }

	    public function routineBody() : ?RoutineBodyContext
	    {
	    	return $this->getTypedRuleContext(RoutineBodyContext::class, 0);
	    }

	    public function returnStatement() : ?ReturnStatementContext
	    {
	    	return $this->getTypedRuleContext(ReturnStatementContext::class, 0);
	    }

	    public function ownerStatement() : ?OwnerStatementContext
	    {
	    	return $this->getTypedRuleContext(OwnerStatementContext::class, 0);
	    }

	    /**
	     * @return array<FunctionParameterContext>|FunctionParameterContext|null
	     */
	    public function functionParameter(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(FunctionParameterContext::class);
	    	}

	        return $this->getTypedRuleContext(FunctionParameterContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    /**
	     * @return array<RoutineOptionContext>|RoutineOptionContext|null
	     */
	    public function routineOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(RoutineOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(RoutineOptionContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateFunction($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateFunction($this);
		    }
		}
	} 

	class CreateServerContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $wrapperName
		 */
		public $wrapperName;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createServer;
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function SERVER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SERVER, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function FOREIGN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOREIGN, 0);
	    }

	    public function DATA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATA, 0);
	    }

	    public function WRAPPER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WRAPPER, 0);
	    }

	    public function OPTIONS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPTIONS, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<ServerOptionContext>|ServerOptionContext|null
	     */
	    public function serverOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ServerOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(ServerOptionContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function MYSQL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MYSQL, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateServer($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateServer($this);
		    }
		}
	} 

	class CreateTableContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createTable;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class CopyCreateTableContext extends CreateTableContext
	{
		/**
		 * @var TableNameContext|null $parenthesisTable
		 */
		public $parenthesisTable;

		public function __construct(CreateTableContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    /**
	     * @return array<TableNameContext>|TableNameContext|null
	     */
	    public function tableName(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TableNameContext::class);
	    	}

	        return $this->getTypedRuleContext(TableNameContext::class, $index);
	    }

	    public function LIKE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LIKE, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function TEMPORARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TEMPORARY, 0);
	    }

	    public function ifNotExists() : ?IfNotExistsContext
	    {
	    	return $this->getTypedRuleContext(IfNotExistsContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCopyCreateTable($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCopyCreateTable($this);
		    }
		}
	}

	class ColumnCreateTableContext extends CreateTableContext
	{
		public function __construct(CreateTableContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function createDefinitions() : ?CreateDefinitionsContext
	    {
	    	return $this->getTypedRuleContext(CreateDefinitionsContext::class, 0);
	    }

	    public function TEMPORARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TEMPORARY, 0);
	    }

	    public function ifNotExists() : ?IfNotExistsContext
	    {
	    	return $this->getTypedRuleContext(IfNotExistsContext::class, 0);
	    }

	    /**
	     * @return array<TableOptionContext>|TableOptionContext|null
	     */
	    public function tableOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TableOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(TableOptionContext::class, $index);
	    }

	    public function partitionDefinitions() : ?PartitionDefinitionsContext
	    {
	    	return $this->getTypedRuleContext(PartitionDefinitionsContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterColumnCreateTable($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitColumnCreateTable($this);
		    }
		}
	}

	class QueryCreateTableContext extends CreateTableContext
	{
		/**
		 * @var Token|null $keyViolate
		 */
		public $keyViolate;

		public function __construct(CreateTableContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

	    public function TEMPORARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TEMPORARY, 0);
	    }

	    public function ifNotExists() : ?IfNotExistsContext
	    {
	    	return $this->getTypedRuleContext(IfNotExistsContext::class, 0);
	    }

	    public function createDefinitions() : ?CreateDefinitionsContext
	    {
	    	return $this->getTypedRuleContext(CreateDefinitionsContext::class, 0);
	    }

	    /**
	     * @return array<TableOptionContext>|TableOptionContext|null
	     */
	    public function tableOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TableOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(TableOptionContext::class, $index);
	    }

	    public function partitionDefinitions() : ?PartitionDefinitionsContext
	    {
	    	return $this->getTypedRuleContext(PartitionDefinitionsContext::class, 0);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

	    public function IGNORE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IGNORE, 0);
	    }

	    public function REPLACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLACE, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterQueryCreateTable($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitQueryCreateTable($this);
		    }
		}
	} 

	class CreateTablespaceInnodbContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $datafile
		 */
		public $datafile;

		/**
		 * @var FileSizeLiteralContext|null $fileBlockSize
		 */
		public $fileBlockSize;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createTablespaceInnodb;
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function TABLESPACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLESPACE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADD, 0);
	    }

	    public function DATAFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATAFILE, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function FILE_BLOCK_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FILE_BLOCK_SIZE, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EQUAL_SYMBOL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::EQUAL_SYMBOL);
	    	}

	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, $index);
	    }

	    public function ENGINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENGINE, 0);
	    }

	    public function engineName() : ?EngineNameContext
	    {
	    	return $this->getTypedRuleContext(EngineNameContext::class, 0);
	    }

	    public function fileSizeLiteral() : ?FileSizeLiteralContext
	    {
	    	return $this->getTypedRuleContext(FileSizeLiteralContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateTablespaceInnodb($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateTablespaceInnodb($this);
		    }
		}
	} 

	class CreateTablespaceNdbContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $datafile
		 */
		public $datafile;

		/**
		 * @var Token|null $comment
		 */
		public $comment;

		/**
		 * @var FileSizeLiteralContext|null $extentSize
		 */
		public $extentSize;

		/**
		 * @var FileSizeLiteralContext|null $initialSize
		 */
		public $initialSize;

		/**
		 * @var FileSizeLiteralContext|null $autoextendSize
		 */
		public $autoextendSize;

		/**
		 * @var FileSizeLiteralContext|null $maxSize
		 */
		public $maxSize;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createTablespaceNdb;
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function TABLESPACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLESPACE, 0);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    public function ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADD, 0);
	    }

	    public function DATAFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATAFILE, 0);
	    }

	    public function USE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USE, 0);
	    }

	    public function LOGFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOGFILE, 0);
	    }

	    public function GROUP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GROUP, 0);
	    }

	    public function ENGINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENGINE, 0);
	    }

	    public function engineName() : ?EngineNameContext
	    {
	    	return $this->getTypedRuleContext(EngineNameContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function STRING_LITERAL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::STRING_LITERAL);
	    	}

	        return $this->getToken(MySqlParser::STRING_LITERAL, $index);
	    }

	    public function EXTENT_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXTENT_SIZE, 0);
	    }

	    public function INITIAL_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INITIAL_SIZE, 0);
	    }

	    public function AUTOEXTEND_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AUTOEXTEND_SIZE, 0);
	    }

	    public function MAX_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAX_SIZE, 0);
	    }

	    public function NODEGROUP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NODEGROUP, 0);
	    }

	    public function WAIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WAIT, 0);
	    }

	    public function COMMENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMENT, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EQUAL_SYMBOL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::EQUAL_SYMBOL);
	    	}

	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, $index);
	    }

	    /**
	     * @return array<FileSizeLiteralContext>|FileSizeLiteralContext|null
	     */
	    public function fileSizeLiteral(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(FileSizeLiteralContext::class);
	    	}

	        return $this->getTypedRuleContext(FileSizeLiteralContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateTablespaceNdb($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateTablespaceNdb($this);
		    }
		}
	} 

	class CreateTriggerContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $triggerTime
		 */
		public $triggerTime;

		/**
		 * @var Token|null $triggerEvent
		 */
		public $triggerEvent;

		/**
		 * @var Token|null $triggerPlace
		 */
		public $triggerPlace;

		/**
		 * @var FullIdContext|null $thisTrigger
		 */
		public $thisTrigger;

		/**
		 * @var FullIdContext|null $otherTrigger
		 */
		public $otherTrigger;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createTrigger;
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function TRIGGER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRIGGER, 0);
	    }

	    public function ON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ON, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

	    public function EACH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EACH, 0);
	    }

	    public function ROW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROW, 0);
	    }

	    public function routineBody() : ?RoutineBodyContext
	    {
	    	return $this->getTypedRuleContext(RoutineBodyContext::class, 0);
	    }

	    /**
	     * @return array<FullIdContext>|FullIdContext|null
	     */
	    public function fullId(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(FullIdContext::class);
	    	}

	        return $this->getTypedRuleContext(FullIdContext::class, $index);
	    }

	    public function BEFORE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BEFORE, 0);
	    }

	    public function AFTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AFTER, 0);
	    }

	    public function INSERT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INSERT, 0);
	    }

	    public function UPDATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UPDATE, 0);
	    }

	    public function DELETE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DELETE, 0);
	    }

	    public function ownerStatement() : ?OwnerStatementContext
	    {
	    	return $this->getTypedRuleContext(OwnerStatementContext::class, 0);
	    }

	    public function FOLLOWS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOLLOWS, 0);
	    }

	    public function PRECEDES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PRECEDES, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateTrigger($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateTrigger($this);
		    }
		}
	} 

	class CreateViewContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $algType
		 */
		public $algType;

		/**
		 * @var Token|null $secContext
		 */
		public $secContext;

		/**
		 * @var Token|null $checkOption
		 */
		public $checkOption;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createView;
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function VIEW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VIEW, 0);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

	    public function OR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OR, 0);
	    }

	    public function REPLACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLACE, 0);
	    }

	    public function ALGORITHM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALGORITHM, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function ownerStatement() : ?OwnerStatementContext
	    {
	    	return $this->getTypedRuleContext(OwnerStatementContext::class, 0);
	    }

	    public function SQL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL, 0);
	    }

	    public function SECURITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SECURITY, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function WITH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITH, 0);
	    }

	    public function CHECK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHECK, 0);
	    }

	    public function OPTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPTION, 0);
	    }

	    public function UNDEFINED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNDEFINED, 0);
	    }

	    public function MERGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MERGE, 0);
	    }

	    public function TEMPTABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TEMPTABLE, 0);
	    }

	    public function DEFINER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFINER, 0);
	    }

	    public function INVOKER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INVOKER, 0);
	    }

	    public function CASCADED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CASCADED, 0);
	    }

	    public function LOCAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateView($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateView($this);
		    }
		}
	} 

	class CreateDatabaseOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createDatabaseOption;
	    }

	    public function CHARACTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARACTER, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    public function CHARSET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARSET, 0);
	    }

	    public function charsetName() : ?CharsetNameContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function DEFAULT(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::DEFAULT);
	    	}

	        return $this->getToken(MySqlParser::DEFAULT, $index);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function COLLATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLLATE, 0);
	    }

	    public function collationName() : ?CollationNameContext
	    {
	    	return $this->getTypedRuleContext(CollationNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateDatabaseOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateDatabaseOption($this);
		    }
		}
	} 

	class OwnerStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_ownerStatement;
	    }

	    public function DEFINER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFINER, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function userName() : ?UserNameContext
	    {
	    	return $this->getTypedRuleContext(UserNameContext::class, 0);
	    }

	    public function CURRENT_USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURRENT_USER, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterOwnerStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitOwnerStatement($this);
		    }
		}
	} 

	class ScheduleExpressionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_scheduleExpression;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class PreciseScheduleContext extends ScheduleExpressionContext
	{
		public function __construct(ScheduleExpressionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function AT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AT, 0);
	    }

	    public function timestampValue() : ?TimestampValueContext
	    {
	    	return $this->getTypedRuleContext(TimestampValueContext::class, 0);
	    }

	    /**
	     * @return array<IntervalExprContext>|IntervalExprContext|null
	     */
	    public function intervalExpr(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(IntervalExprContext::class);
	    	}

	        return $this->getTypedRuleContext(IntervalExprContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPreciseSchedule($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPreciseSchedule($this);
		    }
		}
	}

	class IntervalScheduleContext extends ScheduleExpressionContext
	{
		/**
		 * @var TimestampValueContext|null $startTimestamp
		 */
		public $startTimestamp;

		/**
		 * @var IntervalExprContext|null $intervalExpr
		 */
		public $intervalExpr;

		/**
		 * @var TimestampValueContext|null $endTimestamp
		 */
		public $endTimestamp;

		/**
		 * @var array<IntervalExprContext>|null $startIntervals
		 */
		public $startIntervals;

		/**
		 * @var array<IntervalExprContext>|null $endIntervals
		 */
		public $endIntervals;

		public function __construct(ScheduleExpressionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function EVERY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EVERY, 0);
	    }

	    public function intervalType() : ?IntervalTypeContext
	    {
	    	return $this->getTypedRuleContext(IntervalTypeContext::class, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function STARTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STARTS, 0);
	    }

	    public function ENDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENDS, 0);
	    }

	    /**
	     * @return array<TimestampValueContext>|TimestampValueContext|null
	     */
	    public function timestampValue(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TimestampValueContext::class);
	    	}

	        return $this->getTypedRuleContext(TimestampValueContext::class, $index);
	    }

	    /**
	     * @return array<IntervalExprContext>|IntervalExprContext|null
	     */
	    public function intervalExpr(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(IntervalExprContext::class);
	    	}

	        return $this->getTypedRuleContext(IntervalExprContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIntervalSchedule($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIntervalSchedule($this);
		    }
		}
	} 

	class TimestampValueContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_timestampValue;
	    }

	    public function CURRENT_TIMESTAMP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURRENT_TIMESTAMP, 0);
	    }

	    public function stringLiteral() : ?StringLiteralContext
	    {
	    	return $this->getTypedRuleContext(StringLiteralContext::class, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTimestampValue($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTimestampValue($this);
		    }
		}
	} 

	class IntervalExprContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_intervalExpr;
	    }

	    public function PLUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PLUS, 0);
	    }

	    public function INTERVAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTERVAL, 0);
	    }

	    public function intervalType() : ?IntervalTypeContext
	    {
	    	return $this->getTypedRuleContext(IntervalTypeContext::class, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIntervalExpr($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIntervalExpr($this);
		    }
		}
	} 

	class IntervalTypeContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_intervalType;
	    }

	    public function intervalTypeBase() : ?IntervalTypeBaseContext
	    {
	    	return $this->getTypedRuleContext(IntervalTypeBaseContext::class, 0);
	    }

	    public function YEAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::YEAR, 0);
	    }

	    public function YEAR_MONTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::YEAR_MONTH, 0);
	    }

	    public function DAY_HOUR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DAY_HOUR, 0);
	    }

	    public function DAY_MINUTE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DAY_MINUTE, 0);
	    }

	    public function DAY_SECOND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DAY_SECOND, 0);
	    }

	    public function HOUR_MINUTE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HOUR_MINUTE, 0);
	    }

	    public function HOUR_SECOND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HOUR_SECOND, 0);
	    }

	    public function MINUTE_SECOND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MINUTE_SECOND, 0);
	    }

	    public function SECOND_MICROSECOND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SECOND_MICROSECOND, 0);
	    }

	    public function MINUTE_MICROSECOND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MINUTE_MICROSECOND, 0);
	    }

	    public function HOUR_MICROSECOND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HOUR_MICROSECOND, 0);
	    }

	    public function DAY_MICROSECOND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DAY_MICROSECOND, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIntervalType($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIntervalType($this);
		    }
		}
	} 

	class EnableTypeContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_enableType;
	    }

	    public function ENABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENABLE, 0);
	    }

	    public function DISABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISABLE, 0);
	    }

	    public function ON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ON, 0);
	    }

	    public function SLAVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SLAVE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterEnableType($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitEnableType($this);
		    }
		}
	} 

	class IndexTypeContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_indexType;
	    }

	    public function USING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USING, 0);
	    }

	    public function BTREE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BTREE, 0);
	    }

	    public function HASH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HASH, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIndexType($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIndexType($this);
		    }
		}
	} 

	class IndexOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_indexOption;
	    }

	    public function KEY_BLOCK_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY_BLOCK_SIZE, 0);
	    }

	    public function fileSizeLiteral() : ?FileSizeLiteralContext
	    {
	    	return $this->getTypedRuleContext(FileSizeLiteralContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function indexType() : ?IndexTypeContext
	    {
	    	return $this->getTypedRuleContext(IndexTypeContext::class, 0);
	    }

	    public function WITH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITH, 0);
	    }

	    public function PARSER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARSER, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function COMMENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMENT, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function INVISIBLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INVISIBLE, 0);
	    }

	    public function VISIBLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VISIBLE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIndexOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIndexOption($this);
		    }
		}
	} 

	class ProcedureParameterContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $direction
		 */
		public $direction;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_procedureParameter;
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function dataType() : ?DataTypeContext
	    {
	    	return $this->getTypedRuleContext(DataTypeContext::class, 0);
	    }

	    public function IN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IN, 0);
	    }

	    public function OUT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OUT, 0);
	    }

	    public function INOUT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INOUT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterProcedureParameter($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitProcedureParameter($this);
		    }
		}
	} 

	class FunctionParameterContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_functionParameter;
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function dataType() : ?DataTypeContext
	    {
	    	return $this->getTypedRuleContext(DataTypeContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFunctionParameter($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFunctionParameter($this);
		    }
		}
	} 

	class RoutineOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_routineOption;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class RoutineBehaviorContext extends RoutineOptionContext
	{
		public function __construct(RoutineOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DETERMINISTIC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DETERMINISTIC, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRoutineBehavior($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRoutineBehavior($this);
		    }
		}
	}

	class RoutineLanguageContext extends RoutineOptionContext
	{
		public function __construct(RoutineOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function LANGUAGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LANGUAGE, 0);
	    }

	    public function SQL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRoutineLanguage($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRoutineLanguage($this);
		    }
		}
	}

	class RoutineCommentContext extends RoutineOptionContext
	{
		public function __construct(RoutineOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function COMMENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMENT, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRoutineComment($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRoutineComment($this);
		    }
		}
	}

	class RoutineSecurityContext extends RoutineOptionContext
	{
		/**
		 * @var Token|null $context
		 */
		public $context;

		public function __construct(RoutineOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SQL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL, 0);
	    }

	    public function SECURITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SECURITY, 0);
	    }

	    public function DEFINER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFINER, 0);
	    }

	    public function INVOKER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INVOKER, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRoutineSecurity($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRoutineSecurity($this);
		    }
		}
	}

	class RoutineDataContext extends RoutineOptionContext
	{
		public function __construct(RoutineOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CONTAINS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONTAINS, 0);
	    }

	    public function SQL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL, 0);
	    }

	    public function NO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NO, 0);
	    }

	    public function READS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::READS, 0);
	    }

	    public function DATA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATA, 0);
	    }

	    public function MODIFIES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MODIFIES, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRoutineData($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRoutineData($this);
		    }
		}
	} 

	class ServerOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_serverOption;
	    }

	    public function HOST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HOST, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function DATABASE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATABASE, 0);
	    }

	    public function USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USER, 0);
	    }

	    public function PASSWORD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PASSWORD, 0);
	    }

	    public function SOCKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SOCKET, 0);
	    }

	    public function OWNER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OWNER, 0);
	    }

	    public function PORT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PORT, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterServerOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitServerOption($this);
		    }
		}
	} 

	class CreateDefinitionsContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createDefinitions;
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<CreateDefinitionContext>|CreateDefinitionContext|null
	     */
	    public function createDefinition(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(CreateDefinitionContext::class);
	    	}

	        return $this->getTypedRuleContext(CreateDefinitionContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateDefinitions($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateDefinitions($this);
		    }
		}
	} 

	class CreateDefinitionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createDefinition;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class ColumnDeclarationContext extends CreateDefinitionContext
	{
		public function __construct(CreateDefinitionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function columnDefinition() : ?ColumnDefinitionContext
	    {
	    	return $this->getTypedRuleContext(ColumnDefinitionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterColumnDeclaration($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitColumnDeclaration($this);
		    }
		}
	}

	class ConstraintDeclarationContext extends CreateDefinitionContext
	{
		public function __construct(CreateDefinitionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function tableConstraint() : ?TableConstraintContext
	    {
	    	return $this->getTypedRuleContext(TableConstraintContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterConstraintDeclaration($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitConstraintDeclaration($this);
		    }
		}
	}

	class IndexDeclarationContext extends CreateDefinitionContext
	{
		public function __construct(CreateDefinitionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function indexColumnDefinition() : ?IndexColumnDefinitionContext
	    {
	    	return $this->getTypedRuleContext(IndexColumnDefinitionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIndexDeclaration($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIndexDeclaration($this);
		    }
		}
	} 

	class ColumnDefinitionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_columnDefinition;
	    }

	    public function dataType() : ?DataTypeContext
	    {
	    	return $this->getTypedRuleContext(DataTypeContext::class, 0);
	    }

	    /**
	     * @return array<ColumnConstraintContext>|ColumnConstraintContext|null
	     */
	    public function columnConstraint(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ColumnConstraintContext::class);
	    	}

	        return $this->getTypedRuleContext(ColumnConstraintContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterColumnDefinition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitColumnDefinition($this);
		    }
		}
	} 

	class ColumnConstraintContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_columnConstraint;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class StorageColumnConstraintContext extends ColumnConstraintContext
	{
		/**
		 * @var Token|null $storageval
		 */
		public $storageval;

		public function __construct(ColumnConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function STORAGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STORAGE, 0);
	    }

	    public function DISK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISK, 0);
	    }

	    public function MEMORY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MEMORY, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterStorageColumnConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitStorageColumnConstraint($this);
		    }
		}
	}

	class FormatColumnConstraintContext extends ColumnConstraintContext
	{
		/**
		 * @var Token|null $colformat
		 */
		public $colformat;

		public function __construct(ColumnConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function COLUMN_FORMAT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMN_FORMAT, 0);
	    }

	    public function FIXED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIXED, 0);
	    }

	    public function DYNAMIC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DYNAMIC, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFormatColumnConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFormatColumnConstraint($this);
		    }
		}
	}

	class CollateColumnConstraintContext extends ColumnConstraintContext
	{
		public function __construct(ColumnConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function COLLATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLLATE, 0);
	    }

	    public function collationName() : ?CollationNameContext
	    {
	    	return $this->getTypedRuleContext(CollationNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCollateColumnConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCollateColumnConstraint($this);
		    }
		}
	}

	class AutoIncrementColumnConstraintContext extends ColumnConstraintContext
	{
		public function __construct(ColumnConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function AUTO_INCREMENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AUTO_INCREMENT, 0);
	    }

	    public function ON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ON, 0);
	    }

	    public function UPDATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UPDATE, 0);
	    }

	    public function currentTimestamp() : ?CurrentTimestampContext
	    {
	    	return $this->getTypedRuleContext(CurrentTimestampContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAutoIncrementColumnConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAutoIncrementColumnConstraint($this);
		    }
		}
	}

	class CommentColumnConstraintContext extends ColumnConstraintContext
	{
		public function __construct(ColumnConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function COMMENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMENT, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCommentColumnConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCommentColumnConstraint($this);
		    }
		}
	}

	class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext
	{
		public function __construct(ColumnConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

	    public function PRIMARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PRIMARY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPrimaryKeyColumnConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPrimaryKeyColumnConstraint($this);
		    }
		}
	}

	class UniqueKeyColumnConstraintContext extends ColumnConstraintContext
	{
		public function __construct(ColumnConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function UNIQUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNIQUE, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUniqueKeyColumnConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUniqueKeyColumnConstraint($this);
		    }
		}
	}

	class SerialDefaultColumnConstraintContext extends ColumnConstraintContext
	{
		public function __construct(ColumnConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SERIAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SERIAL, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

	    public function VALUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALUE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSerialDefaultColumnConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSerialDefaultColumnConstraint($this);
		    }
		}
	}

	class NullColumnConstraintContext extends ColumnConstraintContext
	{
		public function __construct(ColumnConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function nullNotnull() : ?NullNotnullContext
	    {
	    	return $this->getTypedRuleContext(NullNotnullContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterNullColumnConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitNullColumnConstraint($this);
		    }
		}
	}

	class DefaultColumnConstraintContext extends ColumnConstraintContext
	{
		public function __construct(ColumnConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

	    public function defaultValue() : ?DefaultValueContext
	    {
	    	return $this->getTypedRuleContext(DefaultValueContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDefaultColumnConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDefaultColumnConstraint($this);
		    }
		}
	}

	class ReferenceColumnConstraintContext extends ColumnConstraintContext
	{
		public function __construct(ColumnConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function referenceDefinition() : ?ReferenceDefinitionContext
	    {
	    	return $this->getTypedRuleContext(ReferenceDefinitionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterReferenceColumnConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitReferenceColumnConstraint($this);
		    }
		}
	}

	class GeneratedColumnConstraintContext extends ColumnConstraintContext
	{
		public function __construct(ColumnConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function GENERATED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GENERATED, 0);
	    }

	    public function ALWAYS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALWAYS, 0);
	    }

	    public function VIRTUAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VIRTUAL, 0);
	    }

	    public function STORED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STORED, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterGeneratedColumnConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitGeneratedColumnConstraint($this);
		    }
		}
	} 

	class TableConstraintContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_tableConstraint;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class UniqueKeyTableConstraintContext extends TableConstraintContext
	{
		/**
		 * @var Token|null $indexFormat
		 */
		public $indexFormat;

		/**
		 * @var UidContext|null $name
		 */
		public $name;

		/**
		 * @var UidContext|null $index
		 */
		public $index;

		public function __construct(TableConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function UNIQUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNIQUE, 0);
	    }

	    public function indexColumnNames() : ?IndexColumnNamesContext
	    {
	    	return $this->getTypedRuleContext(IndexColumnNamesContext::class, 0);
	    }

	    public function CONSTRAINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT, 0);
	    }

	    public function indexType() : ?IndexTypeContext
	    {
	    	return $this->getTypedRuleContext(IndexTypeContext::class, 0);
	    }

	    /**
	     * @return array<IndexOptionContext>|IndexOptionContext|null
	     */
	    public function indexOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(IndexOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(IndexOptionContext::class, $index);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUniqueKeyTableConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUniqueKeyTableConstraint($this);
		    }
		}
	}

	class CheckTableConstraintContext extends TableConstraintContext
	{
		/**
		 * @var UidContext|null $name
		 */
		public $name;

		public function __construct(TableConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CHECK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHECK, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function CONSTRAINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCheckTableConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCheckTableConstraint($this);
		    }
		}
	}

	class PrimaryKeyTableConstraintContext extends TableConstraintContext
	{
		/**
		 * @var UidContext|null $name
		 */
		public $name;

		/**
		 * @var UidContext|null $index
		 */
		public $index;

		public function __construct(TableConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function PRIMARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PRIMARY, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

	    public function indexColumnNames() : ?IndexColumnNamesContext
	    {
	    	return $this->getTypedRuleContext(IndexColumnNamesContext::class, 0);
	    }

	    public function CONSTRAINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT, 0);
	    }

	    public function indexType() : ?IndexTypeContext
	    {
	    	return $this->getTypedRuleContext(IndexTypeContext::class, 0);
	    }

	    /**
	     * @return array<IndexOptionContext>|IndexOptionContext|null
	     */
	    public function indexOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(IndexOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(IndexOptionContext::class, $index);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPrimaryKeyTableConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPrimaryKeyTableConstraint($this);
		    }
		}
	}

	class ForeignKeyTableConstraintContext extends TableConstraintContext
	{
		/**
		 * @var UidContext|null $name
		 */
		public $name;

		/**
		 * @var UidContext|null $index
		 */
		public $index;

		public function __construct(TableConstraintContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function FOREIGN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOREIGN, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

	    public function indexColumnNames() : ?IndexColumnNamesContext
	    {
	    	return $this->getTypedRuleContext(IndexColumnNamesContext::class, 0);
	    }

	    public function referenceDefinition() : ?ReferenceDefinitionContext
	    {
	    	return $this->getTypedRuleContext(ReferenceDefinitionContext::class, 0);
	    }

	    public function CONSTRAINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT, 0);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterForeignKeyTableConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitForeignKeyTableConstraint($this);
		    }
		}
	} 

	class ReferenceDefinitionContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $matchType
		 */
		public $matchType;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_referenceDefinition;
	    }

	    public function REFERENCES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REFERENCES, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function indexColumnNames() : ?IndexColumnNamesContext
	    {
	    	return $this->getTypedRuleContext(IndexColumnNamesContext::class, 0);
	    }

	    public function MATCH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MATCH, 0);
	    }

	    public function referenceAction() : ?ReferenceActionContext
	    {
	    	return $this->getTypedRuleContext(ReferenceActionContext::class, 0);
	    }

	    public function FULL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FULL, 0);
	    }

	    public function PARTIAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTIAL, 0);
	    }

	    public function SIMPLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SIMPLE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterReferenceDefinition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitReferenceDefinition($this);
		    }
		}
	} 

	class ReferenceActionContext extends ParserRuleContext
	{
		/**
		 * @var ReferenceControlTypeContext|null $onDelete
		 */
		public $onDelete;

		/**
		 * @var ReferenceControlTypeContext|null $onUpdate
		 */
		public $onUpdate;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_referenceAction;
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function ON(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::ON);
	    	}

	        return $this->getToken(MySqlParser::ON, $index);
	    }

	    public function DELETE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DELETE, 0);
	    }

	    /**
	     * @return array<ReferenceControlTypeContext>|ReferenceControlTypeContext|null
	     */
	    public function referenceControlType(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ReferenceControlTypeContext::class);
	    	}

	        return $this->getTypedRuleContext(ReferenceControlTypeContext::class, $index);
	    }

	    public function UPDATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UPDATE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterReferenceAction($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitReferenceAction($this);
		    }
		}
	} 

	class ReferenceControlTypeContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_referenceControlType;
	    }

	    public function RESTRICT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RESTRICT, 0);
	    }

	    public function CASCADE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CASCADE, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    public function NULL_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NULL_LITERAL, 0);
	    }

	    public function NO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NO, 0);
	    }

	    public function ACTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ACTION, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterReferenceControlType($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitReferenceControlType($this);
		    }
		}
	} 

	class IndexColumnDefinitionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_indexColumnDefinition;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext
	{
		/**
		 * @var Token|null $indexFormat
		 */
		public $indexFormat;

		public function __construct(IndexColumnDefinitionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function indexColumnNames() : ?IndexColumnNamesContext
	    {
	    	return $this->getTypedRuleContext(IndexColumnNamesContext::class, 0);
	    }

	    public function FULLTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FULLTEXT, 0);
	    }

	    public function SPATIAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SPATIAL, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    /**
	     * @return array<IndexOptionContext>|IndexOptionContext|null
	     */
	    public function indexOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(IndexOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(IndexOptionContext::class, $index);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSpecialIndexDeclaration($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSpecialIndexDeclaration($this);
		    }
		}
	}

	class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext
	{
		/**
		 * @var Token|null $indexFormat
		 */
		public $indexFormat;

		public function __construct(IndexColumnDefinitionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function indexColumnNames() : ?IndexColumnNamesContext
	    {
	    	return $this->getTypedRuleContext(IndexColumnNamesContext::class, 0);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function indexType() : ?IndexTypeContext
	    {
	    	return $this->getTypedRuleContext(IndexTypeContext::class, 0);
	    }

	    /**
	     * @return array<IndexOptionContext>|IndexOptionContext|null
	     */
	    public function indexOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(IndexOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(IndexOptionContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSimpleIndexDeclaration($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSimpleIndexDeclaration($this);
		    }
		}
	} 

	class TableOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_tableOption;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class TableOptionEngineContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ENGINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENGINE, 0);
	    }

	    public function engineName() : ?EngineNameContext
	    {
	    	return $this->getTypedRuleContext(EngineNameContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionEngine($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionEngine($this);
		    }
		}
	}

	class TableOptionMaxRowsContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function MAX_ROWS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAX_ROWS, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionMaxRows($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionMaxRows($this);
		    }
		}
	}

	class TableOptionCollateContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function COLLATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLLATE, 0);
	    }

	    public function collationName() : ?CollationNameContext
	    {
	    	return $this->getTypedRuleContext(CollationNameContext::class, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionCollate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionCollate($this);
		    }
		}
	}

	class TableOptionPersistentContext extends TableOptionContext
	{
		/**
		 * @var Token|null $extBoolValue
		 */
		public $extBoolValue;

		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function STATS_PERSISTENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STATS_PERSISTENT, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

	    public function ZERO_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ZERO_DECIMAL, 0);
	    }

	    public function ONE_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONE_DECIMAL, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionPersistent($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionPersistent($this);
		    }
		}
	}

	class TableOptionTablespaceContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function TABLESPACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLESPACE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function tablespaceStorage() : ?TablespaceStorageContext
	    {
	    	return $this->getTypedRuleContext(TablespaceStorageContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionTablespace($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionTablespace($this);
		    }
		}
	}

	class TableOptionPackKeysContext extends TableOptionContext
	{
		/**
		 * @var Token|null $extBoolValue
		 */
		public $extBoolValue;

		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function PACK_KEYS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PACK_KEYS, 0);
	    }

	    public function ZERO_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ZERO_DECIMAL, 0);
	    }

	    public function ONE_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONE_DECIMAL, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionPackKeys($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionPackKeys($this);
		    }
		}
	}

	class TableOptionPasswordContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function PASSWORD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PASSWORD, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionPassword($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionPassword($this);
		    }
		}
	}

	class TableOptionUnionContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function UNION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNION, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function tables() : ?TablesContext
	    {
	    	return $this->getTypedRuleContext(TablesContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionUnion($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionUnion($this);
		    }
		}
	}

	class TableOptionSamplePageContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function STATS_SAMPLE_PAGES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STATS_SAMPLE_PAGES, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionSamplePage($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionSamplePage($this);
		    }
		}
	}

	class TableOptionCharsetContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CHARACTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARACTER, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    public function CHARSET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARSET, 0);
	    }

	    public function charsetName() : ?CharsetNameContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function DEFAULT(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::DEFAULT);
	    	}

	        return $this->getToken(MySqlParser::DEFAULT, $index);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionCharset($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionCharset($this);
		    }
		}
	}

	class TableOptionIndexDirectoryContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function DIRECTORY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DIRECTORY, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionIndexDirectory($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionIndexDirectory($this);
		    }
		}
	}

	class TableOptionKeyBlockSizeContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function KEY_BLOCK_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY_BLOCK_SIZE, 0);
	    }

	    public function fileSizeLiteral() : ?FileSizeLiteralContext
	    {
	    	return $this->getTypedRuleContext(FileSizeLiteralContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionKeyBlockSize($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionKeyBlockSize($this);
		    }
		}
	}

	class TableOptionEncryptionContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ENCRYPTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENCRYPTION, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionEncryption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionEncryption($this);
		    }
		}
	}

	class TableOptionDataDirectoryContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DATA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATA, 0);
	    }

	    public function DIRECTORY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DIRECTORY, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionDataDirectory($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionDataDirectory($this);
		    }
		}
	}

	class TableOptionRecalculationContext extends TableOptionContext
	{
		/**
		 * @var Token|null $extBoolValue
		 */
		public $extBoolValue;

		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function STATS_AUTO_RECALC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STATS_AUTO_RECALC, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

	    public function ZERO_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ZERO_DECIMAL, 0);
	    }

	    public function ONE_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONE_DECIMAL, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionRecalculation($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionRecalculation($this);
		    }
		}
	}

	class TableOptionAutoIncrementContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function AUTO_INCREMENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AUTO_INCREMENT, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionAutoIncrement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionAutoIncrement($this);
		    }
		}
	}

	class TableOptionChecksumContext extends TableOptionContext
	{
		/**
		 * @var Token|null $boolValue
		 */
		public $boolValue;

		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CHECKSUM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHECKSUM, 0);
	    }

	    public function PAGE_CHECKSUM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PAGE_CHECKSUM, 0);
	    }

	    public function ZERO_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ZERO_DECIMAL, 0);
	    }

	    public function ONE_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONE_DECIMAL, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionChecksum($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionChecksum($this);
		    }
		}
	}

	class TableOptionDelayContext extends TableOptionContext
	{
		/**
		 * @var Token|null $boolValue
		 */
		public $boolValue;

		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DELAY_KEY_WRITE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DELAY_KEY_WRITE, 0);
	    }

	    public function ZERO_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ZERO_DECIMAL, 0);
	    }

	    public function ONE_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONE_DECIMAL, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionDelay($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionDelay($this);
		    }
		}
	}

	class TableOptionConnectionContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CONNECTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONNECTION, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionConnection($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionConnection($this);
		    }
		}
	}

	class TableOptionCommentContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function COMMENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMENT, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionComment($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionComment($this);
		    }
		}
	}

	class TableOptionAverageContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function AVG_ROW_LENGTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AVG_ROW_LENGTH, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionAverage($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionAverage($this);
		    }
		}
	}

	class TableOptionRowFormatContext extends TableOptionContext
	{
		/**
		 * @var Token|null $rowFormat
		 */
		public $rowFormat;

		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ROW_FORMAT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROW_FORMAT, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

	    public function DYNAMIC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DYNAMIC, 0);
	    }

	    public function FIXED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIXED, 0);
	    }

	    public function COMPRESSED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMPRESSED, 0);
	    }

	    public function REDUNDANT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REDUNDANT, 0);
	    }

	    public function COMPACT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMPACT, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionRowFormat($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionRowFormat($this);
		    }
		}
	}

	class TableOptionCompressionContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function COMPRESSION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMPRESSION, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ID, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionCompression($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionCompression($this);
		    }
		}
	}

	class TableOptionInsertMethodContext extends TableOptionContext
	{
		/**
		 * @var Token|null $insertMethod
		 */
		public $insertMethod;

		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function INSERT_METHOD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INSERT_METHOD, 0);
	    }

	    public function NO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NO, 0);
	    }

	    public function FIRST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIRST, 0);
	    }

	    public function LAST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LAST, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionInsertMethod($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionInsertMethod($this);
		    }
		}
	}

	class TableOptionMinRowsContext extends TableOptionContext
	{
		public function __construct(TableOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function MIN_ROWS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MIN_ROWS, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableOptionMinRows($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableOptionMinRows($this);
		    }
		}
	} 

	class TablespaceStorageContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_tablespaceStorage;
	    }

	    public function STORAGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STORAGE, 0);
	    }

	    public function DISK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISK, 0);
	    }

	    public function MEMORY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MEMORY, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTablespaceStorage($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTablespaceStorage($this);
		    }
		}
	} 

	class PartitionDefinitionsContext extends ParserRuleContext
	{
		/**
		 * @var DecimalLiteralContext|null $count
		 */
		public $count;

		/**
		 * @var DecimalLiteralContext|null $subCount
		 */
		public $subCount;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_partitionDefinitions;
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function BY(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::BY);
	    	}

	        return $this->getToken(MySqlParser::BY, $index);
	    }

	    public function partitionFunctionDefinition() : ?PartitionFunctionDefinitionContext
	    {
	    	return $this->getTypedRuleContext(PartitionFunctionDefinitionContext::class, 0);
	    }

	    public function PARTITIONS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITIONS, 0);
	    }

	    public function SUBPARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBPARTITION, 0);
	    }

	    public function subpartitionFunctionDefinition() : ?SubpartitionFunctionDefinitionContext
	    {
	    	return $this->getTypedRuleContext(SubpartitionFunctionDefinitionContext::class, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<PartitionDefinitionContext>|PartitionDefinitionContext|null
	     */
	    public function partitionDefinition(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PartitionDefinitionContext::class);
	    	}

	        return $this->getTypedRuleContext(PartitionDefinitionContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<DecimalLiteralContext>|DecimalLiteralContext|null
	     */
	    public function decimalLiteral(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DecimalLiteralContext::class);
	    	}

	        return $this->getTypedRuleContext(DecimalLiteralContext::class, $index);
	    }

	    public function SUBPARTITIONS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBPARTITIONS, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionDefinitions($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionDefinitions($this);
		    }
		}
	} 

	class PartitionFunctionDefinitionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_partitionFunctionDefinition;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext
	{
		/**
		 * @var Token|null $algType
		 */
		public $algType;

		public function __construct(PartitionFunctionDefinitionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function LINEAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LINEAR, 0);
	    }

	    public function ALGORITHM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALGORITHM, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function ONE_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONE_DECIMAL, 0);
	    }

	    public function TWO_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TWO_DECIMAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionFunctionKey($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionFunctionKey($this);
		    }
		}
	}

	class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext
	{
		public function __construct(PartitionFunctionDefinitionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function HASH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HASH, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function LINEAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LINEAR, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionFunctionHash($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionFunctionHash($this);
		    }
		}
	}

	class PartitionFunctionListContext extends PartitionFunctionDefinitionContext
	{
		public function __construct(PartitionFunctionDefinitionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function LIST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LIST, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function COLUMNS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMNS, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionFunctionList($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionFunctionList($this);
		    }
		}
	}

	class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext
	{
		public function __construct(PartitionFunctionDefinitionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function RANGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RANGE, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function COLUMNS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMNS, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionFunctionRange($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionFunctionRange($this);
		    }
		}
	} 

	class SubpartitionFunctionDefinitionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_subpartitionFunctionDefinition;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext
	{
		public function __construct(SubpartitionFunctionDefinitionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function HASH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HASH, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function LINEAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LINEAR, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSubPartitionFunctionHash($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSubPartitionFunctionHash($this);
		    }
		}
	}

	class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext
	{
		/**
		 * @var Token|null $algType
		 */
		public $algType;

		public function __construct(SubpartitionFunctionDefinitionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function LINEAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LINEAR, 0);
	    }

	    public function ALGORITHM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALGORITHM, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function ONE_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONE_DECIMAL, 0);
	    }

	    public function TWO_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TWO_DECIMAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSubPartitionFunctionKey($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSubPartitionFunctionKey($this);
		    }
		}
	} 

	class PartitionDefinitionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_partitionDefinition;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class PartitionComparisionContext extends PartitionDefinitionContext
	{
		public function __construct(PartitionDefinitionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function VALUES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALUES, 0);
	    }

	    public function LESS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LESS, 0);
	    }

	    public function THAN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::THAN, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<PartitionDefinerAtomContext>|PartitionDefinerAtomContext|null
	     */
	    public function partitionDefinerAtom(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PartitionDefinerAtomContext::class);
	    	}

	        return $this->getTypedRuleContext(PartitionDefinerAtomContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    /**
	     * @return array<PartitionOptionContext>|PartitionOptionContext|null
	     */
	    public function partitionOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PartitionOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(PartitionOptionContext::class, $index);
	    }

	    /**
	     * @return array<SubpartitionDefinitionContext>|SubpartitionDefinitionContext|null
	     */
	    public function subpartitionDefinition(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(SubpartitionDefinitionContext::class);
	    	}

	        return $this->getTypedRuleContext(SubpartitionDefinitionContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionComparision($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionComparision($this);
		    }
		}
	}

	class PartitionListAtomContext extends PartitionDefinitionContext
	{
		public function __construct(PartitionDefinitionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function VALUES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALUES, 0);
	    }

	    public function IN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IN, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<PartitionDefinerAtomContext>|PartitionDefinerAtomContext|null
	     */
	    public function partitionDefinerAtom(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PartitionDefinerAtomContext::class);
	    	}

	        return $this->getTypedRuleContext(PartitionDefinerAtomContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    /**
	     * @return array<PartitionOptionContext>|PartitionOptionContext|null
	     */
	    public function partitionOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PartitionOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(PartitionOptionContext::class, $index);
	    }

	    /**
	     * @return array<SubpartitionDefinitionContext>|SubpartitionDefinitionContext|null
	     */
	    public function subpartitionDefinition(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(SubpartitionDefinitionContext::class);
	    	}

	        return $this->getTypedRuleContext(SubpartitionDefinitionContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionListAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionListAtom($this);
		    }
		}
	}

	class PartitionListVectorContext extends PartitionDefinitionContext
	{
		public function __construct(PartitionDefinitionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function VALUES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALUES, 0);
	    }

	    public function IN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IN, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<PartitionDefinerVectorContext>|PartitionDefinerVectorContext|null
	     */
	    public function partitionDefinerVector(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PartitionDefinerVectorContext::class);
	    	}

	        return $this->getTypedRuleContext(PartitionDefinerVectorContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    /**
	     * @return array<PartitionOptionContext>|PartitionOptionContext|null
	     */
	    public function partitionOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PartitionOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(PartitionOptionContext::class, $index);
	    }

	    /**
	     * @return array<SubpartitionDefinitionContext>|SubpartitionDefinitionContext|null
	     */
	    public function subpartitionDefinition(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(SubpartitionDefinitionContext::class);
	    	}

	        return $this->getTypedRuleContext(SubpartitionDefinitionContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionListVector($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionListVector($this);
		    }
		}
	}

	class PartitionSimpleContext extends PartitionDefinitionContext
	{
		public function __construct(PartitionDefinitionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    /**
	     * @return array<PartitionOptionContext>|PartitionOptionContext|null
	     */
	    public function partitionOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PartitionOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(PartitionOptionContext::class, $index);
	    }

	    /**
	     * @return array<SubpartitionDefinitionContext>|SubpartitionDefinitionContext|null
	     */
	    public function subpartitionDefinition(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(SubpartitionDefinitionContext::class);
	    	}

	        return $this->getTypedRuleContext(SubpartitionDefinitionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionSimple($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionSimple($this);
		    }
		}
	} 

	class PartitionDefinerAtomContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_partitionDefinerAtom;
	    }

	    public function constant() : ?ConstantContext
	    {
	    	return $this->getTypedRuleContext(ConstantContext::class, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function MAXVALUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAXVALUE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionDefinerAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionDefinerAtom($this);
		    }
		}
	} 

	class PartitionDefinerVectorContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_partitionDefinerVector;
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<PartitionDefinerAtomContext>|PartitionDefinerAtomContext|null
	     */
	    public function partitionDefinerAtom(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PartitionDefinerAtomContext::class);
	    	}

	        return $this->getTypedRuleContext(PartitionDefinerAtomContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionDefinerVector($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionDefinerVector($this);
		    }
		}
	} 

	class SubpartitionDefinitionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_subpartitionDefinition;
	    }

	    public function SUBPARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBPARTITION, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    /**
	     * @return array<PartitionOptionContext>|PartitionOptionContext|null
	     */
	    public function partitionOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PartitionOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(PartitionOptionContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSubpartitionDefinition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSubpartitionDefinition($this);
		    }
		}
	} 

	class PartitionOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_partitionOption;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class PartitionOptionCommentContext extends PartitionOptionContext
	{
		/**
		 * @var Token|null $comment
		 */
		public $comment;

		public function __construct(PartitionOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function COMMENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMENT, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionOptionComment($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionOptionComment($this);
		    }
		}
	}

	class PartitionOptionNodeGroupContext extends PartitionOptionContext
	{
		/**
		 * @var UidContext|null $nodegroup
		 */
		public $nodegroup;

		public function __construct(PartitionOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function NODEGROUP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NODEGROUP, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionOptionNodeGroup($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionOptionNodeGroup($this);
		    }
		}
	}

	class PartitionOptionIndexDirectoryContext extends PartitionOptionContext
	{
		/**
		 * @var Token|null $indexDirectory
		 */
		public $indexDirectory;

		public function __construct(PartitionOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function DIRECTORY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DIRECTORY, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionOptionIndexDirectory($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionOptionIndexDirectory($this);
		    }
		}
	}

	class PartitionOptionMaxRowsContext extends PartitionOptionContext
	{
		/**
		 * @var DecimalLiteralContext|null $maxRows
		 */
		public $maxRows;

		public function __construct(PartitionOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function MAX_ROWS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAX_ROWS, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionOptionMaxRows($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionOptionMaxRows($this);
		    }
		}
	}

	class PartitionOptionTablespaceContext extends PartitionOptionContext
	{
		/**
		 * @var UidContext|null $tablespace
		 */
		public $tablespace;

		public function __construct(PartitionOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function TABLESPACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLESPACE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionOptionTablespace($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionOptionTablespace($this);
		    }
		}
	}

	class PartitionOptionEngineContext extends PartitionOptionContext
	{
		public function __construct(PartitionOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ENGINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENGINE, 0);
	    }

	    public function engineName() : ?EngineNameContext
	    {
	    	return $this->getTypedRuleContext(EngineNameContext::class, 0);
	    }

	    public function STORAGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STORAGE, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionOptionEngine($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionOptionEngine($this);
		    }
		}
	}

	class PartitionOptionMinRowsContext extends PartitionOptionContext
	{
		/**
		 * @var DecimalLiteralContext|null $minRows
		 */
		public $minRows;

		public function __construct(PartitionOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function MIN_ROWS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MIN_ROWS, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionOptionMinRows($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionOptionMinRows($this);
		    }
		}
	}

	class PartitionOptionDataDirectoryContext extends PartitionOptionContext
	{
		/**
		 * @var Token|null $dataDirectory
		 */
		public $dataDirectory;

		public function __construct(PartitionOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DATA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATA, 0);
	    }

	    public function DIRECTORY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DIRECTORY, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPartitionOptionDataDirectory($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPartitionOptionDataDirectory($this);
		    }
		}
	} 

	class AlterDatabaseContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_alterDatabase;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class AlterUpgradeNameContext extends AlterDatabaseContext
	{
		/**
		 * @var Token|null $dbFormat
		 */
		public $dbFormat;

		public function __construct(AlterDatabaseContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ALTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALTER, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function UPGRADE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UPGRADE, 0);
	    }

	    public function DATA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATA, 0);
	    }

	    public function DIRECTORY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DIRECTORY, 0);
	    }

	    public function NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NAME, 0);
	    }

	    public function DATABASE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATABASE, 0);
	    }

	    public function SCHEMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SCHEMA, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterUpgradeName($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterUpgradeName($this);
		    }
		}
	}

	class AlterSimpleDatabaseContext extends AlterDatabaseContext
	{
		/**
		 * @var Token|null $dbFormat
		 */
		public $dbFormat;

		public function __construct(AlterDatabaseContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ALTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALTER, 0);
	    }

	    public function DATABASE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATABASE, 0);
	    }

	    public function SCHEMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SCHEMA, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    /**
	     * @return array<CreateDatabaseOptionContext>|CreateDatabaseOptionContext|null
	     */
	    public function createDatabaseOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(CreateDatabaseOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(CreateDatabaseOptionContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterSimpleDatabase($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterSimpleDatabase($this);
		    }
		}
	} 

	class AlterEventContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_alterEvent;
	    }

	    public function ALTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALTER, 0);
	    }

	    public function EVENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EVENT, 0);
	    }

	    /**
	     * @return array<FullIdContext>|FullIdContext|null
	     */
	    public function fullId(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(FullIdContext::class);
	    	}

	        return $this->getTypedRuleContext(FullIdContext::class, $index);
	    }

	    public function ownerStatement() : ?OwnerStatementContext
	    {
	    	return $this->getTypedRuleContext(OwnerStatementContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function ON(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::ON);
	    	}

	        return $this->getToken(MySqlParser::ON, $index);
	    }

	    public function SCHEDULE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SCHEDULE, 0);
	    }

	    public function scheduleExpression() : ?ScheduleExpressionContext
	    {
	    	return $this->getTypedRuleContext(ScheduleExpressionContext::class, 0);
	    }

	    public function COMPLETION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMPLETION, 0);
	    }

	    public function PRESERVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PRESERVE, 0);
	    }

	    public function RENAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RENAME, 0);
	    }

	    public function TO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TO, 0);
	    }

	    public function enableType() : ?EnableTypeContext
	    {
	    	return $this->getTypedRuleContext(EnableTypeContext::class, 0);
	    }

	    public function COMMENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMENT, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function DO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DO, 0);
	    }

	    public function routineBody() : ?RoutineBodyContext
	    {
	    	return $this->getTypedRuleContext(RoutineBodyContext::class, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterEvent($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterEvent($this);
		    }
		}
	} 

	class AlterFunctionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_alterFunction;
	    }

	    public function ALTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALTER, 0);
	    }

	    public function FUNCTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FUNCTION, 0);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    /**
	     * @return array<RoutineOptionContext>|RoutineOptionContext|null
	     */
	    public function routineOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(RoutineOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(RoutineOptionContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterFunction($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterFunction($this);
		    }
		}
	} 

	class AlterInstanceContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_alterInstance;
	    }

	    public function ALTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALTER, 0);
	    }

	    public function INSTANCE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INSTANCE, 0);
	    }

	    public function ROTATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROTATE, 0);
	    }

	    public function INNODB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INNODB, 0);
	    }

	    public function MASTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterInstance($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterInstance($this);
		    }
		}
	} 

	class AlterLogfileGroupContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_alterLogfileGroup;
	    }

	    public function ALTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALTER, 0);
	    }

	    public function LOGFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOGFILE, 0);
	    }

	    public function GROUP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GROUP, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADD, 0);
	    }

	    public function UNDOFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNDOFILE, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function ENGINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENGINE, 0);
	    }

	    public function engineName() : ?EngineNameContext
	    {
	    	return $this->getTypedRuleContext(EngineNameContext::class, 0);
	    }

	    public function INITIAL_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INITIAL_SIZE, 0);
	    }

	    public function fileSizeLiteral() : ?FileSizeLiteralContext
	    {
	    	return $this->getTypedRuleContext(FileSizeLiteralContext::class, 0);
	    }

	    public function WAIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WAIT, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EQUAL_SYMBOL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::EQUAL_SYMBOL);
	    	}

	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterLogfileGroup($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterLogfileGroup($this);
		    }
		}
	} 

	class AlterProcedureContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_alterProcedure;
	    }

	    public function ALTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALTER, 0);
	    }

	    public function PROCEDURE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROCEDURE, 0);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    /**
	     * @return array<RoutineOptionContext>|RoutineOptionContext|null
	     */
	    public function routineOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(RoutineOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(RoutineOptionContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterProcedure($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterProcedure($this);
		    }
		}
	} 

	class AlterServerContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_alterServer;
	    }

	    public function ALTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALTER, 0);
	    }

	    public function SERVER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SERVER, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function OPTIONS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPTIONS, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<ServerOptionContext>|ServerOptionContext|null
	     */
	    public function serverOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ServerOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(ServerOptionContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterServer($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterServer($this);
		    }
		}
	} 

	class AlterTableContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $intimeAction
		 */
		public $intimeAction;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_alterTable;
	    }

	    public function ALTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALTER, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function IGNORE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IGNORE, 0);
	    }

	    /**
	     * @return array<AlterSpecificationContext>|AlterSpecificationContext|null
	     */
	    public function alterSpecification(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(AlterSpecificationContext::class);
	    	}

	        return $this->getTypedRuleContext(AlterSpecificationContext::class, $index);
	    }

	    public function partitionDefinitions() : ?PartitionDefinitionsContext
	    {
	    	return $this->getTypedRuleContext(PartitionDefinitionsContext::class, 0);
	    }

	    public function ONLINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONLINE, 0);
	    }

	    public function OFFLINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OFFLINE, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterTable($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterTable($this);
		    }
		}
	} 

	class AlterTablespaceContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $objectAction
		 */
		public $objectAction;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_alterTablespace;
	    }

	    public function ALTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALTER, 0);
	    }

	    public function TABLESPACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLESPACE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function DATAFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATAFILE, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function ENGINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENGINE, 0);
	    }

	    public function engineName() : ?EngineNameContext
	    {
	    	return $this->getTypedRuleContext(EngineNameContext::class, 0);
	    }

	    public function ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADD, 0);
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function INITIAL_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INITIAL_SIZE, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EQUAL_SYMBOL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::EQUAL_SYMBOL);
	    	}

	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, $index);
	    }

	    public function fileSizeLiteral() : ?FileSizeLiteralContext
	    {
	    	return $this->getTypedRuleContext(FileSizeLiteralContext::class, 0);
	    }

	    public function WAIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WAIT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterTablespace($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterTablespace($this);
		    }
		}
	} 

	class AlterViewContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $algType
		 */
		public $algType;

		/**
		 * @var Token|null $secContext
		 */
		public $secContext;

		/**
		 * @var Token|null $checkOpt
		 */
		public $checkOpt;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_alterView;
	    }

	    public function ALTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALTER, 0);
	    }

	    public function VIEW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VIEW, 0);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

	    public function ALGORITHM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALGORITHM, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function ownerStatement() : ?OwnerStatementContext
	    {
	    	return $this->getTypedRuleContext(OwnerStatementContext::class, 0);
	    }

	    public function SQL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL, 0);
	    }

	    public function SECURITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SECURITY, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function WITH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITH, 0);
	    }

	    public function CHECK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHECK, 0);
	    }

	    public function OPTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPTION, 0);
	    }

	    public function UNDEFINED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNDEFINED, 0);
	    }

	    public function MERGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MERGE, 0);
	    }

	    public function TEMPTABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TEMPTABLE, 0);
	    }

	    public function DEFINER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFINER, 0);
	    }

	    public function INVOKER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INVOKER, 0);
	    }

	    public function CASCADED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CASCADED, 0);
	    }

	    public function LOCAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterView($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterView($this);
		    }
		}
	} 

	class AlterSpecificationContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_alterSpecification;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class AlterByDisableKeysContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DISABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISABLE, 0);
	    }

	    public function KEYS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEYS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByDisableKeys($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByDisableKeys($this);
		    }
		}
	}

	class AlterByDefaultCharsetContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CHARACTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARACTER, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EQUAL_SYMBOL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::EQUAL_SYMBOL);
	    	}

	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, $index);
	    }

	    public function charsetName() : ?CharsetNameContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameContext::class, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

	    public function COLLATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLLATE, 0);
	    }

	    public function collationName() : ?CollationNameContext
	    {
	    	return $this->getTypedRuleContext(CollationNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByDefaultCharset($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByDefaultCharset($this);
		    }
		}
	}

	class AlterByRenameColumnContext extends AlterSpecificationContext
	{
		/**
		 * @var UidContext|null $oldColumn
		 */
		public $oldColumn;

		/**
		 * @var UidContext|null $newColumn
		 */
		public $newColumn;

		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function RENAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RENAME, 0);
	    }

	    public function COLUMN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMN, 0);
	    }

	    public function TO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TO, 0);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByRenameColumn($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByRenameColumn($this);
		    }
		}
	}

	class AlterByConvertCharsetContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CONVERT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONVERT, 0);
	    }

	    public function TO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TO, 0);
	    }

	    public function CHARACTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARACTER, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    public function charsetName() : ?CharsetNameContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameContext::class, 0);
	    }

	    public function COLLATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLLATE, 0);
	    }

	    public function collationName() : ?CollationNameContext
	    {
	    	return $this->getTypedRuleContext(CollationNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByConvertCharset($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByConvertCharset($this);
		    }
		}
	}

	class AlterByAddPartitionContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADD, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<PartitionDefinitionContext>|PartitionDefinitionContext|null
	     */
	    public function partitionDefinition(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PartitionDefinitionContext::class);
	    	}

	        return $this->getTypedRuleContext(PartitionDefinitionContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByAddPartition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByAddPartition($this);
		    }
		}
	}

	class AlterByAddForeignKeyContext extends AlterSpecificationContext
	{
		/**
		 * @var UidContext|null $name
		 */
		public $name;

		/**
		 * @var UidContext|null $indexName
		 */
		public $indexName;

		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADD, 0);
	    }

	    public function FOREIGN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOREIGN, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

	    public function indexColumnNames() : ?IndexColumnNamesContext
	    {
	    	return $this->getTypedRuleContext(IndexColumnNamesContext::class, 0);
	    }

	    public function referenceDefinition() : ?ReferenceDefinitionContext
	    {
	    	return $this->getTypedRuleContext(ReferenceDefinitionContext::class, 0);
	    }

	    public function CONSTRAINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT, 0);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByAddForeignKey($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByAddForeignKey($this);
		    }
		}
	}

	class AlterByRenameIndexContext extends AlterSpecificationContext
	{
		/**
		 * @var Token|null $indexFormat
		 */
		public $indexFormat;

		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function RENAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RENAME, 0);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    public function TO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TO, 0);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByRenameIndex($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByRenameIndex($this);
		    }
		}
	}

	class AlterByRemovePartitioningContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function REMOVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REMOVE, 0);
	    }

	    public function PARTITIONING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITIONING, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByRemovePartitioning($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByRemovePartitioning($this);
		    }
		}
	}

	class AlterByRenameContext extends AlterSpecificationContext
	{
		/**
		 * @var Token|null $renameFormat
		 */
		public $renameFormat;

		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function RENAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RENAME, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    public function TO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TO, 0);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByRename($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByRename($this);
		    }
		}
	}

	class AlterByOptimizePartitionContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function OPTIMIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPTIMIZE, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByOptimizePartition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByOptimizePartition($this);
		    }
		}
	}

	class AlterByImportTablespaceContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function IMPORT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IMPORT, 0);
	    }

	    public function TABLESPACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLESPACE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByImportTablespace($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByImportTablespace($this);
		    }
		}
	}

	class AlterByCoalescePartitionContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function COALESCE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COALESCE, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByCoalescePartition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByCoalescePartition($this);
		    }
		}
	}

	class AlterByAddColumnsContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADD, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    /**
	     * @return array<ColumnDefinitionContext>|ColumnDefinitionContext|null
	     */
	    public function columnDefinition(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ColumnDefinitionContext::class);
	    	}

	        return $this->getTypedRuleContext(ColumnDefinitionContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function COLUMN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMN, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByAddColumns($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByAddColumns($this);
		    }
		}
	}

	class AlterByDropForeignKeyContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function FOREIGN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOREIGN, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByDropForeignKey($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByDropForeignKey($this);
		    }
		}
	}

	class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext
	{
		/**
		 * @var UidContext|null $name
		 */
		public $name;

		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADD, 0);
	    }

	    public function CHECK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHECK, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function CONSTRAINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByAddCheckTableConstraint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByAddCheckTableConstraint($this);
		    }
		}
	}

	class AlterByRebuildPartitionContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function REBUILD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REBUILD, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByRebuildPartition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByRebuildPartition($this);
		    }
		}
	}

	class AlterByUpgradePartitioningContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function UPGRADE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UPGRADE, 0);
	    }

	    public function PARTITIONING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITIONING, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByUpgradePartitioning($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByUpgradePartitioning($this);
		    }
		}
	}

	class AlterByRepairPartitionContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function REPAIR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPAIR, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByRepairPartition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByRepairPartition($this);
		    }
		}
	}

	class AlterByExchangePartitionContext extends AlterSpecificationContext
	{
		/**
		 * @var Token|null $validationFormat
		 */
		public $validationFormat;

		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function EXCHANGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXCHANGE, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function WITH(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::WITH);
	    	}

	        return $this->getToken(MySqlParser::WITH, $index);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function VALIDATION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALIDATION, 0);
	    }

	    public function WITHOUT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITHOUT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByExchangePartition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByExchangePartition($this);
		    }
		}
	}

	class AlterByAddIndexContext extends AlterSpecificationContext
	{
		/**
		 * @var Token|null $indexFormat
		 */
		public $indexFormat;

		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADD, 0);
	    }

	    public function indexColumnNames() : ?IndexColumnNamesContext
	    {
	    	return $this->getTypedRuleContext(IndexColumnNamesContext::class, 0);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function indexType() : ?IndexTypeContext
	    {
	    	return $this->getTypedRuleContext(IndexTypeContext::class, 0);
	    }

	    /**
	     * @return array<IndexOptionContext>|IndexOptionContext|null
	     */
	    public function indexOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(IndexOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(IndexOptionContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByAddIndex($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByAddIndex($this);
		    }
		}
	}

	class AlterByDropColumnContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function COLUMN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMN, 0);
	    }

	    public function RESTRICT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RESTRICT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByDropColumn($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByDropColumn($this);
		    }
		}
	}

	class AlterByImportPartitionContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function IMPORT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IMPORT, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function TABLESPACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLESPACE, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByImportPartition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByImportPartition($this);
		    }
		}
	}

	class AlterByChangeDefaultContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ALTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALTER, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

	    public function defaultValue() : ?DefaultValueContext
	    {
	    	return $this->getTypedRuleContext(DefaultValueContext::class, 0);
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function COLUMN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMN, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByChangeDefault($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByChangeDefault($this);
		    }
		}
	}

	class AlterByForceContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function FORCE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FORCE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByForce($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByForce($this);
		    }
		}
	}

	class AlterByDropPartitionContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByDropPartition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByDropPartition($this);
		    }
		}
	}

	class AlterByAddSpecialIndexContext extends AlterSpecificationContext
	{
		/**
		 * @var Token|null $keyType
		 */
		public $keyType;

		/**
		 * @var Token|null $indexFormat
		 */
		public $indexFormat;

		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADD, 0);
	    }

	    public function indexColumnNames() : ?IndexColumnNamesContext
	    {
	    	return $this->getTypedRuleContext(IndexColumnNamesContext::class, 0);
	    }

	    public function FULLTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FULLTEXT, 0);
	    }

	    public function SPATIAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SPATIAL, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    /**
	     * @return array<IndexOptionContext>|IndexOptionContext|null
	     */
	    public function indexOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(IndexOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(IndexOptionContext::class, $index);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByAddSpecialIndex($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByAddSpecialIndex($this);
		    }
		}
	}

	class AlterByModifyColumnContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function MODIFY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MODIFY, 0);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    public function columnDefinition() : ?ColumnDefinitionContext
	    {
	    	return $this->getTypedRuleContext(ColumnDefinitionContext::class, 0);
	    }

	    public function COLUMN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMN, 0);
	    }

	    public function FIRST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIRST, 0);
	    }

	    public function AFTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AFTER, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByModifyColumn($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByModifyColumn($this);
		    }
		}
	}

	class AlterByTableOptionContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    /**
	     * @return array<TableOptionContext>|TableOptionContext|null
	     */
	    public function tableOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TableOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(TableOptionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByTableOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByTableOption($this);
		    }
		}
	}

	class AlterByDropPrimaryKeyContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function PRIMARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PRIMARY, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByDropPrimaryKey($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByDropPrimaryKey($this);
		    }
		}
	}

	class AlterByLockContext extends AlterSpecificationContext
	{
		/**
		 * @var Token|null $lockType
		 */
		public $lockType;

		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function LOCK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCK, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

	    public function NONE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NONE, 0);
	    }

	    public function SHARED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHARED, 0);
	    }

	    public function EXCLUSIVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXCLUSIVE, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByLock($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByLock($this);
		    }
		}
	}

	class AlterByDiscardPartitionContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DISCARD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISCARD, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function TABLESPACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLESPACE, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByDiscardPartition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByDiscardPartition($this);
		    }
		}
	}

	class AlterByDiscardTablespaceContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DISCARD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISCARD, 0);
	    }

	    public function TABLESPACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLESPACE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByDiscardTablespace($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByDiscardTablespace($this);
		    }
		}
	}

	class AlterByValidateContext extends AlterSpecificationContext
	{
		/**
		 * @var Token|null $validationFormat
		 */
		public $validationFormat;

		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function VALIDATION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALIDATION, 0);
	    }

	    public function WITHOUT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITHOUT, 0);
	    }

	    public function WITH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITH, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByValidate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByValidate($this);
		    }
		}
	}

	class AlterByAddPrimaryKeyContext extends AlterSpecificationContext
	{
		/**
		 * @var UidContext|null $name
		 */
		public $name;

		/**
		 * @var UidContext|null $index
		 */
		public $index;

		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADD, 0);
	    }

	    public function PRIMARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PRIMARY, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

	    public function indexColumnNames() : ?IndexColumnNamesContext
	    {
	    	return $this->getTypedRuleContext(IndexColumnNamesContext::class, 0);
	    }

	    public function CONSTRAINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT, 0);
	    }

	    public function indexType() : ?IndexTypeContext
	    {
	    	return $this->getTypedRuleContext(IndexTypeContext::class, 0);
	    }

	    /**
	     * @return array<IndexOptionContext>|IndexOptionContext|null
	     */
	    public function indexOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(IndexOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(IndexOptionContext::class, $index);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByAddPrimaryKey($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByAddPrimaryKey($this);
		    }
		}
	}

	class AlterByCheckPartitionContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CHECK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHECK, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByCheckPartition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByCheckPartition($this);
		    }
		}
	}

	class AlterByEnableKeysContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ENABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENABLE, 0);
	    }

	    public function KEYS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEYS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByEnableKeys($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByEnableKeys($this);
		    }
		}
	}

	class AlterByReorganizePartitionContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function REORGANIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REORGANIZE, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function INTO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTO, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<PartitionDefinitionContext>|PartitionDefinitionContext|null
	     */
	    public function partitionDefinition(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PartitionDefinitionContext::class);
	    	}

	        return $this->getTypedRuleContext(PartitionDefinitionContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByReorganizePartition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByReorganizePartition($this);
		    }
		}
	}

	class AlterBySetAlgorithmContext extends AlterSpecificationContext
	{
		/**
		 * @var Token|null $algType
		 */
		public $algType;

		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ALGORITHM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALGORITHM, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

	    public function INPLACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INPLACE, 0);
	    }

	    public function COPY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COPY, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterBySetAlgorithm($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterBySetAlgorithm($this);
		    }
		}
	}

	class AlterByAnalyzePartitionContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ANALYZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ANALYZE, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByAnalyzePartition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByAnalyzePartition($this);
		    }
		}
	}

	class AlterByChangeColumnContext extends AlterSpecificationContext
	{
		/**
		 * @var UidContext|null $oldColumn
		 */
		public $oldColumn;

		/**
		 * @var UidContext|null $newColumn
		 */
		public $newColumn;

		/**
		 * @var UidContext|null $afterColumn
		 */
		public $afterColumn;

		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CHANGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHANGE, 0);
	    }

	    public function columnDefinition() : ?ColumnDefinitionContext
	    {
	    	return $this->getTypedRuleContext(ColumnDefinitionContext::class, 0);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    public function COLUMN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMN, 0);
	    }

	    public function FIRST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIRST, 0);
	    }

	    public function AFTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AFTER, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByChangeColumn($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByChangeColumn($this);
		    }
		}
	}

	class AlterByAddUniqueKeyContext extends AlterSpecificationContext
	{
		/**
		 * @var Token|null $indexFormat
		 */
		public $indexFormat;

		/**
		 * @var UidContext|null $name
		 */
		public $name;

		/**
		 * @var UidContext|null $indexName
		 */
		public $indexName;

		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADD, 0);
	    }

	    public function UNIQUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNIQUE, 0);
	    }

	    public function indexColumnNames() : ?IndexColumnNamesContext
	    {
	    	return $this->getTypedRuleContext(IndexColumnNamesContext::class, 0);
	    }

	    public function CONSTRAINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT, 0);
	    }

	    public function indexType() : ?IndexTypeContext
	    {
	    	return $this->getTypedRuleContext(IndexTypeContext::class, 0);
	    }

	    /**
	     * @return array<IndexOptionContext>|IndexOptionContext|null
	     */
	    public function indexOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(IndexOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(IndexOptionContext::class, $index);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByAddUniqueKey($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByAddUniqueKey($this);
		    }
		}
	}

	class AlterByTruncatePartitionContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function TRUNCATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRUNCATE, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByTruncatePartition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByTruncatePartition($this);
		    }
		}
	}

	class AlterByDropIndexContext extends AlterSpecificationContext
	{
		/**
		 * @var Token|null $indexFormat
		 */
		public $indexFormat;

		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByDropIndex($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByDropIndex($this);
		    }
		}
	}

	class AlterByAddColumnContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADD, 0);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    public function columnDefinition() : ?ColumnDefinitionContext
	    {
	    	return $this->getTypedRuleContext(ColumnDefinitionContext::class, 0);
	    }

	    public function COLUMN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMN, 0);
	    }

	    public function FIRST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIRST, 0);
	    }

	    public function AFTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AFTER, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByAddColumn($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByAddColumn($this);
		    }
		}
	}

	class AlterByOrderContext extends AlterSpecificationContext
	{
		public function __construct(AlterSpecificationContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ORDER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ORDER, 0);
	    }

	    public function BY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BY, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterByOrder($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterByOrder($this);
		    }
		}
	} 

	class DropDatabaseContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $dbFormat
		 */
		public $dbFormat;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dropDatabase;
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function DATABASE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATABASE, 0);
	    }

	    public function SCHEMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SCHEMA, 0);
	    }

	    public function ifExists() : ?IfExistsContext
	    {
	    	return $this->getTypedRuleContext(IfExistsContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDropDatabase($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDropDatabase($this);
		    }
		}
	} 

	class DropEventContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dropEvent;
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function EVENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EVENT, 0);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    public function ifExists() : ?IfExistsContext
	    {
	    	return $this->getTypedRuleContext(IfExistsContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDropEvent($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDropEvent($this);
		    }
		}
	} 

	class DropIndexContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $intimeAction
		 */
		public $intimeAction;

		/**
		 * @var Token|null $algType
		 */
		public $algType;

		/**
		 * @var Token|null $lockType
		 */
		public $lockType;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dropIndex;
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function ON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ON, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function ALGORITHM(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::ALGORITHM);
	    	}

	        return $this->getToken(MySqlParser::ALGORITHM, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function LOCK(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::LOCK);
	    	}

	        return $this->getToken(MySqlParser::LOCK, $index);
	    }

	    public function ONLINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONLINE, 0);
	    }

	    public function OFFLINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OFFLINE, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function DEFAULT(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::DEFAULT);
	    	}

	        return $this->getToken(MySqlParser::DEFAULT, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function INPLACE(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::INPLACE);
	    	}

	        return $this->getToken(MySqlParser::INPLACE, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COPY(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COPY);
	    	}

	        return $this->getToken(MySqlParser::COPY, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function NONE(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::NONE);
	    	}

	        return $this->getToken(MySqlParser::NONE, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function SHARED(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::SHARED);
	    	}

	        return $this->getToken(MySqlParser::SHARED, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EXCLUSIVE(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::EXCLUSIVE);
	    	}

	        return $this->getToken(MySqlParser::EXCLUSIVE, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EQUAL_SYMBOL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::EQUAL_SYMBOL);
	    	}

	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDropIndex($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDropIndex($this);
		    }
		}
	} 

	class DropLogfileGroupContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dropLogfileGroup;
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function LOGFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOGFILE, 0);
	    }

	    public function GROUP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GROUP, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function ENGINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENGINE, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function engineName() : ?EngineNameContext
	    {
	    	return $this->getTypedRuleContext(EngineNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDropLogfileGroup($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDropLogfileGroup($this);
		    }
		}
	} 

	class DropProcedureContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dropProcedure;
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function PROCEDURE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROCEDURE, 0);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    public function ifExists() : ?IfExistsContext
	    {
	    	return $this->getTypedRuleContext(IfExistsContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDropProcedure($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDropProcedure($this);
		    }
		}
	} 

	class DropFunctionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dropFunction;
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function FUNCTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FUNCTION, 0);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    public function ifExists() : ?IfExistsContext
	    {
	    	return $this->getTypedRuleContext(IfExistsContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDropFunction($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDropFunction($this);
		    }
		}
	} 

	class DropServerContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dropServer;
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function SERVER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SERVER, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function ifExists() : ?IfExistsContext
	    {
	    	return $this->getTypedRuleContext(IfExistsContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDropServer($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDropServer($this);
		    }
		}
	} 

	class DropTableContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $dropType
		 */
		public $dropType;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dropTable;
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function tables() : ?TablesContext
	    {
	    	return $this->getTypedRuleContext(TablesContext::class, 0);
	    }

	    public function TEMPORARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TEMPORARY, 0);
	    }

	    public function ifExists() : ?IfExistsContext
	    {
	    	return $this->getTypedRuleContext(IfExistsContext::class, 0);
	    }

	    public function RESTRICT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RESTRICT, 0);
	    }

	    public function CASCADE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CASCADE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDropTable($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDropTable($this);
		    }
		}
	} 

	class DropTablespaceContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dropTablespace;
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function TABLESPACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLESPACE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function ENGINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENGINE, 0);
	    }

	    public function engineName() : ?EngineNameContext
	    {
	    	return $this->getTypedRuleContext(EngineNameContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDropTablespace($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDropTablespace($this);
		    }
		}
	} 

	class DropTriggerContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dropTrigger;
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function TRIGGER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRIGGER, 0);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    public function ifExists() : ?IfExistsContext
	    {
	    	return $this->getTypedRuleContext(IfExistsContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDropTrigger($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDropTrigger($this);
		    }
		}
	} 

	class DropViewContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $dropType
		 */
		public $dropType;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dropView;
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function VIEW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VIEW, 0);
	    }

	    /**
	     * @return array<FullIdContext>|FullIdContext|null
	     */
	    public function fullId(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(FullIdContext::class);
	    	}

	        return $this->getTypedRuleContext(FullIdContext::class, $index);
	    }

	    public function ifExists() : ?IfExistsContext
	    {
	    	return $this->getTypedRuleContext(IfExistsContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function RESTRICT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RESTRICT, 0);
	    }

	    public function CASCADE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CASCADE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDropView($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDropView($this);
		    }
		}
	} 

	class RenameTableContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_renameTable;
	    }

	    public function RENAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RENAME, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    /**
	     * @return array<RenameTableClauseContext>|RenameTableClauseContext|null
	     */
	    public function renameTableClause(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(RenameTableClauseContext::class);
	    	}

	        return $this->getTypedRuleContext(RenameTableClauseContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRenameTable($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRenameTable($this);
		    }
		}
	} 

	class RenameTableClauseContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_renameTableClause;
	    }

	    /**
	     * @return array<TableNameContext>|TableNameContext|null
	     */
	    public function tableName(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TableNameContext::class);
	    	}

	        return $this->getTypedRuleContext(TableNameContext::class, $index);
	    }

	    public function TO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TO, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRenameTableClause($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRenameTableClause($this);
		    }
		}
	} 

	class TruncateTableContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_truncateTable;
	    }

	    public function TRUNCATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRUNCATE, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTruncateTable($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTruncateTable($this);
		    }
		}
	} 

	class CallStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_callStatement;
	    }

	    public function CALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CALL, 0);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function constants() : ?ConstantsContext
	    {
	    	return $this->getTypedRuleContext(ConstantsContext::class, 0);
	    }

	    public function expressions() : ?ExpressionsContext
	    {
	    	return $this->getTypedRuleContext(ExpressionsContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCallStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCallStatement($this);
		    }
		}
	} 

	class DeleteStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_deleteStatement;
	    }

	    public function singleDeleteStatement() : ?SingleDeleteStatementContext
	    {
	    	return $this->getTypedRuleContext(SingleDeleteStatementContext::class, 0);
	    }

	    public function multipleDeleteStatement() : ?MultipleDeleteStatementContext
	    {
	    	return $this->getTypedRuleContext(MultipleDeleteStatementContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDeleteStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDeleteStatement($this);
		    }
		}
	} 

	class DoStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_doStatement;
	    }

	    public function DO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DO, 0);
	    }

	    public function expressions() : ?ExpressionsContext
	    {
	    	return $this->getTypedRuleContext(ExpressionsContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDoStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDoStatement($this);
		    }
		}
	} 

	class HandlerStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_handlerStatement;
	    }

	    public function handlerOpenStatement() : ?HandlerOpenStatementContext
	    {
	    	return $this->getTypedRuleContext(HandlerOpenStatementContext::class, 0);
	    }

	    public function handlerReadIndexStatement() : ?HandlerReadIndexStatementContext
	    {
	    	return $this->getTypedRuleContext(HandlerReadIndexStatementContext::class, 0);
	    }

	    public function handlerReadStatement() : ?HandlerReadStatementContext
	    {
	    	return $this->getTypedRuleContext(HandlerReadStatementContext::class, 0);
	    }

	    public function handlerCloseStatement() : ?HandlerCloseStatementContext
	    {
	    	return $this->getTypedRuleContext(HandlerCloseStatementContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterHandlerStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitHandlerStatement($this);
		    }
		}
	} 

	class InsertStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $priority
		 */
		public $priority;

		/**
		 * @var UidListContext|null $partitions
		 */
		public $partitions;

		/**
		 * @var UidListContext|null $columns
		 */
		public $columns;

		/**
		 * @var UpdatedElementContext|null $setFirst
		 */
		public $setFirst;

		/**
		 * @var UpdatedElementContext|null $updatedElement
		 */
		public $updatedElement;

		/**
		 * @var UpdatedElementContext|null $duplicatedFirst
		 */
		public $duplicatedFirst;

		/**
		 * @var array<UpdatedElementContext>|null $setElements
		 */
		public $setElements;

		/**
		 * @var array<UpdatedElementContext>|null $duplicatedElements
		 */
		public $duplicatedElements;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_insertStatement;
	    }

	    public function INSERT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INSERT, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function insertStatementValue() : ?InsertStatementValueContext
	    {
	    	return $this->getTypedRuleContext(InsertStatementValueContext::class, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    public function IGNORE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IGNORE, 0);
	    }

	    public function INTO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTO, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function LR_BRACKET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::LR_BRACKET);
	    	}

	        return $this->getToken(MySqlParser::LR_BRACKET, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function RR_BRACKET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::RR_BRACKET);
	    	}

	        return $this->getToken(MySqlParser::RR_BRACKET, $index);
	    }

	    /**
	     * @return array<UpdatedElementContext>|UpdatedElementContext|null
	     */
	    public function updatedElement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UpdatedElementContext::class);
	    	}

	        return $this->getTypedRuleContext(UpdatedElementContext::class, $index);
	    }

	    public function ON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ON, 0);
	    }

	    public function DUPLICATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DUPLICATE, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

	    public function UPDATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UPDATE, 0);
	    }

	    public function LOW_PRIORITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOW_PRIORITY, 0);
	    }

	    public function DELAYED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DELAYED, 0);
	    }

	    public function HIGH_PRIORITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HIGH_PRIORITY, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    /**
	     * @return array<UidListContext>|UidListContext|null
	     */
	    public function uidList(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidListContext::class);
	    	}

	        return $this->getTypedRuleContext(UidListContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterInsertStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitInsertStatement($this);
		    }
		}
	} 

	class LoadDataStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $priority
		 */
		public $priority;

		/**
		 * @var Token|null $filename
		 */
		public $filename;

		/**
		 * @var Token|null $violation
		 */
		public $violation;

		/**
		 * @var Token|null $fieldsFormat
		 */
		public $fieldsFormat;

		/**
		 * @var Token|null $linesFormat
		 */
		public $linesFormat;

		/**
		 * @var CharsetNameContext|null $charset
		 */
		public $charset;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_loadDataStatement;
	    }

	    public function LOAD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOAD, 0);
	    }

	    public function DATA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATA, 0);
	    }

	    public function INFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INFILE, 0);
	    }

	    public function INTO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTO, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function LOCAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function LR_BRACKET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::LR_BRACKET);
	    	}

	        return $this->getToken(MySqlParser::LR_BRACKET, $index);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function RR_BRACKET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::RR_BRACKET);
	    	}

	        return $this->getToken(MySqlParser::RR_BRACKET, $index);
	    }

	    public function CHARACTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARACTER, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function SET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::SET);
	    	}

	        return $this->getToken(MySqlParser::SET, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function LINES(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::LINES);
	    	}

	        return $this->getToken(MySqlParser::LINES, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function IGNORE(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::IGNORE);
	    	}

	        return $this->getToken(MySqlParser::IGNORE, $index);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    /**
	     * @return array<AssignmentFieldContext>|AssignmentFieldContext|null
	     */
	    public function assignmentField(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(AssignmentFieldContext::class);
	    	}

	        return $this->getTypedRuleContext(AssignmentFieldContext::class, $index);
	    }

	    /**
	     * @return array<UpdatedElementContext>|UpdatedElementContext|null
	     */
	    public function updatedElement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UpdatedElementContext::class);
	    	}

	        return $this->getTypedRuleContext(UpdatedElementContext::class, $index);
	    }

	    public function charsetName() : ?CharsetNameContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameContext::class, 0);
	    }

	    public function LOW_PRIORITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOW_PRIORITY, 0);
	    }

	    public function CONCURRENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONCURRENT, 0);
	    }

	    public function REPLACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLACE, 0);
	    }

	    public function FIELDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIELDS, 0);
	    }

	    public function COLUMNS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMNS, 0);
	    }

	    public function ROWS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROWS, 0);
	    }

	    /**
	     * @return array<SelectFieldsIntoContext>|SelectFieldsIntoContext|null
	     */
	    public function selectFieldsInto(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(SelectFieldsIntoContext::class);
	    	}

	        return $this->getTypedRuleContext(SelectFieldsIntoContext::class, $index);
	    }

	    /**
	     * @return array<SelectLinesIntoContext>|SelectLinesIntoContext|null
	     */
	    public function selectLinesInto(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(SelectLinesIntoContext::class);
	    	}

	        return $this->getTypedRuleContext(SelectLinesIntoContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLoadDataStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLoadDataStatement($this);
		    }
		}
	} 

	class LoadXmlStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $priority
		 */
		public $priority;

		/**
		 * @var Token|null $filename
		 */
		public $filename;

		/**
		 * @var Token|null $violation
		 */
		public $violation;

		/**
		 * @var Token|null $tag
		 */
		public $tag;

		/**
		 * @var Token|null $linesFormat
		 */
		public $linesFormat;

		/**
		 * @var CharsetNameContext|null $charset
		 */
		public $charset;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_loadXmlStatement;
	    }

	    public function LOAD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOAD, 0);
	    }

	    public function XML() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::XML, 0);
	    }

	    public function INFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INFILE, 0);
	    }

	    public function INTO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTO, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function STRING_LITERAL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::STRING_LITERAL);
	    	}

	        return $this->getToken(MySqlParser::STRING_LITERAL, $index);
	    }

	    public function LOCAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL, 0);
	    }

	    public function CHARACTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARACTER, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function SET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::SET);
	    	}

	        return $this->getToken(MySqlParser::SET, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function ROWS(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::ROWS);
	    	}

	        return $this->getToken(MySqlParser::ROWS, $index);
	    }

	    public function IDENTIFIED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IDENTIFIED, 0);
	    }

	    public function BY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BY, 0);
	    }

	    public function LESS_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LESS_SYMBOL, 0);
	    }

	    public function GREATER_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GREATER_SYMBOL, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function IGNORE(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::IGNORE);
	    	}

	        return $this->getToken(MySqlParser::IGNORE, $index);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<AssignmentFieldContext>|AssignmentFieldContext|null
	     */
	    public function assignmentField(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(AssignmentFieldContext::class);
	    	}

	        return $this->getTypedRuleContext(AssignmentFieldContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<UpdatedElementContext>|UpdatedElementContext|null
	     */
	    public function updatedElement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UpdatedElementContext::class);
	    	}

	        return $this->getTypedRuleContext(UpdatedElementContext::class, $index);
	    }

	    public function charsetName() : ?CharsetNameContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameContext::class, 0);
	    }

	    public function LOW_PRIORITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOW_PRIORITY, 0);
	    }

	    public function CONCURRENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONCURRENT, 0);
	    }

	    public function REPLACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLACE, 0);
	    }

	    public function LINES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LINES, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLoadXmlStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLoadXmlStatement($this);
		    }
		}
	} 

	class ReplaceStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $priority
		 */
		public $priority;

		/**
		 * @var UidListContext|null $partitions
		 */
		public $partitions;

		/**
		 * @var UidListContext|null $columns
		 */
		public $columns;

		/**
		 * @var UpdatedElementContext|null $setFirst
		 */
		public $setFirst;

		/**
		 * @var UpdatedElementContext|null $updatedElement
		 */
		public $updatedElement;

		/**
		 * @var array<UpdatedElementContext>|null $setElements
		 */
		public $setElements;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_replaceStatement;
	    }

	    public function REPLACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLACE, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function insertStatementValue() : ?InsertStatementValueContext
	    {
	    	return $this->getTypedRuleContext(InsertStatementValueContext::class, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    public function INTO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTO, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function LR_BRACKET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::LR_BRACKET);
	    	}

	        return $this->getToken(MySqlParser::LR_BRACKET, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function RR_BRACKET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::RR_BRACKET);
	    	}

	        return $this->getToken(MySqlParser::RR_BRACKET, $index);
	    }

	    /**
	     * @return array<UpdatedElementContext>|UpdatedElementContext|null
	     */
	    public function updatedElement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UpdatedElementContext::class);
	    	}

	        return $this->getTypedRuleContext(UpdatedElementContext::class, $index);
	    }

	    /**
	     * @return array<UidListContext>|UidListContext|null
	     */
	    public function uidList(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidListContext::class);
	    	}

	        return $this->getTypedRuleContext(UidListContext::class, $index);
	    }

	    public function LOW_PRIORITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOW_PRIORITY, 0);
	    }

	    public function DELAYED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DELAYED, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterReplaceStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitReplaceStatement($this);
		    }
		}
	} 

	class SelectStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_selectStatement;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class UnionSelectContext extends SelectStatementContext
	{
		/**
		 * @var Token|null $unionType
		 */
		public $unionType;

		public function __construct(SelectStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function querySpecificationNointo() : ?QuerySpecificationNointoContext
	    {
	    	return $this->getTypedRuleContext(QuerySpecificationNointoContext::class, 0);
	    }

	    /**
	     * @return array<UnionStatementContext>|UnionStatementContext|null
	     */
	    public function unionStatement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UnionStatementContext::class);
	    	}

	        return $this->getTypedRuleContext(UnionStatementContext::class, $index);
	    }

	    public function UNION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNION, 0);
	    }

	    public function orderByClause() : ?OrderByClauseContext
	    {
	    	return $this->getTypedRuleContext(OrderByClauseContext::class, 0);
	    }

	    public function limitClause() : ?LimitClauseContext
	    {
	    	return $this->getTypedRuleContext(LimitClauseContext::class, 0);
	    }

	    public function lockClause() : ?LockClauseContext
	    {
	    	return $this->getTypedRuleContext(LockClauseContext::class, 0);
	    }

	    public function querySpecification() : ?QuerySpecificationContext
	    {
	    	return $this->getTypedRuleContext(QuerySpecificationContext::class, 0);
	    }

	    public function queryExpression() : ?QueryExpressionContext
	    {
	    	return $this->getTypedRuleContext(QueryExpressionContext::class, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

	    public function DISTINCT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISTINCT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUnionSelect($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUnionSelect($this);
		    }
		}
	}

	class UnionParenthesisSelectContext extends SelectStatementContext
	{
		/**
		 * @var Token|null $unionType
		 */
		public $unionType;

		public function __construct(SelectStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function queryExpressionNointo() : ?QueryExpressionNointoContext
	    {
	    	return $this->getTypedRuleContext(QueryExpressionNointoContext::class, 0);
	    }

	    /**
	     * @return array<UnionParenthesisContext>|UnionParenthesisContext|null
	     */
	    public function unionParenthesis(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UnionParenthesisContext::class);
	    	}

	        return $this->getTypedRuleContext(UnionParenthesisContext::class, $index);
	    }

	    public function UNION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNION, 0);
	    }

	    public function queryExpression() : ?QueryExpressionContext
	    {
	    	return $this->getTypedRuleContext(QueryExpressionContext::class, 0);
	    }

	    public function orderByClause() : ?OrderByClauseContext
	    {
	    	return $this->getTypedRuleContext(OrderByClauseContext::class, 0);
	    }

	    public function limitClause() : ?LimitClauseContext
	    {
	    	return $this->getTypedRuleContext(LimitClauseContext::class, 0);
	    }

	    public function lockClause() : ?LockClauseContext
	    {
	    	return $this->getTypedRuleContext(LockClauseContext::class, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

	    public function DISTINCT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISTINCT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUnionParenthesisSelect($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUnionParenthesisSelect($this);
		    }
		}
	}

	class SimpleSelectContext extends SelectStatementContext
	{
		public function __construct(SelectStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function querySpecification() : ?QuerySpecificationContext
	    {
	    	return $this->getTypedRuleContext(QuerySpecificationContext::class, 0);
	    }

	    public function lockClause() : ?LockClauseContext
	    {
	    	return $this->getTypedRuleContext(LockClauseContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSimpleSelect($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSimpleSelect($this);
		    }
		}
	}

	class ParenthesisSelectContext extends SelectStatementContext
	{
		public function __construct(SelectStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function queryExpression() : ?QueryExpressionContext
	    {
	    	return $this->getTypedRuleContext(QueryExpressionContext::class, 0);
	    }

	    public function lockClause() : ?LockClauseContext
	    {
	    	return $this->getTypedRuleContext(LockClauseContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterParenthesisSelect($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitParenthesisSelect($this);
		    }
		}
	} 

	class UpdateStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_updateStatement;
	    }

	    public function singleUpdateStatement() : ?SingleUpdateStatementContext
	    {
	    	return $this->getTypedRuleContext(SingleUpdateStatementContext::class, 0);
	    }

	    public function multipleUpdateStatement() : ?MultipleUpdateStatementContext
	    {
	    	return $this->getTypedRuleContext(MultipleUpdateStatementContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUpdateStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUpdateStatement($this);
		    }
		}
	} 

	class InsertStatementValueContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $insertFormat
		 */
		public $insertFormat;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_insertStatementValue;
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function LR_BRACKET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::LR_BRACKET);
	    	}

	        return $this->getToken(MySqlParser::LR_BRACKET, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function RR_BRACKET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::RR_BRACKET);
	    	}

	        return $this->getToken(MySqlParser::RR_BRACKET, $index);
	    }

	    public function VALUES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALUES, 0);
	    }

	    public function VALUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALUE, 0);
	    }

	    /**
	     * @return array<ExpressionsWithDefaultsContext>|ExpressionsWithDefaultsContext|null
	     */
	    public function expressionsWithDefaults(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionsWithDefaultsContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionsWithDefaultsContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterInsertStatementValue($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitInsertStatementValue($this);
		    }
		}
	} 

	class UpdatedElementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_updatedElement;
	    }

	    public function fullColumnName() : ?FullColumnNameContext
	    {
	    	return $this->getTypedRuleContext(FullColumnNameContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUpdatedElement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUpdatedElement($this);
		    }
		}
	} 

	class AssignmentFieldContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_assignmentField;
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function LOCAL_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL_ID, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAssignmentField($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAssignmentField($this);
		    }
		}
	} 

	class LockClauseContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_lockClause;
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

	    public function UPDATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UPDATE, 0);
	    }

	    public function LOCK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCK, 0);
	    }

	    public function IN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IN, 0);
	    }

	    public function SHARE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHARE, 0);
	    }

	    public function MODE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MODE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLockClause($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLockClause($this);
		    }
		}
	} 

	class SingleDeleteStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $priority
		 */
		public $priority;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_singleDeleteStatement;
	    }

	    public function DELETE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DELETE, 0);
	    }

	    public function FROM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function QUICK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::QUICK, 0);
	    }

	    public function IGNORE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IGNORE, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function WHERE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WHERE, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function orderByClause() : ?OrderByClauseContext
	    {
	    	return $this->getTypedRuleContext(OrderByClauseContext::class, 0);
	    }

	    public function LIMIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LIMIT, 0);
	    }

	    public function limitClauseAtom() : ?LimitClauseAtomContext
	    {
	    	return $this->getTypedRuleContext(LimitClauseAtomContext::class, 0);
	    }

	    public function LOW_PRIORITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOW_PRIORITY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSingleDeleteStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSingleDeleteStatement($this);
		    }
		}
	} 

	class MultipleDeleteStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $priority
		 */
		public $priority;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_multipleDeleteStatement;
	    }

	    public function DELETE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DELETE, 0);
	    }

	    /**
	     * @return array<TableNameContext>|TableNameContext|null
	     */
	    public function tableName(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TableNameContext::class);
	    	}

	        return $this->getTypedRuleContext(TableNameContext::class, $index);
	    }

	    public function FROM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM, 0);
	    }

	    public function tableSources() : ?TableSourcesContext
	    {
	    	return $this->getTypedRuleContext(TableSourcesContext::class, 0);
	    }

	    public function USING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USING, 0);
	    }

	    public function QUICK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::QUICK, 0);
	    }

	    public function IGNORE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IGNORE, 0);
	    }

	    public function WHERE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WHERE, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function LOW_PRIORITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOW_PRIORITY, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function DOT(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::DOT);
	    	}

	        return $this->getToken(MySqlParser::DOT, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function STAR(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::STAR);
	    	}

	        return $this->getToken(MySqlParser::STAR, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterMultipleDeleteStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitMultipleDeleteStatement($this);
		    }
		}
	} 

	class HandlerOpenStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_handlerOpenStatement;
	    }

	    public function HANDLER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HANDLER, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function OPEN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPEN, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterHandlerOpenStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitHandlerOpenStatement($this);
		    }
		}
	} 

	class HandlerReadIndexStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $moveOrder
		 */
		public $moveOrder;

		/**
		 * @var UidContext|null $index
		 */
		public $index;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_handlerReadIndexStatement;
	    }

	    public function HANDLER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HANDLER, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function READ() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::READ, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function comparisonOperator() : ?ComparisonOperatorContext
	    {
	    	return $this->getTypedRuleContext(ComparisonOperatorContext::class, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function constants() : ?ConstantsContext
	    {
	    	return $this->getTypedRuleContext(ConstantsContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function WHERE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WHERE, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function LIMIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LIMIT, 0);
	    }

	    public function limitClauseAtom() : ?LimitClauseAtomContext
	    {
	    	return $this->getTypedRuleContext(LimitClauseAtomContext::class, 0);
	    }

	    public function FIRST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIRST, 0);
	    }

	    public function NEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NEXT, 0);
	    }

	    public function PREV() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PREV, 0);
	    }

	    public function LAST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LAST, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterHandlerReadIndexStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitHandlerReadIndexStatement($this);
		    }
		}
	} 

	class HandlerReadStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $moveOrder
		 */
		public $moveOrder;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_handlerReadStatement;
	    }

	    public function HANDLER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HANDLER, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function READ() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::READ, 0);
	    }

	    public function FIRST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIRST, 0);
	    }

	    public function NEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NEXT, 0);
	    }

	    public function WHERE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WHERE, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function LIMIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LIMIT, 0);
	    }

	    public function limitClauseAtom() : ?LimitClauseAtomContext
	    {
	    	return $this->getTypedRuleContext(LimitClauseAtomContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterHandlerReadStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitHandlerReadStatement($this);
		    }
		}
	} 

	class HandlerCloseStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_handlerCloseStatement;
	    }

	    public function HANDLER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HANDLER, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function CLOSE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CLOSE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterHandlerCloseStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitHandlerCloseStatement($this);
		    }
		}
	} 

	class SingleUpdateStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $priority
		 */
		public $priority;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_singleUpdateStatement;
	    }

	    public function UPDATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UPDATE, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    /**
	     * @return array<UpdatedElementContext>|UpdatedElementContext|null
	     */
	    public function updatedElement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UpdatedElementContext::class);
	    	}

	        return $this->getTypedRuleContext(UpdatedElementContext::class, $index);
	    }

	    public function IGNORE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IGNORE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function WHERE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WHERE, 0);
	    }

	    public function expressionForUpdate() : ?ExpressionForUpdateContext
	    {
	    	return $this->getTypedRuleContext(ExpressionForUpdateContext::class, 0);
	    }

	    public function orderByClause() : ?OrderByClauseContext
	    {
	    	return $this->getTypedRuleContext(OrderByClauseContext::class, 0);
	    }

	    public function limitClause() : ?LimitClauseContext
	    {
	    	return $this->getTypedRuleContext(LimitClauseContext::class, 0);
	    }

	    public function LOW_PRIORITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOW_PRIORITY, 0);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSingleUpdateStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSingleUpdateStatement($this);
		    }
		}
	} 

	class MultipleUpdateStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $priority
		 */
		public $priority;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_multipleUpdateStatement;
	    }

	    public function UPDATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UPDATE, 0);
	    }

	    public function tableSources() : ?TableSourcesContext
	    {
	    	return $this->getTypedRuleContext(TableSourcesContext::class, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    /**
	     * @return array<UpdatedElementContext>|UpdatedElementContext|null
	     */
	    public function updatedElement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UpdatedElementContext::class);
	    	}

	        return $this->getTypedRuleContext(UpdatedElementContext::class, $index);
	    }

	    public function IGNORE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IGNORE, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function WHERE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WHERE, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function LOW_PRIORITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOW_PRIORITY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterMultipleUpdateStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitMultipleUpdateStatement($this);
		    }
		}
	} 

	class OrderByClauseContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_orderByClause;
	    }

	    public function ORDER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ORDER, 0);
	    }

	    public function BY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BY, 0);
	    }

	    /**
	     * @return array<OrderByExpressionContext>|OrderByExpressionContext|null
	     */
	    public function orderByExpression(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(OrderByExpressionContext::class);
	    	}

	        return $this->getTypedRuleContext(OrderByExpressionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterOrderByClause($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitOrderByClause($this);
		    }
		}
	} 

	class OrderByExpressionContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $order
		 */
		public $order;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_orderByExpression;
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function ASC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASC, 0);
	    }

	    public function DESC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DESC, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterOrderByExpression($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitOrderByExpression($this);
		    }
		}
	} 

	class TableSourcesContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_tableSources;
	    }

	    /**
	     * @return array<TableSourceContext>|TableSourceContext|null
	     */
	    public function tableSource(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TableSourceContext::class);
	    	}

	        return $this->getTypedRuleContext(TableSourceContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableSources($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableSources($this);
		    }
		}
	} 

	class TableSourceContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_tableSource;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class TableSourceNestedContext extends TableSourceContext
	{
		public function __construct(TableSourceContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function tableSourceItem() : ?TableSourceItemContext
	    {
	    	return $this->getTypedRuleContext(TableSourceItemContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<JoinPartContext>|JoinPartContext|null
	     */
	    public function joinPart(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(JoinPartContext::class);
	    	}

	        return $this->getTypedRuleContext(JoinPartContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableSourceNested($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableSourceNested($this);
		    }
		}
	}

	class TableSourceBaseContext extends TableSourceContext
	{
		public function __construct(TableSourceContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function tableSourceItem() : ?TableSourceItemContext
	    {
	    	return $this->getTypedRuleContext(TableSourceItemContext::class, 0);
	    }

	    /**
	     * @return array<JoinPartContext>|JoinPartContext|null
	     */
	    public function joinPart(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(JoinPartContext::class);
	    	}

	        return $this->getTypedRuleContext(JoinPartContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableSourceBase($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableSourceBase($this);
		    }
		}
	} 

	class TableSourceItemContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_tableSourceItem;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class SubqueryTableItemContext extends TableSourceItemContext
	{
		/**
		 * @var SelectStatementContext|null $parenthesisSubquery
		 */
		public $parenthesisSubquery;

		/**
		 * @var UidContext|null $alias
		 */
		public $alias;

		public function __construct(TableSourceItemContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSubqueryTableItem($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSubqueryTableItem($this);
		    }
		}
	}

	class AtomTableItemContext extends TableSourceItemContext
	{
		/**
		 * @var UidContext|null $alias
		 */
		public $alias;

		public function __construct(TableSourceItemContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<IndexHintContext>|IndexHintContext|null
	     */
	    public function indexHint(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(IndexHintContext::class);
	    	}

	        return $this->getTypedRuleContext(IndexHintContext::class, $index);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAtomTableItem($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAtomTableItem($this);
		    }
		}
	}

	class TableSourcesItemContext extends TableSourceItemContext
	{
		public function __construct(TableSourceItemContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function tableSources() : ?TableSourcesContext
	    {
	    	return $this->getTypedRuleContext(TableSourcesContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableSourcesItem($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableSourcesItem($this);
		    }
		}
	} 

	class IndexHintContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $indexHintAction
		 */
		public $indexHintAction;

		/**
		 * @var Token|null $keyFormat
		 */
		public $keyFormat;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_indexHint;
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function USE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USE, 0);
	    }

	    public function IGNORE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IGNORE, 0);
	    }

	    public function FORCE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FORCE, 0);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

	    public function indexHintType() : ?IndexHintTypeContext
	    {
	    	return $this->getTypedRuleContext(IndexHintTypeContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIndexHint($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIndexHint($this);
		    }
		}
	} 

	class IndexHintTypeContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_indexHintType;
	    }

	    public function JOIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::JOIN, 0);
	    }

	    public function ORDER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ORDER, 0);
	    }

	    public function BY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BY, 0);
	    }

	    public function GROUP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GROUP, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIndexHintType($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIndexHintType($this);
		    }
		}
	} 

	class JoinPartContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_joinPart;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class InnerJoinContext extends JoinPartContext
	{
		public function __construct(JoinPartContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function JOIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::JOIN, 0);
	    }

	    public function tableSourceItem() : ?TableSourceItemContext
	    {
	    	return $this->getTypedRuleContext(TableSourceItemContext::class, 0);
	    }

	    public function ON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ON, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function USING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USING, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function INNER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INNER, 0);
	    }

	    public function CROSS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CROSS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterInnerJoin($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitInnerJoin($this);
		    }
		}
	}

	class NaturalJoinContext extends JoinPartContext
	{
		public function __construct(JoinPartContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function NATURAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NATURAL, 0);
	    }

	    public function JOIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::JOIN, 0);
	    }

	    public function tableSourceItem() : ?TableSourceItemContext
	    {
	    	return $this->getTypedRuleContext(TableSourceItemContext::class, 0);
	    }

	    public function LEFT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LEFT, 0);
	    }

	    public function RIGHT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RIGHT, 0);
	    }

	    public function OUTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OUTER, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterNaturalJoin($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitNaturalJoin($this);
		    }
		}
	}

	class OuterJoinContext extends JoinPartContext
	{
		public function __construct(JoinPartContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function JOIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::JOIN, 0);
	    }

	    public function tableSourceItem() : ?TableSourceItemContext
	    {
	    	return $this->getTypedRuleContext(TableSourceItemContext::class, 0);
	    }

	    public function LEFT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LEFT, 0);
	    }

	    public function RIGHT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RIGHT, 0);
	    }

	    public function ON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ON, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function USING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USING, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function OUTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OUTER, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterOuterJoin($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitOuterJoin($this);
		    }
		}
	}

	class StraightJoinContext extends JoinPartContext
	{
		public function __construct(JoinPartContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function STRAIGHT_JOIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRAIGHT_JOIN, 0);
	    }

	    public function tableSourceItem() : ?TableSourceItemContext
	    {
	    	return $this->getTypedRuleContext(TableSourceItemContext::class, 0);
	    }

	    public function ON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ON, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterStraightJoin($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitStraightJoin($this);
		    }
		}
	} 

	class QueryExpressionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_queryExpression;
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function querySpecification() : ?QuerySpecificationContext
	    {
	    	return $this->getTypedRuleContext(QuerySpecificationContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function queryExpression() : ?QueryExpressionContext
	    {
	    	return $this->getTypedRuleContext(QueryExpressionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterQueryExpression($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitQueryExpression($this);
		    }
		}
	} 

	class QueryExpressionNointoContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_queryExpressionNointo;
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function querySpecificationNointo() : ?QuerySpecificationNointoContext
	    {
	    	return $this->getTypedRuleContext(QuerySpecificationNointoContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function queryExpressionNointo() : ?QueryExpressionNointoContext
	    {
	    	return $this->getTypedRuleContext(QueryExpressionNointoContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterQueryExpressionNointo($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitQueryExpressionNointo($this);
		    }
		}
	} 

	class QuerySpecificationContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_querySpecification;
	    }

	    public function SELECT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SELECT, 0);
	    }

	    public function selectElements() : ?SelectElementsContext
	    {
	    	return $this->getTypedRuleContext(SelectElementsContext::class, 0);
	    }

	    /**
	     * @return array<SelectSpecContext>|SelectSpecContext|null
	     */
	    public function selectSpec(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(SelectSpecContext::class);
	    	}

	        return $this->getTypedRuleContext(SelectSpecContext::class, $index);
	    }

	    public function selectIntoExpression() : ?SelectIntoExpressionContext
	    {
	    	return $this->getTypedRuleContext(SelectIntoExpressionContext::class, 0);
	    }

	    public function fromClause() : ?FromClauseContext
	    {
	    	return $this->getTypedRuleContext(FromClauseContext::class, 0);
	    }

	    public function orderByClause() : ?OrderByClauseContext
	    {
	    	return $this->getTypedRuleContext(OrderByClauseContext::class, 0);
	    }

	    public function limitClause() : ?LimitClauseContext
	    {
	    	return $this->getTypedRuleContext(LimitClauseContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterQuerySpecification($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitQuerySpecification($this);
		    }
		}
	} 

	class QuerySpecificationNointoContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_querySpecificationNointo;
	    }

	    public function SELECT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SELECT, 0);
	    }

	    public function selectElements() : ?SelectElementsContext
	    {
	    	return $this->getTypedRuleContext(SelectElementsContext::class, 0);
	    }

	    /**
	     * @return array<SelectSpecContext>|SelectSpecContext|null
	     */
	    public function selectSpec(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(SelectSpecContext::class);
	    	}

	        return $this->getTypedRuleContext(SelectSpecContext::class, $index);
	    }

	    public function fromClause() : ?FromClauseContext
	    {
	    	return $this->getTypedRuleContext(FromClauseContext::class, 0);
	    }

	    public function orderByClause() : ?OrderByClauseContext
	    {
	    	return $this->getTypedRuleContext(OrderByClauseContext::class, 0);
	    }

	    public function limitClause() : ?LimitClauseContext
	    {
	    	return $this->getTypedRuleContext(LimitClauseContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterQuerySpecificationNointo($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitQuerySpecificationNointo($this);
		    }
		}
	} 

	class UnionParenthesisContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $unionType
		 */
		public $unionType;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_unionParenthesis;
	    }

	    public function UNION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNION, 0);
	    }

	    public function queryExpressionNointo() : ?QueryExpressionNointoContext
	    {
	    	return $this->getTypedRuleContext(QueryExpressionNointoContext::class, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

	    public function DISTINCT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISTINCT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUnionParenthesis($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUnionParenthesis($this);
		    }
		}
	} 

	class UnionStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $unionType
		 */
		public $unionType;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_unionStatement;
	    }

	    public function UNION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNION, 0);
	    }

	    public function querySpecificationNointo() : ?QuerySpecificationNointoContext
	    {
	    	return $this->getTypedRuleContext(QuerySpecificationNointoContext::class, 0);
	    }

	    public function queryExpressionNointo() : ?QueryExpressionNointoContext
	    {
	    	return $this->getTypedRuleContext(QueryExpressionNointoContext::class, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

	    public function DISTINCT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISTINCT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUnionStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUnionStatement($this);
		    }
		}
	} 

	class SelectSpecContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_selectSpec;
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

	    public function DISTINCT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISTINCT, 0);
	    }

	    public function DISTINCTROW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISTINCTROW, 0);
	    }

	    public function HIGH_PRIORITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HIGH_PRIORITY, 0);
	    }

	    public function STRAIGHT_JOIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRAIGHT_JOIN, 0);
	    }

	    public function SQL_SMALL_RESULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_SMALL_RESULT, 0);
	    }

	    public function SQL_BIG_RESULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_BIG_RESULT, 0);
	    }

	    public function SQL_BUFFER_RESULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_BUFFER_RESULT, 0);
	    }

	    public function SQL_CACHE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_CACHE, 0);
	    }

	    public function SQL_NO_CACHE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_NO_CACHE, 0);
	    }

	    public function SQL_CALC_FOUND_ROWS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_CALC_FOUND_ROWS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSelectSpec($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSelectSpec($this);
		    }
		}
	} 

	class SelectElementsContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $star
		 */
		public $star;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_selectElements;
	    }

	    /**
	     * @return array<SelectElementContext>|SelectElementContext|null
	     */
	    public function selectElement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(SelectElementContext::class);
	    	}

	        return $this->getTypedRuleContext(SelectElementContext::class, $index);
	    }

	    public function STAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STAR, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSelectElements($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSelectElements($this);
		    }
		}
	} 

	class SelectElementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_selectElement;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class SelectExpressionElementContext extends SelectElementContext
	{
		public function __construct(SelectElementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function LOCAL_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL_ID, 0);
	    }

	    public function VAR_ASSIGN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VAR_ASSIGN, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSelectExpressionElement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSelectExpressionElement($this);
		    }
		}
	}

	class SelectFunctionElementContext extends SelectElementContext
	{
		public function __construct(SelectElementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function functionCall() : ?FunctionCallContext
	    {
	    	return $this->getTypedRuleContext(FunctionCallContext::class, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSelectFunctionElement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSelectFunctionElement($this);
		    }
		}
	}

	class SelectStarElementContext extends SelectElementContext
	{
		public function __construct(SelectElementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    public function DOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DOT, 0);
	    }

	    public function STAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STAR, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSelectStarElement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSelectStarElement($this);
		    }
		}
	}

	class SelectColumnElementContext extends SelectElementContext
	{
		public function __construct(SelectElementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function fullColumnName() : ?FullColumnNameContext
	    {
	    	return $this->getTypedRuleContext(FullColumnNameContext::class, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSelectColumnElement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSelectColumnElement($this);
		    }
		}
	} 

	class SelectIntoExpressionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_selectIntoExpression;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class SelectIntoVariablesContext extends SelectIntoExpressionContext
	{
		public function __construct(SelectIntoExpressionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function INTO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTO, 0);
	    }

	    /**
	     * @return array<AssignmentFieldContext>|AssignmentFieldContext|null
	     */
	    public function assignmentField(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(AssignmentFieldContext::class);
	    	}

	        return $this->getTypedRuleContext(AssignmentFieldContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSelectIntoVariables($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSelectIntoVariables($this);
		    }
		}
	}

	class SelectIntoTextFileContext extends SelectIntoExpressionContext
	{
		/**
		 * @var Token|null $filename
		 */
		public $filename;

		/**
		 * @var Token|null $fieldsFormat
		 */
		public $fieldsFormat;

		/**
		 * @var CharsetNameContext|null $charset
		 */
		public $charset;

		public function __construct(SelectIntoExpressionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function INTO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTO, 0);
	    }

	    public function OUTFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OUTFILE, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function CHARACTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARACTER, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    public function LINES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LINES, 0);
	    }

	    public function charsetName() : ?CharsetNameContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameContext::class, 0);
	    }

	    public function FIELDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIELDS, 0);
	    }

	    public function COLUMNS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMNS, 0);
	    }

	    /**
	     * @return array<SelectFieldsIntoContext>|SelectFieldsIntoContext|null
	     */
	    public function selectFieldsInto(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(SelectFieldsIntoContext::class);
	    	}

	        return $this->getTypedRuleContext(SelectFieldsIntoContext::class, $index);
	    }

	    /**
	     * @return array<SelectLinesIntoContext>|SelectLinesIntoContext|null
	     */
	    public function selectLinesInto(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(SelectLinesIntoContext::class);
	    	}

	        return $this->getTypedRuleContext(SelectLinesIntoContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSelectIntoTextFile($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSelectIntoTextFile($this);
		    }
		}
	}

	class SelectIntoDumpFileContext extends SelectIntoExpressionContext
	{
		public function __construct(SelectIntoExpressionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function INTO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTO, 0);
	    }

	    public function DUMPFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DUMPFILE, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSelectIntoDumpFile($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSelectIntoDumpFile($this);
		    }
		}
	} 

	class SelectFieldsIntoContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $terminationField
		 */
		public $terminationField;

		/**
		 * @var Token|null $enclosion
		 */
		public $enclosion;

		/**
		 * @var Token|null $escaping
		 */
		public $escaping;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_selectFieldsInto;
	    }

	    public function TERMINATED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TERMINATED, 0);
	    }

	    public function BY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BY, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function ENCLOSED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENCLOSED, 0);
	    }

	    public function OPTIONALLY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPTIONALLY, 0);
	    }

	    public function ESCAPED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ESCAPED, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSelectFieldsInto($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSelectFieldsInto($this);
		    }
		}
	} 

	class SelectLinesIntoContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $starting
		 */
		public $starting;

		/**
		 * @var Token|null $terminationLine
		 */
		public $terminationLine;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_selectLinesInto;
	    }

	    public function STARTING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STARTING, 0);
	    }

	    public function BY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BY, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function TERMINATED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TERMINATED, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSelectLinesInto($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSelectLinesInto($this);
		    }
		}
	} 

	class FromClauseContext extends ParserRuleContext
	{
		/**
		 * @var ExpressionContext|null $whereExpr
		 */
		public $whereExpr;

		/**
		 * @var ExpressionContext|null $havingExpr
		 */
		public $havingExpr;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_fromClause;
	    }

	    public function FROM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM, 0);
	    }

	    public function tableSources() : ?TableSourcesContext
	    {
	    	return $this->getTypedRuleContext(TableSourcesContext::class, 0);
	    }

	    public function WHERE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WHERE, 0);
	    }

	    public function GROUP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GROUP, 0);
	    }

	    public function BY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BY, 0);
	    }

	    /**
	     * @return array<GroupByItemContext>|GroupByItemContext|null
	     */
	    public function groupByItem(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(GroupByItemContext::class);
	    	}

	        return $this->getTypedRuleContext(GroupByItemContext::class, $index);
	    }

	    public function HAVING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HAVING, 0);
	    }

	    /**
	     * @return array<ExpressionContext>|ExpressionContext|null
	     */
	    public function expression(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function WITH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITH, 0);
	    }

	    public function ROLLUP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROLLUP, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFromClause($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFromClause($this);
		    }
		}
	} 

	class GroupByItemContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $order
		 */
		public $order;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_groupByItem;
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function ASC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASC, 0);
	    }

	    public function DESC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DESC, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterGroupByItem($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitGroupByItem($this);
		    }
		}
	} 

	class LimitClauseContext extends ParserRuleContext
	{
		/**
		 * @var LimitClauseAtomContext|null $offset
		 */
		public $offset;

		/**
		 * @var LimitClauseAtomContext|null $limit
		 */
		public $limit;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_limitClause;
	    }

	    public function LIMIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LIMIT, 0);
	    }

	    public function OFFSET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OFFSET, 0);
	    }

	    /**
	     * @return array<LimitClauseAtomContext>|LimitClauseAtomContext|null
	     */
	    public function limitClauseAtom(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(LimitClauseAtomContext::class);
	    	}

	        return $this->getTypedRuleContext(LimitClauseAtomContext::class, $index);
	    }

	    public function COMMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMA, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLimitClause($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLimitClause($this);
		    }
		}
	} 

	class LimitClauseAtomContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_limitClauseAtom;
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function mysqlVariable() : ?MysqlVariableContext
	    {
	    	return $this->getTypedRuleContext(MysqlVariableContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLimitClauseAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLimitClauseAtom($this);
		    }
		}
	} 

	class StartTransactionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_startTransaction;
	    }

	    public function START() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::START, 0);
	    }

	    public function TRANSACTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRANSACTION, 0);
	    }

	    /**
	     * @return array<TransactionModeContext>|TransactionModeContext|null
	     */
	    public function transactionMode(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TransactionModeContext::class);
	    	}

	        return $this->getTypedRuleContext(TransactionModeContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterStartTransaction($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitStartTransaction($this);
		    }
		}
	} 

	class BeginWorkContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_beginWork;
	    }

	    public function BEGIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BEGIN, 0);
	    }

	    public function WORK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WORK, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterBeginWork($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitBeginWork($this);
		    }
		}
	} 

	class CommitWorkContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $nochain
		 */
		public $nochain;

		/**
		 * @var Token|null $norelease
		 */
		public $norelease;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_commitWork;
	    }

	    public function COMMIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMIT, 0);
	    }

	    public function WORK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WORK, 0);
	    }

	    public function AND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AND, 0);
	    }

	    public function CHAIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHAIN, 0);
	    }

	    public function RELEASE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELEASE, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function NO(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::NO);
	    	}

	        return $this->getToken(MySqlParser::NO, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCommitWork($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCommitWork($this);
		    }
		}
	} 

	class RollbackWorkContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $nochain
		 */
		public $nochain;

		/**
		 * @var Token|null $norelease
		 */
		public $norelease;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_rollbackWork;
	    }

	    public function ROLLBACK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROLLBACK, 0);
	    }

	    public function WORK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WORK, 0);
	    }

	    public function AND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AND, 0);
	    }

	    public function CHAIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHAIN, 0);
	    }

	    public function RELEASE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELEASE, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function NO(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::NO);
	    	}

	        return $this->getToken(MySqlParser::NO, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRollbackWork($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRollbackWork($this);
		    }
		}
	} 

	class SavepointStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_savepointStatement;
	    }

	    public function SAVEPOINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SAVEPOINT, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSavepointStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSavepointStatement($this);
		    }
		}
	} 

	class RollbackStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_rollbackStatement;
	    }

	    public function ROLLBACK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROLLBACK, 0);
	    }

	    public function TO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TO, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function WORK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WORK, 0);
	    }

	    public function SAVEPOINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SAVEPOINT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRollbackStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRollbackStatement($this);
		    }
		}
	} 

	class ReleaseStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_releaseStatement;
	    }

	    public function RELEASE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELEASE, 0);
	    }

	    public function SAVEPOINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SAVEPOINT, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterReleaseStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitReleaseStatement($this);
		    }
		}
	} 

	class LockTablesContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_lockTables;
	    }

	    public function LOCK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCK, 0);
	    }

	    public function TABLES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLES, 0);
	    }

	    /**
	     * @return array<LockTableElementContext>|LockTableElementContext|null
	     */
	    public function lockTableElement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(LockTableElementContext::class);
	    	}

	        return $this->getTypedRuleContext(LockTableElementContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLockTables($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLockTables($this);
		    }
		}
	} 

	class UnlockTablesContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_unlockTables;
	    }

	    public function UNLOCK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNLOCK, 0);
	    }

	    public function TABLES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLES, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUnlockTables($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUnlockTables($this);
		    }
		}
	} 

	class SetAutocommitStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $autocommitValue
		 */
		public $autocommitValue;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_setAutocommitStatement;
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    public function AUTOCOMMIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AUTOCOMMIT, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function ZERO_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ZERO_DECIMAL, 0);
	    }

	    public function ONE_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONE_DECIMAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSetAutocommitStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSetAutocommitStatement($this);
		    }
		}
	} 

	class SetTransactionStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $transactionContext
		 */
		public $transactionContext;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_setTransactionStatement;
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    public function TRANSACTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRANSACTION, 0);
	    }

	    /**
	     * @return array<TransactionOptionContext>|TransactionOptionContext|null
	     */
	    public function transactionOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TransactionOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(TransactionOptionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function GLOBAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GLOBAL, 0);
	    }

	    public function SESSION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SESSION, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSetTransactionStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSetTransactionStatement($this);
		    }
		}
	} 

	class TransactionModeContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_transactionMode;
	    }

	    public function WITH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITH, 0);
	    }

	    public function CONSISTENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSISTENT, 0);
	    }

	    public function SNAPSHOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SNAPSHOT, 0);
	    }

	    public function READ() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::READ, 0);
	    }

	    public function WRITE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WRITE, 0);
	    }

	    public function ONLY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONLY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTransactionMode($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTransactionMode($this);
		    }
		}
	} 

	class LockTableElementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_lockTableElement;
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function lockAction() : ?LockActionContext
	    {
	    	return $this->getTypedRuleContext(LockActionContext::class, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLockTableElement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLockTableElement($this);
		    }
		}
	} 

	class LockActionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_lockAction;
	    }

	    public function READ() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::READ, 0);
	    }

	    public function LOCAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL, 0);
	    }

	    public function WRITE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WRITE, 0);
	    }

	    public function LOW_PRIORITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOW_PRIORITY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLockAction($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLockAction($this);
		    }
		}
	} 

	class TransactionOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_transactionOption;
	    }

	    public function ISOLATION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ISOLATION, 0);
	    }

	    public function LEVEL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LEVEL, 0);
	    }

	    public function transactionLevel() : ?TransactionLevelContext
	    {
	    	return $this->getTypedRuleContext(TransactionLevelContext::class, 0);
	    }

	    public function READ() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::READ, 0);
	    }

	    public function WRITE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WRITE, 0);
	    }

	    public function ONLY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONLY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTransactionOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTransactionOption($this);
		    }
		}
	} 

	class TransactionLevelContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_transactionLevel;
	    }

	    public function REPEATABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPEATABLE, 0);
	    }

	    public function READ() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::READ, 0);
	    }

	    public function COMMITTED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMITTED, 0);
	    }

	    public function UNCOMMITTED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNCOMMITTED, 0);
	    }

	    public function SERIALIZABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SERIALIZABLE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTransactionLevel($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTransactionLevel($this);
		    }
		}
	} 

	class ChangeMasterContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_changeMaster;
	    }

	    public function CHANGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHANGE, 0);
	    }

	    public function MASTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER, 0);
	    }

	    public function TO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TO, 0);
	    }

	    /**
	     * @return array<MasterOptionContext>|MasterOptionContext|null
	     */
	    public function masterOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(MasterOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(MasterOptionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function channelOption() : ?ChannelOptionContext
	    {
	    	return $this->getTypedRuleContext(ChannelOptionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterChangeMaster($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitChangeMaster($this);
		    }
		}
	} 

	class ChangeReplicationFilterContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_changeReplicationFilter;
	    }

	    public function CHANGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHANGE, 0);
	    }

	    public function REPLICATION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATION, 0);
	    }

	    public function FILTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FILTER, 0);
	    }

	    /**
	     * @return array<ReplicationFilterContext>|ReplicationFilterContext|null
	     */
	    public function replicationFilter(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ReplicationFilterContext::class);
	    	}

	        return $this->getTypedRuleContext(ReplicationFilterContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterChangeReplicationFilter($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitChangeReplicationFilter($this);
		    }
		}
	} 

	class PurgeBinaryLogsContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $purgeFormat
		 */
		public $purgeFormat;

		/**
		 * @var Token|null $fileName
		 */
		public $fileName;

		/**
		 * @var Token|null $timeValue
		 */
		public $timeValue;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_purgeBinaryLogs;
	    }

	    public function PURGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PURGE, 0);
	    }

	    public function LOGS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOGS, 0);
	    }

	    public function BINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINARY, 0);
	    }

	    public function MASTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER, 0);
	    }

	    public function TO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TO, 0);
	    }

	    public function BEFORE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BEFORE, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPurgeBinaryLogs($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPurgeBinaryLogs($this);
		    }
		}
	} 

	class ResetMasterContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_resetMaster;
	    }

	    public function RESET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RESET, 0);
	    }

	    public function MASTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterResetMaster($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitResetMaster($this);
		    }
		}
	} 

	class ResetSlaveContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_resetSlave;
	    }

	    public function RESET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RESET, 0);
	    }

	    public function SLAVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SLAVE, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

	    public function channelOption() : ?ChannelOptionContext
	    {
	    	return $this->getTypedRuleContext(ChannelOptionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterResetSlave($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitResetSlave($this);
		    }
		}
	} 

	class StartSlaveContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_startSlave;
	    }

	    public function START() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::START, 0);
	    }

	    public function SLAVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SLAVE, 0);
	    }

	    /**
	     * @return array<ThreadTypeContext>|ThreadTypeContext|null
	     */
	    public function threadType(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ThreadTypeContext::class);
	    	}

	        return $this->getTypedRuleContext(ThreadTypeContext::class, $index);
	    }

	    public function UNTIL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNTIL, 0);
	    }

	    public function untilOption() : ?UntilOptionContext
	    {
	    	return $this->getTypedRuleContext(UntilOptionContext::class, 0);
	    }

	    /**
	     * @return array<ConnectionOptionContext>|ConnectionOptionContext|null
	     */
	    public function connectionOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ConnectionOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(ConnectionOptionContext::class, $index);
	    }

	    public function channelOption() : ?ChannelOptionContext
	    {
	    	return $this->getTypedRuleContext(ChannelOptionContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterStartSlave($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitStartSlave($this);
		    }
		}
	} 

	class StopSlaveContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_stopSlave;
	    }

	    public function STOP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STOP, 0);
	    }

	    public function SLAVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SLAVE, 0);
	    }

	    /**
	     * @return array<ThreadTypeContext>|ThreadTypeContext|null
	     */
	    public function threadType(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ThreadTypeContext::class);
	    	}

	        return $this->getTypedRuleContext(ThreadTypeContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterStopSlave($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitStopSlave($this);
		    }
		}
	} 

	class StartGroupReplicationContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_startGroupReplication;
	    }

	    public function START() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::START, 0);
	    }

	    public function GROUP_REPLICATION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GROUP_REPLICATION, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterStartGroupReplication($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitStartGroupReplication($this);
		    }
		}
	} 

	class StopGroupReplicationContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_stopGroupReplication;
	    }

	    public function STOP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STOP, 0);
	    }

	    public function GROUP_REPLICATION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GROUP_REPLICATION, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterStopGroupReplication($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitStopGroupReplication($this);
		    }
		}
	} 

	class MasterOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_masterOption;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class MasterStringOptionContext extends MasterOptionContext
	{
		public function __construct(MasterOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function stringMasterOption() : ?StringMasterOptionContext
	    {
	    	return $this->getTypedRuleContext(StringMasterOptionContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterMasterStringOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitMasterStringOption($this);
		    }
		}
	}

	class MasterRealOptionContext extends MasterOptionContext
	{
		public function __construct(MasterOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function MASTER_HEARTBEAT_PERIOD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_HEARTBEAT_PERIOD, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function REAL_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REAL_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterMasterRealOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitMasterRealOption($this);
		    }
		}
	}

	class MasterBoolOptionContext extends MasterOptionContext
	{
		/**
		 * @var Token|null $boolVal
		 */
		public $boolVal;

		public function __construct(MasterOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function boolMasterOption() : ?BoolMasterOptionContext
	    {
	    	return $this->getTypedRuleContext(BoolMasterOptionContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function ZERO_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ZERO_DECIMAL, 0);
	    }

	    public function ONE_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONE_DECIMAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterMasterBoolOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitMasterBoolOption($this);
		    }
		}
	}

	class MasterUidListOptionContext extends MasterOptionContext
	{
		public function __construct(MasterOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function IGNORE_SERVER_IDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IGNORE_SERVER_IDS, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterMasterUidListOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitMasterUidListOption($this);
		    }
		}
	}

	class MasterDecimalOptionContext extends MasterOptionContext
	{
		public function __construct(MasterOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function decimalMasterOption() : ?DecimalMasterOptionContext
	    {
	    	return $this->getTypedRuleContext(DecimalMasterOptionContext::class, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterMasterDecimalOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitMasterDecimalOption($this);
		    }
		}
	} 

	class StringMasterOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_stringMasterOption;
	    }

	    public function MASTER_BIND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_BIND, 0);
	    }

	    public function MASTER_HOST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_HOST, 0);
	    }

	    public function MASTER_USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_USER, 0);
	    }

	    public function MASTER_PASSWORD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_PASSWORD, 0);
	    }

	    public function MASTER_LOG_FILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_LOG_FILE, 0);
	    }

	    public function RELAY_LOG_FILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELAY_LOG_FILE, 0);
	    }

	    public function MASTER_SSL_CA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL_CA, 0);
	    }

	    public function MASTER_SSL_CAPATH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL_CAPATH, 0);
	    }

	    public function MASTER_SSL_CERT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL_CERT, 0);
	    }

	    public function MASTER_SSL_CRL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL_CRL, 0);
	    }

	    public function MASTER_SSL_CRLPATH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL_CRLPATH, 0);
	    }

	    public function MASTER_SSL_KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL_KEY, 0);
	    }

	    public function MASTER_SSL_CIPHER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL_CIPHER, 0);
	    }

	    public function MASTER_TLS_VERSION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_TLS_VERSION, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterStringMasterOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitStringMasterOption($this);
		    }
		}
	} 

	class DecimalMasterOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_decimalMasterOption;
	    }

	    public function MASTER_PORT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_PORT, 0);
	    }

	    public function MASTER_CONNECT_RETRY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_CONNECT_RETRY, 0);
	    }

	    public function MASTER_RETRY_COUNT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_RETRY_COUNT, 0);
	    }

	    public function MASTER_DELAY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_DELAY, 0);
	    }

	    public function MASTER_LOG_POS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_LOG_POS, 0);
	    }

	    public function RELAY_LOG_POS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELAY_LOG_POS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDecimalMasterOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDecimalMasterOption($this);
		    }
		}
	} 

	class BoolMasterOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_boolMasterOption;
	    }

	    public function MASTER_AUTO_POSITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_AUTO_POSITION, 0);
	    }

	    public function MASTER_SSL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL, 0);
	    }

	    public function MASTER_SSL_VERIFY_SERVER_CERT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL_VERIFY_SERVER_CERT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterBoolMasterOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitBoolMasterOption($this);
		    }
		}
	} 

	class ChannelOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_channelOption;
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

	    public function CHANNEL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHANNEL, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterChannelOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitChannelOption($this);
		    }
		}
	} 

	class ReplicationFilterContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_replicationFilter;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class WildIgnoreTableReplicationContext extends ReplicationFilterContext
	{
		public function __construct(ReplicationFilterContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function REPLICATE_WILD_IGNORE_TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATE_WILD_IGNORE_TABLE, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function simpleStrings() : ?SimpleStringsContext
	    {
	    	return $this->getTypedRuleContext(SimpleStringsContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterWildIgnoreTableReplication($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitWildIgnoreTableReplication($this);
		    }
		}
	}

	class DoTableReplicationContext extends ReplicationFilterContext
	{
		public function __construct(ReplicationFilterContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function REPLICATE_DO_TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATE_DO_TABLE, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function tables() : ?TablesContext
	    {
	    	return $this->getTypedRuleContext(TablesContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDoTableReplication($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDoTableReplication($this);
		    }
		}
	}

	class IgnoreTableReplicationContext extends ReplicationFilterContext
	{
		public function __construct(ReplicationFilterContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function REPLICATE_IGNORE_TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATE_IGNORE_TABLE, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function tables() : ?TablesContext
	    {
	    	return $this->getTypedRuleContext(TablesContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIgnoreTableReplication($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIgnoreTableReplication($this);
		    }
		}
	}

	class RewriteDbReplicationContext extends ReplicationFilterContext
	{
		public function __construct(ReplicationFilterContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function REPLICATE_REWRITE_DB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATE_REWRITE_DB, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<TablePairContext>|TablePairContext|null
	     */
	    public function tablePair(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TablePairContext::class);
	    	}

	        return $this->getTypedRuleContext(TablePairContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRewriteDbReplication($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRewriteDbReplication($this);
		    }
		}
	}

	class DoDbReplicationContext extends ReplicationFilterContext
	{
		public function __construct(ReplicationFilterContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function REPLICATE_DO_DB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATE_DO_DB, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDoDbReplication($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDoDbReplication($this);
		    }
		}
	}

	class IgnoreDbReplicationContext extends ReplicationFilterContext
	{
		public function __construct(ReplicationFilterContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function REPLICATE_IGNORE_DB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATE_IGNORE_DB, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIgnoreDbReplication($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIgnoreDbReplication($this);
		    }
		}
	}

	class WildDoTableReplicationContext extends ReplicationFilterContext
	{
		public function __construct(ReplicationFilterContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function REPLICATE_WILD_DO_TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATE_WILD_DO_TABLE, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function simpleStrings() : ?SimpleStringsContext
	    {
	    	return $this->getTypedRuleContext(SimpleStringsContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterWildDoTableReplication($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitWildDoTableReplication($this);
		    }
		}
	} 

	class TablePairContext extends ParserRuleContext
	{
		/**
		 * @var TableNameContext|null $firstTable
		 */
		public $firstTable;

		/**
		 * @var TableNameContext|null $secondTable
		 */
		public $secondTable;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_tablePair;
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function COMMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMA, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TableNameContext>|TableNameContext|null
	     */
	    public function tableName(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TableNameContext::class);
	    	}

	        return $this->getTypedRuleContext(TableNameContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTablePair($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTablePair($this);
		    }
		}
	} 

	class ThreadTypeContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_threadType;
	    }

	    public function IO_THREAD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IO_THREAD, 0);
	    }

	    public function SQL_THREAD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_THREAD, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterThreadType($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitThreadType($this);
		    }
		}
	} 

	class UntilOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_untilOption;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class GtidsUntilOptionContext extends UntilOptionContext
	{
		/**
		 * @var Token|null $gtids
		 */
		public $gtids;

		public function __construct(UntilOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function gtuidSet() : ?GtuidSetContext
	    {
	    	return $this->getTypedRuleContext(GtuidSetContext::class, 0);
	    }

	    public function SQL_BEFORE_GTIDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_BEFORE_GTIDS, 0);
	    }

	    public function SQL_AFTER_GTIDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_AFTER_GTIDS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterGtidsUntilOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitGtidsUntilOption($this);
		    }
		}
	}

	class SqlGapsUntilOptionContext extends UntilOptionContext
	{
		public function __construct(UntilOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SQL_AFTER_MTS_GAPS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_AFTER_MTS_GAPS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSqlGapsUntilOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSqlGapsUntilOption($this);
		    }
		}
	}

	class MasterLogUntilOptionContext extends UntilOptionContext
	{
		public function __construct(UntilOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function MASTER_LOG_FILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_LOG_FILE, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EQUAL_SYMBOL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::EQUAL_SYMBOL);
	    	}

	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, $index);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function COMMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMA, 0);
	    }

	    public function MASTER_LOG_POS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_LOG_POS, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterMasterLogUntilOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitMasterLogUntilOption($this);
		    }
		}
	}

	class RelayLogUntilOptionContext extends UntilOptionContext
	{
		public function __construct(UntilOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function RELAY_LOG_FILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELAY_LOG_FILE, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EQUAL_SYMBOL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::EQUAL_SYMBOL);
	    	}

	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, $index);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function COMMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMA, 0);
	    }

	    public function RELAY_LOG_POS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELAY_LOG_POS, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRelayLogUntilOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRelayLogUntilOption($this);
		    }
		}
	} 

	class ConnectionOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_connectionOption;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class PluginDirConnectionOptionContext extends ConnectionOptionContext
	{
		/**
		 * @var Token|null $conOptPluginDir
		 */
		public $conOptPluginDir;

		public function __construct(ConnectionOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function PLUGIN_DIR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PLUGIN_DIR, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPluginDirConnectionOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPluginDirConnectionOption($this);
		    }
		}
	}

	class UserConnectionOptionContext extends ConnectionOptionContext
	{
		/**
		 * @var Token|null $conOptUser
		 */
		public $conOptUser;

		public function __construct(ConnectionOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USER, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUserConnectionOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUserConnectionOption($this);
		    }
		}
	}

	class DefaultAuthConnectionOptionContext extends ConnectionOptionContext
	{
		/**
		 * @var Token|null $conOptDefAuth
		 */
		public $conOptDefAuth;

		public function __construct(ConnectionOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DEFAULT_AUTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT_AUTH, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDefaultAuthConnectionOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDefaultAuthConnectionOption($this);
		    }
		}
	}

	class PasswordConnectionOptionContext extends ConnectionOptionContext
	{
		/**
		 * @var Token|null $conOptPassword
		 */
		public $conOptPassword;

		public function __construct(ConnectionOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function PASSWORD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PASSWORD, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPasswordConnectionOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPasswordConnectionOption($this);
		    }
		}
	} 

	class GtuidSetContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_gtuidSet;
	    }

	    /**
	     * @return array<UuidSetContext>|UuidSetContext|null
	     */
	    public function uuidSet(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UuidSetContext::class);
	    	}

	        return $this->getTypedRuleContext(UuidSetContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterGtuidSet($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitGtuidSet($this);
		    }
		}
	} 

	class XaStartTransactionContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $xaStart
		 */
		public $xaStart;

		/**
		 * @var Token|null $xaAction
		 */
		public $xaAction;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_xaStartTransaction;
	    }

	    public function XA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::XA, 0);
	    }

	    public function xid() : ?XidContext
	    {
	    	return $this->getTypedRuleContext(XidContext::class, 0);
	    }

	    public function START() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::START, 0);
	    }

	    public function BEGIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BEGIN, 0);
	    }

	    public function JOIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::JOIN, 0);
	    }

	    public function RESUME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RESUME, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterXaStartTransaction($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitXaStartTransaction($this);
		    }
		}
	} 

	class XaEndTransactionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_xaEndTransaction;
	    }

	    public function XA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::XA, 0);
	    }

	    public function END() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::END, 0);
	    }

	    public function xid() : ?XidContext
	    {
	    	return $this->getTypedRuleContext(XidContext::class, 0);
	    }

	    public function SUSPEND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUSPEND, 0);
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

	    public function MIGRATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MIGRATE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterXaEndTransaction($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitXaEndTransaction($this);
		    }
		}
	} 

	class XaPrepareStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_xaPrepareStatement;
	    }

	    public function XA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::XA, 0);
	    }

	    public function PREPARE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PREPARE, 0);
	    }

	    public function xid() : ?XidContext
	    {
	    	return $this->getTypedRuleContext(XidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterXaPrepareStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitXaPrepareStatement($this);
		    }
		}
	} 

	class XaCommitWorkContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_xaCommitWork;
	    }

	    public function XA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::XA, 0);
	    }

	    public function COMMIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMIT, 0);
	    }

	    public function xid() : ?XidContext
	    {
	    	return $this->getTypedRuleContext(XidContext::class, 0);
	    }

	    public function ONE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONE, 0);
	    }

	    public function PHASE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PHASE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterXaCommitWork($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitXaCommitWork($this);
		    }
		}
	} 

	class XaRollbackWorkContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_xaRollbackWork;
	    }

	    public function XA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::XA, 0);
	    }

	    public function ROLLBACK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROLLBACK, 0);
	    }

	    public function xid() : ?XidContext
	    {
	    	return $this->getTypedRuleContext(XidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterXaRollbackWork($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitXaRollbackWork($this);
		    }
		}
	} 

	class XaRecoverWorkContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_xaRecoverWork;
	    }

	    public function XA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::XA, 0);
	    }

	    public function RECOVER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RECOVER, 0);
	    }

	    public function CONVERT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONVERT, 0);
	    }

	    public function xid() : ?XidContext
	    {
	    	return $this->getTypedRuleContext(XidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterXaRecoverWork($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitXaRecoverWork($this);
		    }
		}
	} 

	class PrepareStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $query
		 */
		public $query;

		/**
		 * @var Token|null $variable
		 */
		public $variable;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_prepareStatement;
	    }

	    public function PREPARE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PREPARE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function FROM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function LOCAL_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL_ID, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPrepareStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPrepareStatement($this);
		    }
		}
	} 

	class ExecuteStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_executeStatement;
	    }

	    public function EXECUTE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXECUTE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function USING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USING, 0);
	    }

	    public function userVariables() : ?UserVariablesContext
	    {
	    	return $this->getTypedRuleContext(UserVariablesContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterExecuteStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitExecuteStatement($this);
		    }
		}
	} 

	class DeallocatePrepareContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $dropFormat
		 */
		public $dropFormat;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_deallocatePrepare;
	    }

	    public function PREPARE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PREPARE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function DEALLOCATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEALLOCATE, 0);
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDeallocatePrepare($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDeallocatePrepare($this);
		    }
		}
	} 

	class RoutineBodyContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_routineBody;
	    }

	    public function blockStatement() : ?BlockStatementContext
	    {
	    	return $this->getTypedRuleContext(BlockStatementContext::class, 0);
	    }

	    public function sqlStatement() : ?SqlStatementContext
	    {
	    	return $this->getTypedRuleContext(SqlStatementContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRoutineBody($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRoutineBody($this);
		    }
		}
	} 

	class BlockStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_blockStatement;
	    }

	    public function BEGIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BEGIN, 0);
	    }

	    public function END() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::END, 0);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    public function COLON_SYMB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLON_SYMB, 0);
	    }

	    /**
	     * @return array<DeclareVariableContext>|DeclareVariableContext|null
	     */
	    public function declareVariable(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DeclareVariableContext::class);
	    	}

	        return $this->getTypedRuleContext(DeclareVariableContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function SEMI(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::SEMI);
	    	}

	        return $this->getToken(MySqlParser::SEMI, $index);
	    }

	    /**
	     * @return array<DeclareConditionContext>|DeclareConditionContext|null
	     */
	    public function declareCondition(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DeclareConditionContext::class);
	    	}

	        return $this->getTypedRuleContext(DeclareConditionContext::class, $index);
	    }

	    /**
	     * @return array<DeclareCursorContext>|DeclareCursorContext|null
	     */
	    public function declareCursor(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DeclareCursorContext::class);
	    	}

	        return $this->getTypedRuleContext(DeclareCursorContext::class, $index);
	    }

	    /**
	     * @return array<DeclareHandlerContext>|DeclareHandlerContext|null
	     */
	    public function declareHandler(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DeclareHandlerContext::class);
	    	}

	        return $this->getTypedRuleContext(DeclareHandlerContext::class, $index);
	    }

	    /**
	     * @return array<ProcedureSqlStatementContext>|ProcedureSqlStatementContext|null
	     */
	    public function procedureSqlStatement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ProcedureSqlStatementContext::class);
	    	}

	        return $this->getTypedRuleContext(ProcedureSqlStatementContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterBlockStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitBlockStatement($this);
		    }
		}
	} 

	class CaseStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_caseStatement;
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function CASE(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::CASE);
	    	}

	        return $this->getToken(MySqlParser::CASE, $index);
	    }

	    public function END() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::END, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    /**
	     * @return array<CaseAlternativeContext>|CaseAlternativeContext|null
	     */
	    public function caseAlternative(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(CaseAlternativeContext::class);
	    	}

	        return $this->getTypedRuleContext(CaseAlternativeContext::class, $index);
	    }

	    public function ELSE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ELSE, 0);
	    }

	    /**
	     * @return array<ProcedureSqlStatementContext>|ProcedureSqlStatementContext|null
	     */
	    public function procedureSqlStatement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ProcedureSqlStatementContext::class);
	    	}

	        return $this->getTypedRuleContext(ProcedureSqlStatementContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCaseStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCaseStatement($this);
		    }
		}
	} 

	class IfStatementContext extends ParserRuleContext
	{
		/**
		 * @var ProcedureSqlStatementContext|null $procedureSqlStatement
		 */
		public $procedureSqlStatement;

		/**
		 * @var array<ProcedureSqlStatementContext>|null $thenStatements
		 */
		public $thenStatements;

		/**
		 * @var array<ProcedureSqlStatementContext>|null $elseStatements
		 */
		public $elseStatements;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_ifStatement;
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function IF(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::IF);
	    	}

	        return $this->getToken(MySqlParser::IF, $index);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function THEN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::THEN, 0);
	    }

	    public function END() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::END, 0);
	    }

	    /**
	     * @return array<ElifAlternativeContext>|ElifAlternativeContext|null
	     */
	    public function elifAlternative(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ElifAlternativeContext::class);
	    	}

	        return $this->getTypedRuleContext(ElifAlternativeContext::class, $index);
	    }

	    public function ELSE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ELSE, 0);
	    }

	    /**
	     * @return array<ProcedureSqlStatementContext>|ProcedureSqlStatementContext|null
	     */
	    public function procedureSqlStatement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ProcedureSqlStatementContext::class);
	    	}

	        return $this->getTypedRuleContext(ProcedureSqlStatementContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIfStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIfStatement($this);
		    }
		}
	} 

	class IterateStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_iterateStatement;
	    }

	    public function ITERATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ITERATE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIterateStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIterateStatement($this);
		    }
		}
	} 

	class LeaveStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_leaveStatement;
	    }

	    public function LEAVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LEAVE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLeaveStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLeaveStatement($this);
		    }
		}
	} 

	class LoopStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_loopStatement;
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function LOOP(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::LOOP);
	    	}

	        return $this->getToken(MySqlParser::LOOP, $index);
	    }

	    public function END() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::END, 0);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    public function COLON_SYMB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLON_SYMB, 0);
	    }

	    /**
	     * @return array<ProcedureSqlStatementContext>|ProcedureSqlStatementContext|null
	     */
	    public function procedureSqlStatement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ProcedureSqlStatementContext::class);
	    	}

	        return $this->getTypedRuleContext(ProcedureSqlStatementContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLoopStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLoopStatement($this);
		    }
		}
	} 

	class RepeatStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_repeatStatement;
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function REPEAT(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::REPEAT);
	    	}

	        return $this->getToken(MySqlParser::REPEAT, $index);
	    }

	    public function UNTIL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNTIL, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function END() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::END, 0);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    public function COLON_SYMB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLON_SYMB, 0);
	    }

	    /**
	     * @return array<ProcedureSqlStatementContext>|ProcedureSqlStatementContext|null
	     */
	    public function procedureSqlStatement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ProcedureSqlStatementContext::class);
	    	}

	        return $this->getTypedRuleContext(ProcedureSqlStatementContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRepeatStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRepeatStatement($this);
		    }
		}
	} 

	class ReturnStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_returnStatement;
	    }

	    public function RETURN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RETURN, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterReturnStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitReturnStatement($this);
		    }
		}
	} 

	class WhileStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_whileStatement;
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function WHILE(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::WHILE);
	    	}

	        return $this->getToken(MySqlParser::WHILE, $index);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function DO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DO, 0);
	    }

	    public function END() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::END, 0);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    public function COLON_SYMB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLON_SYMB, 0);
	    }

	    /**
	     * @return array<ProcedureSqlStatementContext>|ProcedureSqlStatementContext|null
	     */
	    public function procedureSqlStatement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ProcedureSqlStatementContext::class);
	    	}

	        return $this->getTypedRuleContext(ProcedureSqlStatementContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterWhileStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitWhileStatement($this);
		    }
		}
	} 

	class CursorStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_cursorStatement;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class CloseCursorContext extends CursorStatementContext
	{
		public function __construct(CursorStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CLOSE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CLOSE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCloseCursor($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCloseCursor($this);
		    }
		}
	}

	class OpenCursorContext extends CursorStatementContext
	{
		public function __construct(CursorStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function OPEN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPEN, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterOpenCursor($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitOpenCursor($this);
		    }
		}
	}

	class FetchCursorContext extends CursorStatementContext
	{
		public function __construct(CursorStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function FETCH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FETCH, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function INTO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTO, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function FROM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM, 0);
	    }

	    public function NEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NEXT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFetchCursor($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFetchCursor($this);
		    }
		}
	} 

	class DeclareVariableContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_declareVariable;
	    }

	    public function DECLARE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DECLARE, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function dataType() : ?DataTypeContext
	    {
	    	return $this->getTypedRuleContext(DataTypeContext::class, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

	    public function defaultValue() : ?DefaultValueContext
	    {
	    	return $this->getTypedRuleContext(DefaultValueContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDeclareVariable($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDeclareVariable($this);
		    }
		}
	} 

	class DeclareConditionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_declareCondition;
	    }

	    public function DECLARE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DECLARE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function CONDITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONDITION, 0);
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function SQLSTATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQLSTATE, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function VALUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALUE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDeclareCondition($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDeclareCondition($this);
		    }
		}
	} 

	class DeclareCursorContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_declareCursor;
	    }

	    public function DECLARE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DECLARE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function CURSOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURSOR, 0);
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDeclareCursor($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDeclareCursor($this);
		    }
		}
	} 

	class DeclareHandlerContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $handlerAction
		 */
		public $handlerAction;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_declareHandler;
	    }

	    public function DECLARE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DECLARE, 0);
	    }

	    public function HANDLER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HANDLER, 0);
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

	    /**
	     * @return array<HandlerConditionValueContext>|HandlerConditionValueContext|null
	     */
	    public function handlerConditionValue(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(HandlerConditionValueContext::class);
	    	}

	        return $this->getTypedRuleContext(HandlerConditionValueContext::class, $index);
	    }

	    public function routineBody() : ?RoutineBodyContext
	    {
	    	return $this->getTypedRuleContext(RoutineBodyContext::class, 0);
	    }

	    public function CONTINUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONTINUE, 0);
	    }

	    public function EXIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXIT, 0);
	    }

	    public function UNDO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNDO, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDeclareHandler($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDeclareHandler($this);
		    }
		}
	} 

	class HandlerConditionValueContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_handlerConditionValue;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class HandlerConditionWarningContext extends HandlerConditionValueContext
	{
		public function __construct(HandlerConditionValueContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SQLWARNING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQLWARNING, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterHandlerConditionWarning($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitHandlerConditionWarning($this);
		    }
		}
	}

	class HandlerConditionCodeContext extends HandlerConditionValueContext
	{
		public function __construct(HandlerConditionValueContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterHandlerConditionCode($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitHandlerConditionCode($this);
		    }
		}
	}

	class HandlerConditionNotfoundContext extends HandlerConditionValueContext
	{
		public function __construct(HandlerConditionValueContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

	    public function FOUND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOUND, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterHandlerConditionNotfound($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitHandlerConditionNotfound($this);
		    }
		}
	}

	class HandlerConditionStateContext extends HandlerConditionValueContext
	{
		public function __construct(HandlerConditionValueContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SQLSTATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQLSTATE, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function VALUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALUE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterHandlerConditionState($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitHandlerConditionState($this);
		    }
		}
	}

	class HandlerConditionExceptionContext extends HandlerConditionValueContext
	{
		public function __construct(HandlerConditionValueContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SQLEXCEPTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQLEXCEPTION, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterHandlerConditionException($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitHandlerConditionException($this);
		    }
		}
	}

	class HandlerConditionNameContext extends HandlerConditionValueContext
	{
		public function __construct(HandlerConditionValueContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterHandlerConditionName($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitHandlerConditionName($this);
		    }
		}
	} 

	class ProcedureSqlStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_procedureSqlStatement;
	    }

	    public function SEMI() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SEMI, 0);
	    }

	    public function compoundStatement() : ?CompoundStatementContext
	    {
	    	return $this->getTypedRuleContext(CompoundStatementContext::class, 0);
	    }

	    public function sqlStatement() : ?SqlStatementContext
	    {
	    	return $this->getTypedRuleContext(SqlStatementContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterProcedureSqlStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitProcedureSqlStatement($this);
		    }
		}
	} 

	class CaseAlternativeContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_caseAlternative;
	    }

	    public function WHEN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WHEN, 0);
	    }

	    public function THEN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::THEN, 0);
	    }

	    public function constant() : ?ConstantContext
	    {
	    	return $this->getTypedRuleContext(ConstantContext::class, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    /**
	     * @return array<ProcedureSqlStatementContext>|ProcedureSqlStatementContext|null
	     */
	    public function procedureSqlStatement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ProcedureSqlStatementContext::class);
	    	}

	        return $this->getTypedRuleContext(ProcedureSqlStatementContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCaseAlternative($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCaseAlternative($this);
		    }
		}
	} 

	class ElifAlternativeContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_elifAlternative;
	    }

	    public function ELSEIF() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ELSEIF, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function THEN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::THEN, 0);
	    }

	    /**
	     * @return array<ProcedureSqlStatementContext>|ProcedureSqlStatementContext|null
	     */
	    public function procedureSqlStatement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ProcedureSqlStatementContext::class);
	    	}

	        return $this->getTypedRuleContext(ProcedureSqlStatementContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterElifAlternative($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitElifAlternative($this);
		    }
		}
	} 

	class AlterUserContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_alterUser;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class AlterUserMysqlV56Context extends AlterUserContext
	{
		public function __construct(AlterUserContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ALTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALTER, 0);
	    }

	    public function USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USER, 0);
	    }

	    /**
	     * @return array<UserSpecificationContext>|UserSpecificationContext|null
	     */
	    public function userSpecification(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserSpecificationContext::class);
	    	}

	        return $this->getTypedRuleContext(UserSpecificationContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterUserMysqlV56($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterUserMysqlV56($this);
		    }
		}
	}

	class AlterUserMysqlV57Context extends AlterUserContext
	{
		/**
		 * @var Token|null $tlsNone
		 */
		public $tlsNone;

		public function __construct(AlterUserContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ALTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALTER, 0);
	    }

	    public function USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USER, 0);
	    }

	    /**
	     * @return array<UserAuthOptionContext>|UserAuthOptionContext|null
	     */
	    public function userAuthOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserAuthOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(UserAuthOptionContext::class, $index);
	    }

	    public function ifExists() : ?IfExistsContext
	    {
	    	return $this->getTypedRuleContext(IfExistsContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function REQUIRE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REQUIRE, 0);
	    }

	    public function WITH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITH, 0);
	    }

	    /**
	     * @return array<UserPasswordOptionContext>|UserPasswordOptionContext|null
	     */
	    public function userPasswordOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserPasswordOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(UserPasswordOptionContext::class, $index);
	    }

	    /**
	     * @return array<UserLockOptionContext>|UserLockOptionContext|null
	     */
	    public function userLockOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserLockOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(UserLockOptionContext::class, $index);
	    }

	    /**
	     * @return array<TlsOptionContext>|TlsOptionContext|null
	     */
	    public function tlsOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TlsOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(TlsOptionContext::class, $index);
	    }

	    public function NONE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NONE, 0);
	    }

	    /**
	     * @return array<UserResourceOptionContext>|UserResourceOptionContext|null
	     */
	    public function userResourceOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserResourceOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(UserResourceOptionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function AND(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::AND);
	    	}

	        return $this->getToken(MySqlParser::AND, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAlterUserMysqlV57($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAlterUserMysqlV57($this);
		    }
		}
	} 

	class CreateUserContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createUser;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class CreateUserMysqlV57Context extends CreateUserContext
	{
		/**
		 * @var Token|null $tlsNone
		 */
		public $tlsNone;

		public function __construct(CreateUserContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USER, 0);
	    }

	    /**
	     * @return array<UserAuthOptionContext>|UserAuthOptionContext|null
	     */
	    public function userAuthOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserAuthOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(UserAuthOptionContext::class, $index);
	    }

	    public function ifNotExists() : ?IfNotExistsContext
	    {
	    	return $this->getTypedRuleContext(IfNotExistsContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function REQUIRE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REQUIRE, 0);
	    }

	    public function WITH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITH, 0);
	    }

	    /**
	     * @return array<UserPasswordOptionContext>|UserPasswordOptionContext|null
	     */
	    public function userPasswordOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserPasswordOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(UserPasswordOptionContext::class, $index);
	    }

	    /**
	     * @return array<UserLockOptionContext>|UserLockOptionContext|null
	     */
	    public function userLockOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserLockOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(UserLockOptionContext::class, $index);
	    }

	    /**
	     * @return array<TlsOptionContext>|TlsOptionContext|null
	     */
	    public function tlsOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TlsOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(TlsOptionContext::class, $index);
	    }

	    public function NONE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NONE, 0);
	    }

	    /**
	     * @return array<UserResourceOptionContext>|UserResourceOptionContext|null
	     */
	    public function userResourceOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserResourceOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(UserResourceOptionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function AND(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::AND);
	    	}

	        return $this->getToken(MySqlParser::AND, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateUserMysqlV57($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateUserMysqlV57($this);
		    }
		}
	}

	class CreateUserMysqlV56Context extends CreateUserContext
	{
		public function __construct(CreateUserContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USER, 0);
	    }

	    /**
	     * @return array<UserAuthOptionContext>|UserAuthOptionContext|null
	     */
	    public function userAuthOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserAuthOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(UserAuthOptionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateUserMysqlV56($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateUserMysqlV56($this);
		    }
		}
	} 

	class DropUserContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dropUser;
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USER, 0);
	    }

	    /**
	     * @return array<UserNameContext>|UserNameContext|null
	     */
	    public function userName(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserNameContext::class);
	    	}

	        return $this->getTypedRuleContext(UserNameContext::class, $index);
	    }

	    public function ifExists() : ?IfExistsContext
	    {
	    	return $this->getTypedRuleContext(IfExistsContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDropUser($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDropUser($this);
		    }
		}
	} 

	class GrantStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $privilegeObject
		 */
		public $privilegeObject;

		/**
		 * @var Token|null $tlsNone
		 */
		public $tlsNone;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_grantStatement;
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function GRANT(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::GRANT);
	    	}

	        return $this->getToken(MySqlParser::GRANT, $index);
	    }

	    /**
	     * @return array<PrivelegeClauseContext>|PrivelegeClauseContext|null
	     */
	    public function privelegeClause(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PrivelegeClauseContext::class);
	    	}

	        return $this->getTypedRuleContext(PrivelegeClauseContext::class, $index);
	    }

	    public function ON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ON, 0);
	    }

	    public function privilegeLevel() : ?PrivilegeLevelContext
	    {
	    	return $this->getTypedRuleContext(PrivilegeLevelContext::class, 0);
	    }

	    public function TO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TO, 0);
	    }

	    /**
	     * @return array<UserAuthOptionContext>|UserAuthOptionContext|null
	     */
	    public function userAuthOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserAuthOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(UserAuthOptionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function REQUIRE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REQUIRE, 0);
	    }

	    public function WITH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITH, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function FUNCTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FUNCTION, 0);
	    }

	    public function PROCEDURE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROCEDURE, 0);
	    }

	    /**
	     * @return array<TlsOptionContext>|TlsOptionContext|null
	     */
	    public function tlsOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TlsOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(TlsOptionContext::class, $index);
	    }

	    public function NONE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NONE, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function OPTION(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::OPTION);
	    	}

	        return $this->getToken(MySqlParser::OPTION, $index);
	    }

	    /**
	     * @return array<UserResourceOptionContext>|UserResourceOptionContext|null
	     */
	    public function userResourceOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserResourceOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(UserResourceOptionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function AND(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::AND);
	    	}

	        return $this->getToken(MySqlParser::AND, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterGrantStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitGrantStatement($this);
		    }
		}
	} 

	class GrantProxyContext extends ParserRuleContext
	{
		/**
		 * @var UserNameContext|null $fromFirst
		 */
		public $fromFirst;

		/**
		 * @var UserNameContext|null $toFirst
		 */
		public $toFirst;

		/**
		 * @var UserNameContext|null $userName
		 */
		public $userName;

		/**
		 * @var array<UserNameContext>|null $toOther
		 */
		public $toOther;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_grantProxy;
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function GRANT(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::GRANT);
	    	}

	        return $this->getToken(MySqlParser::GRANT, $index);
	    }

	    public function PROXY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROXY, 0);
	    }

	    public function ON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ON, 0);
	    }

	    public function TO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TO, 0);
	    }

	    /**
	     * @return array<UserNameContext>|UserNameContext|null
	     */
	    public function userName(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserNameContext::class);
	    	}

	        return $this->getTypedRuleContext(UserNameContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function WITH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITH, 0);
	    }

	    public function OPTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPTION, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterGrantProxy($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitGrantProxy($this);
		    }
		}
	} 

	class RenameUserContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_renameUser;
	    }

	    public function RENAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RENAME, 0);
	    }

	    public function USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USER, 0);
	    }

	    /**
	     * @return array<RenameUserClauseContext>|RenameUserClauseContext|null
	     */
	    public function renameUserClause(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(RenameUserClauseContext::class);
	    	}

	        return $this->getTypedRuleContext(RenameUserClauseContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRenameUser($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRenameUser($this);
		    }
		}
	} 

	class RevokeStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_revokeStatement;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class DetailRevokeContext extends RevokeStatementContext
	{
		/**
		 * @var Token|null $privilegeObject
		 */
		public $privilegeObject;

		public function __construct(RevokeStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function REVOKE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REVOKE, 0);
	    }

	    /**
	     * @return array<PrivelegeClauseContext>|PrivelegeClauseContext|null
	     */
	    public function privelegeClause(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PrivelegeClauseContext::class);
	    	}

	        return $this->getTypedRuleContext(PrivelegeClauseContext::class, $index);
	    }

	    public function ON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ON, 0);
	    }

	    public function privilegeLevel() : ?PrivilegeLevelContext
	    {
	    	return $this->getTypedRuleContext(PrivilegeLevelContext::class, 0);
	    }

	    public function FROM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM, 0);
	    }

	    /**
	     * @return array<UserNameContext>|UserNameContext|null
	     */
	    public function userName(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserNameContext::class);
	    	}

	        return $this->getTypedRuleContext(UserNameContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function FUNCTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FUNCTION, 0);
	    }

	    public function PROCEDURE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROCEDURE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDetailRevoke($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDetailRevoke($this);
		    }
		}
	}

	class ShortRevokeContext extends RevokeStatementContext
	{
		public function __construct(RevokeStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function REVOKE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REVOKE, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function GRANT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GRANT, 0);
	    }

	    public function OPTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPTION, 0);
	    }

	    public function FROM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM, 0);
	    }

	    /**
	     * @return array<UserNameContext>|UserNameContext|null
	     */
	    public function userName(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserNameContext::class);
	    	}

	        return $this->getTypedRuleContext(UserNameContext::class, $index);
	    }

	    public function PRIVILEGES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PRIVILEGES, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShortRevoke($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShortRevoke($this);
		    }
		}
	} 

	class RevokeProxyContext extends ParserRuleContext
	{
		/**
		 * @var UserNameContext|null $onUser
		 */
		public $onUser;

		/**
		 * @var UserNameContext|null $fromFirst
		 */
		public $fromFirst;

		/**
		 * @var UserNameContext|null $userName
		 */
		public $userName;

		/**
		 * @var array<UserNameContext>|null $fromOther
		 */
		public $fromOther;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_revokeProxy;
	    }

	    public function REVOKE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REVOKE, 0);
	    }

	    public function PROXY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROXY, 0);
	    }

	    public function ON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ON, 0);
	    }

	    public function FROM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM, 0);
	    }

	    /**
	     * @return array<UserNameContext>|UserNameContext|null
	     */
	    public function userName(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserNameContext::class);
	    	}

	        return $this->getTypedRuleContext(UserNameContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRevokeProxy($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRevokeProxy($this);
		    }
		}
	} 

	class SetPasswordStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_setPasswordStatement;
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    public function PASSWORD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PASSWORD, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function passwordFunctionClause() : ?PasswordFunctionClauseContext
	    {
	    	return $this->getTypedRuleContext(PasswordFunctionClauseContext::class, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

	    public function userName() : ?UserNameContext
	    {
	    	return $this->getTypedRuleContext(UserNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSetPasswordStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSetPasswordStatement($this);
		    }
		}
	} 

	class UserSpecificationContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_userSpecification;
	    }

	    public function userName() : ?UserNameContext
	    {
	    	return $this->getTypedRuleContext(UserNameContext::class, 0);
	    }

	    public function userPasswordOption() : ?UserPasswordOptionContext
	    {
	    	return $this->getTypedRuleContext(UserPasswordOptionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUserSpecification($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUserSpecification($this);
		    }
		}
	} 

	class UserAuthOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_userAuthOption;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class SimpleAuthOptionContext extends UserAuthOptionContext
	{
		public function __construct(UserAuthOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function userName() : ?UserNameContext
	    {
	    	return $this->getTypedRuleContext(UserNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSimpleAuthOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSimpleAuthOption($this);
		    }
		}
	}

	class PasswordAuthOptionContext extends UserAuthOptionContext
	{
		/**
		 * @var Token|null $hashed
		 */
		public $hashed;

		public function __construct(UserAuthOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function userName() : ?UserNameContext
	    {
	    	return $this->getTypedRuleContext(UserNameContext::class, 0);
	    }

	    public function IDENTIFIED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IDENTIFIED, 0);
	    }

	    public function BY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BY, 0);
	    }

	    public function PASSWORD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PASSWORD, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPasswordAuthOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPasswordAuthOption($this);
		    }
		}
	}

	class StringAuthOptionContext extends UserAuthOptionContext
	{
		public function __construct(UserAuthOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function userName() : ?UserNameContext
	    {
	    	return $this->getTypedRuleContext(UserNameContext::class, 0);
	    }

	    public function IDENTIFIED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IDENTIFIED, 0);
	    }

	    public function BY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BY, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function WITH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITH, 0);
	    }

	    public function authPlugin() : ?AuthPluginContext
	    {
	    	return $this->getTypedRuleContext(AuthPluginContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterStringAuthOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitStringAuthOption($this);
		    }
		}
	}

	class HashAuthOptionContext extends UserAuthOptionContext
	{
		public function __construct(UserAuthOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function userName() : ?UserNameContext
	    {
	    	return $this->getTypedRuleContext(UserNameContext::class, 0);
	    }

	    public function IDENTIFIED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IDENTIFIED, 0);
	    }

	    public function WITH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITH, 0);
	    }

	    public function authPlugin() : ?AuthPluginContext
	    {
	    	return $this->getTypedRuleContext(AuthPluginContext::class, 0);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterHashAuthOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitHashAuthOption($this);
		    }
		}
	} 

	class TlsOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_tlsOption;
	    }

	    public function SSL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SSL, 0);
	    }

	    public function X509() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::X509, 0);
	    }

	    public function CIPHER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CIPHER, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function ISSUER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ISSUER, 0);
	    }

	    public function SUBJECT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBJECT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTlsOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTlsOption($this);
		    }
		}
	} 

	class UserResourceOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_userResourceOption;
	    }

	    public function MAX_QUERIES_PER_HOUR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAX_QUERIES_PER_HOUR, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function MAX_UPDATES_PER_HOUR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAX_UPDATES_PER_HOUR, 0);
	    }

	    public function MAX_CONNECTIONS_PER_HOUR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAX_CONNECTIONS_PER_HOUR, 0);
	    }

	    public function MAX_USER_CONNECTIONS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAX_USER_CONNECTIONS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUserResourceOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUserResourceOption($this);
		    }
		}
	} 

	class UserPasswordOptionContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $expireType
		 */
		public $expireType;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_userPasswordOption;
	    }

	    public function PASSWORD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PASSWORD, 0);
	    }

	    public function EXPIRE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXPIRE, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function DAY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DAY, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

	    public function NEVER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NEVER, 0);
	    }

	    public function INTERVAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTERVAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUserPasswordOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUserPasswordOption($this);
		    }
		}
	} 

	class UserLockOptionContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $lockType
		 */
		public $lockType;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_userLockOption;
	    }

	    public function ACCOUNT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ACCOUNT, 0);
	    }

	    public function LOCK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCK, 0);
	    }

	    public function UNLOCK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNLOCK, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUserLockOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUserLockOption($this);
		    }
		}
	} 

	class PrivelegeClauseContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_privelegeClause;
	    }

	    public function privilege() : ?PrivilegeContext
	    {
	    	return $this->getTypedRuleContext(PrivilegeContext::class, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPrivelegeClause($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPrivelegeClause($this);
		    }
		}
	} 

	class PrivilegeContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_privilege;
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

	    public function PRIVILEGES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PRIVILEGES, 0);
	    }

	    public function ALTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALTER, 0);
	    }

	    public function ROUTINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROUTINE, 0);
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function TEMPORARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TEMPORARY, 0);
	    }

	    public function TABLES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLES, 0);
	    }

	    public function VIEW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VIEW, 0);
	    }

	    public function USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USER, 0);
	    }

	    public function TABLESPACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLESPACE, 0);
	    }

	    public function DELETE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DELETE, 0);
	    }

	    public function DROP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DROP, 0);
	    }

	    public function EVENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EVENT, 0);
	    }

	    public function EXECUTE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXECUTE, 0);
	    }

	    public function FILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FILE, 0);
	    }

	    public function GRANT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GRANT, 0);
	    }

	    public function OPTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPTION, 0);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function INSERT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INSERT, 0);
	    }

	    public function LOCK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCK, 0);
	    }

	    public function PROCESS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROCESS, 0);
	    }

	    public function PROXY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROXY, 0);
	    }

	    public function REFERENCES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REFERENCES, 0);
	    }

	    public function RELOAD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELOAD, 0);
	    }

	    public function REPLICATION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATION, 0);
	    }

	    public function CLIENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CLIENT, 0);
	    }

	    public function SLAVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SLAVE, 0);
	    }

	    public function SELECT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SELECT, 0);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function DATABASES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATABASES, 0);
	    }

	    public function SHUTDOWN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHUTDOWN, 0);
	    }

	    public function SUPER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUPER, 0);
	    }

	    public function TRIGGER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRIGGER, 0);
	    }

	    public function UPDATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UPDATE, 0);
	    }

	    public function USAGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USAGE, 0);
	    }

	    public function SESSION_VARIABLES_ADMIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SESSION_VARIABLES_ADMIN, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPrivilege($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPrivilege($this);
		    }
		}
	} 

	class PrivilegeLevelContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_privilegeLevel;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext
	{
		public function __construct(PrivilegeLevelContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function DOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DOT, 0);
	    }

	    public function STAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STAR, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDefiniteSchemaPrivLevel($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDefiniteSchemaPrivLevel($this);
		    }
		}
	}

	class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext
	{
		public function __construct(PrivilegeLevelContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function dottedId() : ?DottedIdContext
	    {
	    	return $this->getTypedRuleContext(DottedIdContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDefiniteFullTablePrivLevel2($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDefiniteFullTablePrivLevel2($this);
		    }
		}
	}

	class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext
	{
		public function __construct(PrivilegeLevelContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    public function DOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDefiniteFullTablePrivLevel($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDefiniteFullTablePrivLevel($this);
		    }
		}
	}

	class GlobalPrivLevelContext extends PrivilegeLevelContext
	{
		public function __construct(PrivilegeLevelContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function STAR(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::STAR);
	    	}

	        return $this->getToken(MySqlParser::STAR, $index);
	    }

	    public function DOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterGlobalPrivLevel($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitGlobalPrivLevel($this);
		    }
		}
	}

	class DefiniteTablePrivLevelContext extends PrivilegeLevelContext
	{
		public function __construct(PrivilegeLevelContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDefiniteTablePrivLevel($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDefiniteTablePrivLevel($this);
		    }
		}
	}

	class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext
	{
		public function __construct(PrivilegeLevelContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function STAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STAR, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCurrentSchemaPriviLevel($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCurrentSchemaPriviLevel($this);
		    }
		}
	} 

	class RenameUserClauseContext extends ParserRuleContext
	{
		/**
		 * @var UserNameContext|null $fromFirst
		 */
		public $fromFirst;

		/**
		 * @var UserNameContext|null $toFirst
		 */
		public $toFirst;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_renameUserClause;
	    }

	    public function TO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TO, 0);
	    }

	    /**
	     * @return array<UserNameContext>|UserNameContext|null
	     */
	    public function userName(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UserNameContext::class);
	    	}

	        return $this->getTypedRuleContext(UserNameContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRenameUserClause($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRenameUserClause($this);
		    }
		}
	} 

	class AnalyzeTableContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $actionOption
		 */
		public $actionOption;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_analyzeTable;
	    }

	    public function ANALYZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ANALYZE, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function tables() : ?TablesContext
	    {
	    	return $this->getTypedRuleContext(TablesContext::class, 0);
	    }

	    public function NO_WRITE_TO_BINLOG() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NO_WRITE_TO_BINLOG, 0);
	    }

	    public function LOCAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAnalyzeTable($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAnalyzeTable($this);
		    }
		}
	} 

	class CheckTableContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_checkTable;
	    }

	    public function CHECK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHECK, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function tables() : ?TablesContext
	    {
	    	return $this->getTypedRuleContext(TablesContext::class, 0);
	    }

	    /**
	     * @return array<CheckTableOptionContext>|CheckTableOptionContext|null
	     */
	    public function checkTableOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(CheckTableOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(CheckTableOptionContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCheckTable($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCheckTable($this);
		    }
		}
	} 

	class ChecksumTableContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $actionOption
		 */
		public $actionOption;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_checksumTable;
	    }

	    public function CHECKSUM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHECKSUM, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function tables() : ?TablesContext
	    {
	    	return $this->getTypedRuleContext(TablesContext::class, 0);
	    }

	    public function QUICK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::QUICK, 0);
	    }

	    public function EXTENDED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXTENDED, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterChecksumTable($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitChecksumTable($this);
		    }
		}
	} 

	class OptimizeTableContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $actionOption
		 */
		public $actionOption;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_optimizeTable;
	    }

	    public function OPTIMIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPTIMIZE, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function tables() : ?TablesContext
	    {
	    	return $this->getTypedRuleContext(TablesContext::class, 0);
	    }

	    public function NO_WRITE_TO_BINLOG() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NO_WRITE_TO_BINLOG, 0);
	    }

	    public function LOCAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterOptimizeTable($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitOptimizeTable($this);
		    }
		}
	} 

	class RepairTableContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $actionOption
		 */
		public $actionOption;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_repairTable;
	    }

	    public function REPAIR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPAIR, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function tables() : ?TablesContext
	    {
	    	return $this->getTypedRuleContext(TablesContext::class, 0);
	    }

	    public function QUICK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::QUICK, 0);
	    }

	    public function EXTENDED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXTENDED, 0);
	    }

	    public function USE_FRM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USE_FRM, 0);
	    }

	    public function NO_WRITE_TO_BINLOG() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NO_WRITE_TO_BINLOG, 0);
	    }

	    public function LOCAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRepairTable($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRepairTable($this);
		    }
		}
	} 

	class CheckTableOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_checkTableOption;
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

	    public function UPGRADE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UPGRADE, 0);
	    }

	    public function QUICK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::QUICK, 0);
	    }

	    public function FAST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FAST, 0);
	    }

	    public function MEDIUM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MEDIUM, 0);
	    }

	    public function EXTENDED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXTENDED, 0);
	    }

	    public function CHANGED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHANGED, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCheckTableOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCheckTableOption($this);
		    }
		}
	} 

	class CreateUdfunctionContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $returnType
		 */
		public $returnType;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_createUdfunction;
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function FUNCTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FUNCTION, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function RETURNS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RETURNS, 0);
	    }

	    public function SONAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SONAME, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function STRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING, 0);
	    }

	    public function INTEGER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTEGER, 0);
	    }

	    public function REAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REAL, 0);
	    }

	    public function DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DECIMAL, 0);
	    }

	    public function AGGREGATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AGGREGATE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCreateUdfunction($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCreateUdfunction($this);
		    }
		}
	} 

	class InstallPluginContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_installPlugin;
	    }

	    public function INSTALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INSTALL, 0);
	    }

	    public function PLUGIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PLUGIN, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function SONAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SONAME, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterInstallPlugin($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitInstallPlugin($this);
		    }
		}
	} 

	class UninstallPluginContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_uninstallPlugin;
	    }

	    public function UNINSTALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNINSTALL, 0);
	    }

	    public function PLUGIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PLUGIN, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUninstallPlugin($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUninstallPlugin($this);
		    }
		}
	} 

	class SetStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_setStatement;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class SetTransactionContext extends SetStatementContext
	{
		public function __construct(SetStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function setTransactionStatement() : ?SetTransactionStatementContext
	    {
	    	return $this->getTypedRuleContext(SetTransactionStatementContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSetTransaction($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSetTransaction($this);
		    }
		}
	}

	class SetCharsetContext extends SetStatementContext
	{
		public function __construct(SetStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function SET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::SET);
	    	}

	        return $this->getToken(MySqlParser::SET, $index);
	    }

	    public function CHARACTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARACTER, 0);
	    }

	    public function CHARSET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARSET, 0);
	    }

	    public function charsetName() : ?CharsetNameContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameContext::class, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSetCharset($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSetCharset($this);
		    }
		}
	}

	class SetNamesContext extends SetStatementContext
	{
		public function __construct(SetStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    public function NAMES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NAMES, 0);
	    }

	    public function charsetName() : ?CharsetNameContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameContext::class, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

	    public function COLLATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLLATE, 0);
	    }

	    public function collationName() : ?CollationNameContext
	    {
	    	return $this->getTypedRuleContext(CollationNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSetNames($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSetNames($this);
		    }
		}
	}

	class SetPasswordContext extends SetStatementContext
	{
		public function __construct(SetStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function setPasswordStatement() : ?SetPasswordStatementContext
	    {
	    	return $this->getTypedRuleContext(SetPasswordStatementContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSetPassword($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSetPassword($this);
		    }
		}
	}

	class SetAutocommitContext extends SetStatementContext
	{
		public function __construct(SetStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function setAutocommitStatement() : ?SetAutocommitStatementContext
	    {
	    	return $this->getTypedRuleContext(SetAutocommitStatementContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSetAutocommit($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSetAutocommit($this);
		    }
		}
	}

	class SetNewValueInsideTriggerContext extends SetStatementContext
	{
		public function __construct(SetStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    /**
	     * @return array<FullIdContext>|FullIdContext|null
	     */
	    public function fullId(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(FullIdContext::class);
	    	}

	        return $this->getTypedRuleContext(FullIdContext::class, $index);
	    }

	    /**
	     * @return array<ExpressionContext>|ExpressionContext|null
	     */
	    public function expression(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EQUAL_SYMBOL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::EQUAL_SYMBOL);
	    	}

	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function VAR_ASSIGN(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::VAR_ASSIGN);
	    	}

	        return $this->getToken(MySqlParser::VAR_ASSIGN, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSetNewValueInsideTrigger($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSetNewValueInsideTrigger($this);
		    }
		}
	}

	class SetVariableContext extends SetStatementContext
	{
		public function __construct(SetStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    /**
	     * @return array<VariableClauseContext>|VariableClauseContext|null
	     */
	    public function variableClause(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(VariableClauseContext::class);
	    	}

	        return $this->getTypedRuleContext(VariableClauseContext::class, $index);
	    }

	    /**
	     * @return array<ExpressionContext>|ExpressionContext|null
	     */
	    public function expression(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EQUAL_SYMBOL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::EQUAL_SYMBOL);
	    	}

	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function VAR_ASSIGN(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::VAR_ASSIGN);
	    	}

	        return $this->getToken(MySqlParser::VAR_ASSIGN, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSetVariable($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSetVariable($this);
		    }
		}
	} 

	class ShowStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_showStatement;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class ShowOpenTablesContext extends ShowStatementContext
	{
		/**
		 * @var Token|null $schemaFormat
		 */
		public $schemaFormat;

		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function OPEN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPEN, 0);
	    }

	    public function TABLES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLES, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function showFilter() : ?ShowFilterContext
	    {
	    	return $this->getTypedRuleContext(ShowFilterContext::class, 0);
	    }

	    public function FROM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM, 0);
	    }

	    public function IN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IN, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowOpenTables($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowOpenTables($this);
		    }
		}
	}

	class ShowGlobalInfoContext extends ShowStatementContext
	{
		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function showGlobalInfoClause() : ?ShowGlobalInfoClauseContext
	    {
	    	return $this->getTypedRuleContext(ShowGlobalInfoClauseContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowGlobalInfo($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowGlobalInfo($this);
		    }
		}
	}

	class ShowCreateFullIdObjectContext extends ShowStatementContext
	{
		/**
		 * @var Token|null $namedEntity
		 */
		public $namedEntity;

		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    public function EVENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EVENT, 0);
	    }

	    public function FUNCTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FUNCTION, 0);
	    }

	    public function PROCEDURE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROCEDURE, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function TRIGGER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRIGGER, 0);
	    }

	    public function VIEW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VIEW, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowCreateFullIdObject($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowCreateFullIdObject($this);
		    }
		}
	}

	class ShowCreateUserContext extends ShowStatementContext
	{
		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USER, 0);
	    }

	    public function userName() : ?UserNameContext
	    {
	    	return $this->getTypedRuleContext(UserNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowCreateUser($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowCreateUser($this);
		    }
		}
	}

	class ShowErrorsContext extends ShowStatementContext
	{
		/**
		 * @var Token|null $errorFormat
		 */
		public $errorFormat;

		/**
		 * @var DecimalLiteralContext|null $offset
		 */
		public $offset;

		/**
		 * @var DecimalLiteralContext|null $rowCount
		 */
		public $rowCount;

		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function ERRORS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ERRORS, 0);
	    }

	    public function WARNINGS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WARNINGS, 0);
	    }

	    public function LIMIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LIMIT, 0);
	    }

	    /**
	     * @return array<DecimalLiteralContext>|DecimalLiteralContext|null
	     */
	    public function decimalLiteral(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DecimalLiteralContext::class);
	    	}

	        return $this->getTypedRuleContext(DecimalLiteralContext::class, $index);
	    }

	    public function COMMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMA, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowErrors($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowErrors($this);
		    }
		}
	}

	class ShowCountErrorsContext extends ShowStatementContext
	{
		/**
		 * @var Token|null $errorFormat
		 */
		public $errorFormat;

		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function COUNT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COUNT, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function STAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STAR, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function ERRORS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ERRORS, 0);
	    }

	    public function WARNINGS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WARNINGS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowCountErrors($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowCountErrors($this);
		    }
		}
	}

	class ShowObjectFilterContext extends ShowStatementContext
	{
		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function showCommonEntity() : ?ShowCommonEntityContext
	    {
	    	return $this->getTypedRuleContext(ShowCommonEntityContext::class, 0);
	    }

	    public function showFilter() : ?ShowFilterContext
	    {
	    	return $this->getTypedRuleContext(ShowFilterContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowObjectFilter($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowObjectFilter($this);
		    }
		}
	}

	class ShowCreateDbContext extends ShowStatementContext
	{
		/**
		 * @var Token|null $schemaFormat
		 */
		public $schemaFormat;

		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function CREATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function DATABASE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATABASE, 0);
	    }

	    public function SCHEMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SCHEMA, 0);
	    }

	    public function ifNotExists() : ?IfNotExistsContext
	    {
	    	return $this->getTypedRuleContext(IfNotExistsContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowCreateDb($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowCreateDb($this);
		    }
		}
	}

	class ShowEngineContext extends ShowStatementContext
	{
		/**
		 * @var Token|null $engineOption
		 */
		public $engineOption;

		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function ENGINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENGINE, 0);
	    }

	    public function engineName() : ?EngineNameContext
	    {
	    	return $this->getTypedRuleContext(EngineNameContext::class, 0);
	    }

	    public function STATUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STATUS, 0);
	    }

	    public function MUTEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MUTEX, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowEngine($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowEngine($this);
		    }
		}
	}

	class ShowSchemaFilterContext extends ShowStatementContext
	{
		/**
		 * @var Token|null $schemaFormat
		 */
		public $schemaFormat;

		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function showSchemaEntity() : ?ShowSchemaEntityContext
	    {
	    	return $this->getTypedRuleContext(ShowSchemaEntityContext::class, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function showFilter() : ?ShowFilterContext
	    {
	    	return $this->getTypedRuleContext(ShowFilterContext::class, 0);
	    }

	    public function FROM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM, 0);
	    }

	    public function IN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IN, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowSchemaFilter($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowSchemaFilter($this);
		    }
		}
	}

	class ShowIndexesContext extends ShowStatementContext
	{
		/**
		 * @var Token|null $indexFormat
		 */
		public $indexFormat;

		/**
		 * @var Token|null $tableFormat
		 */
		public $tableFormat;

		/**
		 * @var Token|null $schemaFormat
		 */
		public $schemaFormat;

		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function INDEXES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEXES, 0);
	    }

	    public function KEYS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEYS, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function FROM(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::FROM);
	    	}

	        return $this->getToken(MySqlParser::FROM, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function IN(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::IN);
	    	}

	        return $this->getToken(MySqlParser::IN, $index);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function WHERE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WHERE, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowIndexes($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowIndexes($this);
		    }
		}
	}

	class ShowLogEventsContext extends ShowStatementContext
	{
		/**
		 * @var Token|null $logFormat
		 */
		public $logFormat;

		/**
		 * @var Token|null $filename
		 */
		public $filename;

		/**
		 * @var DecimalLiteralContext|null $fromPosition
		 */
		public $fromPosition;

		/**
		 * @var DecimalLiteralContext|null $offset
		 */
		public $offset;

		/**
		 * @var DecimalLiteralContext|null $rowCount
		 */
		public $rowCount;

		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function EVENTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EVENTS, 0);
	    }

	    public function BINLOG() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINLOG, 0);
	    }

	    public function RELAYLOG() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELAYLOG, 0);
	    }

	    public function IN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IN, 0);
	    }

	    public function FROM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM, 0);
	    }

	    public function LIMIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LIMIT, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    /**
	     * @return array<DecimalLiteralContext>|DecimalLiteralContext|null
	     */
	    public function decimalLiteral(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DecimalLiteralContext::class);
	    	}

	        return $this->getTypedRuleContext(DecimalLiteralContext::class, $index);
	    }

	    public function COMMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMA, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowLogEvents($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowLogEvents($this);
		    }
		}
	}

	class ShowMasterLogsContext extends ShowStatementContext
	{
		/**
		 * @var Token|null $logFormat
		 */
		public $logFormat;

		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function LOGS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOGS, 0);
	    }

	    public function BINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINARY, 0);
	    }

	    public function MASTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowMasterLogs($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowMasterLogs($this);
		    }
		}
	}

	class ShowGrantsContext extends ShowStatementContext
	{
		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function GRANTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GRANTS, 0);
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

	    public function userName() : ?UserNameContext
	    {
	    	return $this->getTypedRuleContext(UserNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowGrants($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowGrants($this);
		    }
		}
	}

	class ShowSlaveStatusContext extends ShowStatementContext
	{
		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function SLAVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SLAVE, 0);
	    }

	    public function STATUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STATUS, 0);
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

	    public function CHANNEL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHANNEL, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowSlaveStatus($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowSlaveStatus($this);
		    }
		}
	}

	class ShowRoutineContext extends ShowStatementContext
	{
		/**
		 * @var Token|null $routine
		 */
		public $routine;

		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function CODE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CODE, 0);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    public function FUNCTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FUNCTION, 0);
	    }

	    public function PROCEDURE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROCEDURE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowRoutine($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowRoutine($this);
		    }
		}
	}

	class ShowProfileContext extends ShowStatementContext
	{
		/**
		 * @var DecimalLiteralContext|null $queryCount
		 */
		public $queryCount;

		/**
		 * @var DecimalLiteralContext|null $offset
		 */
		public $offset;

		/**
		 * @var DecimalLiteralContext|null $rowCount
		 */
		public $rowCount;

		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function PROFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROFILE, 0);
	    }

	    /**
	     * @return array<ShowProfileTypeContext>|ShowProfileTypeContext|null
	     */
	    public function showProfileType(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ShowProfileTypeContext::class);
	    	}

	        return $this->getTypedRuleContext(ShowProfileTypeContext::class, $index);
	    }

	    public function LIMIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LIMIT, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

	    public function QUERY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::QUERY, 0);
	    }

	    /**
	     * @return array<DecimalLiteralContext>|DecimalLiteralContext|null
	     */
	    public function decimalLiteral(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DecimalLiteralContext::class);
	    	}

	        return $this->getTypedRuleContext(DecimalLiteralContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowProfile($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowProfile($this);
		    }
		}
	}

	class ShowColumnsContext extends ShowStatementContext
	{
		/**
		 * @var Token|null $columnsFormat
		 */
		public $columnsFormat;

		/**
		 * @var Token|null $tableFormat
		 */
		public $tableFormat;

		/**
		 * @var Token|null $schemaFormat
		 */
		public $schemaFormat;

		public function __construct(ShowStatementContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function SHOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHOW, 0);
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function COLUMNS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMNS, 0);
	    }

	    public function FIELDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIELDS, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function FROM(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::FROM);
	    	}

	        return $this->getToken(MySqlParser::FROM, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function IN(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::IN);
	    	}

	        return $this->getToken(MySqlParser::IN, $index);
	    }

	    public function FULL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FULL, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function showFilter() : ?ShowFilterContext
	    {
	    	return $this->getTypedRuleContext(ShowFilterContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowColumns($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowColumns($this);
		    }
		}
	} 

	class VariableClauseContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_variableClause;
	    }

	    public function LOCAL_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL_ID, 0);
	    }

	    public function GLOBAL_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GLOBAL_ID, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function GLOBAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GLOBAL, 0);
	    }

	    public function SESSION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SESSION, 0);
	    }

	    public function LOCAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function AT_SIGN(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::AT_SIGN);
	    	}

	        return $this->getToken(MySqlParser::AT_SIGN, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterVariableClause($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitVariableClause($this);
		    }
		}
	} 

	class ShowCommonEntityContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_showCommonEntity;
	    }

	    public function CHARACTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARACTER, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    public function COLLATION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLLATION, 0);
	    }

	    public function DATABASES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATABASES, 0);
	    }

	    public function SCHEMAS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SCHEMAS, 0);
	    }

	    public function FUNCTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FUNCTION, 0);
	    }

	    public function STATUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STATUS, 0);
	    }

	    public function PROCEDURE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROCEDURE, 0);
	    }

	    public function VARIABLES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VARIABLES, 0);
	    }

	    public function GLOBAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GLOBAL, 0);
	    }

	    public function SESSION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SESSION, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowCommonEntity($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowCommonEntity($this);
		    }
		}
	} 

	class ShowFilterContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_showFilter;
	    }

	    public function LIKE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LIKE, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function WHERE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WHERE, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowFilter($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowFilter($this);
		    }
		}
	} 

	class ShowGlobalInfoClauseContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_showGlobalInfoClause;
	    }

	    public function ENGINES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENGINES, 0);
	    }

	    public function STORAGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STORAGE, 0);
	    }

	    public function MASTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER, 0);
	    }

	    public function STATUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STATUS, 0);
	    }

	    public function PLUGINS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PLUGINS, 0);
	    }

	    public function PRIVILEGES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PRIVILEGES, 0);
	    }

	    public function PROCESSLIST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROCESSLIST, 0);
	    }

	    public function FULL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FULL, 0);
	    }

	    public function PROFILES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROFILES, 0);
	    }

	    public function SLAVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SLAVE, 0);
	    }

	    public function HOSTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HOSTS, 0);
	    }

	    public function AUTHORS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AUTHORS, 0);
	    }

	    public function CONTRIBUTORS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONTRIBUTORS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowGlobalInfoClause($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowGlobalInfoClause($this);
		    }
		}
	} 

	class ShowSchemaEntityContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_showSchemaEntity;
	    }

	    public function EVENTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EVENTS, 0);
	    }

	    public function TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE, 0);
	    }

	    public function STATUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STATUS, 0);
	    }

	    public function TABLES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLES, 0);
	    }

	    public function FULL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FULL, 0);
	    }

	    public function TRIGGERS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRIGGERS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowSchemaEntity($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowSchemaEntity($this);
		    }
		}
	} 

	class ShowProfileTypeContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_showProfileType;
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

	    public function BLOCK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BLOCK, 0);
	    }

	    public function IO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IO, 0);
	    }

	    public function CONTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONTEXT, 0);
	    }

	    public function SWITCHES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SWITCHES, 0);
	    }

	    public function CPU() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CPU, 0);
	    }

	    public function IPC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IPC, 0);
	    }

	    public function MEMORY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MEMORY, 0);
	    }

	    public function PAGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PAGE, 0);
	    }

	    public function FAULTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FAULTS, 0);
	    }

	    public function SOURCE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SOURCE, 0);
	    }

	    public function SWAPS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SWAPS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShowProfileType($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShowProfileType($this);
		    }
		}
	} 

	class BinlogStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_binlogStatement;
	    }

	    public function BINLOG() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINLOG, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterBinlogStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitBinlogStatement($this);
		    }
		}
	} 

	class CacheIndexStatementContext extends ParserRuleContext
	{
		/**
		 * @var UidContext|null $schema
		 */
		public $schema;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_cacheIndexStatement;
	    }

	    public function CACHE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CACHE, 0);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    /**
	     * @return array<TableIndexesContext>|TableIndexesContext|null
	     */
	    public function tableIndexes(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TableIndexesContext::class);
	    	}

	        return $this->getTypedRuleContext(TableIndexesContext::class, $index);
	    }

	    public function IN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IN, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCacheIndexStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCacheIndexStatement($this);
		    }
		}
	} 

	class FlushStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $flushFormat
		 */
		public $flushFormat;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_flushStatement;
	    }

	    public function FLUSH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FLUSH, 0);
	    }

	    /**
	     * @return array<FlushOptionContext>|FlushOptionContext|null
	     */
	    public function flushOption(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(FlushOptionContext::class);
	    	}

	        return $this->getTypedRuleContext(FlushOptionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function NO_WRITE_TO_BINLOG() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NO_WRITE_TO_BINLOG, 0);
	    }

	    public function LOCAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFlushStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFlushStatement($this);
		    }
		}
	} 

	class KillStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $connectionFormat
		 */
		public $connectionFormat;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_killStatement;
	    }

	    public function KILL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KILL, 0);
	    }

	    /**
	     * @return array<DecimalLiteralContext>|DecimalLiteralContext|null
	     */
	    public function decimalLiteral(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DecimalLiteralContext::class);
	    	}

	        return $this->getTypedRuleContext(DecimalLiteralContext::class, $index);
	    }

	    public function CONNECTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONNECTION, 0);
	    }

	    public function QUERY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::QUERY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterKillStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitKillStatement($this);
		    }
		}
	} 

	class LoadIndexIntoCacheContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_loadIndexIntoCache;
	    }

	    public function LOAD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOAD, 0);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function INTO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTO, 0);
	    }

	    public function CACHE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CACHE, 0);
	    }

	    /**
	     * @return array<LoadedTableIndexesContext>|LoadedTableIndexesContext|null
	     */
	    public function loadedTableIndexes(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(LoadedTableIndexesContext::class);
	    	}

	        return $this->getTypedRuleContext(LoadedTableIndexesContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLoadIndexIntoCache($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLoadIndexIntoCache($this);
		    }
		}
	} 

	class ResetStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_resetStatement;
	    }

	    public function RESET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RESET, 0);
	    }

	    public function QUERY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::QUERY, 0);
	    }

	    public function CACHE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CACHE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterResetStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitResetStatement($this);
		    }
		}
	} 

	class ShutdownStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_shutdownStatement;
	    }

	    public function SHUTDOWN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHUTDOWN, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterShutdownStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitShutdownStatement($this);
		    }
		}
	} 

	class TableIndexesContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $indexFormat
		 */
		public $indexFormat;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_tableIndexes;
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function uidList() : ?UidListContext
	    {
	    	return $this->getTypedRuleContext(UidListContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableIndexes($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableIndexes($this);
		    }
		}
	} 

	class FlushOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_flushOption;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class TableFlushOptionContext extends FlushOptionContext
	{
		public function __construct(FlushOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function TABLES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLES, 0);
	    }

	    public function tables() : ?TablesContext
	    {
	    	return $this->getTypedRuleContext(TablesContext::class, 0);
	    }

	    public function flushTableOption() : ?FlushTableOptionContext
	    {
	    	return $this->getTypedRuleContext(FlushTableOptionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableFlushOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableFlushOption($this);
		    }
		}
	}

	class ChannelFlushOptionContext extends FlushOptionContext
	{
		public function __construct(FlushOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function RELAY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELAY, 0);
	    }

	    public function LOGS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOGS, 0);
	    }

	    public function channelOption() : ?ChannelOptionContext
	    {
	    	return $this->getTypedRuleContext(ChannelOptionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterChannelFlushOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitChannelFlushOption($this);
		    }
		}
	}

	class SimpleFlushOptionContext extends FlushOptionContext
	{
		public function __construct(FlushOptionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DES_KEY_FILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DES_KEY_FILE, 0);
	    }

	    public function HOSTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HOSTS, 0);
	    }

	    public function LOGS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOGS, 0);
	    }

	    public function OPTIMIZER_COSTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPTIMIZER_COSTS, 0);
	    }

	    public function PRIVILEGES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PRIVILEGES, 0);
	    }

	    public function QUERY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::QUERY, 0);
	    }

	    public function CACHE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CACHE, 0);
	    }

	    public function STATUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STATUS, 0);
	    }

	    public function USER_RESOURCES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USER_RESOURCES, 0);
	    }

	    public function TABLES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLES, 0);
	    }

	    public function WITH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITH, 0);
	    }

	    public function READ() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::READ, 0);
	    }

	    public function LOCK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCK, 0);
	    }

	    public function BINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINARY, 0);
	    }

	    public function ENGINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENGINE, 0);
	    }

	    public function ERROR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ERROR, 0);
	    }

	    public function GENERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GENERAL, 0);
	    }

	    public function RELAY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELAY, 0);
	    }

	    public function SLOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SLOW, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSimpleFlushOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSimpleFlushOption($this);
		    }
		}
	} 

	class FlushTableOptionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_flushTableOption;
	    }

	    public function WITH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITH, 0);
	    }

	    public function READ() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::READ, 0);
	    }

	    public function LOCK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCK, 0);
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

	    public function EXPORT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXPORT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFlushTableOption($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFlushTableOption($this);
		    }
		}
	} 

	class LoadedTableIndexesContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $indexFormat
		 */
		public $indexFormat;

		/**
		 * @var UidListContext|null $partitionList
		 */
		public $partitionList;

		/**
		 * @var UidListContext|null $indexList
		 */
		public $indexList;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_loadedTableIndexes;
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function PARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITION, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function LR_BRACKET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::LR_BRACKET);
	    	}

	        return $this->getToken(MySqlParser::LR_BRACKET, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function RR_BRACKET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::RR_BRACKET);
	    	}

	        return $this->getToken(MySqlParser::RR_BRACKET, $index);
	    }

	    public function IGNORE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IGNORE, 0);
	    }

	    public function LEAVES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LEAVES, 0);
	    }

	    /**
	     * @return array<UidListContext>|UidListContext|null
	     */
	    public function uidList(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidListContext::class);
	    	}

	        return $this->getTypedRuleContext(UidListContext::class, $index);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

	    public function INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEX, 0);
	    }

	    public function KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLoadedTableIndexes($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLoadedTableIndexes($this);
		    }
		}
	} 

	class SimpleDescribeStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $command
		 */
		public $command;

		/**
		 * @var Token|null $pattern
		 */
		public $pattern;

		/**
		 * @var UidContext|null $column
		 */
		public $column;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_simpleDescribeStatement;
	    }

	    public function tableName() : ?TableNameContext
	    {
	    	return $this->getTypedRuleContext(TableNameContext::class, 0);
	    }

	    public function EXPLAIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXPLAIN, 0);
	    }

	    public function DESCRIBE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DESCRIBE, 0);
	    }

	    public function DESC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DESC, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSimpleDescribeStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSimpleDescribeStatement($this);
		    }
		}
	} 

	class FullDescribeStatementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $command
		 */
		public $command;

		/**
		 * @var Token|null $formatType
		 */
		public $formatType;

		/**
		 * @var Token|null $formatValue
		 */
		public $formatValue;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_fullDescribeStatement;
	    }

	    public function describeObjectClause() : ?DescribeObjectClauseContext
	    {
	    	return $this->getTypedRuleContext(DescribeObjectClauseContext::class, 0);
	    }

	    public function EXPLAIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXPLAIN, 0);
	    }

	    public function DESCRIBE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DESCRIBE, 0);
	    }

	    public function DESC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DESC, 0);
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function EXTENDED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXTENDED, 0);
	    }

	    public function PARTITIONS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITIONS, 0);
	    }

	    public function FORMAT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FORMAT, 0);
	    }

	    public function TRADITIONAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRADITIONAL, 0);
	    }

	    public function JSON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::JSON, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFullDescribeStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFullDescribeStatement($this);
		    }
		}
	} 

	class HelpStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_helpStatement;
	    }

	    public function HELP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HELP, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterHelpStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitHelpStatement($this);
		    }
		}
	} 

	class UseStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_useStatement;
	    }

	    public function USE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USE, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUseStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUseStatement($this);
		    }
		}
	} 

	class SignalStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_signalStatement;
	    }

	    public function SIGNAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SIGNAL, 0);
	    }

	    public function ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ID, 0);
	    }

	    public function REVERSE_QUOTE_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REVERSE_QUOTE_ID, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    /**
	     * @return array<SignalConditionInformationContext>|SignalConditionInformationContext|null
	     */
	    public function signalConditionInformation(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(SignalConditionInformationContext::class);
	    	}

	        return $this->getTypedRuleContext(SignalConditionInformationContext::class, $index);
	    }

	    public function SQLSTATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQLSTATE, 0);
	    }

	    public function stringLiteral() : ?StringLiteralContext
	    {
	    	return $this->getTypedRuleContext(StringLiteralContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function VALUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALUE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSignalStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSignalStatement($this);
		    }
		}
	} 

	class ResignalStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_resignalStatement;
	    }

	    public function RESIGNAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RESIGNAL, 0);
	    }

	    public function ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ID, 0);
	    }

	    public function REVERSE_QUOTE_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REVERSE_QUOTE_ID, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    /**
	     * @return array<SignalConditionInformationContext>|SignalConditionInformationContext|null
	     */
	    public function signalConditionInformation(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(SignalConditionInformationContext::class);
	    	}

	        return $this->getTypedRuleContext(SignalConditionInformationContext::class, $index);
	    }

	    public function SQLSTATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQLSTATE, 0);
	    }

	    public function stringLiteral() : ?StringLiteralContext
	    {
	    	return $this->getTypedRuleContext(StringLiteralContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function VALUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALUE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterResignalStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitResignalStatement($this);
		    }
		}
	} 

	class SignalConditionInformationContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_signalConditionInformation;
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function CLASS_ORIGIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CLASS_ORIGIN, 0);
	    }

	    public function SUBCLASS_ORIGIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBCLASS_ORIGIN, 0);
	    }

	    public function MESSAGE_TEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MESSAGE_TEXT, 0);
	    }

	    public function MYSQL_ERRNO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MYSQL_ERRNO, 0);
	    }

	    public function CONSTRAINT_CATALOG() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT_CATALOG, 0);
	    }

	    public function CONSTRAINT_SCHEMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT_SCHEMA, 0);
	    }

	    public function CONSTRAINT_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT_NAME, 0);
	    }

	    public function CATALOG_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CATALOG_NAME, 0);
	    }

	    public function SCHEMA_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SCHEMA_NAME, 0);
	    }

	    public function TABLE_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE_NAME, 0);
	    }

	    public function COLUMN_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMN_NAME, 0);
	    }

	    public function CURSOR_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURSOR_NAME, 0);
	    }

	    public function stringLiteral() : ?StringLiteralContext
	    {
	    	return $this->getTypedRuleContext(StringLiteralContext::class, 0);
	    }

	    public function DECIMAL_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DECIMAL_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSignalConditionInformation($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSignalConditionInformation($this);
		    }
		}
	} 

	class DiagnosticsStatementContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_diagnosticsStatement;
	    }

	    public function GET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GET, 0);
	    }

	    public function DIAGNOSTICS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DIAGNOSTICS, 0);
	    }

	    public function CURRENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURRENT, 0);
	    }

	    public function STACKED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STACKED, 0);
	    }

	    /**
	     * @return array<VariableClauseContext>|VariableClauseContext|null
	     */
	    public function variableClause(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(VariableClauseContext::class);
	    	}

	        return $this->getTypedRuleContext(VariableClauseContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function EQUAL_SYMBOL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::EQUAL_SYMBOL);
	    	}

	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, $index);
	    }

	    public function CONDITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONDITION, 0);
	    }

	    /**
	     * @return array<DiagnosticsConditionInformationNameContext>|DiagnosticsConditionInformationNameContext|null
	     */
	    public function diagnosticsConditionInformationName(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DiagnosticsConditionInformationNameContext::class);
	    	}

	        return $this->getTypedRuleContext(DiagnosticsConditionInformationNameContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function NUMBER(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::NUMBER);
	    	}

	        return $this->getToken(MySqlParser::NUMBER, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function ROW_COUNT(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::ROW_COUNT);
	    	}

	        return $this->getToken(MySqlParser::ROW_COUNT, $index);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDiagnosticsStatement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDiagnosticsStatement($this);
		    }
		}
	} 

	class DiagnosticsConditionInformationNameContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_diagnosticsConditionInformationName;
	    }

	    public function CLASS_ORIGIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CLASS_ORIGIN, 0);
	    }

	    public function SUBCLASS_ORIGIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBCLASS_ORIGIN, 0);
	    }

	    public function RETURNED_SQLSTATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RETURNED_SQLSTATE, 0);
	    }

	    public function MESSAGE_TEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MESSAGE_TEXT, 0);
	    }

	    public function MYSQL_ERRNO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MYSQL_ERRNO, 0);
	    }

	    public function CONSTRAINT_CATALOG() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT_CATALOG, 0);
	    }

	    public function CONSTRAINT_SCHEMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT_SCHEMA, 0);
	    }

	    public function CONSTRAINT_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT_NAME, 0);
	    }

	    public function CATALOG_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CATALOG_NAME, 0);
	    }

	    public function SCHEMA_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SCHEMA_NAME, 0);
	    }

	    public function TABLE_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE_NAME, 0);
	    }

	    public function COLUMN_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMN_NAME, 0);
	    }

	    public function CURSOR_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURSOR_NAME, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDiagnosticsConditionInformationName($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDiagnosticsConditionInformationName($this);
		    }
		}
	} 

	class DescribeObjectClauseContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_describeObjectClause;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class DescribeStatementsContext extends DescribeObjectClauseContext
	{
		public function __construct(DescribeObjectClauseContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

	    public function deleteStatement() : ?DeleteStatementContext
	    {
	    	return $this->getTypedRuleContext(DeleteStatementContext::class, 0);
	    }

	    public function insertStatement() : ?InsertStatementContext
	    {
	    	return $this->getTypedRuleContext(InsertStatementContext::class, 0);
	    }

	    public function replaceStatement() : ?ReplaceStatementContext
	    {
	    	return $this->getTypedRuleContext(ReplaceStatementContext::class, 0);
	    }

	    public function updateStatement() : ?UpdateStatementContext
	    {
	    	return $this->getTypedRuleContext(UpdateStatementContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDescribeStatements($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDescribeStatements($this);
		    }
		}
	}

	class DescribeConnectionContext extends DescribeObjectClauseContext
	{
		public function __construct(DescribeObjectClauseContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

	    public function CONNECTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONNECTION, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDescribeConnection($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDescribeConnection($this);
		    }
		}
	} 

	class FullIdContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_fullId;
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    public function DOT_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DOT_ID, 0);
	    }

	    public function DOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFullId($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFullId($this);
		    }
		}
	} 

	class TableNameContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_tableName;
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTableName($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTableName($this);
		    }
		}
	} 

	class FullColumnNameContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_fullColumnName;
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    /**
	     * @return array<DottedIdContext>|DottedIdContext|null
	     */
	    public function dottedId(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DottedIdContext::class);
	    	}

	        return $this->getTypedRuleContext(DottedIdContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFullColumnName($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFullColumnName($this);
		    }
		}
	} 

	class IndexColumnNameContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $sortType
		 */
		public $sortType;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_indexColumnName;
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function ASC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASC, 0);
	    }

	    public function DESC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DESC, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIndexColumnName($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIndexColumnName($this);
		    }
		}
	} 

	class UserNameContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_userName;
	    }

	    public function STRING_USER_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_USER_NAME, 0);
	    }

	    public function ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ID, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUserName($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUserName($this);
		    }
		}
	} 

	class MysqlVariableContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_mysqlVariable;
	    }

	    public function LOCAL_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL_ID, 0);
	    }

	    public function GLOBAL_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GLOBAL_ID, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterMysqlVariable($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitMysqlVariable($this);
		    }
		}
	} 

	class CharsetNameContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_charsetName;
	    }

	    public function BINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINARY, 0);
	    }

	    public function charsetNameBase() : ?CharsetNameBaseContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameBaseContext::class, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function CHARSET_REVERSE_QOUTE_STRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARSET_REVERSE_QOUTE_STRING, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCharsetName($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCharsetName($this);
		    }
		}
	} 

	class CollationNameContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_collationName;
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCollationName($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCollationName($this);
		    }
		}
	} 

	class EngineNameContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_engineName;
	    }

	    public function ARCHIVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ARCHIVE, 0);
	    }

	    public function BLACKHOLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BLACKHOLE, 0);
	    }

	    public function CSV() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CSV, 0);
	    }

	    public function FEDERATED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FEDERATED, 0);
	    }

	    public function INNODB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INNODB, 0);
	    }

	    public function MEMORY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MEMORY, 0);
	    }

	    public function MRG_MYISAM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MRG_MYISAM, 0);
	    }

	    public function MYISAM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MYISAM, 0);
	    }

	    public function NDB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NDB, 0);
	    }

	    public function NDBCLUSTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NDBCLUSTER, 0);
	    }

	    public function PERFORMANCE_SCHEMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PERFORMANCE_SCHEMA, 0);
	    }

	    public function TOKUDB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TOKUDB, 0);
	    }

	    public function ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ID, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function REVERSE_QUOTE_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REVERSE_QUOTE_ID, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterEngineName($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitEngineName($this);
		    }
		}
	} 

	class UuidSetContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_uuidSet;
	    }

	    /**
	     * @return array<DecimalLiteralContext>|DecimalLiteralContext|null
	     */
	    public function decimalLiteral(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DecimalLiteralContext::class);
	    	}

	        return $this->getTypedRuleContext(DecimalLiteralContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function MINUS(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::MINUS);
	    	}

	        return $this->getToken(MySqlParser::MINUS, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COLON_SYMB(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COLON_SYMB);
	    	}

	        return $this->getToken(MySqlParser::COLON_SYMB, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUuidSet($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUuidSet($this);
		    }
		}
	} 

	class XidContext extends ParserRuleContext
	{
		/**
		 * @var XuidStringIdContext|null $globalTableUid
		 */
		public $globalTableUid;

		/**
		 * @var XuidStringIdContext|null $qualifier
		 */
		public $qualifier;

		/**
		 * @var DecimalLiteralContext|null $idFormat
		 */
		public $idFormat;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_xid;
	    }

	    /**
	     * @return array<XuidStringIdContext>|XuidStringIdContext|null
	     */
	    public function xuidStringId(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(XuidStringIdContext::class);
	    	}

	        return $this->getTypedRuleContext(XuidStringIdContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterXid($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitXid($this);
		    }
		}
	} 

	class XuidStringIdContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_xuidStringId;
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    public function BIT_STRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIT_STRING, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function HEXADECIMAL_LITERAL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::HEXADECIMAL_LITERAL);
	    	}

	        return $this->getToken(MySqlParser::HEXADECIMAL_LITERAL, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterXuidStringId($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitXuidStringId($this);
		    }
		}
	} 

	class AuthPluginContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_authPlugin;
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAuthPlugin($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAuthPlugin($this);
		    }
		}
	} 

	class UidContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_uid;
	    }

	    public function simpleId() : ?SimpleIdContext
	    {
	    	return $this->getTypedRuleContext(SimpleIdContext::class, 0);
	    }

	    public function REVERSE_QUOTE_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REVERSE_QUOTE_ID, 0);
	    }

	    public function CHARSET_REVERSE_QOUTE_STRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARSET_REVERSE_QOUTE_STRING, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUid($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUid($this);
		    }
		}
	} 

	class SimpleIdContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_simpleId;
	    }

	    public function ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ID, 0);
	    }

	    public function charsetNameBase() : ?CharsetNameBaseContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameBaseContext::class, 0);
	    }

	    public function transactionLevelBase() : ?TransactionLevelBaseContext
	    {
	    	return $this->getTypedRuleContext(TransactionLevelBaseContext::class, 0);
	    }

	    public function engineName() : ?EngineNameContext
	    {
	    	return $this->getTypedRuleContext(EngineNameContext::class, 0);
	    }

	    public function privilegesBase() : ?PrivilegesBaseContext
	    {
	    	return $this->getTypedRuleContext(PrivilegesBaseContext::class, 0);
	    }

	    public function intervalTypeBase() : ?IntervalTypeBaseContext
	    {
	    	return $this->getTypedRuleContext(IntervalTypeBaseContext::class, 0);
	    }

	    public function dataTypeBase() : ?DataTypeBaseContext
	    {
	    	return $this->getTypedRuleContext(DataTypeBaseContext::class, 0);
	    }

	    public function keywordsCanBeId() : ?KeywordsCanBeIdContext
	    {
	    	return $this->getTypedRuleContext(KeywordsCanBeIdContext::class, 0);
	    }

	    public function functionNameBase() : ?FunctionNameBaseContext
	    {
	    	return $this->getTypedRuleContext(FunctionNameBaseContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSimpleId($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSimpleId($this);
		    }
		}
	} 

	class DottedIdContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dottedId;
	    }

	    public function DOT_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DOT_ID, 0);
	    }

	    public function DOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DOT, 0);
	    }

	    public function uid() : ?UidContext
	    {
	    	return $this->getTypedRuleContext(UidContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDottedId($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDottedId($this);
		    }
		}
	} 

	class DecimalLiteralContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_decimalLiteral;
	    }

	    public function DECIMAL_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DECIMAL_LITERAL, 0);
	    }

	    public function ZERO_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ZERO_DECIMAL, 0);
	    }

	    public function ONE_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONE_DECIMAL, 0);
	    }

	    public function TWO_DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TWO_DECIMAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDecimalLiteral($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDecimalLiteral($this);
		    }
		}
	} 

	class FileSizeLiteralContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_fileSizeLiteral;
	    }

	    public function FILESIZE_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FILESIZE_LITERAL, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFileSizeLiteral($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFileSizeLiteral($this);
		    }
		}
	} 

	class StringLiteralContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_stringLiteral;
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function STRING_LITERAL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::STRING_LITERAL);
	    	}

	        return $this->getToken(MySqlParser::STRING_LITERAL, $index);
	    }

	    public function START_NATIONAL_STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::START_NATIONAL_STRING_LITERAL, 0);
	    }

	    public function STRING_CHARSET_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_CHARSET_NAME, 0);
	    }

	    public function COLLATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLLATE, 0);
	    }

	    public function collationName() : ?CollationNameContext
	    {
	    	return $this->getTypedRuleContext(CollationNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterStringLiteral($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitStringLiteral($this);
		    }
		}
	} 

	class BooleanLiteralContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_booleanLiteral;
	    }

	    public function TRUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRUE, 0);
	    }

	    public function FALSE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FALSE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterBooleanLiteral($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitBooleanLiteral($this);
		    }
		}
	} 

	class HexadecimalLiteralContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_hexadecimalLiteral;
	    }

	    public function HEXADECIMAL_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HEXADECIMAL_LITERAL, 0);
	    }

	    public function STRING_CHARSET_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_CHARSET_NAME, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterHexadecimalLiteral($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitHexadecimalLiteral($this);
		    }
		}
	} 

	class NullNotnullContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_nullNotnull;
	    }

	    public function NULL_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NULL_LITERAL, 0);
	    }

	    public function NULL_SPEC_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NULL_SPEC_LITERAL, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterNullNotnull($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitNullNotnull($this);
		    }
		}
	} 

	class ConstantContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $nullLiteral
		 */
		public $nullLiteral;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_constant;
	    }

	    public function stringLiteral() : ?StringLiteralContext
	    {
	    	return $this->getTypedRuleContext(StringLiteralContext::class, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function MINUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MINUS, 0);
	    }

	    public function hexadecimalLiteral() : ?HexadecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(HexadecimalLiteralContext::class, 0);
	    }

	    public function booleanLiteral() : ?BooleanLiteralContext
	    {
	    	return $this->getTypedRuleContext(BooleanLiteralContext::class, 0);
	    }

	    public function REAL_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REAL_LITERAL, 0);
	    }

	    public function BIT_STRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIT_STRING, 0);
	    }

	    public function NULL_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NULL_LITERAL, 0);
	    }

	    public function NULL_SPEC_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NULL_SPEC_LITERAL, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterConstant($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitConstant($this);
		    }
		}
	} 

	class DataTypeContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dataType;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class SpatialDataTypeContext extends DataTypeContext
	{
		/**
		 * @var Token|null $typeName
		 */
		public $typeName;

		public function __construct(DataTypeContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function GEOMETRYCOLLECTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GEOMETRYCOLLECTION, 0);
	    }

	    public function GEOMCOLLECTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GEOMCOLLECTION, 0);
	    }

	    public function LINESTRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LINESTRING, 0);
	    }

	    public function MULTILINESTRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MULTILINESTRING, 0);
	    }

	    public function MULTIPOINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MULTIPOINT, 0);
	    }

	    public function MULTIPOLYGON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MULTIPOLYGON, 0);
	    }

	    public function POINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::POINT, 0);
	    }

	    public function POLYGON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::POLYGON, 0);
	    }

	    public function JSON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::JSON, 0);
	    }

	    public function GEOMETRY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GEOMETRY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSpatialDataType($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSpatialDataType($this);
		    }
		}
	}

	class CollectionDataTypeContext extends DataTypeContext
	{
		/**
		 * @var Token|null $typeName
		 */
		public $typeName;

		public function __construct(DataTypeContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function collectionOptions() : ?CollectionOptionsContext
	    {
	    	return $this->getTypedRuleContext(CollectionOptionsContext::class, 0);
	    }

	    public function ENUM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENUM, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function SET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::SET);
	    	}

	        return $this->getToken(MySqlParser::SET, $index);
	    }

	    public function BINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINARY, 0);
	    }

	    public function charsetName() : ?CharsetNameContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameContext::class, 0);
	    }

	    public function CHARACTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARACTER, 0);
	    }

	    public function CHARSET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARSET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCollectionDataType($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCollectionDataType($this);
		    }
		}
	}

	class NationalVaryingStringDataTypeContext extends DataTypeContext
	{
		/**
		 * @var Token|null $typeName
		 */
		public $typeName;

		public function __construct(DataTypeContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function NATIONAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NATIONAL, 0);
	    }

	    public function VARYING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VARYING, 0);
	    }

	    public function CHAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHAR, 0);
	    }

	    public function CHARACTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARACTER, 0);
	    }

	    public function lengthOneDimension() : ?LengthOneDimensionContext
	    {
	    	return $this->getTypedRuleContext(LengthOneDimensionContext::class, 0);
	    }

	    public function BINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINARY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterNationalVaryingStringDataType($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitNationalVaryingStringDataType($this);
		    }
		}
	}

	class DimensionDataTypeContext extends DataTypeContext
	{
		/**
		 * @var Token|null $typeName
		 */
		public $typeName;

		public function __construct(DataTypeContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function TINYINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TINYINT, 0);
	    }

	    public function SMALLINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SMALLINT, 0);
	    }

	    public function MEDIUMINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MEDIUMINT, 0);
	    }

	    public function INT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INT, 0);
	    }

	    public function INTEGER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTEGER, 0);
	    }

	    public function BIGINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIGINT, 0);
	    }

	    public function lengthOneDimension() : ?LengthOneDimensionContext
	    {
	    	return $this->getTypedRuleContext(LengthOneDimensionContext::class, 0);
	    }

	    public function ZEROFILL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ZEROFILL, 0);
	    }

	    public function SIGNED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SIGNED, 0);
	    }

	    public function UNSIGNED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNSIGNED, 0);
	    }

	    public function REAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REAL, 0);
	    }

	    public function lengthTwoDimension() : ?LengthTwoDimensionContext
	    {
	    	return $this->getTypedRuleContext(LengthTwoDimensionContext::class, 0);
	    }

	    public function DOUBLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DOUBLE, 0);
	    }

	    public function PRECISION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PRECISION, 0);
	    }

	    public function DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DECIMAL, 0);
	    }

	    public function DEC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEC, 0);
	    }

	    public function FIXED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIXED, 0);
	    }

	    public function NUMERIC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NUMERIC, 0);
	    }

	    public function FLOAT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FLOAT, 0);
	    }

	    public function lengthTwoOptionalDimension() : ?LengthTwoOptionalDimensionContext
	    {
	    	return $this->getTypedRuleContext(LengthTwoOptionalDimensionContext::class, 0);
	    }

	    public function BIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIT, 0);
	    }

	    public function TIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TIME, 0);
	    }

	    public function TIMESTAMP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TIMESTAMP, 0);
	    }

	    public function DATETIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATETIME, 0);
	    }

	    public function BINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINARY, 0);
	    }

	    public function VARBINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VARBINARY, 0);
	    }

	    public function YEAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::YEAR, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDimensionDataType($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDimensionDataType($this);
		    }
		}
	}

	class StringDataTypeContext extends DataTypeContext
	{
		/**
		 * @var Token|null $typeName
		 */
		public $typeName;

		public function __construct(DataTypeContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CHAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHAR, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function CHARACTER(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::CHARACTER);
	    	}

	        return $this->getToken(MySqlParser::CHARACTER, $index);
	    }

	    public function VARCHAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VARCHAR, 0);
	    }

	    public function TINYTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TINYTEXT, 0);
	    }

	    public function TEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TEXT, 0);
	    }

	    public function MEDIUMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MEDIUMTEXT, 0);
	    }

	    public function LONGTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LONGTEXT, 0);
	    }

	    public function NCHAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NCHAR, 0);
	    }

	    public function NVARCHAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NVARCHAR, 0);
	    }

	    public function lengthOneDimension() : ?LengthOneDimensionContext
	    {
	    	return $this->getTypedRuleContext(LengthOneDimensionContext::class, 0);
	    }

	    public function BINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINARY, 0);
	    }

	    public function charsetName() : ?CharsetNameContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameContext::class, 0);
	    }

	    public function COLLATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLLATE, 0);
	    }

	    public function collationName() : ?CollationNameContext
	    {
	    	return $this->getTypedRuleContext(CollationNameContext::class, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    public function CHARSET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARSET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterStringDataType($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitStringDataType($this);
		    }
		}
	}

	class NationalStringDataTypeContext extends DataTypeContext
	{
		/**
		 * @var Token|null $typeName
		 */
		public $typeName;

		public function __construct(DataTypeContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function NATIONAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NATIONAL, 0);
	    }

	    public function VARCHAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VARCHAR, 0);
	    }

	    public function CHARACTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARACTER, 0);
	    }

	    public function lengthOneDimension() : ?LengthOneDimensionContext
	    {
	    	return $this->getTypedRuleContext(LengthOneDimensionContext::class, 0);
	    }

	    public function BINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINARY, 0);
	    }

	    public function NCHAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NCHAR, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterNationalStringDataType($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitNationalStringDataType($this);
		    }
		}
	}

	class SimpleDataTypeContext extends DataTypeContext
	{
		/**
		 * @var Token|null $typeName
		 */
		public $typeName;

		public function __construct(DataTypeContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function DATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATE, 0);
	    }

	    public function TINYBLOB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TINYBLOB, 0);
	    }

	    public function BLOB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BLOB, 0);
	    }

	    public function MEDIUMBLOB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MEDIUMBLOB, 0);
	    }

	    public function LONGBLOB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LONGBLOB, 0);
	    }

	    public function BOOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BOOL, 0);
	    }

	    public function BOOLEAN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BOOLEAN, 0);
	    }

	    public function SERIAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SERIAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSimpleDataType($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSimpleDataType($this);
		    }
		}
	} 

	class CollectionOptionsContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_collectionOptions;
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function STRING_LITERAL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::STRING_LITERAL);
	    	}

	        return $this->getToken(MySqlParser::STRING_LITERAL, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCollectionOptions($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCollectionOptions($this);
		    }
		}
	} 

	class ConvertedDataTypeContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $typeName
		 */
		public $typeName;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_convertedDataType;
	    }

	    public function BINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINARY, 0);
	    }

	    public function NCHAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NCHAR, 0);
	    }

	    public function lengthOneDimension() : ?LengthOneDimensionContext
	    {
	    	return $this->getTypedRuleContext(LengthOneDimensionContext::class, 0);
	    }

	    public function CHAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHAR, 0);
	    }

	    public function charsetName() : ?CharsetNameContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameContext::class, 0);
	    }

	    public function CHARACTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARACTER, 0);
	    }

	    public function SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SET, 0);
	    }

	    public function CHARSET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARSET, 0);
	    }

	    public function DATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATE, 0);
	    }

	    public function DATETIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATETIME, 0);
	    }

	    public function TIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TIME, 0);
	    }

	    public function JSON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::JSON, 0);
	    }

	    public function DECIMAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DECIMAL, 0);
	    }

	    public function lengthTwoDimension() : ?LengthTwoDimensionContext
	    {
	    	return $this->getTypedRuleContext(LengthTwoDimensionContext::class, 0);
	    }

	    public function SIGNED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SIGNED, 0);
	    }

	    public function UNSIGNED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNSIGNED, 0);
	    }

	    public function INTEGER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTEGER, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterConvertedDataType($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitConvertedDataType($this);
		    }
		}
	} 

	class LengthOneDimensionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_lengthOneDimension;
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLengthOneDimension($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLengthOneDimension($this);
		    }
		}
	} 

	class LengthTwoDimensionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_lengthTwoDimension;
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<DecimalLiteralContext>|DecimalLiteralContext|null
	     */
	    public function decimalLiteral(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DecimalLiteralContext::class);
	    	}

	        return $this->getTypedRuleContext(DecimalLiteralContext::class, $index);
	    }

	    public function COMMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMA, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLengthTwoDimension($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLengthTwoDimension($this);
		    }
		}
	} 

	class LengthTwoOptionalDimensionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_lengthTwoOptionalDimension;
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<DecimalLiteralContext>|DecimalLiteralContext|null
	     */
	    public function decimalLiteral(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DecimalLiteralContext::class);
	    	}

	        return $this->getTypedRuleContext(DecimalLiteralContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function COMMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMA, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLengthTwoOptionalDimension($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLengthTwoOptionalDimension($this);
		    }
		}
	} 

	class UidListContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_uidList;
	    }

	    /**
	     * @return array<UidContext>|UidContext|null
	     */
	    public function uid(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(UidContext::class);
	    	}

	        return $this->getTypedRuleContext(UidContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUidList($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUidList($this);
		    }
		}
	} 

	class TablesContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_tables;
	    }

	    /**
	     * @return array<TableNameContext>|TableNameContext|null
	     */
	    public function tableName(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(TableNameContext::class);
	    	}

	        return $this->getTypedRuleContext(TableNameContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTables($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTables($this);
		    }
		}
	} 

	class IndexColumnNamesContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_indexColumnNames;
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<IndexColumnNameContext>|IndexColumnNameContext|null
	     */
	    public function indexColumnName(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(IndexColumnNameContext::class);
	    	}

	        return $this->getTypedRuleContext(IndexColumnNameContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIndexColumnNames($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIndexColumnNames($this);
		    }
		}
	} 

	class ExpressionsContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_expressions;
	    }

	    /**
	     * @return array<ExpressionContext>|ExpressionContext|null
	     */
	    public function expression(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterExpressions($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitExpressions($this);
		    }
		}
	} 

	class ExpressionsForUpdateContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_expressionsForUpdate;
	    }

	    /**
	     * @return array<ExpressionForUpdateContext>|ExpressionForUpdateContext|null
	     */
	    public function expressionForUpdate(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionForUpdateContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionForUpdateContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterExpressionsForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitExpressionsForUpdate($this);
		    }
		}
	} 

	class ExpressionsWithDefaultsContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_expressionsWithDefaults;
	    }

	    /**
	     * @return array<ExpressionOrDefaultContext>|ExpressionOrDefaultContext|null
	     */
	    public function expressionOrDefault(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionOrDefaultContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionOrDefaultContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterExpressionsWithDefaults($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitExpressionsWithDefaults($this);
		    }
		}
	} 

	class ConstantsContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_constants;
	    }

	    /**
	     * @return array<ConstantContext>|ConstantContext|null
	     */
	    public function constant(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ConstantContext::class);
	    	}

	        return $this->getTypedRuleContext(ConstantContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterConstants($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitConstants($this);
		    }
		}
	} 

	class SimpleStringsContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_simpleStrings;
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function STRING_LITERAL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::STRING_LITERAL);
	    	}

	        return $this->getToken(MySqlParser::STRING_LITERAL, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSimpleStrings($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSimpleStrings($this);
		    }
		}
	} 

	class UserVariablesContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_userVariables;
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function LOCAL_ID(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::LOCAL_ID);
	    	}

	        return $this->getToken(MySqlParser::LOCAL_ID, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUserVariables($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUserVariables($this);
		    }
		}
	} 

	class DefaultValueContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_defaultValue;
	    }

	    public function NULL_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NULL_LITERAL, 0);
	    }

	    public function constant() : ?ConstantContext
	    {
	    	return $this->getTypedRuleContext(ConstantContext::class, 0);
	    }

	    public function unaryOperator() : ?UnaryOperatorContext
	    {
	    	return $this->getTypedRuleContext(UnaryOperatorContext::class, 0);
	    }

	    /**
	     * @return array<CurrentTimestampContext>|CurrentTimestampContext|null
	     */
	    public function currentTimestamp(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(CurrentTimestampContext::class);
	    	}

	        return $this->getTypedRuleContext(CurrentTimestampContext::class, $index);
	    }

	    public function ON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ON, 0);
	    }

	    public function UPDATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UPDATE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDefaultValue($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDefaultValue($this);
		    }
		}
	} 

	class CurrentTimestampContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_currentTimestamp;
	    }

	    public function NOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOW, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function CURRENT_TIMESTAMP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURRENT_TIMESTAMP, 0);
	    }

	    public function LOCALTIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCALTIME, 0);
	    }

	    public function LOCALTIMESTAMP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCALTIMESTAMP, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCurrentTimestamp($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCurrentTimestamp($this);
		    }
		}
	} 

	class ExpressionOrDefaultContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_expressionOrDefault;
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function DEFAULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterExpressionOrDefault($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitExpressionOrDefault($this);
		    }
		}
	} 

	class IfExistsContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_ifExists;
	    }

	    public function IF() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IF, 0);
	    }

	    public function EXISTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXISTS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIfExists($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIfExists($this);
		    }
		}
	} 

	class IfNotExistsContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_ifNotExists;
	    }

	    public function IF() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IF, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

	    public function EXISTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXISTS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIfNotExists($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIfNotExists($this);
		    }
		}
	} 

	class FunctionCallContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_functionCall;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class SpecificFunctionCallContext extends FunctionCallContext
	{
		public function __construct(FunctionCallContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function specificFunction() : ?SpecificFunctionContext
	    {
	    	return $this->getTypedRuleContext(SpecificFunctionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSpecificFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSpecificFunctionCall($this);
		    }
		}
	}

	class PasswordFunctionCallContext extends FunctionCallContext
	{
		public function __construct(FunctionCallContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function passwordFunctionClause() : ?PasswordFunctionClauseContext
	    {
	    	return $this->getTypedRuleContext(PasswordFunctionClauseContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPasswordFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPasswordFunctionCall($this);
		    }
		}
	}

	class UdfFunctionCallContext extends FunctionCallContext
	{
		public function __construct(FunctionCallContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function fullId() : ?FullIdContext
	    {
	    	return $this->getTypedRuleContext(FullIdContext::class, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function functionArgs() : ?FunctionArgsContext
	    {
	    	return $this->getTypedRuleContext(FunctionArgsContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUdfFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUdfFunctionCall($this);
		    }
		}
	}

	class AggregateFunctionCallContext extends FunctionCallContext
	{
		public function __construct(FunctionCallContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function aggregateWindowedFunction() : ?AggregateWindowedFunctionContext
	    {
	    	return $this->getTypedRuleContext(AggregateWindowedFunctionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAggregateFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAggregateFunctionCall($this);
		    }
		}
	}

	class ScalarFunctionCallContext extends FunctionCallContext
	{
		public function __construct(FunctionCallContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function scalarFunctionName() : ?ScalarFunctionNameContext
	    {
	    	return $this->getTypedRuleContext(ScalarFunctionNameContext::class, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function functionArgs() : ?FunctionArgsContext
	    {
	    	return $this->getTypedRuleContext(FunctionArgsContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterScalarFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitScalarFunctionCall($this);
		    }
		}
	} 

	class SpecificFunctionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_specificFunction;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class PositionFunctionCallContext extends SpecificFunctionContext
	{
		/**
		 * @var StringLiteralContext|null $positionString
		 */
		public $positionString;

		/**
		 * @var ExpressionContext|null $positionExpression
		 */
		public $positionExpression;

		/**
		 * @var StringLiteralContext|null $inString
		 */
		public $inString;

		/**
		 * @var ExpressionContext|null $inExpression
		 */
		public $inExpression;

		public function __construct(SpecificFunctionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function POSITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::POSITION, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function IN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IN, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<StringLiteralContext>|StringLiteralContext|null
	     */
	    public function stringLiteral(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(StringLiteralContext::class);
	    	}

	        return $this->getTypedRuleContext(StringLiteralContext::class, $index);
	    }

	    /**
	     * @return array<ExpressionContext>|ExpressionContext|null
	     */
	    public function expression(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPositionFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPositionFunctionCall($this);
		    }
		}
	}

	class TrimFunctionCallContext extends SpecificFunctionContext
	{
		/**
		 * @var Token|null $positioinForm
		 */
		public $positioinForm;

		/**
		 * @var StringLiteralContext|null $sourceString
		 */
		public $sourceString;

		/**
		 * @var ExpressionContext|null $sourceExpression
		 */
		public $sourceExpression;

		/**
		 * @var StringLiteralContext|null $fromString
		 */
		public $fromString;

		/**
		 * @var ExpressionContext|null $fromExpression
		 */
		public $fromExpression;

		public function __construct(SpecificFunctionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function TRIM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRIM, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function FROM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function BOTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BOTH, 0);
	    }

	    public function LEADING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LEADING, 0);
	    }

	    public function TRAILING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRAILING, 0);
	    }

	    /**
	     * @return array<StringLiteralContext>|StringLiteralContext|null
	     */
	    public function stringLiteral(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(StringLiteralContext::class);
	    	}

	        return $this->getTypedRuleContext(StringLiteralContext::class, $index);
	    }

	    /**
	     * @return array<ExpressionContext>|ExpressionContext|null
	     */
	    public function expression(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTrimFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTrimFunctionCall($this);
		    }
		}
	}

	class SimpleFunctionCallContext extends SpecificFunctionContext
	{
		public function __construct(SpecificFunctionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CURRENT_DATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURRENT_DATE, 0);
	    }

	    public function CURRENT_TIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURRENT_TIME, 0);
	    }

	    public function CURRENT_TIMESTAMP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURRENT_TIMESTAMP, 0);
	    }

	    public function CURRENT_USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURRENT_USER, 0);
	    }

	    public function LOCALTIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCALTIME, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSimpleFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSimpleFunctionCall($this);
		    }
		}
	}

	class CharFunctionCallContext extends SpecificFunctionContext
	{
		public function __construct(SpecificFunctionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CHAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHAR, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function functionArgs() : ?FunctionArgsContext
	    {
	    	return $this->getTypedRuleContext(FunctionArgsContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function USING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USING, 0);
	    }

	    public function charsetName() : ?CharsetNameContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCharFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCharFunctionCall($this);
		    }
		}
	}

	class WeightFunctionCallContext extends SpecificFunctionContext
	{
		/**
		 * @var Token|null $stringFormat
		 */
		public $stringFormat;

		public function __construct(SpecificFunctionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function WEIGHT_STRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WEIGHT_STRING, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function LR_BRACKET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::LR_BRACKET);
	    	}

	        return $this->getToken(MySqlParser::LR_BRACKET, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function RR_BRACKET(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::RR_BRACKET);
	    	}

	        return $this->getToken(MySqlParser::RR_BRACKET, $index);
	    }

	    public function stringLiteral() : ?StringLiteralContext
	    {
	    	return $this->getTypedRuleContext(StringLiteralContext::class, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function levelsInWeightString() : ?LevelsInWeightStringContext
	    {
	    	return $this->getTypedRuleContext(LevelsInWeightStringContext::class, 0);
	    }

	    public function CHAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHAR, 0);
	    }

	    public function BINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINARY, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterWeightFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitWeightFunctionCall($this);
		    }
		}
	}

	class GetFormatFunctionCallContext extends SpecificFunctionContext
	{
		/**
		 * @var Token|null $datetimeFormat
		 */
		public $datetimeFormat;

		public function __construct(SpecificFunctionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function GET_FORMAT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GET_FORMAT, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function COMMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMA, 0);
	    }

	    public function stringLiteral() : ?StringLiteralContext
	    {
	    	return $this->getTypedRuleContext(StringLiteralContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function DATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATE, 0);
	    }

	    public function TIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TIME, 0);
	    }

	    public function DATETIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATETIME, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterGetFormatFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitGetFormatFunctionCall($this);
		    }
		}
	}

	class CaseFunctionCallContext extends SpecificFunctionContext
	{
		/**
		 * @var FunctionArgContext|null $elseArg
		 */
		public $elseArg;

		public function __construct(SpecificFunctionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CASE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CASE, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function END() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::END, 0);
	    }

	    /**
	     * @return array<CaseFuncAlternativeContext>|CaseFuncAlternativeContext|null
	     */
	    public function caseFuncAlternative(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(CaseFuncAlternativeContext::class);
	    	}

	        return $this->getTypedRuleContext(CaseFuncAlternativeContext::class, $index);
	    }

	    public function ELSE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ELSE, 0);
	    }

	    public function functionArg() : ?FunctionArgContext
	    {
	    	return $this->getTypedRuleContext(FunctionArgContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCaseFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCaseFunctionCall($this);
		    }
		}
	}

	class ExtractFunctionCallContext extends SpecificFunctionContext
	{
		/**
		 * @var StringLiteralContext|null $sourceString
		 */
		public $sourceString;

		/**
		 * @var ExpressionContext|null $sourceExpression
		 */
		public $sourceExpression;

		public function __construct(SpecificFunctionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function EXTRACT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXTRACT, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function intervalType() : ?IntervalTypeContext
	    {
	    	return $this->getTypedRuleContext(IntervalTypeContext::class, 0);
	    }

	    public function FROM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function stringLiteral() : ?StringLiteralContext
	    {
	    	return $this->getTypedRuleContext(StringLiteralContext::class, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterExtractFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitExtractFunctionCall($this);
		    }
		}
	}

	class DataTypeFunctionCallContext extends SpecificFunctionContext
	{
		/**
		 * @var Token|null $separator
		 */
		public $separator;

		public function __construct(SpecificFunctionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function CONVERT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONVERT, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function convertedDataType() : ?ConvertedDataTypeContext
	    {
	    	return $this->getTypedRuleContext(ConvertedDataTypeContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function COMMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMA, 0);
	    }

	    public function USING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USING, 0);
	    }

	    public function charsetName() : ?CharsetNameContext
	    {
	    	return $this->getTypedRuleContext(CharsetNameContext::class, 0);
	    }

	    public function CAST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CAST, 0);
	    }

	    public function AS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDataTypeFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDataTypeFunctionCall($this);
		    }
		}
	}

	class ValuesFunctionCallContext extends SpecificFunctionContext
	{
		public function __construct(SpecificFunctionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function VALUES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALUES, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function fullColumnName() : ?FullColumnNameContext
	    {
	    	return $this->getTypedRuleContext(FullColumnNameContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterValuesFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitValuesFunctionCall($this);
		    }
		}
	}

	class SubstrFunctionCallContext extends SpecificFunctionContext
	{
		/**
		 * @var StringLiteralContext|null $sourceString
		 */
		public $sourceString;

		/**
		 * @var ExpressionContext|null $sourceExpression
		 */
		public $sourceExpression;

		/**
		 * @var DecimalLiteralContext|null $fromDecimal
		 */
		public $fromDecimal;

		/**
		 * @var ExpressionContext|null $fromExpression
		 */
		public $fromExpression;

		/**
		 * @var DecimalLiteralContext|null $forDecimal
		 */
		public $forDecimal;

		/**
		 * @var ExpressionContext|null $forExpression
		 */
		public $forExpression;

		public function __construct(SpecificFunctionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function FROM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function SUBSTR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBSTR, 0);
	    }

	    public function SUBSTRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBSTRING, 0);
	    }

	    public function stringLiteral() : ?StringLiteralContext
	    {
	    	return $this->getTypedRuleContext(StringLiteralContext::class, 0);
	    }

	    /**
	     * @return array<ExpressionContext>|ExpressionContext|null
	     */
	    public function expression(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionContext::class, $index);
	    }

	    /**
	     * @return array<DecimalLiteralContext>|DecimalLiteralContext|null
	     */
	    public function decimalLiteral(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DecimalLiteralContext::class);
	    	}

	        return $this->getTypedRuleContext(DecimalLiteralContext::class, $index);
	    }

	    public function FOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOR, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSubstrFunctionCall($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSubstrFunctionCall($this);
		    }
		}
	} 

	class CaseFuncAlternativeContext extends ParserRuleContext
	{
		/**
		 * @var FunctionArgContext|null $condition
		 */
		public $condition;

		/**
		 * @var FunctionArgContext|null $consequent
		 */
		public $consequent;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_caseFuncAlternative;
	    }

	    public function WHEN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WHEN, 0);
	    }

	    public function THEN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::THEN, 0);
	    }

	    /**
	     * @return array<FunctionArgContext>|FunctionArgContext|null
	     */
	    public function functionArg(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(FunctionArgContext::class);
	    	}

	        return $this->getTypedRuleContext(FunctionArgContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCaseFuncAlternative($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCaseFuncAlternative($this);
		    }
		}
	} 

	class LevelsInWeightStringContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_levelsInWeightString;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class LevelWeightRangeContext extends LevelsInWeightStringContext
	{
		/**
		 * @var DecimalLiteralContext|null $firstLevel
		 */
		public $firstLevel;

		/**
		 * @var DecimalLiteralContext|null $lastLevel
		 */
		public $lastLevel;

		public function __construct(LevelsInWeightStringContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function LEVEL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LEVEL, 0);
	    }

	    public function MINUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MINUS, 0);
	    }

	    /**
	     * @return array<DecimalLiteralContext>|DecimalLiteralContext|null
	     */
	    public function decimalLiteral(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(DecimalLiteralContext::class);
	    	}

	        return $this->getTypedRuleContext(DecimalLiteralContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLevelWeightRange($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLevelWeightRange($this);
		    }
		}
	}

	class LevelWeightListContext extends LevelsInWeightStringContext
	{
		public function __construct(LevelsInWeightStringContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function LEVEL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LEVEL, 0);
	    }

	    /**
	     * @return array<LevelInWeightListElementContext>|LevelInWeightListElementContext|null
	     */
	    public function levelInWeightListElement(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(LevelInWeightListElementContext::class);
	    	}

	        return $this->getTypedRuleContext(LevelInWeightListElementContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLevelWeightList($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLevelWeightList($this);
		    }
		}
	} 

	class LevelInWeightListElementContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $orderType
		 */
		public $orderType;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_levelInWeightListElement;
	    }

	    public function decimalLiteral() : ?DecimalLiteralContext
	    {
	    	return $this->getTypedRuleContext(DecimalLiteralContext::class, 0);
	    }

	    public function ASC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASC, 0);
	    }

	    public function DESC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DESC, 0);
	    }

	    public function REVERSE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REVERSE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLevelInWeightListElement($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLevelInWeightListElement($this);
		    }
		}
	} 

	class AggregateWindowedFunctionContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $aggregator
		 */
		public $aggregator;

		/**
		 * @var Token|null $starArg
		 */
		public $starArg;

		/**
		 * @var Token|null $separator
		 */
		public $separator;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_aggregateWindowedFunction;
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function functionArg() : ?FunctionArgContext
	    {
	    	return $this->getTypedRuleContext(FunctionArgContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function AVG() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AVG, 0);
	    }

	    public function MAX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAX, 0);
	    }

	    public function MIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MIN, 0);
	    }

	    public function SUM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUM, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

	    public function DISTINCT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISTINCT, 0);
	    }

	    public function COUNT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COUNT, 0);
	    }

	    public function STAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STAR, 0);
	    }

	    public function functionArgs() : ?FunctionArgsContext
	    {
	    	return $this->getTypedRuleContext(FunctionArgsContext::class, 0);
	    }

	    public function BIT_AND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIT_AND, 0);
	    }

	    public function BIT_OR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIT_OR, 0);
	    }

	    public function BIT_XOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIT_XOR, 0);
	    }

	    public function STD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STD, 0);
	    }

	    public function STDDEV() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STDDEV, 0);
	    }

	    public function STDDEV_POP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STDDEV_POP, 0);
	    }

	    public function STDDEV_SAMP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STDDEV_SAMP, 0);
	    }

	    public function VAR_POP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VAR_POP, 0);
	    }

	    public function VAR_SAMP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VAR_SAMP, 0);
	    }

	    public function VARIANCE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VARIANCE, 0);
	    }

	    public function GROUP_CONCAT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GROUP_CONCAT, 0);
	    }

	    public function ORDER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ORDER, 0);
	    }

	    public function BY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BY, 0);
	    }

	    /**
	     * @return array<OrderByExpressionContext>|OrderByExpressionContext|null
	     */
	    public function orderByExpression(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(OrderByExpressionContext::class);
	    	}

	        return $this->getTypedRuleContext(OrderByExpressionContext::class, $index);
	    }

	    public function SEPARATOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SEPARATOR, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterAggregateWindowedFunction($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitAggregateWindowedFunction($this);
		    }
		}
	} 

	class ScalarFunctionNameContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_scalarFunctionName;
	    }

	    public function functionNameBase() : ?FunctionNameBaseContext
	    {
	    	return $this->getTypedRuleContext(FunctionNameBaseContext::class, 0);
	    }

	    public function ASCII() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASCII, 0);
	    }

	    public function CURDATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURDATE, 0);
	    }

	    public function CURRENT_DATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURRENT_DATE, 0);
	    }

	    public function CURRENT_TIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURRENT_TIME, 0);
	    }

	    public function CURRENT_TIMESTAMP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURRENT_TIMESTAMP, 0);
	    }

	    public function CURTIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURTIME, 0);
	    }

	    public function DATE_ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATE_ADD, 0);
	    }

	    public function DATE_SUB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATE_SUB, 0);
	    }

	    public function IF() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IF, 0);
	    }

	    public function INSERT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INSERT, 0);
	    }

	    public function LOCALTIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCALTIME, 0);
	    }

	    public function LOCALTIMESTAMP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCALTIMESTAMP, 0);
	    }

	    public function MID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MID, 0);
	    }

	    public function NOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOW, 0);
	    }

	    public function REPLACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLACE, 0);
	    }

	    public function SUBSTR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBSTR, 0);
	    }

	    public function SUBSTRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBSTRING, 0);
	    }

	    public function SYSDATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SYSDATE, 0);
	    }

	    public function TRIM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRIM, 0);
	    }

	    public function UTC_DATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UTC_DATE, 0);
	    }

	    public function UTC_TIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UTC_TIME, 0);
	    }

	    public function UTC_TIMESTAMP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UTC_TIMESTAMP, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterScalarFunctionName($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitScalarFunctionName($this);
		    }
		}
	} 

	class PasswordFunctionClauseContext extends ParserRuleContext
	{
		/**
		 * @var Token|null $functionName
		 */
		public $functionName;

		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_passwordFunctionClause;
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function functionArg() : ?FunctionArgContext
	    {
	    	return $this->getTypedRuleContext(FunctionArgContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function PASSWORD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PASSWORD, 0);
	    }

	    public function OLD_PASSWORD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OLD_PASSWORD, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPasswordFunctionClause($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPasswordFunctionClause($this);
		    }
		}
	} 

	class FunctionArgsContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_functionArgs;
	    }

	    /**
	     * @return array<ConstantContext>|ConstantContext|null
	     */
	    public function constant(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ConstantContext::class);
	    	}

	        return $this->getTypedRuleContext(ConstantContext::class, $index);
	    }

	    /**
	     * @return array<FullColumnNameContext>|FullColumnNameContext|null
	     */
	    public function fullColumnName(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(FullColumnNameContext::class);
	    	}

	        return $this->getTypedRuleContext(FullColumnNameContext::class, $index);
	    }

	    /**
	     * @return array<FunctionCallContext>|FunctionCallContext|null
	     */
	    public function functionCall(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(FunctionCallContext::class);
	    	}

	        return $this->getTypedRuleContext(FunctionCallContext::class, $index);
	    }

	    /**
	     * @return array<ExpressionContext>|ExpressionContext|null
	     */
	    public function expression(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionContext::class, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFunctionArgs($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFunctionArgs($this);
		    }
		}
	} 

	class FunctionArgContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_functionArg;
	    }

	    public function constant() : ?ConstantContext
	    {
	    	return $this->getTypedRuleContext(ConstantContext::class, 0);
	    }

	    public function fullColumnName() : ?FullColumnNameContext
	    {
	    	return $this->getTypedRuleContext(FullColumnNameContext::class, 0);
	    }

	    public function functionCall() : ?FunctionCallContext
	    {
	    	return $this->getTypedRuleContext(FunctionCallContext::class, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFunctionArg($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFunctionArg($this);
		    }
		}
	} 

	class ExpressionContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_expression;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class IsExpressionContext extends ExpressionContext
	{
		/**
		 * @var Token|null $testValue
		 */
		public $testValue;

		public function __construct(ExpressionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function predicate() : ?PredicateContext
	    {
	    	return $this->getTypedRuleContext(PredicateContext::class, 0);
	    }

	    public function IS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IS, 0);
	    }

	    public function TRUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRUE, 0);
	    }

	    public function FALSE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FALSE, 0);
	    }

	    public function UNKNOWN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNKNOWN, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIsExpression($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIsExpression($this);
		    }
		}
	}

	class NotExpressionContext extends ExpressionContext
	{
		/**
		 * @var Token|null $notOperator
		 */
		public $notOperator;

		public function __construct(ExpressionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

	    public function EXCLAMATION_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXCLAMATION_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterNotExpression($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitNotExpression($this);
		    }
		}
	}

	class LogicalExpressionContext extends ExpressionContext
	{
		public function __construct(ExpressionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    /**
	     * @return array<ExpressionContext>|ExpressionContext|null
	     */
	    public function expression(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionContext::class, $index);
	    }

	    public function logicalOperator() : ?LogicalOperatorContext
	    {
	    	return $this->getTypedRuleContext(LogicalOperatorContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLogicalExpression($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLogicalExpression($this);
		    }
		}
	}

	class PredicateExpressionContext extends ExpressionContext
	{
		public function __construct(ExpressionContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function predicate() : ?PredicateContext
	    {
	    	return $this->getTypedRuleContext(PredicateContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPredicateExpression($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPredicateExpression($this);
		    }
		}
	} 

	class PredicateContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_predicate;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class SoundsLikePredicateContext extends PredicateContext
	{
		public function __construct(PredicateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    /**
	     * @return array<PredicateContext>|PredicateContext|null
	     */
	    public function predicate(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PredicateContext::class);
	    	}

	        return $this->getTypedRuleContext(PredicateContext::class, $index);
	    }

	    public function SOUNDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SOUNDS, 0);
	    }

	    public function LIKE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LIKE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSoundsLikePredicate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSoundsLikePredicate($this);
		    }
		}
	}

	class ExpressionAtomPredicateContext extends PredicateContext
	{
		public function __construct(PredicateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function expressionAtom() : ?ExpressionAtomContext
	    {
	    	return $this->getTypedRuleContext(ExpressionAtomContext::class, 0);
	    }

	    public function LOCAL_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL_ID, 0);
	    }

	    public function VAR_ASSIGN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VAR_ASSIGN, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterExpressionAtomPredicate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitExpressionAtomPredicate($this);
		    }
		}
	}

	class InPredicateContext extends PredicateContext
	{
		public function __construct(PredicateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function predicate() : ?PredicateContext
	    {
	    	return $this->getTypedRuleContext(PredicateContext::class, 0);
	    }

	    public function IN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IN, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

	    public function expressions() : ?ExpressionsContext
	    {
	    	return $this->getTypedRuleContext(ExpressionsContext::class, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterInPredicate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitInPredicate($this);
		    }
		}
	}

	class SubqueryComparasionPredicateContext extends PredicateContext
	{
		/**
		 * @var Token|null $quantifier
		 */
		public $quantifier;

		public function __construct(PredicateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function predicate() : ?PredicateContext
	    {
	    	return $this->getTypedRuleContext(PredicateContext::class, 0);
	    }

	    public function comparisonOperator() : ?ComparisonOperatorContext
	    {
	    	return $this->getTypedRuleContext(ComparisonOperatorContext::class, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

	    public function ANY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ANY, 0);
	    }

	    public function SOME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SOME, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSubqueryComparasionPredicate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSubqueryComparasionPredicate($this);
		    }
		}
	}

	class BetweenPredicateContext extends PredicateContext
	{
		public function __construct(PredicateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    /**
	     * @return array<PredicateContext>|PredicateContext|null
	     */
	    public function predicate(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PredicateContext::class);
	    	}

	        return $this->getTypedRuleContext(PredicateContext::class, $index);
	    }

	    public function BETWEEN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BETWEEN, 0);
	    }

	    public function AND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AND, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterBetweenPredicate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitBetweenPredicate($this);
		    }
		}
	}

	class BinaryComparasionPredicateContext extends PredicateContext
	{
		/**
		 * @var PredicateContext|null $left
		 */
		public $left;

		/**
		 * @var PredicateContext|null $right
		 */
		public $right;

		public function __construct(PredicateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function comparisonOperator() : ?ComparisonOperatorContext
	    {
	    	return $this->getTypedRuleContext(ComparisonOperatorContext::class, 0);
	    }

	    /**
	     * @return array<PredicateContext>|PredicateContext|null
	     */
	    public function predicate(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PredicateContext::class);
	    	}

	        return $this->getTypedRuleContext(PredicateContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterBinaryComparasionPredicate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitBinaryComparasionPredicate($this);
		    }
		}
	}

	class IsNullPredicateContext extends PredicateContext
	{
		public function __construct(PredicateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function predicate() : ?PredicateContext
	    {
	    	return $this->getTypedRuleContext(PredicateContext::class, 0);
	    }

	    public function IS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IS, 0);
	    }

	    public function nullNotnull() : ?NullNotnullContext
	    {
	    	return $this->getTypedRuleContext(NullNotnullContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIsNullPredicate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIsNullPredicate($this);
		    }
		}
	}

	class LikePredicateContext extends PredicateContext
	{
		public function __construct(PredicateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    /**
	     * @return array<PredicateContext>|PredicateContext|null
	     */
	    public function predicate(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PredicateContext::class);
	    	}

	        return $this->getTypedRuleContext(PredicateContext::class, $index);
	    }

	    public function LIKE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LIKE, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

	    public function ESCAPE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ESCAPE, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLikePredicate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLikePredicate($this);
		    }
		}
	}

	class RegexpPredicateContext extends PredicateContext
	{
		/**
		 * @var Token|null $regex
		 */
		public $regex;

		public function __construct(PredicateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    /**
	     * @return array<PredicateContext>|PredicateContext|null
	     */
	    public function predicate(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PredicateContext::class);
	    	}

	        return $this->getTypedRuleContext(PredicateContext::class, $index);
	    }

	    public function REGEXP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REGEXP, 0);
	    }

	    public function RLIKE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RLIKE, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRegexpPredicate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRegexpPredicate($this);
		    }
		}
	} 

	class ExpressionForUpdateContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_expressionForUpdate;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class LogicalExpressionForUpdateContext extends ExpressionForUpdateContext
	{
		public function __construct(ExpressionForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    /**
	     * @return array<ExpressionForUpdateContext>|ExpressionForUpdateContext|null
	     */
	    public function expressionForUpdate(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionForUpdateContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionForUpdateContext::class, $index);
	    }

	    public function logicalOperator() : ?LogicalOperatorContext
	    {
	    	return $this->getTypedRuleContext(LogicalOperatorContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLogicalExpressionForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLogicalExpressionForUpdate($this);
		    }
		}
	}

	class PredicateExpressionForUpdateContext extends ExpressionForUpdateContext
	{
		public function __construct(ExpressionForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function predicateForUpdate() : ?PredicateForUpdateContext
	    {
	    	return $this->getTypedRuleContext(PredicateForUpdateContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPredicateExpressionForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPredicateExpressionForUpdate($this);
		    }
		}
	}

	class IsExpressionForUpdateContext extends ExpressionForUpdateContext
	{
		/**
		 * @var Token|null $testValue
		 */
		public $testValue;

		public function __construct(ExpressionForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function expressionForUpdate() : ?ExpressionForUpdateContext
	    {
	    	return $this->getTypedRuleContext(ExpressionForUpdateContext::class, 0);
	    }

	    public function IS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IS, 0);
	    }

	    public function TRUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRUE, 0);
	    }

	    public function FALSE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FALSE, 0);
	    }

	    public function UNKNOWN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNKNOWN, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIsExpressionForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIsExpressionForUpdate($this);
		    }
		}
	}

	class NotExpressionForUpdateContext extends ExpressionForUpdateContext
	{
		/**
		 * @var Token|null $notOperator
		 */
		public $notOperator;

		public function __construct(ExpressionForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function expressionForUpdate() : ?ExpressionForUpdateContext
	    {
	    	return $this->getTypedRuleContext(ExpressionForUpdateContext::class, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

	    public function EXCLAMATION_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXCLAMATION_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterNotExpressionForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitNotExpressionForUpdate($this);
		    }
		}
	} 

	class PredicateForUpdateContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_predicateForUpdate;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class BinaryComparasionPredicateForUpdateContext extends PredicateForUpdateContext
	{
		/**
		 * @var PredicateForUpdateContext|null $left
		 */
		public $left;

		/**
		 * @var PredicateForUpdateContext|null $right
		 */
		public $right;

		public function __construct(PredicateForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function comparisonOperator() : ?ComparisonOperatorContext
	    {
	    	return $this->getTypedRuleContext(ComparisonOperatorContext::class, 0);
	    }

	    /**
	     * @return array<PredicateForUpdateContext>|PredicateForUpdateContext|null
	     */
	    public function predicateForUpdate(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PredicateForUpdateContext::class);
	    	}

	        return $this->getTypedRuleContext(PredicateForUpdateContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterBinaryComparasionPredicateForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitBinaryComparasionPredicateForUpdate($this);
		    }
		}
	}

	class LikePredicateForUpdateContext extends PredicateForUpdateContext
	{
		public function __construct(PredicateForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    /**
	     * @return array<PredicateForUpdateContext>|PredicateForUpdateContext|null
	     */
	    public function predicateForUpdate(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PredicateForUpdateContext::class);
	    	}

	        return $this->getTypedRuleContext(PredicateForUpdateContext::class, $index);
	    }

	    public function LIKE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LIKE, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

	    public function ESCAPE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ESCAPE, 0);
	    }

	    public function STRING_LITERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING_LITERAL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLikePredicateForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLikePredicateForUpdate($this);
		    }
		}
	}

	class RegexpPredicateForUpdateContext extends PredicateForUpdateContext
	{
		/**
		 * @var Token|null $regex
		 */
		public $regex;

		public function __construct(PredicateForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function predicateForUpdate() : ?PredicateForUpdateContext
	    {
	    	return $this->getTypedRuleContext(PredicateForUpdateContext::class, 0);
	    }

	    public function predicate() : ?PredicateContext
	    {
	    	return $this->getTypedRuleContext(PredicateContext::class, 0);
	    }

	    public function REGEXP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REGEXP, 0);
	    }

	    public function RLIKE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RLIKE, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterRegexpPredicateForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitRegexpPredicateForUpdate($this);
		    }
		}
	}

	class IsNullPredicateForUpdateContext extends PredicateForUpdateContext
	{
		public function __construct(PredicateForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function predicateForUpdate() : ?PredicateForUpdateContext
	    {
	    	return $this->getTypedRuleContext(PredicateForUpdateContext::class, 0);
	    }

	    public function IS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IS, 0);
	    }

	    public function nullNotnull() : ?NullNotnullContext
	    {
	    	return $this->getTypedRuleContext(NullNotnullContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIsNullPredicateForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIsNullPredicateForUpdate($this);
		    }
		}
	}

	class BetweenPredicateForUpdateContext extends PredicateForUpdateContext
	{
		public function __construct(PredicateForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    /**
	     * @return array<PredicateForUpdateContext>|PredicateForUpdateContext|null
	     */
	    public function predicateForUpdate(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PredicateForUpdateContext::class);
	    	}

	        return $this->getTypedRuleContext(PredicateForUpdateContext::class, $index);
	    }

	    public function BETWEEN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BETWEEN, 0);
	    }

	    public function AND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AND, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterBetweenPredicateForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitBetweenPredicateForUpdate($this);
		    }
		}
	}

	class SoundsLikePredicateForUpdateContext extends PredicateForUpdateContext
	{
		public function __construct(PredicateForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    /**
	     * @return array<PredicateForUpdateContext>|PredicateForUpdateContext|null
	     */
	    public function predicateForUpdate(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(PredicateForUpdateContext::class);
	    	}

	        return $this->getTypedRuleContext(PredicateForUpdateContext::class, $index);
	    }

	    public function SOUNDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SOUNDS, 0);
	    }

	    public function LIKE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LIKE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSoundsLikePredicateForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSoundsLikePredicateForUpdate($this);
		    }
		}
	}

	class InPredicateForUpdateContext extends PredicateForUpdateContext
	{
		public function __construct(PredicateForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function predicateForUpdate() : ?PredicateForUpdateContext
	    {
	    	return $this->getTypedRuleContext(PredicateForUpdateContext::class, 0);
	    }

	    public function IN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IN, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

	    public function expressionsForUpdate() : ?ExpressionsForUpdateContext
	    {
	    	return $this->getTypedRuleContext(ExpressionsForUpdateContext::class, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterInPredicateForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitInPredicateForUpdate($this);
		    }
		}
	}

	class SubqueryComparasionPredicateForUpdateContext extends PredicateForUpdateContext
	{
		/**
		 * @var Token|null $quantifier
		 */
		public $quantifier;

		public function __construct(PredicateForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function predicateForUpdate() : ?PredicateForUpdateContext
	    {
	    	return $this->getTypedRuleContext(PredicateForUpdateContext::class, 0);
	    }

	    public function comparisonOperator() : ?ComparisonOperatorContext
	    {
	    	return $this->getTypedRuleContext(ComparisonOperatorContext::class, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    public function ALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALL, 0);
	    }

	    public function ANY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ANY, 0);
	    }

	    public function SOME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SOME, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSubqueryComparasionPredicateForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSubqueryComparasionPredicateForUpdate($this);
		    }
		}
	}

	class ExpressionAtomPredicateForUpdateContext extends PredicateForUpdateContext
	{
		public function __construct(PredicateForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function expressionAtomForUpdate() : ?ExpressionAtomForUpdateContext
	    {
	    	return $this->getTypedRuleContext(ExpressionAtomForUpdateContext::class, 0);
	    }

	    public function LOCAL_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL_ID, 0);
	    }

	    public function VAR_ASSIGN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VAR_ASSIGN, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterExpressionAtomPredicateForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitExpressionAtomPredicateForUpdate($this);
		    }
		}
	} 

	class ExpressionAtomForUpdateContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_expressionAtomForUpdate;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class IntervalExpressionAtomForUpdateContext extends ExpressionAtomForUpdateContext
	{
		public function __construct(ExpressionAtomForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function INTERVAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTERVAL, 0);
	    }

	    public function expressionForUpdate() : ?ExpressionForUpdateContext
	    {
	    	return $this->getTypedRuleContext(ExpressionForUpdateContext::class, 0);
	    }

	    public function intervalType() : ?IntervalTypeContext
	    {
	    	return $this->getTypedRuleContext(IntervalTypeContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIntervalExpressionAtomForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIntervalExpressionAtomForUpdate($this);
		    }
		}
	}

	class FullColumnNameExpressionAtomForUpdateContext extends ExpressionAtomForUpdateContext
	{
		public function __construct(ExpressionAtomForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function fullColumnName() : ?FullColumnNameContext
	    {
	    	return $this->getTypedRuleContext(FullColumnNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFullColumnNameExpressionAtomForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFullColumnNameExpressionAtomForUpdate($this);
		    }
		}
	}

	class MysqlVariableExpressionAtomForUpdateContext extends ExpressionAtomForUpdateContext
	{
		public function __construct(ExpressionAtomForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function mysqlVariable() : ?MysqlVariableContext
	    {
	    	return $this->getTypedRuleContext(MysqlVariableContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterMysqlVariableExpressionAtomForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitMysqlVariableExpressionAtomForUpdate($this);
		    }
		}
	}

	class UnaryExpressionAtomForUpdateContext extends ExpressionAtomForUpdateContext
	{
		public function __construct(ExpressionAtomForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function unaryOperator() : ?UnaryOperatorContext
	    {
	    	return $this->getTypedRuleContext(UnaryOperatorContext::class, 0);
	    }

	    public function expressionAtomForUpdate() : ?ExpressionAtomForUpdateContext
	    {
	    	return $this->getTypedRuleContext(ExpressionAtomForUpdateContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUnaryExpressionAtomForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUnaryExpressionAtomForUpdate($this);
		    }
		}
	}

	class NestedRowExpressionAtomForUpdateContext extends ExpressionAtomForUpdateContext
	{
		public function __construct(ExpressionAtomForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ROW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROW, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<ExpressionForUpdateContext>|ExpressionForUpdateContext|null
	     */
	    public function expressionForUpdate(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionForUpdateContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionForUpdateContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterNestedRowExpressionAtomForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitNestedRowExpressionAtomForUpdate($this);
		    }
		}
	}

	class SubqueryExpessionAtomForUpdateContext extends ExpressionAtomForUpdateContext
	{
		public function __construct(ExpressionAtomForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSubqueryExpessionAtomForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSubqueryExpessionAtomForUpdate($this);
		    }
		}
	}

	class BitExpressionAtomForUpdateContext extends ExpressionAtomForUpdateContext
	{
		/**
		 * @var ExpressionAtomForUpdateContext|null $left
		 */
		public $left;

		/**
		 * @var ExpressionAtomForUpdateContext|null $right
		 */
		public $right;

		public function __construct(ExpressionAtomForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function bitOperator() : ?BitOperatorContext
	    {
	    	return $this->getTypedRuleContext(BitOperatorContext::class, 0);
	    }

	    /**
	     * @return array<ExpressionAtomForUpdateContext>|ExpressionAtomForUpdateContext|null
	     */
	    public function expressionAtomForUpdate(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionAtomForUpdateContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionAtomForUpdateContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterBitExpressionAtomForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitBitExpressionAtomForUpdate($this);
		    }
		}
	}

	class MathExpressionAtomForUpdateContext extends ExpressionAtomForUpdateContext
	{
		/**
		 * @var ExpressionAtomForUpdateContext|null $left
		 */
		public $left;

		/**
		 * @var ExpressionAtomForUpdateContext|null $right
		 */
		public $right;

		public function __construct(ExpressionAtomForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function mathOperator() : ?MathOperatorContext
	    {
	    	return $this->getTypedRuleContext(MathOperatorContext::class, 0);
	    }

	    /**
	     * @return array<ExpressionAtomForUpdateContext>|ExpressionAtomForUpdateContext|null
	     */
	    public function expressionAtomForUpdate(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionAtomForUpdateContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionAtomForUpdateContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterMathExpressionAtomForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitMathExpressionAtomForUpdate($this);
		    }
		}
	}

	class ConstantExpressionAtomForUpdateContext extends ExpressionAtomForUpdateContext
	{
		public function __construct(ExpressionAtomForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function constant() : ?ConstantContext
	    {
	    	return $this->getTypedRuleContext(ConstantContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterConstantExpressionAtomForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitConstantExpressionAtomForUpdate($this);
		    }
		}
	}

	class CollateExpressionAtomForUpdateContext extends ExpressionAtomForUpdateContext
	{
		public function __construct(ExpressionAtomForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function expressionAtomForUpdate() : ?ExpressionAtomForUpdateContext
	    {
	    	return $this->getTypedRuleContext(ExpressionAtomForUpdateContext::class, 0);
	    }

	    public function COLLATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLLATE, 0);
	    }

	    public function collationName() : ?CollationNameContext
	    {
	    	return $this->getTypedRuleContext(CollationNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCollateExpressionAtomForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCollateExpressionAtomForUpdate($this);
		    }
		}
	}

	class BinaryExpressionAtomForUpdateContext extends ExpressionAtomForUpdateContext
	{
		public function __construct(ExpressionAtomForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function BINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINARY, 0);
	    }

	    public function expressionAtomForUpdate() : ?ExpressionAtomForUpdateContext
	    {
	    	return $this->getTypedRuleContext(ExpressionAtomForUpdateContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterBinaryExpressionAtomForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitBinaryExpressionAtomForUpdate($this);
		    }
		}
	}

	class NestedExpressionAtomForUpdateContext extends ExpressionAtomForUpdateContext
	{
		public function __construct(ExpressionAtomForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<ExpressionForUpdateContext>|ExpressionForUpdateContext|null
	     */
	    public function expressionForUpdate(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionForUpdateContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionForUpdateContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterNestedExpressionAtomForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitNestedExpressionAtomForUpdate($this);
		    }
		}
	}

	class ExistsExpessionAtomForUpdateContext extends ExpressionAtomForUpdateContext
	{
		public function __construct(ExpressionAtomForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function EXISTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXISTS, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterExistsExpessionAtomForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitExistsExpessionAtomForUpdate($this);
		    }
		}
	}

	class FunctionCallExpressionAtomForUpdateContext extends ExpressionAtomForUpdateContext
	{
		public function __construct(ExpressionAtomForUpdateContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function functionCall() : ?FunctionCallContext
	    {
	    	return $this->getTypedRuleContext(FunctionCallContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFunctionCallExpressionAtomForUpdate($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFunctionCallExpressionAtomForUpdate($this);
		    }
		}
	} 

	class ExpressionAtomContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_expressionAtom;
	    }
	 
		public function copyFrom(ParserRuleContext $context) : void
		{
			parent::copyFrom($context);

		}
	}

	class UnaryExpressionAtomContext extends ExpressionAtomContext
	{
		public function __construct(ExpressionAtomContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function unaryOperator() : ?UnaryOperatorContext
	    {
	    	return $this->getTypedRuleContext(UnaryOperatorContext::class, 0);
	    }

	    public function expressionAtom() : ?ExpressionAtomContext
	    {
	    	return $this->getTypedRuleContext(ExpressionAtomContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUnaryExpressionAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUnaryExpressionAtom($this);
		    }
		}
	}

	class CollateExpressionAtomContext extends ExpressionAtomContext
	{
		public function __construct(ExpressionAtomContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function expressionAtom() : ?ExpressionAtomContext
	    {
	    	return $this->getTypedRuleContext(ExpressionAtomContext::class, 0);
	    }

	    public function COLLATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLLATE, 0);
	    }

	    public function collationName() : ?CollationNameContext
	    {
	    	return $this->getTypedRuleContext(CollationNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCollateExpressionAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCollateExpressionAtom($this);
		    }
		}
	}

	class SubqueryExpessionAtomContext extends ExpressionAtomContext
	{
		public function __construct(ExpressionAtomContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterSubqueryExpessionAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitSubqueryExpessionAtom($this);
		    }
		}
	}

	class MysqlVariableExpressionAtomContext extends ExpressionAtomContext
	{
		public function __construct(ExpressionAtomContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function mysqlVariable() : ?MysqlVariableContext
	    {
	    	return $this->getTypedRuleContext(MysqlVariableContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterMysqlVariableExpressionAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitMysqlVariableExpressionAtom($this);
		    }
		}
	}

	class NestedExpressionAtomContext extends ExpressionAtomContext
	{
		public function __construct(ExpressionAtomContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<ExpressionContext>|ExpressionContext|null
	     */
	    public function expression(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterNestedExpressionAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitNestedExpressionAtom($this);
		    }
		}
	}

	class NestedRowExpressionAtomContext extends ExpressionAtomContext
	{
		public function __construct(ExpressionAtomContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function ROW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROW, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    /**
	     * @return array<ExpressionContext>|ExpressionContext|null
	     */
	    public function expression(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionContext::class, $index);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function COMMA(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::COMMA);
	    	}

	        return $this->getToken(MySqlParser::COMMA, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterNestedRowExpressionAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitNestedRowExpressionAtom($this);
		    }
		}
	}

	class MathExpressionAtomContext extends ExpressionAtomContext
	{
		/**
		 * @var ExpressionAtomContext|null $left
		 */
		public $left;

		/**
		 * @var ExpressionAtomContext|null $right
		 */
		public $right;

		public function __construct(ExpressionAtomContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function mathOperator() : ?MathOperatorContext
	    {
	    	return $this->getTypedRuleContext(MathOperatorContext::class, 0);
	    }

	    /**
	     * @return array<ExpressionAtomContext>|ExpressionAtomContext|null
	     */
	    public function expressionAtom(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionAtomContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionAtomContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterMathExpressionAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitMathExpressionAtom($this);
		    }
		}
	}

	class IntervalExpressionAtomContext extends ExpressionAtomContext
	{
		public function __construct(ExpressionAtomContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function INTERVAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTERVAL, 0);
	    }

	    public function expression() : ?ExpressionContext
	    {
	    	return $this->getTypedRuleContext(ExpressionContext::class, 0);
	    }

	    public function intervalType() : ?IntervalTypeContext
	    {
	    	return $this->getTypedRuleContext(IntervalTypeContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIntervalExpressionAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIntervalExpressionAtom($this);
		    }
		}
	}

	class ExistsExpessionAtomContext extends ExpressionAtomContext
	{
		public function __construct(ExpressionAtomContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function EXISTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXISTS, 0);
	    }

	    public function LR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LR_BRACKET, 0);
	    }

	    public function selectStatement() : ?SelectStatementContext
	    {
	    	return $this->getTypedRuleContext(SelectStatementContext::class, 0);
	    }

	    public function RR_BRACKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RR_BRACKET, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterExistsExpessionAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitExistsExpessionAtom($this);
		    }
		}
	}

	class ConstantExpressionAtomContext extends ExpressionAtomContext
	{
		public function __construct(ExpressionAtomContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function constant() : ?ConstantContext
	    {
	    	return $this->getTypedRuleContext(ConstantContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterConstantExpressionAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitConstantExpressionAtom($this);
		    }
		}
	}

	class FunctionCallExpressionAtomContext extends ExpressionAtomContext
	{
		public function __construct(ExpressionAtomContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function functionCall() : ?FunctionCallContext
	    {
	    	return $this->getTypedRuleContext(FunctionCallContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFunctionCallExpressionAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFunctionCallExpressionAtom($this);
		    }
		}
	}

	class BinaryExpressionAtomContext extends ExpressionAtomContext
	{
		public function __construct(ExpressionAtomContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function BINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINARY, 0);
	    }

	    public function expressionAtom() : ?ExpressionAtomContext
	    {
	    	return $this->getTypedRuleContext(ExpressionAtomContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterBinaryExpressionAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitBinaryExpressionAtom($this);
		    }
		}
	}

	class FullColumnNameExpressionAtomContext extends ExpressionAtomContext
	{
		public function __construct(ExpressionAtomContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function fullColumnName() : ?FullColumnNameContext
	    {
	    	return $this->getTypedRuleContext(FullColumnNameContext::class, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFullColumnNameExpressionAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFullColumnNameExpressionAtom($this);
		    }
		}
	}

	class BitExpressionAtomContext extends ExpressionAtomContext
	{
		/**
		 * @var ExpressionAtomContext|null $left
		 */
		public $left;

		/**
		 * @var ExpressionAtomContext|null $right
		 */
		public $right;

		public function __construct(ExpressionAtomContext $context)
		{
		    parent::__construct($context);

		    $this->copyFrom($context);
	    }

	    public function bitOperator() : ?BitOperatorContext
	    {
	    	return $this->getTypedRuleContext(BitOperatorContext::class, 0);
	    }

	    /**
	     * @return array<ExpressionAtomContext>|ExpressionAtomContext|null
	     */
	    public function expressionAtom(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTypedRuleContexts(ExpressionAtomContext::class);
	    	}

	        return $this->getTypedRuleContext(ExpressionAtomContext::class, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterBitExpressionAtom($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitBitExpressionAtom($this);
		    }
		}
	} 

	class UnaryOperatorContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_unaryOperator;
	    }

	    public function EXCLAMATION_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXCLAMATION_SYMBOL, 0);
	    }

	    public function BIT_NOT_OP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIT_NOT_OP, 0);
	    }

	    public function PLUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PLUS, 0);
	    }

	    public function MINUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MINUS, 0);
	    }

	    public function NOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NOT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterUnaryOperator($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitUnaryOperator($this);
		    }
		}
	} 

	class ComparisonOperatorContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_comparisonOperator;
	    }

	    public function EQUAL_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUAL_SYMBOL, 0);
	    }

	    public function GREATER_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GREATER_SYMBOL, 0);
	    }

	    public function LESS_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LESS_SYMBOL, 0);
	    }

	    public function EXCLAMATION_SYMBOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXCLAMATION_SYMBOL, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterComparisonOperator($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitComparisonOperator($this);
		    }
		}
	} 

	class LogicalOperatorContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_logicalOperator;
	    }

	    public function AND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AND, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function BIT_AND_OP(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::BIT_AND_OP);
	    	}

	        return $this->getToken(MySqlParser::BIT_AND_OP, $index);
	    }

	    public function XOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::XOR, 0);
	    }

	    public function OR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OR, 0);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function BIT_OR_OP(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::BIT_OR_OP);
	    	}

	        return $this->getToken(MySqlParser::BIT_OR_OP, $index);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterLogicalOperator($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitLogicalOperator($this);
		    }
		}
	} 

	class BitOperatorContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_bitOperator;
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function LESS_SYMBOL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::LESS_SYMBOL);
	    	}

	        return $this->getToken(MySqlParser::LESS_SYMBOL, $index);
	    }

	    /**
	     * @return array<TerminalNode>|TerminalNode|null
	     */
	    public function GREATER_SYMBOL(?int $index = null)
	    {
	    	if ($index === null) {
	    		return $this->getTokens(MySqlParser::GREATER_SYMBOL);
	    	}

	        return $this->getToken(MySqlParser::GREATER_SYMBOL, $index);
	    }

	    public function BIT_AND_OP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIT_AND_OP, 0);
	    }

	    public function BIT_XOR_OP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIT_XOR_OP, 0);
	    }

	    public function BIT_OR_OP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIT_OR_OP, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterBitOperator($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitBitOperator($this);
		    }
		}
	} 

	class MathOperatorContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_mathOperator;
	    }

	    public function STAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STAR, 0);
	    }

	    public function DIVIDE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DIVIDE, 0);
	    }

	    public function MODULE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MODULE, 0);
	    }

	    public function DIV() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DIV, 0);
	    }

	    public function MOD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MOD, 0);
	    }

	    public function PLUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PLUS, 0);
	    }

	    public function MINUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MINUS, 0);
	    }

	    public function MINUSMINUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MINUSMINUS, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterMathOperator($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitMathOperator($this);
		    }
		}
	} 

	class CharsetNameBaseContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_charsetNameBase;
	    }

	    public function ARMSCII8() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ARMSCII8, 0);
	    }

	    public function ASCII() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASCII, 0);
	    }

	    public function BIG5() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIG5, 0);
	    }

	    public function CP1250() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CP1250, 0);
	    }

	    public function CP1251() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CP1251, 0);
	    }

	    public function CP1256() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CP1256, 0);
	    }

	    public function CP1257() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CP1257, 0);
	    }

	    public function CP850() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CP850, 0);
	    }

	    public function CP852() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CP852, 0);
	    }

	    public function CP866() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CP866, 0);
	    }

	    public function CP932() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CP932, 0);
	    }

	    public function DEC8() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEC8, 0);
	    }

	    public function EUCJPMS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EUCJPMS, 0);
	    }

	    public function EUCKR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EUCKR, 0);
	    }

	    public function GB2312() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GB2312, 0);
	    }

	    public function GBK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GBK, 0);
	    }

	    public function GEOSTD8() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GEOSTD8, 0);
	    }

	    public function GREEK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GREEK, 0);
	    }

	    public function HEBREW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HEBREW, 0);
	    }

	    public function HP8() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HP8, 0);
	    }

	    public function KEYBCS2() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEYBCS2, 0);
	    }

	    public function KOI8R() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KOI8R, 0);
	    }

	    public function KOI8U() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KOI8U, 0);
	    }

	    public function LATIN1() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LATIN1, 0);
	    }

	    public function LATIN2() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LATIN2, 0);
	    }

	    public function LATIN5() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LATIN5, 0);
	    }

	    public function LATIN7() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LATIN7, 0);
	    }

	    public function MACCE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MACCE, 0);
	    }

	    public function MACROMAN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MACROMAN, 0);
	    }

	    public function SJIS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SJIS, 0);
	    }

	    public function SWE7() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SWE7, 0);
	    }

	    public function TIS620() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TIS620, 0);
	    }

	    public function UCS2() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UCS2, 0);
	    }

	    public function UJIS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UJIS, 0);
	    }

	    public function UTF16() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UTF16, 0);
	    }

	    public function UTF16LE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UTF16LE, 0);
	    }

	    public function UTF32() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UTF32, 0);
	    }

	    public function UTF8() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UTF8, 0);
	    }

	    public function UTF8MB3() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UTF8MB3, 0);
	    }

	    public function UTF8MB4() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UTF8MB4, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterCharsetNameBase($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitCharsetNameBase($this);
		    }
		}
	} 

	class TransactionLevelBaseContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_transactionLevelBase;
	    }

	    public function REPEATABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPEATABLE, 0);
	    }

	    public function COMMITTED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMITTED, 0);
	    }

	    public function UNCOMMITTED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNCOMMITTED, 0);
	    }

	    public function SERIALIZABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SERIALIZABLE, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterTransactionLevelBase($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitTransactionLevelBase($this);
		    }
		}
	} 

	class PrivilegesBaseContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_privilegesBase;
	    }

	    public function TABLES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLES, 0);
	    }

	    public function ROUTINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROUTINE, 0);
	    }

	    public function EXECUTE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXECUTE, 0);
	    }

	    public function FILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FILE, 0);
	    }

	    public function PROCESS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROCESS, 0);
	    }

	    public function RELOAD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELOAD, 0);
	    }

	    public function SHUTDOWN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHUTDOWN, 0);
	    }

	    public function SUPER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUPER, 0);
	    }

	    public function PRIVILEGES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PRIVILEGES, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterPrivilegesBase($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitPrivilegesBase($this);
		    }
		}
	} 

	class IntervalTypeBaseContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_intervalTypeBase;
	    }

	    public function QUARTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::QUARTER, 0);
	    }

	    public function MONTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MONTH, 0);
	    }

	    public function DAY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DAY, 0);
	    }

	    public function HOUR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HOUR, 0);
	    }

	    public function MINUTE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MINUTE, 0);
	    }

	    public function WEEK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WEEK, 0);
	    }

	    public function SECOND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SECOND, 0);
	    }

	    public function MICROSECOND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MICROSECOND, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterIntervalTypeBase($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitIntervalTypeBase($this);
		    }
		}
	} 

	class DataTypeBaseContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_dataTypeBase;
	    }

	    public function DATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATE, 0);
	    }

	    public function TIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TIME, 0);
	    }

	    public function TIMESTAMP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TIMESTAMP, 0);
	    }

	    public function DATETIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATETIME, 0);
	    }

	    public function YEAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::YEAR, 0);
	    }

	    public function ENUM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENUM, 0);
	    }

	    public function TEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TEXT, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterDataTypeBase($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitDataTypeBase($this);
		    }
		}
	} 

	class KeywordsCanBeIdContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_keywordsCanBeId;
	    }

	    public function ACCOUNT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ACCOUNT, 0);
	    }

	    public function ACTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ACTION, 0);
	    }

	    public function AFTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AFTER, 0);
	    }

	    public function AGGREGATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AGGREGATE, 0);
	    }

	    public function ALGORITHM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ALGORITHM, 0);
	    }

	    public function ANY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ANY, 0);
	    }

	    public function AT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AT, 0);
	    }

	    public function AUTHORS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AUTHORS, 0);
	    }

	    public function AUTOCOMMIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AUTOCOMMIT, 0);
	    }

	    public function AUTOEXTEND_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AUTOEXTEND_SIZE, 0);
	    }

	    public function AUTO_INCREMENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AUTO_INCREMENT, 0);
	    }

	    public function AVG_ROW_LENGTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AVG_ROW_LENGTH, 0);
	    }

	    public function BEGIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BEGIN, 0);
	    }

	    public function BINLOG() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BINLOG, 0);
	    }

	    public function BIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIT, 0);
	    }

	    public function BLOCK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BLOCK, 0);
	    }

	    public function BOOL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BOOL, 0);
	    }

	    public function BOOLEAN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BOOLEAN, 0);
	    }

	    public function BTREE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BTREE, 0);
	    }

	    public function CACHE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CACHE, 0);
	    }

	    public function CASCADED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CASCADED, 0);
	    }

	    public function CHAIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHAIN, 0);
	    }

	    public function CHANGED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHANGED, 0);
	    }

	    public function CHANNEL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHANNEL, 0);
	    }

	    public function CHECKSUM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHECKSUM, 0);
	    }

	    public function PAGE_CHECKSUM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PAGE_CHECKSUM, 0);
	    }

	    public function CATALOG_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CATALOG_NAME, 0);
	    }

	    public function CIPHER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CIPHER, 0);
	    }

	    public function CLASS_ORIGIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CLASS_ORIGIN, 0);
	    }

	    public function CLIENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CLIENT, 0);
	    }

	    public function CLOSE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CLOSE, 0);
	    }

	    public function COALESCE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COALESCE, 0);
	    }

	    public function CODE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CODE, 0);
	    }

	    public function COLUMNS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMNS, 0);
	    }

	    public function COLUMN_FORMAT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMN_FORMAT, 0);
	    }

	    public function COLUMN_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLUMN_NAME, 0);
	    }

	    public function COMMENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMENT, 0);
	    }

	    public function COMMIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMMIT, 0);
	    }

	    public function COMPACT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMPACT, 0);
	    }

	    public function COMPLETION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMPLETION, 0);
	    }

	    public function COMPRESSED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMPRESSED, 0);
	    }

	    public function COMPRESSION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMPRESSION, 0);
	    }

	    public function CONCURRENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONCURRENT, 0);
	    }

	    public function CONNECTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONNECTION, 0);
	    }

	    public function CONSISTENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSISTENT, 0);
	    }

	    public function CONSTRAINT_CATALOG() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT_CATALOG, 0);
	    }

	    public function CONSTRAINT_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT_NAME, 0);
	    }

	    public function CONSTRAINT_SCHEMA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONSTRAINT_SCHEMA, 0);
	    }

	    public function CONTAINS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONTAINS, 0);
	    }

	    public function CONTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONTEXT, 0);
	    }

	    public function CONTRIBUTORS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONTRIBUTORS, 0);
	    }

	    public function COPY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COPY, 0);
	    }

	    public function CPU() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CPU, 0);
	    }

	    public function CURRENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURRENT, 0);
	    }

	    public function CURSOR_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CURSOR_NAME, 0);
	    }

	    public function DATA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATA, 0);
	    }

	    public function DATAFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATAFILE, 0);
	    }

	    public function DEALLOCATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEALLOCATE, 0);
	    }

	    public function DEFAULT_AUTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFAULT_AUTH, 0);
	    }

	    public function DEFINER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEFINER, 0);
	    }

	    public function DELAY_KEY_WRITE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DELAY_KEY_WRITE, 0);
	    }

	    public function DES_KEY_FILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DES_KEY_FILE, 0);
	    }

	    public function DIAGNOSTICS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DIAGNOSTICS, 0);
	    }

	    public function DIRECTORY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DIRECTORY, 0);
	    }

	    public function DISABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISABLE, 0);
	    }

	    public function DISCARD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISCARD, 0);
	    }

	    public function DISK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISK, 0);
	    }

	    public function DO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DO, 0);
	    }

	    public function DUMPFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DUMPFILE, 0);
	    }

	    public function DUPLICATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DUPLICATE, 0);
	    }

	    public function DYNAMIC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DYNAMIC, 0);
	    }

	    public function ENABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENABLE, 0);
	    }

	    public function ENCRYPTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENCRYPTION, 0);
	    }

	    public function END() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::END, 0);
	    }

	    public function ENDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENDS, 0);
	    }

	    public function ENGINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENGINE, 0);
	    }

	    public function ENGINES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENGINES, 0);
	    }

	    public function ERROR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ERROR, 0);
	    }

	    public function ERRORS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ERRORS, 0);
	    }

	    public function ESCAPE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ESCAPE, 0);
	    }

	    public function EVEN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EVEN, 0);
	    }

	    public function EVENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EVENT, 0);
	    }

	    public function EVENTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EVENTS, 0);
	    }

	    public function EVERY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EVERY, 0);
	    }

	    public function EXCHANGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXCHANGE, 0);
	    }

	    public function EXCLUSIVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXCLUSIVE, 0);
	    }

	    public function EXPIRE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXPIRE, 0);
	    }

	    public function EXPORT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXPORT, 0);
	    }

	    public function EXTENDED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXTENDED, 0);
	    }

	    public function EXTENT_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXTENT_SIZE, 0);
	    }

	    public function FAST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FAST, 0);
	    }

	    public function FAULTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FAULTS, 0);
	    }

	    public function FIELDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIELDS, 0);
	    }

	    public function FILE_BLOCK_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FILE_BLOCK_SIZE, 0);
	    }

	    public function FILTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FILTER, 0);
	    }

	    public function FIRST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIRST, 0);
	    }

	    public function FIXED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIXED, 0);
	    }

	    public function FLUSH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FLUSH, 0);
	    }

	    public function FOLLOWS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOLLOWS, 0);
	    }

	    public function FOUND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOUND, 0);
	    }

	    public function FULL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FULL, 0);
	    }

	    public function FUNCTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FUNCTION, 0);
	    }

	    public function GENERAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GENERAL, 0);
	    }

	    public function GLOBAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GLOBAL, 0);
	    }

	    public function GRANTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GRANTS, 0);
	    }

	    public function GROUP_REPLICATION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GROUP_REPLICATION, 0);
	    }

	    public function HANDLER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HANDLER, 0);
	    }

	    public function HASH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HASH, 0);
	    }

	    public function HELP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HELP, 0);
	    }

	    public function HOST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HOST, 0);
	    }

	    public function HOSTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HOSTS, 0);
	    }

	    public function IDENTIFIED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IDENTIFIED, 0);
	    }

	    public function IGNORE_SERVER_IDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IGNORE_SERVER_IDS, 0);
	    }

	    public function IMPORT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IMPORT, 0);
	    }

	    public function INDEXES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INDEXES, 0);
	    }

	    public function INITIAL_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INITIAL_SIZE, 0);
	    }

	    public function INPLACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INPLACE, 0);
	    }

	    public function INSERT_METHOD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INSERT_METHOD, 0);
	    }

	    public function INSTALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INSTALL, 0);
	    }

	    public function INSTANCE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INSTANCE, 0);
	    }

	    public function INTERNAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTERNAL, 0);
	    }

	    public function INVOKER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INVOKER, 0);
	    }

	    public function IO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IO, 0);
	    }

	    public function IO_THREAD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IO_THREAD, 0);
	    }

	    public function IPC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IPC, 0);
	    }

	    public function ISOLATION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ISOLATION, 0);
	    }

	    public function ISSUER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ISSUER, 0);
	    }

	    public function JSON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::JSON, 0);
	    }

	    public function KEY_BLOCK_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::KEY_BLOCK_SIZE, 0);
	    }

	    public function LANGUAGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LANGUAGE, 0);
	    }

	    public function LAST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LAST, 0);
	    }

	    public function LEAVES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LEAVES, 0);
	    }

	    public function LESS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LESS, 0);
	    }

	    public function LEVEL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LEVEL, 0);
	    }

	    public function LIST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LIST, 0);
	    }

	    public function LOCAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCAL, 0);
	    }

	    public function LOGFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOGFILE, 0);
	    }

	    public function LOGS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOGS, 0);
	    }

	    public function MASTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER, 0);
	    }

	    public function MASTER_AUTO_POSITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_AUTO_POSITION, 0);
	    }

	    public function MASTER_CONNECT_RETRY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_CONNECT_RETRY, 0);
	    }

	    public function MASTER_DELAY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_DELAY, 0);
	    }

	    public function MASTER_HEARTBEAT_PERIOD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_HEARTBEAT_PERIOD, 0);
	    }

	    public function MASTER_HOST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_HOST, 0);
	    }

	    public function MASTER_LOG_FILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_LOG_FILE, 0);
	    }

	    public function MASTER_LOG_POS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_LOG_POS, 0);
	    }

	    public function MASTER_PASSWORD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_PASSWORD, 0);
	    }

	    public function MASTER_PORT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_PORT, 0);
	    }

	    public function MASTER_RETRY_COUNT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_RETRY_COUNT, 0);
	    }

	    public function MASTER_SSL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL, 0);
	    }

	    public function MASTER_SSL_CA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL_CA, 0);
	    }

	    public function MASTER_SSL_CAPATH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL_CAPATH, 0);
	    }

	    public function MASTER_SSL_CERT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL_CERT, 0);
	    }

	    public function MASTER_SSL_CIPHER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL_CIPHER, 0);
	    }

	    public function MASTER_SSL_CRL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL_CRL, 0);
	    }

	    public function MASTER_SSL_CRLPATH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL_CRLPATH, 0);
	    }

	    public function MASTER_SSL_KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_SSL_KEY, 0);
	    }

	    public function MASTER_TLS_VERSION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_TLS_VERSION, 0);
	    }

	    public function MASTER_USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_USER, 0);
	    }

	    public function MAX_CONNECTIONS_PER_HOUR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAX_CONNECTIONS_PER_HOUR, 0);
	    }

	    public function MAX_QUERIES_PER_HOUR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAX_QUERIES_PER_HOUR, 0);
	    }

	    public function MAX_ROWS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAX_ROWS, 0);
	    }

	    public function MAX_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAX_SIZE, 0);
	    }

	    public function MAX_UPDATES_PER_HOUR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAX_UPDATES_PER_HOUR, 0);
	    }

	    public function MAX_USER_CONNECTIONS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAX_USER_CONNECTIONS, 0);
	    }

	    public function MEDIUM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MEDIUM, 0);
	    }

	    public function MEMORY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MEMORY, 0);
	    }

	    public function MERGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MERGE, 0);
	    }

	    public function MESSAGE_TEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MESSAGE_TEXT, 0);
	    }

	    public function MID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MID, 0);
	    }

	    public function MIGRATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MIGRATE, 0);
	    }

	    public function MIN_ROWS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MIN_ROWS, 0);
	    }

	    public function MODE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MODE, 0);
	    }

	    public function MODIFY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MODIFY, 0);
	    }

	    public function MUTEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MUTEX, 0);
	    }

	    public function MYSQL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MYSQL, 0);
	    }

	    public function MYSQL_ERRNO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MYSQL_ERRNO, 0);
	    }

	    public function NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NAME, 0);
	    }

	    public function NAMES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NAMES, 0);
	    }

	    public function NCHAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NCHAR, 0);
	    }

	    public function NEVER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NEVER, 0);
	    }

	    public function NEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NEXT, 0);
	    }

	    public function NO() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NO, 0);
	    }

	    public function NODEGROUP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NODEGROUP, 0);
	    }

	    public function NONE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NONE, 0);
	    }

	    public function NUMBER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NUMBER, 0);
	    }

	    public function OFFLINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OFFLINE, 0);
	    }

	    public function OFFSET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OFFSET, 0);
	    }

	    public function OJ() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OJ, 0);
	    }

	    public function OLD_PASSWORD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OLD_PASSWORD, 0);
	    }

	    public function ONE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONE, 0);
	    }

	    public function ONLINE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONLINE, 0);
	    }

	    public function ONLY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ONLY, 0);
	    }

	    public function OPEN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPEN, 0);
	    }

	    public function OPTIMIZER_COSTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPTIMIZER_COSTS, 0);
	    }

	    public function OPTIONS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OPTIONS, 0);
	    }

	    public function OWNER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OWNER, 0);
	    }

	    public function PACK_KEYS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PACK_KEYS, 0);
	    }

	    public function PAGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PAGE, 0);
	    }

	    public function PARSER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARSER, 0);
	    }

	    public function PARTIAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTIAL, 0);
	    }

	    public function PARTITIONING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITIONING, 0);
	    }

	    public function PARTITIONS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PARTITIONS, 0);
	    }

	    public function PASSWORD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PASSWORD, 0);
	    }

	    public function PHASE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PHASE, 0);
	    }

	    public function PLUGINS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PLUGINS, 0);
	    }

	    public function PLUGIN_DIR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PLUGIN_DIR, 0);
	    }

	    public function PLUGIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PLUGIN, 0);
	    }

	    public function PORT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PORT, 0);
	    }

	    public function PRECEDES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PRECEDES, 0);
	    }

	    public function PREPARE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PREPARE, 0);
	    }

	    public function PRESERVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PRESERVE, 0);
	    }

	    public function PREV() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PREV, 0);
	    }

	    public function PROCESSLIST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROCESSLIST, 0);
	    }

	    public function PROFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROFILE, 0);
	    }

	    public function PROFILES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROFILES, 0);
	    }

	    public function PROXY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PROXY, 0);
	    }

	    public function QUERY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::QUERY, 0);
	    }

	    public function QUICK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::QUICK, 0);
	    }

	    public function REBUILD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REBUILD, 0);
	    }

	    public function RECOVER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RECOVER, 0);
	    }

	    public function REDO_BUFFER_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REDO_BUFFER_SIZE, 0);
	    }

	    public function REDUNDANT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REDUNDANT, 0);
	    }

	    public function RELAY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELAY, 0);
	    }

	    public function RELAYLOG() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELAYLOG, 0);
	    }

	    public function RELAY_LOG_FILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELAY_LOG_FILE, 0);
	    }

	    public function RELAY_LOG_POS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELAY_LOG_POS, 0);
	    }

	    public function REMOVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REMOVE, 0);
	    }

	    public function REORGANIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REORGANIZE, 0);
	    }

	    public function REPAIR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPAIR, 0);
	    }

	    public function REPLICATE_DO_DB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATE_DO_DB, 0);
	    }

	    public function REPLICATE_DO_TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATE_DO_TABLE, 0);
	    }

	    public function REPLICATE_IGNORE_DB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATE_IGNORE_DB, 0);
	    }

	    public function REPLICATE_IGNORE_TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATE_IGNORE_TABLE, 0);
	    }

	    public function REPLICATE_REWRITE_DB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATE_REWRITE_DB, 0);
	    }

	    public function REPLICATE_WILD_DO_TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATE_WILD_DO_TABLE, 0);
	    }

	    public function REPLICATE_WILD_IGNORE_TABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATE_WILD_IGNORE_TABLE, 0);
	    }

	    public function REPLICATION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REPLICATION, 0);
	    }

	    public function RESET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RESET, 0);
	    }

	    public function RESUME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RESUME, 0);
	    }

	    public function RETURNED_SQLSTATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RETURNED_SQLSTATE, 0);
	    }

	    public function RETURNS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RETURNS, 0);
	    }

	    public function ROLLBACK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROLLBACK, 0);
	    }

	    public function ROLLUP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROLLUP, 0);
	    }

	    public function ROTATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROTATE, 0);
	    }

	    public function ROW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROW, 0);
	    }

	    public function ROWS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROWS, 0);
	    }

	    public function ROW_FORMAT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROW_FORMAT, 0);
	    }

	    public function SAVEPOINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SAVEPOINT, 0);
	    }

	    public function SCHEDULE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SCHEDULE, 0);
	    }

	    public function SCHEMA_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SCHEMA_NAME, 0);
	    }

	    public function SECURITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SECURITY, 0);
	    }

	    public function SERIAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SERIAL, 0);
	    }

	    public function SERVER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SERVER, 0);
	    }

	    public function SESSION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SESSION, 0);
	    }

	    public function SHARE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHARE, 0);
	    }

	    public function SHARED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHARED, 0);
	    }

	    public function SIGNED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SIGNED, 0);
	    }

	    public function SIMPLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SIMPLE, 0);
	    }

	    public function SLAVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SLAVE, 0);
	    }

	    public function SLOW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SLOW, 0);
	    }

	    public function SNAPSHOT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SNAPSHOT, 0);
	    }

	    public function SOCKET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SOCKET, 0);
	    }

	    public function SOME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SOME, 0);
	    }

	    public function SONAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SONAME, 0);
	    }

	    public function SOUNDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SOUNDS, 0);
	    }

	    public function SOURCE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SOURCE, 0);
	    }

	    public function SQL_AFTER_GTIDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_AFTER_GTIDS, 0);
	    }

	    public function SQL_AFTER_MTS_GAPS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_AFTER_MTS_GAPS, 0);
	    }

	    public function SQL_BEFORE_GTIDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_BEFORE_GTIDS, 0);
	    }

	    public function SQL_BUFFER_RESULT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_BUFFER_RESULT, 0);
	    }

	    public function SQL_CACHE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_CACHE, 0);
	    }

	    public function SQL_NO_CACHE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_NO_CACHE, 0);
	    }

	    public function SQL_THREAD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_THREAD, 0);
	    }

	    public function STACKED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STACKED, 0);
	    }

	    public function START() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::START, 0);
	    }

	    public function STARTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STARTS, 0);
	    }

	    public function STATS_AUTO_RECALC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STATS_AUTO_RECALC, 0);
	    }

	    public function STATS_PERSISTENT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STATS_PERSISTENT, 0);
	    }

	    public function STATS_SAMPLE_PAGES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STATS_SAMPLE_PAGES, 0);
	    }

	    public function STATUS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STATUS, 0);
	    }

	    public function STOP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STOP, 0);
	    }

	    public function STORAGE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STORAGE, 0);
	    }

	    public function STRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRING, 0);
	    }

	    public function SUBCLASS_ORIGIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBCLASS_ORIGIN, 0);
	    }

	    public function SUBJECT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBJECT, 0);
	    }

	    public function SUBPARTITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBPARTITION, 0);
	    }

	    public function SUBPARTITIONS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBPARTITIONS, 0);
	    }

	    public function SUSPEND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUSPEND, 0);
	    }

	    public function SWAPS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SWAPS, 0);
	    }

	    public function SWITCHES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SWITCHES, 0);
	    }

	    public function TABLE_NAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLE_NAME, 0);
	    }

	    public function TABLESPACE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TABLESPACE, 0);
	    }

	    public function TEMPORARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TEMPORARY, 0);
	    }

	    public function TEMPTABLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TEMPTABLE, 0);
	    }

	    public function THAN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::THAN, 0);
	    }

	    public function TRADITIONAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRADITIONAL, 0);
	    }

	    public function TRANSACTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRANSACTION, 0);
	    }

	    public function TRIGGERS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRIGGERS, 0);
	    }

	    public function TRUNCATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TRUNCATE, 0);
	    }

	    public function UNDEFINED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNDEFINED, 0);
	    }

	    public function UNDOFILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNDOFILE, 0);
	    }

	    public function UNDO_BUFFER_SIZE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNDO_BUFFER_SIZE, 0);
	    }

	    public function UNINSTALL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNINSTALL, 0);
	    }

	    public function UNKNOWN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNKNOWN, 0);
	    }

	    public function UNTIL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNTIL, 0);
	    }

	    public function UPGRADE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UPGRADE, 0);
	    }

	    public function USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USER, 0);
	    }

	    public function USE_FRM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USE_FRM, 0);
	    }

	    public function USER_RESOURCES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::USER_RESOURCES, 0);
	    }

	    public function VALIDATION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALIDATION, 0);
	    }

	    public function VALUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALUE, 0);
	    }

	    public function VARIABLES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VARIABLES, 0);
	    }

	    public function VIEW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VIEW, 0);
	    }

	    public function WAIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WAIT, 0);
	    }

	    public function WARNINGS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WARNINGS, 0);
	    }

	    public function WITHOUT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITHOUT, 0);
	    }

	    public function WORK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WORK, 0);
	    }

	    public function WRAPPER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WRAPPER, 0);
	    }

	    public function X509() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::X509, 0);
	    }

	    public function XA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::XA, 0);
	    }

	    public function XML() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::XML, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterKeywordsCanBeId($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitKeywordsCanBeId($this);
		    }
		}
	} 

	class FunctionNameBaseContext extends ParserRuleContext
	{
		public function __construct(?ParserRuleContext $parent, ?int $invokingState = null)
		{
			parent::__construct($parent, $invokingState);
		}

		public function getRuleIndex() : int
		{
		    return MySqlParser::RULE_functionNameBase;
	    }

	    public function ABS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ABS, 0);
	    }

	    public function ACOS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ACOS, 0);
	    }

	    public function ADDDATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADDDATE, 0);
	    }

	    public function ADDTIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ADDTIME, 0);
	    }

	    public function AES_DECRYPT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AES_DECRYPT, 0);
	    }

	    public function AES_ENCRYPT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AES_ENCRYPT, 0);
	    }

	    public function AREA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::AREA, 0);
	    }

	    public function ASBINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASBINARY, 0);
	    }

	    public function ASIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASIN, 0);
	    }

	    public function ASTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASTEXT, 0);
	    }

	    public function ASWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASWKB, 0);
	    }

	    public function ASWKT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASWKT, 0);
	    }

	    public function ASYMMETRIC_DECRYPT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASYMMETRIC_DECRYPT, 0);
	    }

	    public function ASYMMETRIC_DERIVE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASYMMETRIC_DERIVE, 0);
	    }

	    public function ASYMMETRIC_ENCRYPT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASYMMETRIC_ENCRYPT, 0);
	    }

	    public function ASYMMETRIC_SIGN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASYMMETRIC_SIGN, 0);
	    }

	    public function ASYMMETRIC_VERIFY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ASYMMETRIC_VERIFY, 0);
	    }

	    public function ATAN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ATAN, 0);
	    }

	    public function ATAN2() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ATAN2, 0);
	    }

	    public function BENCHMARK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BENCHMARK, 0);
	    }

	    public function BIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIN, 0);
	    }

	    public function BIT_COUNT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIT_COUNT, 0);
	    }

	    public function BIT_LENGTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BIT_LENGTH, 0);
	    }

	    public function BUFFER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::BUFFER, 0);
	    }

	    public function CEIL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CEIL, 0);
	    }

	    public function CEILING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CEILING, 0);
	    }

	    public function CENTROID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CENTROID, 0);
	    }

	    public function CHARACTER_LENGTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARACTER_LENGTH, 0);
	    }

	    public function CHARSET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHARSET, 0);
	    }

	    public function CHAR_LENGTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CHAR_LENGTH, 0);
	    }

	    public function COERCIBILITY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COERCIBILITY, 0);
	    }

	    public function COLLATION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COLLATION, 0);
	    }

	    public function COMPRESS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COMPRESS, 0);
	    }

	    public function CONCAT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONCAT, 0);
	    }

	    public function CONCAT_WS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONCAT_WS, 0);
	    }

	    public function CONNECTION_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONNECTION_ID, 0);
	    }

	    public function CONV() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONV, 0);
	    }

	    public function CONVERT_TZ() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CONVERT_TZ, 0);
	    }

	    public function COS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COS, 0);
	    }

	    public function COT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COT, 0);
	    }

	    public function COUNT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::COUNT, 0);
	    }

	    public function CRC32() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CRC32, 0);
	    }

	    public function CREATE_ASYMMETRIC_PRIV_KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE_ASYMMETRIC_PRIV_KEY, 0);
	    }

	    public function CREATE_ASYMMETRIC_PUB_KEY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE_ASYMMETRIC_PUB_KEY, 0);
	    }

	    public function CREATE_DH_PARAMETERS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE_DH_PARAMETERS, 0);
	    }

	    public function CREATE_DIGEST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CREATE_DIGEST, 0);
	    }

	    public function CROSSES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::CROSSES, 0);
	    }

	    public function DATABASE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATABASE, 0);
	    }

	    public function DATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATE, 0);
	    }

	    public function DATEDIFF() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATEDIFF, 0);
	    }

	    public function DATE_FORMAT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DATE_FORMAT, 0);
	    }

	    public function DAY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DAY, 0);
	    }

	    public function DAYNAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DAYNAME, 0);
	    }

	    public function DAYOFMONTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DAYOFMONTH, 0);
	    }

	    public function DAYOFWEEK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DAYOFWEEK, 0);
	    }

	    public function DAYOFYEAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DAYOFYEAR, 0);
	    }

	    public function DECODE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DECODE, 0);
	    }

	    public function DEGREES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DEGREES, 0);
	    }

	    public function DES_DECRYPT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DES_DECRYPT, 0);
	    }

	    public function DES_ENCRYPT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DES_ENCRYPT, 0);
	    }

	    public function DIMENSION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DIMENSION, 0);
	    }

	    public function DISJOINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::DISJOINT, 0);
	    }

	    public function ELT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ELT, 0);
	    }

	    public function ENCODE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENCODE, 0);
	    }

	    public function ENCRYPT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENCRYPT, 0);
	    }

	    public function ENDPOINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENDPOINT, 0);
	    }

	    public function ENVELOPE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ENVELOPE, 0);
	    }

	    public function EQUALS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EQUALS, 0);
	    }

	    public function EXP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXP, 0);
	    }

	    public function EXPORT_SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXPORT_SET, 0);
	    }

	    public function EXTERIORRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXTERIORRING, 0);
	    }

	    public function EXTRACTVALUE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::EXTRACTVALUE, 0);
	    }

	    public function FIELD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIELD, 0);
	    }

	    public function FIND_IN_SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FIND_IN_SET, 0);
	    }

	    public function FLOOR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FLOOR, 0);
	    }

	    public function FORMAT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FORMAT, 0);
	    }

	    public function FOUND_ROWS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FOUND_ROWS, 0);
	    }

	    public function FROM_BASE64() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM_BASE64, 0);
	    }

	    public function FROM_DAYS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM_DAYS, 0);
	    }

	    public function FROM_UNIXTIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::FROM_UNIXTIME, 0);
	    }

	    public function GEOMCOLLFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GEOMCOLLFROMTEXT, 0);
	    }

	    public function GEOMCOLLFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GEOMCOLLFROMWKB, 0);
	    }

	    public function GEOMETRYCOLLECTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GEOMETRYCOLLECTION, 0);
	    }

	    public function GEOMETRYCOLLECTIONFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GEOMETRYCOLLECTIONFROMTEXT, 0);
	    }

	    public function GEOMETRYCOLLECTIONFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GEOMETRYCOLLECTIONFROMWKB, 0);
	    }

	    public function GEOMETRYFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GEOMETRYFROMTEXT, 0);
	    }

	    public function GEOMETRYFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GEOMETRYFROMWKB, 0);
	    }

	    public function GEOMETRYN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GEOMETRYN, 0);
	    }

	    public function GEOMETRYTYPE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GEOMETRYTYPE, 0);
	    }

	    public function GEOMFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GEOMFROMTEXT, 0);
	    }

	    public function GEOMFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GEOMFROMWKB, 0);
	    }

	    public function GET_FORMAT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GET_FORMAT, 0);
	    }

	    public function GET_LOCK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GET_LOCK, 0);
	    }

	    public function GLENGTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GLENGTH, 0);
	    }

	    public function GREATEST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GREATEST, 0);
	    }

	    public function GTID_SUBSET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GTID_SUBSET, 0);
	    }

	    public function GTID_SUBTRACT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::GTID_SUBTRACT, 0);
	    }

	    public function HEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HEX, 0);
	    }

	    public function HOUR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::HOUR, 0);
	    }

	    public function IFNULL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IFNULL, 0);
	    }

	    public function INET6_ATON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INET6_ATON, 0);
	    }

	    public function INET6_NTOA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INET6_NTOA, 0);
	    }

	    public function INET_ATON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INET_ATON, 0);
	    }

	    public function INET_NTOA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INET_NTOA, 0);
	    }

	    public function INSTR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INSTR, 0);
	    }

	    public function INTERIORRINGN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTERIORRINGN, 0);
	    }

	    public function INTERSECTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INTERSECTS, 0);
	    }

	    public function INVISIBLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::INVISIBLE, 0);
	    }

	    public function ISCLOSED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ISCLOSED, 0);
	    }

	    public function ISEMPTY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ISEMPTY, 0);
	    }

	    public function ISNULL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ISNULL, 0);
	    }

	    public function ISSIMPLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ISSIMPLE, 0);
	    }

	    public function IS_FREE_LOCK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IS_FREE_LOCK, 0);
	    }

	    public function IS_IPV4() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IS_IPV4, 0);
	    }

	    public function IS_IPV4_COMPAT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IS_IPV4_COMPAT, 0);
	    }

	    public function IS_IPV4_MAPPED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IS_IPV4_MAPPED, 0);
	    }

	    public function IS_IPV6() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IS_IPV6, 0);
	    }

	    public function IS_USED_LOCK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::IS_USED_LOCK, 0);
	    }

	    public function LAST_INSERT_ID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LAST_INSERT_ID, 0);
	    }

	    public function LCASE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LCASE, 0);
	    }

	    public function LEAST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LEAST, 0);
	    }

	    public function LEFT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LEFT, 0);
	    }

	    public function LENGTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LENGTH, 0);
	    }

	    public function LINEFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LINEFROMTEXT, 0);
	    }

	    public function LINEFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LINEFROMWKB, 0);
	    }

	    public function LINESTRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LINESTRING, 0);
	    }

	    public function LINESTRINGFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LINESTRINGFROMTEXT, 0);
	    }

	    public function LINESTRINGFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LINESTRINGFROMWKB, 0);
	    }

	    public function LN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LN, 0);
	    }

	    public function LOAD_FILE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOAD_FILE, 0);
	    }

	    public function LOCATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOCATE, 0);
	    }

	    public function LOG() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOG, 0);
	    }

	    public function LOG10() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOG10, 0);
	    }

	    public function LOG2() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOG2, 0);
	    }

	    public function LOWER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LOWER, 0);
	    }

	    public function LPAD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LPAD, 0);
	    }

	    public function LTRIM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::LTRIM, 0);
	    }

	    public function MAKEDATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAKEDATE, 0);
	    }

	    public function MAKETIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAKETIME, 0);
	    }

	    public function MAKE_SET() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MAKE_SET, 0);
	    }

	    public function MASTER_POS_WAIT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MASTER_POS_WAIT, 0);
	    }

	    public function MBRCONTAINS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MBRCONTAINS, 0);
	    }

	    public function MBRDISJOINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MBRDISJOINT, 0);
	    }

	    public function MBREQUAL() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MBREQUAL, 0);
	    }

	    public function MBRINTERSECTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MBRINTERSECTS, 0);
	    }

	    public function MBROVERLAPS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MBROVERLAPS, 0);
	    }

	    public function MBRTOUCHES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MBRTOUCHES, 0);
	    }

	    public function MBRWITHIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MBRWITHIN, 0);
	    }

	    public function MD5() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MD5, 0);
	    }

	    public function MICROSECOND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MICROSECOND, 0);
	    }

	    public function MINUTE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MINUTE, 0);
	    }

	    public function MLINEFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MLINEFROMTEXT, 0);
	    }

	    public function MLINEFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MLINEFROMWKB, 0);
	    }

	    public function MONTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MONTH, 0);
	    }

	    public function MONTHNAME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MONTHNAME, 0);
	    }

	    public function MPOINTFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MPOINTFROMTEXT, 0);
	    }

	    public function MPOINTFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MPOINTFROMWKB, 0);
	    }

	    public function MPOLYFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MPOLYFROMTEXT, 0);
	    }

	    public function MPOLYFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MPOLYFROMWKB, 0);
	    }

	    public function MULTILINESTRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MULTILINESTRING, 0);
	    }

	    public function MULTILINESTRINGFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MULTILINESTRINGFROMTEXT, 0);
	    }

	    public function MULTILINESTRINGFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MULTILINESTRINGFROMWKB, 0);
	    }

	    public function MULTIPOINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MULTIPOINT, 0);
	    }

	    public function MULTIPOINTFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MULTIPOINTFROMTEXT, 0);
	    }

	    public function MULTIPOINTFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MULTIPOINTFROMWKB, 0);
	    }

	    public function MULTIPOLYGON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MULTIPOLYGON, 0);
	    }

	    public function MULTIPOLYGONFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MULTIPOLYGONFROMTEXT, 0);
	    }

	    public function MULTIPOLYGONFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::MULTIPOLYGONFROMWKB, 0);
	    }

	    public function NAME_CONST() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NAME_CONST, 0);
	    }

	    public function NULLIF() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NULLIF, 0);
	    }

	    public function NUMGEOMETRIES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NUMGEOMETRIES, 0);
	    }

	    public function NUMINTERIORRINGS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NUMINTERIORRINGS, 0);
	    }

	    public function NUMPOINTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::NUMPOINTS, 0);
	    }

	    public function OCT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OCT, 0);
	    }

	    public function OCTET_LENGTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OCTET_LENGTH, 0);
	    }

	    public function ORD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ORD, 0);
	    }

	    public function OVERLAPS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::OVERLAPS, 0);
	    }

	    public function PERIOD_ADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PERIOD_ADD, 0);
	    }

	    public function PERIOD_DIFF() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PERIOD_DIFF, 0);
	    }

	    public function PI() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::PI, 0);
	    }

	    public function POINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::POINT, 0);
	    }

	    public function POINTFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::POINTFROMTEXT, 0);
	    }

	    public function POINTFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::POINTFROMWKB, 0);
	    }

	    public function POINTN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::POINTN, 0);
	    }

	    public function POLYFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::POLYFROMTEXT, 0);
	    }

	    public function POLYFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::POLYFROMWKB, 0);
	    }

	    public function POLYGON() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::POLYGON, 0);
	    }

	    public function POLYGONFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::POLYGONFROMTEXT, 0);
	    }

	    public function POLYGONFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::POLYGONFROMWKB, 0);
	    }

	    public function POSITION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::POSITION, 0);
	    }

	    public function POW() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::POW, 0);
	    }

	    public function POWER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::POWER, 0);
	    }

	    public function QUARTER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::QUARTER, 0);
	    }

	    public function QUOTE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::QUOTE, 0);
	    }

	    public function RADIANS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RADIANS, 0);
	    }

	    public function RAND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RAND, 0);
	    }

	    public function RANDOM_BYTES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RANDOM_BYTES, 0);
	    }

	    public function RELEASE_LOCK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RELEASE_LOCK, 0);
	    }

	    public function REVERSE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::REVERSE, 0);
	    }

	    public function RIGHT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RIGHT, 0);
	    }

	    public function ROUND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROUND, 0);
	    }

	    public function ROW_COUNT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ROW_COUNT, 0);
	    }

	    public function RPAD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RPAD, 0);
	    }

	    public function RTRIM() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::RTRIM, 0);
	    }

	    public function SECOND() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SECOND, 0);
	    }

	    public function SEC_TO_TIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SEC_TO_TIME, 0);
	    }

	    public function SESSION_USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SESSION_USER, 0);
	    }

	    public function SESSION_VARIABLES_ADMIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SESSION_VARIABLES_ADMIN, 0);
	    }

	    public function SHA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHA, 0);
	    }

	    public function SHA1() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHA1, 0);
	    }

	    public function SHA2() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SHA2, 0);
	    }

	    public function SIGN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SIGN, 0);
	    }

	    public function SIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SIN, 0);
	    }

	    public function SLEEP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SLEEP, 0);
	    }

	    public function SOUNDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SOUNDEX, 0);
	    }

	    public function SQL_THREAD_WAIT_AFTER_GTIDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQL_THREAD_WAIT_AFTER_GTIDS, 0);
	    }

	    public function SQRT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SQRT, 0);
	    }

	    public function SRID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SRID, 0);
	    }

	    public function STARTPOINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STARTPOINT, 0);
	    }

	    public function STRCMP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STRCMP, 0);
	    }

	    public function STR_TO_DATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::STR_TO_DATE, 0);
	    }

	    public function ST_AREA() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_AREA, 0);
	    }

	    public function ST_ASBINARY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_ASBINARY, 0);
	    }

	    public function ST_ASTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_ASTEXT, 0);
	    }

	    public function ST_ASWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_ASWKB, 0);
	    }

	    public function ST_ASWKT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_ASWKT, 0);
	    }

	    public function ST_BUFFER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_BUFFER, 0);
	    }

	    public function ST_CENTROID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_CENTROID, 0);
	    }

	    public function ST_CONTAINS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_CONTAINS, 0);
	    }

	    public function ST_CROSSES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_CROSSES, 0);
	    }

	    public function ST_DIFFERENCE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_DIFFERENCE, 0);
	    }

	    public function ST_DIMENSION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_DIMENSION, 0);
	    }

	    public function ST_DISJOINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_DISJOINT, 0);
	    }

	    public function ST_DISTANCE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_DISTANCE, 0);
	    }

	    public function ST_ENDPOINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_ENDPOINT, 0);
	    }

	    public function ST_ENVELOPE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_ENVELOPE, 0);
	    }

	    public function ST_EQUALS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_EQUALS, 0);
	    }

	    public function ST_EXTERIORRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_EXTERIORRING, 0);
	    }

	    public function ST_GEOMCOLLFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_GEOMCOLLFROMTEXT, 0);
	    }

	    public function ST_GEOMCOLLFROMTXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_GEOMCOLLFROMTXT, 0);
	    }

	    public function ST_GEOMCOLLFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_GEOMCOLLFROMWKB, 0);
	    }

	    public function ST_GEOMETRYCOLLECTIONFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_GEOMETRYCOLLECTIONFROMTEXT, 0);
	    }

	    public function ST_GEOMETRYCOLLECTIONFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_GEOMETRYCOLLECTIONFROMWKB, 0);
	    }

	    public function ST_GEOMETRYFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_GEOMETRYFROMTEXT, 0);
	    }

	    public function ST_GEOMETRYFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_GEOMETRYFROMWKB, 0);
	    }

	    public function ST_GEOMETRYN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_GEOMETRYN, 0);
	    }

	    public function ST_GEOMETRYTYPE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_GEOMETRYTYPE, 0);
	    }

	    public function ST_GEOMFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_GEOMFROMTEXT, 0);
	    }

	    public function ST_GEOMFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_GEOMFROMWKB, 0);
	    }

	    public function ST_INTERIORRINGN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_INTERIORRINGN, 0);
	    }

	    public function ST_INTERSECTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_INTERSECTION, 0);
	    }

	    public function ST_INTERSECTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_INTERSECTS, 0);
	    }

	    public function ST_ISCLOSED() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_ISCLOSED, 0);
	    }

	    public function ST_ISEMPTY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_ISEMPTY, 0);
	    }

	    public function ST_ISSIMPLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_ISSIMPLE, 0);
	    }

	    public function ST_LINEFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_LINEFROMTEXT, 0);
	    }

	    public function ST_LINEFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_LINEFROMWKB, 0);
	    }

	    public function ST_LINESTRINGFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_LINESTRINGFROMTEXT, 0);
	    }

	    public function ST_LINESTRINGFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_LINESTRINGFROMWKB, 0);
	    }

	    public function ST_NUMGEOMETRIES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_NUMGEOMETRIES, 0);
	    }

	    public function ST_NUMINTERIORRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_NUMINTERIORRING, 0);
	    }

	    public function ST_NUMINTERIORRINGS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_NUMINTERIORRINGS, 0);
	    }

	    public function ST_NUMPOINTS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_NUMPOINTS, 0);
	    }

	    public function ST_OVERLAPS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_OVERLAPS, 0);
	    }

	    public function ST_POINTFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_POINTFROMTEXT, 0);
	    }

	    public function ST_POINTFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_POINTFROMWKB, 0);
	    }

	    public function ST_POINTN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_POINTN, 0);
	    }

	    public function ST_POLYFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_POLYFROMTEXT, 0);
	    }

	    public function ST_POLYFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_POLYFROMWKB, 0);
	    }

	    public function ST_POLYGONFROMTEXT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_POLYGONFROMTEXT, 0);
	    }

	    public function ST_POLYGONFROMWKB() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_POLYGONFROMWKB, 0);
	    }

	    public function ST_SRID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_SRID, 0);
	    }

	    public function ST_STARTPOINT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_STARTPOINT, 0);
	    }

	    public function ST_SYMDIFFERENCE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_SYMDIFFERENCE, 0);
	    }

	    public function ST_TOUCHES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_TOUCHES, 0);
	    }

	    public function ST_UNION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_UNION, 0);
	    }

	    public function ST_WITHIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_WITHIN, 0);
	    }

	    public function ST_X() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_X, 0);
	    }

	    public function ST_Y() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::ST_Y, 0);
	    }

	    public function SUBDATE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBDATE, 0);
	    }

	    public function SUBSTRING_INDEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBSTRING_INDEX, 0);
	    }

	    public function SUBTIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SUBTIME, 0);
	    }

	    public function SYSTEM_USER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::SYSTEM_USER, 0);
	    }

	    public function TAN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TAN, 0);
	    }

	    public function TIME() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TIME, 0);
	    }

	    public function TIMEDIFF() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TIMEDIFF, 0);
	    }

	    public function TIMESTAMP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TIMESTAMP, 0);
	    }

	    public function TIMESTAMPADD() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TIMESTAMPADD, 0);
	    }

	    public function TIMESTAMPDIFF() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TIMESTAMPDIFF, 0);
	    }

	    public function TIME_FORMAT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TIME_FORMAT, 0);
	    }

	    public function TIME_TO_SEC() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TIME_TO_SEC, 0);
	    }

	    public function TOUCHES() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TOUCHES, 0);
	    }

	    public function TO_BASE64() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TO_BASE64, 0);
	    }

	    public function TO_DAYS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TO_DAYS, 0);
	    }

	    public function TO_SECONDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::TO_SECONDS, 0);
	    }

	    public function UCASE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UCASE, 0);
	    }

	    public function UNCOMPRESS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNCOMPRESS, 0);
	    }

	    public function UNCOMPRESSED_LENGTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNCOMPRESSED_LENGTH, 0);
	    }

	    public function UNHEX() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNHEX, 0);
	    }

	    public function UNIX_TIMESTAMP() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UNIX_TIMESTAMP, 0);
	    }

	    public function UPDATEXML() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UPDATEXML, 0);
	    }

	    public function UPPER() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UPPER, 0);
	    }

	    public function UUID() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UUID, 0);
	    }

	    public function UUID_SHORT() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::UUID_SHORT, 0);
	    }

	    public function VALIDATE_PASSWORD_STRENGTH() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VALIDATE_PASSWORD_STRENGTH, 0);
	    }

	    public function VERSION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VERSION, 0);
	    }

	    public function VISIBLE() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::VISIBLE, 0);
	    }

	    public function WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0);
	    }

	    public function WEEK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WEEK, 0);
	    }

	    public function WEEKDAY() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WEEKDAY, 0);
	    }

	    public function WEEKOFYEAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WEEKOFYEAR, 0);
	    }

	    public function WEIGHT_STRING() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WEIGHT_STRING, 0);
	    }

	    public function WITHIN() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::WITHIN, 0);
	    }

	    public function YEAR() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::YEAR, 0);
	    }

	    public function YEARWEEK() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::YEARWEEK, 0);
	    }

	    public function Y_FUNCTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::Y_FUNCTION, 0);
	    }

	    public function X_FUNCTION() : ?TerminalNode
	    {
	        return $this->getToken(MySqlParser::X_FUNCTION, 0);
	    }

		public function enterRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->enterFunctionNameBase($this);
		    }
		}

		public function exitRule(ParseTreeListener $listener) : void
		{
			if ($listener instanceof MySqlParserListener) {
			    $listener->exitFunctionNameBase($this);
		    }
		}
	} 
}